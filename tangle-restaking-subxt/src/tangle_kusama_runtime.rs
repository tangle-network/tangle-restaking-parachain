#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
	#[allow(unused_imports)]
	mod root_mod {
		pub use super::*;
	}
	pub static PALLETS: [&str; 58usize] = [
		"System",
		"Timestamp",
		"Indices",
		"ParachainSystem",
		"ParachainInfo",
		"Balances",
		"TransactionPayment",
		"Authorship",
		"Session",
		"Aura",
		"AuraExt",
		"ParachainStaking",
		"Democracy",
		"Council",
		"TechnicalCommittee",
		"PhragmenElection",
		"CouncilMembership",
		"TechnicalMembership",
		"ConvictionVoting",
		"Referenda",
		"Origins",
		"Whitelist",
		"XcmpQueue",
		"PolkadotXcm",
		"CumulusXcm",
		"DmpQueue",
		"Utility",
		"Scheduler",
		"Proxy",
		"Multisig",
		"Identity",
		"Treasury",
		"Bounties",
		"Tips",
		"Preimage",
		"XTokens",
		"Tokens",
		"Currencies",
		"UnknownTokens",
		"OrmlXcm",
		"ZenlinkProtocol",
		"MerkleDistributor",
		"ZenlinkStableAMM",
		"ZenlinkSwapRouter",
		"TokenIssuer",
		"AssetRegistry",
		"LstMinting",
		"Slp",
		"XcmInterface",
		"Slpx",
		"FellowshipCollective",
		"FellowshipReferenda",
		"StableAsset",
		"StablePool",
		"LstVoting",
		"Prices",
		"Oracle",
		"OracleMembership",
	];
	pub static RUNTIME_APIS: [&str; 10usize] = [
		"TaggedTransactionQueue",
		"Core",
		"BlockBuilder",
		"AccountNonceApi",
		"TransactionPaymentApi",
		"Metadata",
		"OffchainWorkerApi",
		"SessionKeys",
		"CollectCollationInfo",
		"AuraApi",
	];
	#[doc = r" The error type returned when there is a runtime issue."]
	pub type DispatchError = runtime_types::sp_runtime::DispatchError;
	#[doc = r" The outer event enum."]
	pub type Event = runtime_types::tangle_kusama_runtime::RuntimeEvent;
	#[doc = r" The outer extrinsic enum."]
	pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
	#[doc = r" The outer error enum representing the DispatchError's Module variant."]
	pub type Error = runtime_types::tangle_kusama_runtime::RuntimeError;
	pub fn constants() -> ConstantsApi {
		ConstantsApi
	}
	pub fn storage() -> StorageApi {
		StorageApi
	}
	pub fn tx() -> TransactionApi {
		TransactionApi
	}
	pub fn apis() -> runtime_apis::RuntimeApi {
		runtime_apis::RuntimeApi
	}
	pub mod runtime_apis {
		use super::root_mod;
		use super::runtime_types;
		use ::subxt::ext::codec::Encode;
		pub struct RuntimeApi;
		impl RuntimeApi {
			pub fn tagged_transaction_queue(
				&self,
			) -> tagged_transaction_queue::TaggedTransactionQueue {
				tagged_transaction_queue::TaggedTransactionQueue
			}
			pub fn core(&self) -> core::Core {
				core::Core
			}
			pub fn block_builder(&self) -> block_builder::BlockBuilder {
				block_builder::BlockBuilder
			}
			pub fn account_nonce_api(&self) -> account_nonce_api::AccountNonceApi {
				account_nonce_api::AccountNonceApi
			}
			pub fn transaction_payment_api(
				&self,
			) -> transaction_payment_api::TransactionPaymentApi {
				transaction_payment_api::TransactionPaymentApi
			}
			pub fn metadata(&self) -> metadata::Metadata {
				metadata::Metadata
			}
			pub fn offchain_worker_api(&self) -> offchain_worker_api::OffchainWorkerApi {
				offchain_worker_api::OffchainWorkerApi
			}
			pub fn session_keys(&self) -> session_keys::SessionKeys {
				session_keys::SessionKeys
			}
			pub fn collect_collation_info(&self) -> collect_collation_info::CollectCollationInfo {
				collect_collation_info::CollectCollationInfo
			}
			pub fn aura_api(&self) -> aura_api::AuraApi {
				aura_api::AuraApi
			}
		}
		pub mod tagged_transaction_queue {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."]
			pub struct TaggedTransactionQueue;
			impl TaggedTransactionQueue {
				#[doc = " Validate the transaction."]
				#[doc = ""]
				#[doc = " This method is invoked by the transaction pool to learn details about given transaction."]
				#[doc = " The implementation should make sure to verify the correctness of the transaction"]
				#[doc = " against current state. The given `block_hash` corresponds to the hash of the block"]
				#[doc = " that is used as current state."]
				#[doc = ""]
				#[doc = " Note that this call may be performed by the pool multiple times and transactions"]
				#[doc = " might be verified in any possible order."]
				pub fn validate_transaction(
					&self,
					source: types::validate_transaction::Source,
					tx: types::validate_transaction::Tx,
					block_hash: types::validate_transaction::BlockHash,
				) -> ::subxt::runtime_api::Payload<
					types::ValidateTransaction,
					types::validate_transaction::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"TaggedTransactionQueue",
						"validate_transaction",
						types::ValidateTransaction { source, tx, block_hash },
						[
							196u8, 50u8, 90u8, 49u8, 109u8, 251u8, 200u8, 35u8, 23u8, 150u8, 140u8,
							143u8, 232u8, 164u8, 133u8, 89u8, 32u8, 240u8, 115u8, 39u8, 95u8, 70u8,
							162u8, 76u8, 122u8, 73u8, 151u8, 144u8, 234u8, 120u8, 100u8, 29u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod validate_transaction {
					use super::runtime_types;
					pub type Source =
						runtime_types::sp_runtime::transaction_validity::TransactionSource;
					pub type Tx = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: tangle_kusama_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > ;
					pub type BlockHash = ::subxt::utils::H256;
					pub mod output {
						use super::runtime_types;
						pub type Output = :: core :: result :: Result < runtime_types :: sp_runtime :: transaction_validity :: ValidTransaction , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ValidateTransaction {
					pub source: validate_transaction::Source,
					pub tx: validate_transaction::Tx,
					pub block_hash: validate_transaction::BlockHash,
				}
			}
		}
		pub mod core {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " The `Core` runtime api that every Substrate runtime needs to implement."]
			pub struct Core;
			impl Core {
				#[doc = " Returns the version of the runtime."]
				pub fn version(
					&self,
				) -> ::subxt::runtime_api::Payload<types::Version, types::version::output::Output> {
					::subxt::runtime_api::Payload::new_static(
						"Core",
						"version",
						types::Version {},
						[
							76u8, 202u8, 17u8, 117u8, 189u8, 237u8, 239u8, 237u8, 151u8, 17u8,
							125u8, 159u8, 218u8, 92u8, 57u8, 238u8, 64u8, 147u8, 40u8, 72u8, 157u8,
							116u8, 37u8, 195u8, 156u8, 27u8, 123u8, 173u8, 178u8, 102u8, 136u8,
							6u8,
						],
					)
				}
				#[doc = " Execute the given block."]
				pub fn execute_block(
					&self,
					block: types::execute_block::Block,
				) -> ::subxt::runtime_api::Payload<
					types::ExecuteBlock,
					types::execute_block::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"Core",
						"execute_block",
						types::ExecuteBlock { block },
						[
							133u8, 135u8, 228u8, 65u8, 106u8, 27u8, 85u8, 158u8, 112u8, 254u8,
							93u8, 26u8, 102u8, 201u8, 118u8, 216u8, 249u8, 247u8, 91u8, 74u8, 56u8,
							208u8, 231u8, 115u8, 131u8, 29u8, 209u8, 6u8, 65u8, 57u8, 214u8, 125u8,
						],
					)
				}
				#[doc = " Initialize a block with the given header."]
				pub fn initialize_block(
					&self,
					header: types::initialize_block::Header,
				) -> ::subxt::runtime_api::Payload<
					types::InitializeBlock,
					types::initialize_block::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"Core",
						"initialize_block",
						types::InitializeBlock { header },
						[
							146u8, 138u8, 72u8, 240u8, 63u8, 96u8, 110u8, 189u8, 77u8, 92u8, 96u8,
							232u8, 41u8, 217u8, 105u8, 148u8, 83u8, 190u8, 152u8, 219u8, 19u8,
							87u8, 163u8, 1u8, 232u8, 25u8, 221u8, 74u8, 224u8, 67u8, 223u8, 34u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod version {
					use super::runtime_types;
					pub mod output {
						use super::runtime_types;
						pub type Output = runtime_types::sp_version::RuntimeVersion;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Version {}
				pub mod execute_block {
					use super::runtime_types;
					pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 > , :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: tangle_kusama_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > > ;
					pub mod output {
						use super::runtime_types;
						pub type Output = ();
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ExecuteBlock {
					pub block: execute_block::Block,
				}
				pub mod initialize_block {
					use super::runtime_types;
					pub type Header =
						runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
					pub mod output {
						use super::runtime_types;
						pub type Output = ();
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct InitializeBlock {
					pub header: initialize_block::Header,
				}
			}
		}
		pub mod block_builder {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " The `BlockBuilder` api trait that provides the required functionality for building a block."]
			pub struct BlockBuilder;
			impl BlockBuilder {
				#[doc = " Apply the given extrinsic."]
				#[doc = ""]
				#[doc = " Returns an inclusion outcome which specifies if this extrinsic is included in"]
				#[doc = " this block or not."]
				pub fn apply_extrinsic(
					&self,
					extrinsic: types::apply_extrinsic::Extrinsic,
				) -> ::subxt::runtime_api::Payload<
					types::ApplyExtrinsic,
					types::apply_extrinsic::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"BlockBuilder",
						"apply_extrinsic",
						types::ApplyExtrinsic { extrinsic },
						[
							72u8, 54u8, 139u8, 3u8, 118u8, 136u8, 65u8, 47u8, 6u8, 105u8, 125u8,
							223u8, 160u8, 29u8, 103u8, 74u8, 79u8, 149u8, 48u8, 90u8, 237u8, 2u8,
							97u8, 201u8, 123u8, 34u8, 167u8, 37u8, 187u8, 35u8, 176u8, 97u8,
						],
					)
				}
				#[doc = " Finish the current block."]
				pub fn finalize_block(
					&self,
				) -> ::subxt::runtime_api::Payload<
					types::FinalizeBlock,
					types::finalize_block::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"BlockBuilder",
						"finalize_block",
						types::FinalizeBlock {},
						[
							244u8, 207u8, 24u8, 33u8, 13u8, 69u8, 9u8, 249u8, 145u8, 143u8, 122u8,
							96u8, 197u8, 55u8, 64u8, 111u8, 238u8, 224u8, 34u8, 201u8, 27u8, 146u8,
							232u8, 99u8, 191u8, 30u8, 114u8, 16u8, 32u8, 220u8, 58u8, 62u8,
						],
					)
				}
				#[doc = " Generate inherent extrinsics. The inherent data will vary from chain to chain."]
				pub fn inherent_extrinsics(
					&self,
					inherent: types::inherent_extrinsics::Inherent,
				) -> ::subxt::runtime_api::Payload<
					types::InherentExtrinsics,
					types::inherent_extrinsics::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"BlockBuilder",
						"inherent_extrinsics",
						types::InherentExtrinsics { inherent },
						[
							254u8, 110u8, 245u8, 201u8, 250u8, 192u8, 27u8, 228u8, 151u8, 213u8,
							166u8, 89u8, 94u8, 81u8, 189u8, 234u8, 64u8, 18u8, 245u8, 80u8, 29u8,
							18u8, 140u8, 129u8, 113u8, 236u8, 135u8, 55u8, 79u8, 159u8, 175u8,
							183u8,
						],
					)
				}
				#[doc = " Check that the inherents are valid. The inherent data will vary from chain to chain."]
				pub fn check_inherents(
					&self,
					block: types::check_inherents::Block,
					data: types::check_inherents::Data,
				) -> ::subxt::runtime_api::Payload<
					types::CheckInherents,
					types::check_inherents::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"BlockBuilder",
						"check_inherents",
						types::CheckInherents { block, data },
						[
							153u8, 134u8, 1u8, 215u8, 139u8, 11u8, 53u8, 51u8, 210u8, 175u8, 197u8,
							28u8, 38u8, 209u8, 175u8, 247u8, 142u8, 157u8, 50u8, 151u8, 164u8,
							191u8, 181u8, 118u8, 80u8, 97u8, 160u8, 248u8, 110u8, 217u8, 181u8,
							234u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod apply_extrinsic {
					use super::runtime_types;
					pub type Extrinsic = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: tangle_kusama_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > ;
					pub mod output {
						use super::runtime_types;
						pub type Output = :: core :: result :: Result < :: core :: result :: Result < () , runtime_types :: sp_runtime :: DispatchError > , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ApplyExtrinsic {
					pub extrinsic: apply_extrinsic::Extrinsic,
				}
				pub mod finalize_block {
					use super::runtime_types;
					pub mod output {
						use super::runtime_types;
						pub type Output = runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
						>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct FinalizeBlock {}
				pub mod inherent_extrinsics {
					use super::runtime_types;
					pub type Inherent = runtime_types::sp_inherents::InherentData;
					pub mod output {
						use super::runtime_types;
						pub type Output = :: std :: vec :: Vec < :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: tangle_kusama_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > > ;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct InherentExtrinsics {
					pub inherent: inherent_extrinsics::Inherent,
				}
				pub mod check_inherents {
					use super::runtime_types;
					pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 > , :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: tangle_kusama_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > > ;
					pub type Data = runtime_types::sp_inherents::InherentData;
					pub mod output {
						use super::runtime_types;
						pub type Output = runtime_types::sp_inherents::CheckInherentsResult;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CheckInherents {
					pub block: check_inherents::Block,
					pub data: check_inherents::Data,
				}
			}
		}
		pub mod account_nonce_api {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " The API to query account nonce."]
			pub struct AccountNonceApi;
			impl AccountNonceApi {
				#[doc = " Get current account nonce of given `AccountId`."]
				pub fn account_nonce(
					&self,
					account: types::account_nonce::Account,
				) -> ::subxt::runtime_api::Payload<
					types::AccountNonce,
					types::account_nonce::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"AccountNonceApi",
						"account_nonce",
						types::AccountNonce { account },
						[
							231u8, 82u8, 7u8, 227u8, 131u8, 2u8, 215u8, 252u8, 173u8, 82u8, 11u8,
							103u8, 200u8, 25u8, 114u8, 116u8, 79u8, 229u8, 152u8, 150u8, 236u8,
							37u8, 101u8, 26u8, 220u8, 146u8, 182u8, 101u8, 73u8, 55u8, 191u8,
							171u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod account_nonce {
					use super::runtime_types;
					pub type Account = ::subxt::utils::AccountId32;
					pub mod output {
						use super::runtime_types;
						pub type Output = ::core::primitive::u32;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AccountNonce {
					pub account: account_nonce::Account,
				}
			}
		}
		pub mod transaction_payment_api {
			use super::root_mod;
			use super::runtime_types;
			pub struct TransactionPaymentApi;
			impl TransactionPaymentApi {
				pub fn query_info(
					&self,
					uxt: types::query_info::Uxt,
					len: types::query_info::Len,
				) -> ::subxt::runtime_api::Payload<
					types::QueryInfo,
					types::query_info::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"TransactionPaymentApi",
						"query_info",
						types::QueryInfo { uxt, len },
						[
							56u8, 30u8, 174u8, 34u8, 202u8, 24u8, 177u8, 189u8, 145u8, 36u8, 1u8,
							156u8, 98u8, 209u8, 178u8, 49u8, 198u8, 23u8, 150u8, 173u8, 35u8,
							205u8, 147u8, 129u8, 42u8, 22u8, 69u8, 3u8, 129u8, 8u8, 196u8, 139u8,
						],
					)
				}
				pub fn query_fee_details(
					&self,
					uxt: types::query_fee_details::Uxt,
					len: types::query_fee_details::Len,
				) -> ::subxt::runtime_api::Payload<
					types::QueryFeeDetails,
					types::query_fee_details::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"TransactionPaymentApi",
						"query_fee_details",
						types::QueryFeeDetails { uxt, len },
						[
							117u8, 60u8, 137u8, 159u8, 237u8, 252u8, 216u8, 238u8, 232u8, 1u8,
							100u8, 152u8, 26u8, 185u8, 145u8, 125u8, 68u8, 189u8, 4u8, 30u8, 125u8,
							7u8, 196u8, 153u8, 235u8, 51u8, 219u8, 108u8, 185u8, 254u8, 100u8,
							201u8,
						],
					)
				}
				pub fn query_weight_to_fee(
					&self,
					weight: types::query_weight_to_fee::Weight,
				) -> ::subxt::runtime_api::Payload<
					types::QueryWeightToFee,
					types::query_weight_to_fee::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"TransactionPaymentApi",
						"query_weight_to_fee",
						types::QueryWeightToFee { weight },
						[
							206u8, 243u8, 189u8, 83u8, 231u8, 244u8, 247u8, 52u8, 126u8, 208u8,
							224u8, 5u8, 163u8, 108u8, 254u8, 114u8, 214u8, 156u8, 227u8, 217u8,
							211u8, 198u8, 121u8, 164u8, 110u8, 54u8, 181u8, 146u8, 50u8, 146u8,
							146u8, 23u8,
						],
					)
				}
				pub fn query_length_to_fee(
					&self,
					length: types::query_length_to_fee::Length,
				) -> ::subxt::runtime_api::Payload<
					types::QueryLengthToFee,
					types::query_length_to_fee::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"TransactionPaymentApi",
						"query_length_to_fee",
						types::QueryLengthToFee { length },
						[
							92u8, 132u8, 29u8, 119u8, 66u8, 11u8, 196u8, 224u8, 129u8, 23u8, 249u8,
							12u8, 32u8, 28u8, 92u8, 50u8, 188u8, 101u8, 203u8, 229u8, 248u8, 216u8,
							130u8, 150u8, 212u8, 161u8, 81u8, 254u8, 116u8, 89u8, 162u8, 48u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod query_info {
					use super::runtime_types;
					pub type Uxt = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: tangle_kusama_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > ;
					pub type Len = ::core::primitive::u32;
					pub mod output {
						use super::runtime_types;
						pub type Output =
							runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
								::core::primitive::u128,
								runtime_types::sp_weights::weight_v2::Weight,
							>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct QueryInfo {
					pub uxt: query_info::Uxt,
					pub len: query_info::Len,
				}
				pub mod query_fee_details {
					use super::runtime_types;
					pub type Uxt = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: tangle_kusama_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > ;
					pub type Len = ::core::primitive::u32;
					pub mod output {
						use super::runtime_types;
						pub type Output =
							runtime_types::pallet_transaction_payment::types::FeeDetails<
								::core::primitive::u128,
							>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct QueryFeeDetails {
					pub uxt: query_fee_details::Uxt,
					pub len: query_fee_details::Len,
				}
				pub mod query_weight_to_fee {
					use super::runtime_types;
					pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
					pub mod output {
						use super::runtime_types;
						pub type Output = ::core::primitive::u128;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct QueryWeightToFee {
					pub weight: query_weight_to_fee::Weight,
				}
				pub mod query_length_to_fee {
					use super::runtime_types;
					pub type Length = ::core::primitive::u32;
					pub mod output {
						use super::runtime_types;
						pub type Output = ::core::primitive::u128;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct QueryLengthToFee {
					pub length: query_length_to_fee::Length,
				}
			}
		}
		pub mod metadata {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " The `Metadata` api trait that returns metadata for the runtime."]
			pub struct Metadata;
			impl Metadata {
				#[doc = " Returns the metadata of a runtime."]
				pub fn metadata(
					&self,
				) -> ::subxt::runtime_api::Payload<types::Metadata, types::metadata::output::Output>
				{
					::subxt::runtime_api::Payload::new_static(
						"Metadata",
						"metadata",
						types::Metadata {},
						[
							231u8, 24u8, 67u8, 152u8, 23u8, 26u8, 188u8, 82u8, 229u8, 6u8, 185u8,
							27u8, 175u8, 68u8, 83u8, 122u8, 69u8, 89u8, 185u8, 74u8, 248u8, 87u8,
							217u8, 124u8, 193u8, 252u8, 199u8, 186u8, 196u8, 179u8, 179u8, 96u8,
						],
					)
				}
				#[doc = " Returns the metadata at a given version."]
				#[doc = ""]
				#[doc = " If the given `version` isn't supported, this will return `None`."]
				#[doc = " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."]
				pub fn metadata_at_version(
					&self,
					version: types::metadata_at_version::Version,
				) -> ::subxt::runtime_api::Payload<
					types::MetadataAtVersion,
					types::metadata_at_version::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"Metadata",
						"metadata_at_version",
						types::MetadataAtVersion { version },
						[
							131u8, 53u8, 212u8, 234u8, 16u8, 25u8, 120u8, 252u8, 153u8, 153u8,
							216u8, 28u8, 54u8, 113u8, 52u8, 236u8, 146u8, 68u8, 142u8, 8u8, 10u8,
							169u8, 131u8, 142u8, 204u8, 38u8, 48u8, 108u8, 134u8, 86u8, 226u8,
							61u8,
						],
					)
				}
				#[doc = " Returns the supported metadata versions."]
				#[doc = ""]
				#[doc = " This can be used to call `metadata_at_version`."]
				pub fn metadata_versions(
					&self,
				) -> ::subxt::runtime_api::Payload<
					types::MetadataVersions,
					types::metadata_versions::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"Metadata",
						"metadata_versions",
						types::MetadataVersions {},
						[
							23u8, 144u8, 137u8, 91u8, 188u8, 39u8, 231u8, 208u8, 252u8, 218u8,
							224u8, 176u8, 77u8, 32u8, 130u8, 212u8, 223u8, 76u8, 100u8, 190u8,
							82u8, 94u8, 190u8, 8u8, 82u8, 244u8, 225u8, 179u8, 85u8, 176u8, 56u8,
							16u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod metadata {
					use super::runtime_types;
					pub mod output {
						use super::runtime_types;
						pub type Output = runtime_types::sp_core::OpaqueMetadata;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Metadata {}
				pub mod metadata_at_version {
					use super::runtime_types;
					pub type Version = ::core::primitive::u32;
					pub mod output {
						use super::runtime_types;
						pub type Output =
							::core::option::Option<runtime_types::sp_core::OpaqueMetadata>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MetadataAtVersion {
					pub version: metadata_at_version::Version,
				}
				pub mod metadata_versions {
					use super::runtime_types;
					pub mod output {
						use super::runtime_types;
						pub type Output = ::std::vec::Vec<::core::primitive::u32>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MetadataVersions {}
			}
		}
		pub mod offchain_worker_api {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " The offchain worker api."]
			pub struct OffchainWorkerApi;
			impl OffchainWorkerApi {
				#[doc = " Starts the off-chain task for given block header."]
				pub fn offchain_worker(
					&self,
					header: types::offchain_worker::Header,
				) -> ::subxt::runtime_api::Payload<
					types::OffchainWorker,
					types::offchain_worker::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"OffchainWorkerApi",
						"offchain_worker",
						types::OffchainWorker { header },
						[
							10u8, 135u8, 19u8, 153u8, 33u8, 216u8, 18u8, 242u8, 33u8, 140u8, 4u8,
							223u8, 200u8, 130u8, 103u8, 118u8, 137u8, 24u8, 19u8, 127u8, 161u8,
							29u8, 184u8, 111u8, 222u8, 111u8, 253u8, 73u8, 45u8, 31u8, 79u8, 60u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod offchain_worker {
					use super::runtime_types;
					pub type Header =
						runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
					pub mod output {
						use super::runtime_types;
						pub type Output = ();
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct OffchainWorker {
					pub header: offchain_worker::Header,
				}
			}
		}
		pub mod session_keys {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " Session keys runtime api."]
			pub struct SessionKeys;
			impl SessionKeys {
				#[doc = " Generate a set of session keys with optionally using the given seed."]
				#[doc = " The keys should be stored within the keystore exposed via runtime"]
				#[doc = " externalities."]
				#[doc = ""]
				#[doc = " The seed needs to be a valid `utf8` string."]
				#[doc = ""]
				#[doc = " Returns the concatenated SCALE encoded public keys."]
				pub fn generate_session_keys(
					&self,
					seed: types::generate_session_keys::Seed,
				) -> ::subxt::runtime_api::Payload<
					types::GenerateSessionKeys,
					types::generate_session_keys::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"SessionKeys",
						"generate_session_keys",
						types::GenerateSessionKeys { seed },
						[
							96u8, 171u8, 164u8, 166u8, 175u8, 102u8, 101u8, 47u8, 133u8, 95u8,
							102u8, 202u8, 83u8, 26u8, 238u8, 47u8, 126u8, 132u8, 22u8, 11u8, 33u8,
							190u8, 175u8, 94u8, 58u8, 245u8, 46u8, 80u8, 195u8, 184u8, 107u8, 65u8,
						],
					)
				}
				#[doc = " Decode the given public session keys."]
				#[doc = ""]
				#[doc = " Returns the list of public raw public keys + key type."]
				pub fn decode_session_keys(
					&self,
					encoded: types::decode_session_keys::Encoded,
				) -> ::subxt::runtime_api::Payload<
					types::DecodeSessionKeys,
					types::decode_session_keys::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"SessionKeys",
						"decode_session_keys",
						types::DecodeSessionKeys { encoded },
						[
							57u8, 242u8, 18u8, 51u8, 132u8, 110u8, 238u8, 255u8, 39u8, 194u8, 8u8,
							54u8, 198u8, 178u8, 75u8, 151u8, 148u8, 176u8, 144u8, 197u8, 87u8,
							29u8, 179u8, 235u8, 176u8, 78u8, 252u8, 103u8, 72u8, 203u8, 151u8,
							248u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod generate_session_keys {
					use super::runtime_types;
					pub type Seed = ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>;
					pub mod output {
						use super::runtime_types;
						pub type Output = ::std::vec::Vec<::core::primitive::u8>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct GenerateSessionKeys {
					pub seed: generate_session_keys::Seed,
				}
				pub mod decode_session_keys {
					use super::runtime_types;
					pub type Encoded = ::std::vec::Vec<::core::primitive::u8>;
					pub mod output {
						use super::runtime_types;
						pub type Output = ::core::option::Option<
							::std::vec::Vec<(
								::std::vec::Vec<::core::primitive::u8>,
								runtime_types::sp_core::crypto::KeyTypeId,
							)>,
						>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DecodeSessionKeys {
					pub encoded: decode_session_keys::Encoded,
				}
			}
		}
		pub mod collect_collation_info {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " Runtime api to collect information about a collation."]
			pub struct CollectCollationInfo;
			impl CollectCollationInfo {
				#[doc = " Collect information about a collation."]
				#[doc = ""]
				#[doc = " The given `header` is the header of the built block for that"]
				#[doc = " we are collecting the collation info for."]
				pub fn collect_collation_info(
					&self,
					header: types::collect_collation_info::Header,
				) -> ::subxt::runtime_api::Payload<
					types::CollectCollationInfo,
					types::collect_collation_info::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"CollectCollationInfo",
						"collect_collation_info",
						types::CollectCollationInfo { header },
						[
							56u8, 138u8, 105u8, 91u8, 216u8, 40u8, 255u8, 98u8, 86u8, 138u8, 185u8,
							155u8, 80u8, 141u8, 85u8, 48u8, 252u8, 235u8, 178u8, 231u8, 111u8,
							216u8, 71u8, 20u8, 33u8, 202u8, 24u8, 215u8, 214u8, 132u8, 51u8, 166u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod collect_collation_info {
					use super::runtime_types;
					pub type Header =
						runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
					pub mod output {
						use super::runtime_types;
						pub type Output = runtime_types::cumulus_primitives_core::CollationInfo;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CollectCollationInfo {
					pub header: collect_collation_info::Header,
				}
			}
		}
		pub mod aura_api {
			use super::root_mod;
			use super::runtime_types;
			#[doc = " API necessary for block authorship with aura."]
			pub struct AuraApi;
			impl AuraApi {
				#[doc = " Returns the slot duration for Aura."]
				#[doc = ""]
				#[doc = " Currently, only the value provided by this type at genesis will be used."]
				pub fn slot_duration(
					&self,
				) -> ::subxt::runtime_api::Payload<
					types::SlotDuration,
					types::slot_duration::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"AuraApi",
						"slot_duration",
						types::SlotDuration {},
						[
							233u8, 210u8, 132u8, 172u8, 100u8, 125u8, 239u8, 92u8, 114u8, 82u8,
							7u8, 110u8, 179u8, 196u8, 10u8, 19u8, 211u8, 15u8, 174u8, 2u8, 91u8,
							73u8, 133u8, 100u8, 205u8, 201u8, 191u8, 60u8, 163u8, 122u8, 215u8,
							10u8,
						],
					)
				}
				#[doc = " Return the current set of authorities."]
				pub fn authorities(
					&self,
				) -> ::subxt::runtime_api::Payload<
					types::Authorities,
					types::authorities::output::Output,
				> {
					::subxt::runtime_api::Payload::new_static(
						"AuraApi",
						"authorities",
						types::Authorities {},
						[
							96u8, 136u8, 226u8, 244u8, 105u8, 189u8, 8u8, 250u8, 71u8, 230u8, 37u8,
							123u8, 218u8, 47u8, 179u8, 16u8, 170u8, 181u8, 165u8, 77u8, 102u8,
							51u8, 43u8, 51u8, 186u8, 84u8, 49u8, 15u8, 208u8, 226u8, 129u8, 230u8,
						],
					)
				}
			}
			pub mod types {
				use super::runtime_types;
				pub mod slot_duration {
					use super::runtime_types;
					pub mod output {
						use super::runtime_types;
						pub type Output = runtime_types::sp_consensus_slots::SlotDuration;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SlotDuration {}
				pub mod authorities {
					use super::runtime_types;
					pub mod output {
						use super::runtime_types;
						pub type Output = ::std::vec::Vec<
							runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
						>;
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Authorities {}
			}
		}
	}
	pub fn custom() -> CustomValuesApi {
		CustomValuesApi
	}
	pub struct CustomValuesApi;
	impl CustomValuesApi {}
	pub struct ConstantsApi;
	impl ConstantsApi {
		pub fn system(&self) -> system::constants::ConstantsApi {
			system::constants::ConstantsApi
		}
		pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
			timestamp::constants::ConstantsApi
		}
		pub fn indices(&self) -> indices::constants::ConstantsApi {
			indices::constants::ConstantsApi
		}
		pub fn balances(&self) -> balances::constants::ConstantsApi {
			balances::constants::ConstantsApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
			transaction_payment::constants::ConstantsApi
		}
		pub fn parachain_staking(&self) -> parachain_staking::constants::ConstantsApi {
			parachain_staking::constants::ConstantsApi
		}
		pub fn democracy(&self) -> democracy::constants::ConstantsApi {
			democracy::constants::ConstantsApi
		}
		pub fn council(&self) -> council::constants::ConstantsApi {
			council::constants::ConstantsApi
		}
		pub fn technical_committee(&self) -> technical_committee::constants::ConstantsApi {
			technical_committee::constants::ConstantsApi
		}
		pub fn phragmen_election(&self) -> phragmen_election::constants::ConstantsApi {
			phragmen_election::constants::ConstantsApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::constants::ConstantsApi {
			conviction_voting::constants::ConstantsApi
		}
		pub fn referenda(&self) -> referenda::constants::ConstantsApi {
			referenda::constants::ConstantsApi
		}
		pub fn utility(&self) -> utility::constants::ConstantsApi {
			utility::constants::ConstantsApi
		}
		pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
			scheduler::constants::ConstantsApi
		}
		pub fn proxy(&self) -> proxy::constants::ConstantsApi {
			proxy::constants::ConstantsApi
		}
		pub fn multisig(&self) -> multisig::constants::ConstantsApi {
			multisig::constants::ConstantsApi
		}
		pub fn identity(&self) -> identity::constants::ConstantsApi {
			identity::constants::ConstantsApi
		}
		pub fn treasury(&self) -> treasury::constants::ConstantsApi {
			treasury::constants::ConstantsApi
		}
		pub fn bounties(&self) -> bounties::constants::ConstantsApi {
			bounties::constants::ConstantsApi
		}
		pub fn tips(&self) -> tips::constants::ConstantsApi {
			tips::constants::ConstantsApi
		}
		pub fn x_tokens(&self) -> x_tokens::constants::ConstantsApi {
			x_tokens::constants::ConstantsApi
		}
		pub fn tokens(&self) -> tokens::constants::ConstantsApi {
			tokens::constants::ConstantsApi
		}
		pub fn currencies(&self) -> currencies::constants::ConstantsApi {
			currencies::constants::ConstantsApi
		}
		pub fn zenlink_protocol(&self) -> zenlink_protocol::constants::ConstantsApi {
			zenlink_protocol::constants::ConstantsApi
		}
		pub fn merkle_distributor(&self) -> merkle_distributor::constants::ConstantsApi {
			merkle_distributor::constants::ConstantsApi
		}
		pub fn zenlink_stable_amm(&self) -> zenlink_stable_amm::constants::ConstantsApi {
			zenlink_stable_amm::constants::ConstantsApi
		}
		pub fn token_issuer(&self) -> token_issuer::constants::ConstantsApi {
			token_issuer::constants::ConstantsApi
		}
		pub fn Lst_minting(&self) -> Lst_minting::constants::ConstantsApi {
			Lst_minting::constants::ConstantsApi
		}
		pub fn slp(&self) -> slp::constants::ConstantsApi {
			slp::constants::ConstantsApi
		}
		pub fn xcm_interface(&self) -> xcm_interface::constants::ConstantsApi {
			xcm_interface::constants::ConstantsApi
		}
		pub fn slpx(&self) -> slpx::constants::ConstantsApi {
			slpx::constants::ConstantsApi
		}
		pub fn fellowship_referenda(&self) -> fellowship_referenda::constants::ConstantsApi {
			fellowship_referenda::constants::ConstantsApi
		}
		pub fn stable_asset(&self) -> stable_asset::constants::ConstantsApi {
			stable_asset::constants::ConstantsApi
		}
		pub fn Lst_voting(&self) -> Lst_voting::constants::ConstantsApi {
			Lst_voting::constants::ConstantsApi
		}
		pub fn prices(&self) -> prices::constants::ConstantsApi {
			prices::constants::ConstantsApi
		}
		pub fn oracle(&self) -> oracle::constants::ConstantsApi {
			oracle::constants::ConstantsApi
		}
	}
	pub struct StorageApi;
	impl StorageApi {
		pub fn system(&self) -> system::storage::StorageApi {
			system::storage::StorageApi
		}
		pub fn timestamp(&self) -> timestamp::storage::StorageApi {
			timestamp::storage::StorageApi
		}
		pub fn indices(&self) -> indices::storage::StorageApi {
			indices::storage::StorageApi
		}
		pub fn parachain_system(&self) -> parachain_system::storage::StorageApi {
			parachain_system::storage::StorageApi
		}
		pub fn parachain_info(&self) -> parachain_info::storage::StorageApi {
			parachain_info::storage::StorageApi
		}
		pub fn balances(&self) -> balances::storage::StorageApi {
			balances::storage::StorageApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
			transaction_payment::storage::StorageApi
		}
		pub fn authorship(&self) -> authorship::storage::StorageApi {
			authorship::storage::StorageApi
		}
		pub fn session(&self) -> session::storage::StorageApi {
			session::storage::StorageApi
		}
		pub fn aura(&self) -> aura::storage::StorageApi {
			aura::storage::StorageApi
		}
		pub fn aura_ext(&self) -> aura_ext::storage::StorageApi {
			aura_ext::storage::StorageApi
		}
		pub fn parachain_staking(&self) -> parachain_staking::storage::StorageApi {
			parachain_staking::storage::StorageApi
		}
		pub fn democracy(&self) -> democracy::storage::StorageApi {
			democracy::storage::StorageApi
		}
		pub fn council(&self) -> council::storage::StorageApi {
			council::storage::StorageApi
		}
		pub fn technical_committee(&self) -> technical_committee::storage::StorageApi {
			technical_committee::storage::StorageApi
		}
		pub fn phragmen_election(&self) -> phragmen_election::storage::StorageApi {
			phragmen_election::storage::StorageApi
		}
		pub fn council_membership(&self) -> council_membership::storage::StorageApi {
			council_membership::storage::StorageApi
		}
		pub fn technical_membership(&self) -> technical_membership::storage::StorageApi {
			technical_membership::storage::StorageApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::storage::StorageApi {
			conviction_voting::storage::StorageApi
		}
		pub fn referenda(&self) -> referenda::storage::StorageApi {
			referenda::storage::StorageApi
		}
		pub fn whitelist(&self) -> whitelist::storage::StorageApi {
			whitelist::storage::StorageApi
		}
		pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi {
			xcmp_queue::storage::StorageApi
		}
		pub fn polkadot_xcm(&self) -> polkadot_xcm::storage::StorageApi {
			polkadot_xcm::storage::StorageApi
		}
		pub fn dmp_queue(&self) -> dmp_queue::storage::StorageApi {
			dmp_queue::storage::StorageApi
		}
		pub fn scheduler(&self) -> scheduler::storage::StorageApi {
			scheduler::storage::StorageApi
		}
		pub fn proxy(&self) -> proxy::storage::StorageApi {
			proxy::storage::StorageApi
		}
		pub fn multisig(&self) -> multisig::storage::StorageApi {
			multisig::storage::StorageApi
		}
		pub fn identity(&self) -> identity::storage::StorageApi {
			identity::storage::StorageApi
		}
		pub fn treasury(&self) -> treasury::storage::StorageApi {
			treasury::storage::StorageApi
		}
		pub fn bounties(&self) -> bounties::storage::StorageApi {
			bounties::storage::StorageApi
		}
		pub fn tips(&self) -> tips::storage::StorageApi {
			tips::storage::StorageApi
		}
		pub fn preimage(&self) -> preimage::storage::StorageApi {
			preimage::storage::StorageApi
		}
		pub fn tokens(&self) -> tokens::storage::StorageApi {
			tokens::storage::StorageApi
		}
		pub fn unknown_tokens(&self) -> unknown_tokens::storage::StorageApi {
			unknown_tokens::storage::StorageApi
		}
		pub fn zenlink_protocol(&self) -> zenlink_protocol::storage::StorageApi {
			zenlink_protocol::storage::StorageApi
		}
		pub fn merkle_distributor(&self) -> merkle_distributor::storage::StorageApi {
			merkle_distributor::storage::StorageApi
		}
		pub fn zenlink_stable_amm(&self) -> zenlink_stable_amm::storage::StorageApi {
			zenlink_stable_amm::storage::StorageApi
		}
		pub fn token_issuer(&self) -> token_issuer::storage::StorageApi {
			token_issuer::storage::StorageApi
		}
		pub fn asset_registry(&self) -> asset_registry::storage::StorageApi {
			asset_registry::storage::StorageApi
		}
		pub fn Lst_minting(&self) -> Lst_minting::storage::StorageApi {
			Lst_minting::storage::StorageApi
		}
		pub fn slp(&self) -> slp::storage::StorageApi {
			slp::storage::StorageApi
		}
		pub fn xcm_interface(&self) -> xcm_interface::storage::StorageApi {
			xcm_interface::storage::StorageApi
		}
		pub fn slpx(&self) -> slpx::storage::StorageApi {
			slpx::storage::StorageApi
		}
		pub fn fellowship_collective(&self) -> fellowship_collective::storage::StorageApi {
			fellowship_collective::storage::StorageApi
		}
		pub fn fellowship_referenda(&self) -> fellowship_referenda::storage::StorageApi {
			fellowship_referenda::storage::StorageApi
		}
		pub fn stable_asset(&self) -> stable_asset::storage::StorageApi {
			stable_asset::storage::StorageApi
		}
		pub fn Lst_voting(&self) -> Lst_voting::storage::StorageApi {
			Lst_voting::storage::StorageApi
		}
		pub fn prices(&self) -> prices::storage::StorageApi {
			prices::storage::StorageApi
		}
		pub fn oracle(&self) -> oracle::storage::StorageApi {
			oracle::storage::StorageApi
		}
		pub fn oracle_membership(&self) -> oracle_membership::storage::StorageApi {
			oracle_membership::storage::StorageApi
		}
	}
	pub struct TransactionApi;
	impl TransactionApi {
		pub fn system(&self) -> system::calls::TransactionApi {
			system::calls::TransactionApi
		}
		pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
			timestamp::calls::TransactionApi
		}
		pub fn indices(&self) -> indices::calls::TransactionApi {
			indices::calls::TransactionApi
		}
		pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi {
			parachain_system::calls::TransactionApi
		}
		pub fn parachain_info(&self) -> parachain_info::calls::TransactionApi {
			parachain_info::calls::TransactionApi
		}
		pub fn balances(&self) -> balances::calls::TransactionApi {
			balances::calls::TransactionApi
		}
		pub fn session(&self) -> session::calls::TransactionApi {
			session::calls::TransactionApi
		}
		pub fn parachain_staking(&self) -> parachain_staking::calls::TransactionApi {
			parachain_staking::calls::TransactionApi
		}
		pub fn democracy(&self) -> democracy::calls::TransactionApi {
			democracy::calls::TransactionApi
		}
		pub fn council(&self) -> council::calls::TransactionApi {
			council::calls::TransactionApi
		}
		pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi {
			technical_committee::calls::TransactionApi
		}
		pub fn phragmen_election(&self) -> phragmen_election::calls::TransactionApi {
			phragmen_election::calls::TransactionApi
		}
		pub fn council_membership(&self) -> council_membership::calls::TransactionApi {
			council_membership::calls::TransactionApi
		}
		pub fn technical_membership(&self) -> technical_membership::calls::TransactionApi {
			technical_membership::calls::TransactionApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::calls::TransactionApi {
			conviction_voting::calls::TransactionApi
		}
		pub fn referenda(&self) -> referenda::calls::TransactionApi {
			referenda::calls::TransactionApi
		}
		pub fn whitelist(&self) -> whitelist::calls::TransactionApi {
			whitelist::calls::TransactionApi
		}
		pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi {
			xcmp_queue::calls::TransactionApi
		}
		pub fn polkadot_xcm(&self) -> polkadot_xcm::calls::TransactionApi {
			polkadot_xcm::calls::TransactionApi
		}
		pub fn cumulus_xcm(&self) -> cumulus_xcm::calls::TransactionApi {
			cumulus_xcm::calls::TransactionApi
		}
		pub fn dmp_queue(&self) -> dmp_queue::calls::TransactionApi {
			dmp_queue::calls::TransactionApi
		}
		pub fn utility(&self) -> utility::calls::TransactionApi {
			utility::calls::TransactionApi
		}
		pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
			scheduler::calls::TransactionApi
		}
		pub fn proxy(&self) -> proxy::calls::TransactionApi {
			proxy::calls::TransactionApi
		}
		pub fn multisig(&self) -> multisig::calls::TransactionApi {
			multisig::calls::TransactionApi
		}
		pub fn identity(&self) -> identity::calls::TransactionApi {
			identity::calls::TransactionApi
		}
		pub fn treasury(&self) -> treasury::calls::TransactionApi {
			treasury::calls::TransactionApi
		}
		pub fn bounties(&self) -> bounties::calls::TransactionApi {
			bounties::calls::TransactionApi
		}
		pub fn tips(&self) -> tips::calls::TransactionApi {
			tips::calls::TransactionApi
		}
		pub fn preimage(&self) -> preimage::calls::TransactionApi {
			preimage::calls::TransactionApi
		}
		pub fn x_tokens(&self) -> x_tokens::calls::TransactionApi {
			x_tokens::calls::TransactionApi
		}
		pub fn tokens(&self) -> tokens::calls::TransactionApi {
			tokens::calls::TransactionApi
		}
		pub fn currencies(&self) -> currencies::calls::TransactionApi {
			currencies::calls::TransactionApi
		}
		pub fn orml_xcm(&self) -> orml_xcm::calls::TransactionApi {
			orml_xcm::calls::TransactionApi
		}
		pub fn zenlink_protocol(&self) -> zenlink_protocol::calls::TransactionApi {
			zenlink_protocol::calls::TransactionApi
		}
		pub fn merkle_distributor(&self) -> merkle_distributor::calls::TransactionApi {
			merkle_distributor::calls::TransactionApi
		}
		pub fn zenlink_stable_amm(&self) -> zenlink_stable_amm::calls::TransactionApi {
			zenlink_stable_amm::calls::TransactionApi
		}
		pub fn zenlink_swap_router(&self) -> zenlink_swap_router::calls::TransactionApi {
			zenlink_swap_router::calls::TransactionApi
		}
		pub fn token_issuer(&self) -> token_issuer::calls::TransactionApi {
			token_issuer::calls::TransactionApi
		}
		pub fn asset_registry(&self) -> asset_registry::calls::TransactionApi {
			asset_registry::calls::TransactionApi
		}
		pub fn Lst_minting(&self) -> Lst_minting::calls::TransactionApi {
			Lst_minting::calls::TransactionApi
		}
		pub fn slp(&self) -> slp::calls::TransactionApi {
			slp::calls::TransactionApi
		}
		pub fn xcm_interface(&self) -> xcm_interface::calls::TransactionApi {
			xcm_interface::calls::TransactionApi
		}
		pub fn slpx(&self) -> slpx::calls::TransactionApi {
			slpx::calls::TransactionApi
		}
		pub fn fellowship_collective(&self) -> fellowship_collective::calls::TransactionApi {
			fellowship_collective::calls::TransactionApi
		}
		pub fn fellowship_referenda(&self) -> fellowship_referenda::calls::TransactionApi {
			fellowship_referenda::calls::TransactionApi
		}
		pub fn stable_pool(&self) -> stable_pool::calls::TransactionApi {
			stable_pool::calls::TransactionApi
		}
		pub fn Lst_voting(&self) -> Lst_voting::calls::TransactionApi {
			Lst_voting::calls::TransactionApi
		}
		pub fn prices(&self) -> prices::calls::TransactionApi {
			prices::calls::TransactionApi
		}
		pub fn oracle(&self) -> oracle::calls::TransactionApi {
			oracle::calls::TransactionApi
		}
		pub fn oracle_membership(&self) -> oracle_membership::calls::TransactionApi {
			oracle_membership::calls::TransactionApi
		}
	}
	#[doc = r" check whether the metadata provided is aligned with this statically generated code."]
	pub fn is_codegen_valid_for(metadata: &::subxt::Metadata) -> bool {
		let runtime_metadata_hash = metadata
			.hasher()
			.only_these_pallets(&PALLETS)
			.only_these_runtime_apis(&RUNTIME_APIS)
			.hash();
		runtime_metadata_hash
			== [
				151u8, 36u8, 252u8, 229u8, 116u8, 57u8, 40u8, 60u8, 15u8, 19u8, 33u8, 67u8, 243u8,
				227u8, 137u8, 156u8, 114u8, 123u8, 126u8, 211u8, 128u8, 240u8, 157u8, 116u8, 84u8,
				242u8, 138u8, 106u8, 64u8, 28u8, 207u8, 105u8,
			]
	}
	pub mod system {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "Error for the System pallet"]
		pub type Error = runtime_types::frame_system::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::frame_system::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remark`]."]
				pub struct Remark {
					pub remark: remark::Remark,
				}
				pub mod remark {
					use super::runtime_types;
					pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Remark {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "remark";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_heap_pages`]."]
				pub struct SetHeapPages {
					pub pages: set_heap_pages::Pages,
				}
				pub mod set_heap_pages {
					use super::runtime_types;
					pub type Pages = ::core::primitive::u64;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetHeapPages {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_heap_pages";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_code`]."]
				pub struct SetCode {
					pub code: set_code::Code,
				}
				pub mod set_code {
					use super::runtime_types;
					pub type Code = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetCode {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_code";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_code_without_checks`]."]
				pub struct SetCodeWithoutChecks {
					pub code: set_code_without_checks::Code,
				}
				pub mod set_code_without_checks {
					use super::runtime_types;
					pub type Code = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetCodeWithoutChecks {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_code_without_checks";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_storage`]."]
				pub struct SetStorage {
					pub items: set_storage::Items,
				}
				pub mod set_storage {
					use super::runtime_types;
					pub type Items = ::std::vec::Vec<(
						::std::vec::Vec<::core::primitive::u8>,
						::std::vec::Vec<::core::primitive::u8>,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetStorage {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_storage";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::kill_storage`]."]
				pub struct KilLstorage {
					pub keys: kill_storage::Keys,
				}
				pub mod kill_storage {
					use super::runtime_types;
					pub type Keys = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
				}
				impl ::subxt::blocks::StaticExtrinsic for KilLstorage {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "kill_storage";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::kill_prefix`]."]
				pub struct KillPrefix {
					pub prefix: kill_prefix::Prefix,
					pub subkeys: kill_prefix::Subkeys,
				}
				pub mod kill_prefix {
					use super::runtime_types;
					pub type Prefix = ::std::vec::Vec<::core::primitive::u8>;
					pub type Subkeys = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for KillPrefix {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "kill_prefix";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remark_with_event`]."]
				pub struct RemarkWithEvent {
					pub remark: remark_with_event::Remark,
				}
				pub mod remark_with_event {
					use super::runtime_types;
					pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemarkWithEvent {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "remark_with_event";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::remark`]."]
				pub fn remark(
					&self,
					remark: types::remark::Remark,
				) -> ::subxt::tx::Payload<types::Remark> {
					::subxt::tx::Payload::new_static(
						"System",
						"remark",
						types::Remark { remark },
						[
							43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
							216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
							250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
							13u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_heap_pages`]."]
				pub fn set_heap_pages(
					&self,
					pages: types::set_heap_pages::Pages,
				) -> ::subxt::tx::Payload<types::SetHeapPages> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_heap_pages",
						types::SetHeapPages { pages },
						[
							188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
							215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
							134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
							57u8, 147u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_code`]."]
				pub fn set_code(
					&self,
					code: types::set_code::Code,
				) -> ::subxt::tx::Payload<types::SetCode> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_code",
						types::SetCode { code },
						[
							233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
							203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
							27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_code_without_checks`]."]
				pub fn set_code_without_checks(
					&self,
					code: types::set_code_without_checks::Code,
				) -> ::subxt::tx::Payload<types::SetCodeWithoutChecks> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_code_without_checks",
						types::SetCodeWithoutChecks { code },
						[
							82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
							157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
							147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
							115u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_storage`]."]
				pub fn set_storage(
					&self,
					items: types::set_storage::Items,
				) -> ::subxt::tx::Payload<types::SetStorage> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_storage",
						types::SetStorage { items },
						[
							141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
							163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
							150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
							234u8, 43u8,
						],
					)
				}
				#[doc = "See [`Pallet::kill_storage`]."]
				pub fn kill_storage(
					&self,
					keys: types::kill_storage::Keys,
				) -> ::subxt::tx::Payload<types::KilLstorage> {
					::subxt::tx::Payload::new_static(
						"System",
						"kill_storage",
						types::KilLstorage { keys },
						[
							73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
							234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
							156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
							35u8,
						],
					)
				}
				#[doc = "See [`Pallet::kill_prefix`]."]
				pub fn kill_prefix(
					&self,
					prefix: types::kill_prefix::Prefix,
					subkeys: types::kill_prefix::Subkeys,
				) -> ::subxt::tx::Payload<types::KillPrefix> {
					::subxt::tx::Payload::new_static(
						"System",
						"kill_prefix",
						types::KillPrefix { prefix, subkeys },
						[
							184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
							175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
							67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
							85u8,
						],
					)
				}
				#[doc = "See [`Pallet::remark_with_event`]."]
				pub fn remark_with_event(
					&self,
					remark: types::remark_with_event::Remark,
				) -> ::subxt::tx::Payload<types::RemarkWithEvent> {
					::subxt::tx::Payload::new_static(
						"System",
						"remark_with_event",
						types::RemarkWithEvent { remark },
						[
							120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
							228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
							147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
						],
					)
				}
			}
		}
		#[doc = "Event for the System pallet."]
		pub type Event = runtime_types::frame_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An extrinsic completed successfully."]
			pub struct ExtrinsicSuccess {
				pub dispatch_info: extrinsic_success::DispatchInfo,
			}
			pub mod extrinsic_success {
				use super::runtime_types;
				pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
			}
			impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicSuccess";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An extrinsic failed."]
			pub struct ExtrinsicFailed {
				pub dispatch_error: extrinsic_failed::DispatchError,
				pub dispatch_info: extrinsic_failed::DispatchInfo,
			}
			pub mod extrinsic_failed {
				use super::runtime_types;
				pub type DispatchError = runtime_types::sp_runtime::DispatchError;
				pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
			}
			impl ::subxt::events::StaticEvent for ExtrinsicFailed {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "`:code` was updated."]
			pub struct CodeUpdated;
			impl ::subxt::events::StaticEvent for CodeUpdated {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "CodeUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A new account was created."]
			pub struct NewAccount {
				pub account: new_account::Account,
			}
			pub mod new_account {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for NewAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "NewAccount";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account was reaped."]
			pub struct KilledAccount {
				pub account: killed_account::Account,
			}
			pub mod killed_account {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for KilledAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "KilledAccount";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "On on-chain remark happened."]
			pub struct Remarked {
				pub sender: remarked::Sender,
				pub hash: remarked::Hash,
			}
			pub mod remarked {
				use super::runtime_types;
				pub type Sender = ::subxt::utils::AccountId32;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Remarked {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "Remarked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod account {
					use super::runtime_types;
					pub type Account = runtime_types::frame_system::AccountInfo<
						::core::primitive::u32,
						runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod extrinsic_count {
					use super::runtime_types;
					pub type ExtrinsicCount = ::core::primitive::u32;
				}
				pub mod block_weight {
					use super::runtime_types;
					pub type BlockWeight = runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::sp_weights::weight_v2::Weight,
					>;
				}
				pub mod all_extrinsics_len {
					use super::runtime_types;
					pub type AllExtrinsicsLen = ::core::primitive::u32;
				}
				pub mod block_hash {
					use super::runtime_types;
					pub type BlockHash = ::subxt::utils::H256;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod extrinsic_data {
					use super::runtime_types;
					pub type ExtrinsicData = ::std::vec::Vec<::core::primitive::u8>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod number {
					use super::runtime_types;
					pub type Number = ::core::primitive::u32;
				}
				pub mod parent_hash {
					use super::runtime_types;
					pub type ParentHash = ::subxt::utils::H256;
				}
				pub mod digest {
					use super::runtime_types;
					pub type Digest = runtime_types::sp_runtime::generic::digest::Digest;
				}
				pub mod events {
					use super::runtime_types;
					pub type Events = ::std::vec::Vec<
						runtime_types::frame_system::EventRecord<
							runtime_types::tangle_kusama_runtime::RuntimeEvent,
							::subxt::utils::H256,
						>,
					>;
				}
				pub mod event_count {
					use super::runtime_types;
					pub type EventCount = ::core::primitive::u32;
				}
				pub mod event_topics {
					use super::runtime_types;
					pub type EventTopics =
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod last_runtime_upgrade {
					use super::runtime_types;
					pub type LastRuntimeUpgrade =
						runtime_types::frame_system::LastRuntimeUpgradeInfo;
				}
				pub mod upgraded_to_u32_ref_count {
					use super::runtime_types;
					pub type UpgradedToU32RefCount = ::core::primitive::bool;
				}
				pub mod upgraded_to_triple_ref_count {
					use super::runtime_types;
					pub type UpgradedToTripleRefCount = ::core::primitive::bool;
				}
				pub mod execution_phase {
					use super::runtime_types;
					pub type ExecutionPhase = runtime_types::frame_system::Phase;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The full account information for a particular account ID."]
				pub fn account_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::account::Account,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Account",
						vec![],
						[
							14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
							175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
							124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
						],
					)
				}
				#[doc = " The full account information for a particular account ID."]
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<types::account::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::account::Account,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Account",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
							175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
							124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
						],
					)
				}
				#[doc = " Total extrinsics count for the current block."]
				pub fn extrinsic_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::extrinsic_count::ExtrinsicCount,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExtrinsicCount",
						vec![],
						[
							102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
							153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
							120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
							159u8, 79u8,
						],
					)
				}
				#[doc = " The current weight for the block."]
				pub fn block_weight(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::block_weight::BlockWeight,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"BlockWeight",
						vec![],
						[
							158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
							62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
							229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
						],
					)
				}
				#[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
				pub fn all_extrinsics_len(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::all_extrinsics_len::AllExtrinsicsLen,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"AllExtrinsicsLen",
						vec![],
						[
							117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
							243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
							101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
							242u8, 65u8,
						],
					)
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::block_hash::BlockHash,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"BlockHash",
						vec![],
						[
							217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
							103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
							164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
							202u8, 118u8,
						],
					)
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash(
					&self,
					_0: impl ::std::borrow::Borrow<types::block_hash::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::block_hash::BlockHash,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"BlockHash",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
							103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
							164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
							202u8, 118u8,
						],
					)
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::extrinsic_data::ExtrinsicData,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExtrinsicData",
						vec![],
						[
							160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
							220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
							128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
						],
					)
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data(
					&self,
					_0: impl ::std::borrow::Borrow<types::extrinsic_data::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::extrinsic_data::ExtrinsicData,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExtrinsicData",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
							220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
							128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
						],
					)
				}
				#[doc = " The current block number being processed. Set by `execute_block`."]
				pub fn number(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::number::Number,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Number",
						vec![],
						[
							30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
							9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
							200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
						],
					)
				}
				#[doc = " Hash of the previous block."]
				pub fn parent_hash(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::parent_hash::ParentHash,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ParentHash",
						vec![],
						[
							26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
							192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
							71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
						],
					)
				}
				#[doc = " Digest of the current block, also part of the block header."]
				pub fn digest(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::digest::Digest,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Digest",
						vec![],
						[
							61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
							91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
							58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
						],
					)
				}
				#[doc = " Events deposited for the current block."]
				#[doc = ""]
				#[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
				#[doc = " It could otherwise inflate the PoV size of a block."]
				#[doc = ""]
				#[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
				#[doc = " just in case someone still reads them from within the runtime."]
				pub fn events(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::events::Events,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Events",
						vec![],
						[
							28u8, 175u8, 154u8, 94u8, 63u8, 160u8, 79u8, 107u8, 127u8, 37u8, 165u8,
							103u8, 9u8, 52u8, 232u8, 26u8, 123u8, 115u8, 180u8, 250u8, 242u8,
							161u8, 213u8, 221u8, 250u8, 90u8, 208u8, 150u8, 11u8, 46u8, 239u8,
							80u8,
						],
					)
				}
				#[doc = " The number of events in the `Events<T>` list."]
				pub fn event_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::event_count::EventCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"EventCount",
						vec![],
						[
							175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
							151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
							254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
							133u8,
						],
					)
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::event_topics::EventTopics,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"EventTopics",
						vec![],
						[
							40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
							133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
							120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
						],
					)
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics(
					&self,
					_0: impl ::std::borrow::Borrow<types::event_topics::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::event_topics::EventTopics,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"EventTopics",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
							133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
							120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
						],
					)
				}
				#[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
				pub fn last_runtime_upgrade(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::last_runtime_upgrade::LastRuntimeUpgrade,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"LastRuntimeUpgrade",
						vec![],
						[
							137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
							148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
							194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
						],
					)
				}
				#[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
				pub fn upgraded_to_u32_ref_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::upgraded_to_u32_ref_count::UpgradedToU32RefCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"UpgradedToU32RefCount",
						vec![],
						[
							229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
							130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
							107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
						],
					)
				}
				#[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
				#[doc = " (default) if not."]
				pub fn upgraded_to_triple_ref_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::upgraded_to_triple_ref_count::UpgradedToTripleRefCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"UpgradedToTripleRefCount",
						vec![],
						[
							97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
							101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
							167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
							151u8,
						],
					)
				}
				#[doc = " The execution phase of the block."]
				pub fn execution_phase(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::execution_phase::ExecutionPhase,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExecutionPhase",
						vec![],
						[
							191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
							0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
							35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Block & extrinsics weights: base values and limits."]
				pub fn block_weights(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
				{
					::subxt::constants::Address::new_static(
						"System",
						"BlockWeights",
						[
							176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
							190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
							163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
						],
					)
				}
				#[doc = " The maximum length of a block (in bytes)."]
				pub fn block_length(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength> {
					::subxt::constants::Address::new_static(
						"System",
						"BlockLength",
						[
							23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
							229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
							96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
						],
					)
				}
				#[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
				pub fn block_hash_count(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"System",
						"BlockHashCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The weight of runtime database operations the runtime can invoke."]
				pub fn db_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight> {
					::subxt::constants::Address::new_static(
						"System",
						"DbWeight",
						[
							42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
							200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
							183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
							177u8,
						],
					)
				}
				#[doc = " Get the chain's current version."]
				pub fn version(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion> {
					::subxt::constants::Address::new_static(
						"System",
						"Version",
						[
							219u8, 45u8, 162u8, 245u8, 177u8, 246u8, 48u8, 126u8, 191u8, 157u8,
							228u8, 83u8, 111u8, 133u8, 183u8, 13u8, 148u8, 108u8, 92u8, 102u8,
							72u8, 205u8, 74u8, 242u8, 233u8, 79u8, 20u8, 170u8, 72u8, 202u8, 158u8,
							165u8,
						],
					)
				}
				#[doc = " The designated SS58 prefix of this chain."]
				#[doc = ""]
				#[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
				#[doc = " that the runtime should know about the prefix in order to make use of it as"]
				#[doc = " an identifier of the chain."]
				pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
					::subxt::constants::Address::new_static(
						"System",
						"SS58Prefix",
						[
							116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
							41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
							90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
						],
					)
				}
			}
		}
	}
	pub mod timestamp {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_timestamp::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set`]."]
				pub struct Set {
					#[codec(compact)]
					pub now: set::Now,
				}
				pub mod set {
					use super::runtime_types;
					pub type Now = ::core::primitive::u64;
				}
				impl ::subxt::blocks::StaticExtrinsic for Set {
					const PALLET: &'static str = "Timestamp";
					const CALL: &'static str = "set";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set`]."]
				pub fn set(&self, now: types::set::Now) -> ::subxt::tx::Payload<types::Set> {
					::subxt::tx::Payload::new_static(
						"Timestamp",
						"set",
						types::Set { now },
						[
							37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
							199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
							200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod now {
					use super::runtime_types;
					pub type Now = ::core::primitive::u64;
				}
				pub mod did_update {
					use super::runtime_types;
					pub type DidUpdate = ::core::primitive::bool;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current time for the current block."]
				pub fn now(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::now::Now,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Timestamp",
						"Now",
						vec![],
						[
							44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
							92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
							141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
						],
					)
				}
				#[doc = " Whether the timestamp has been updated in this block."]
				#[doc = ""]
				#[doc = " This value is updated to `true` upon successful submission of a timestamp by a node."]
				#[doc = " It is then checked at the end of each block execution in the `on_finalize` hook."]
				pub fn did_update(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::did_update::DidUpdate,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Timestamp",
						"DidUpdate",
						vec![],
						[
							229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
							205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
							248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
							214u8, 140u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum period between blocks."]
				#[doc = ""]
				#[doc = " Be aware that this is different to the *expected* period that the block production"]
				#[doc = " apparatus provides. Your chosen consensus system will generally work with this to"]
				#[doc = " determine a sensible block time. For example, in the Aura pallet it will be double this"]
				#[doc = " period on default settings."]
				pub fn minimum_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u64> {
					::subxt::constants::Address::new_static(
						"Timestamp",
						"MinimumPeriod",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod indices {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_indices::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_indices::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::claim`]."]
				pub struct Claim {
					pub index: claim::Index,
				}
				pub mod claim {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Claim {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "claim";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer`]."]
				pub struct Transfer {
					pub new: transfer::New,
					pub index: transfer::Index,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type New = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::free`]."]
				pub struct Free {
					pub index: free::Index,
				}
				pub mod free {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Free {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "free";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_transfer`]."]
				pub struct ForceTransfer {
					pub new: force_transfer::New,
					pub index: force_transfer::Index,
					pub freeze: force_transfer::Freeze,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type New = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Index = ::core::primitive::u32;
					pub type Freeze = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::freeze`]."]
				pub struct Freeze {
					pub index: freeze::Index,
				}
				pub mod freeze {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Freeze {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "freeze";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::claim`]."]
				pub fn claim(
					&self,
					index: types::claim::Index,
				) -> ::subxt::tx::Payload<types::Claim> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"claim",
						types::Claim { index },
						[
							146u8, 58u8, 246u8, 135u8, 59u8, 90u8, 3u8, 5u8, 140u8, 169u8, 232u8,
							195u8, 11u8, 107u8, 36u8, 141u8, 118u8, 174u8, 160u8, 160u8, 19u8,
							205u8, 177u8, 193u8, 18u8, 102u8, 115u8, 31u8, 72u8, 29u8, 91u8, 235u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer`]."]
				pub fn transfer(
					&self,
					new: types::transfer::New,
					index: types::transfer::Index,
				) -> ::subxt::tx::Payload<types::Transfer> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"transfer",
						types::Transfer { new, index },
						[
							253u8, 209u8, 123u8, 236u8, 91u8, 71u8, 183u8, 49u8, 84u8, 13u8, 130u8,
							208u8, 181u8, 218u8, 219u8, 178u8, 71u8, 76u8, 228u8, 249u8, 197u8,
							243u8, 136u8, 122u8, 150u8, 179u8, 249u8, 187u8, 150u8, 158u8, 201u8,
							134u8,
						],
					)
				}
				#[doc = "See [`Pallet::free`]."]
				pub fn free(&self, index: types::free::Index) -> ::subxt::tx::Payload<types::Free> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"free",
						types::Free { index },
						[
							241u8, 211u8, 234u8, 102u8, 189u8, 22u8, 209u8, 27u8, 8u8, 229u8, 80u8,
							227u8, 138u8, 252u8, 222u8, 111u8, 77u8, 201u8, 235u8, 51u8, 163u8,
							247u8, 13u8, 126u8, 216u8, 136u8, 57u8, 222u8, 56u8, 66u8, 215u8,
							244u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_transfer`]."]
				pub fn force_transfer(
					&self,
					new: types::force_transfer::New,
					index: types::force_transfer::Index,
					freeze: types::force_transfer::Freeze,
				) -> ::subxt::tx::Payload<types::ForceTransfer> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"force_transfer",
						types::ForceTransfer { new, index, freeze },
						[
							61u8, 7u8, 111u8, 227u8, 228u8, 62u8, 178u8, 225u8, 195u8, 185u8,
							243u8, 161u8, 156u8, 53u8, 165u8, 178u8, 238u8, 146u8, 66u8, 165u8,
							7u8, 137u8, 36u8, 7u8, 118u8, 84u8, 203u8, 3u8, 143u8, 95u8, 99u8,
							192u8,
						],
					)
				}
				#[doc = "See [`Pallet::freeze`]."]
				pub fn freeze(
					&self,
					index: types::freeze::Index,
				) -> ::subxt::tx::Payload<types::Freeze> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"freeze",
						types::Freeze { index },
						[
							238u8, 215u8, 108u8, 156u8, 84u8, 240u8, 130u8, 229u8, 27u8, 132u8,
							93u8, 78u8, 2u8, 251u8, 43u8, 203u8, 2u8, 142u8, 147u8, 48u8, 92u8,
							101u8, 207u8, 24u8, 51u8, 16u8, 36u8, 229u8, 188u8, 129u8, 160u8,
							117u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_indices::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A account index was assigned."]
			pub struct IndexAssigned {
				pub who: index_assigned::Who,
				pub index: index_assigned::Index,
			}
			pub mod index_assigned {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for IndexAssigned {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexAssigned";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A account index has been freed up (unassigned)."]
			pub struct IndexFreed {
				pub index: index_freed::Index,
			}
			pub mod index_freed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for IndexFreed {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFreed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A account index has been frozen to its current account ID."]
			pub struct IndexFrozen {
				pub index: index_frozen::Index,
				pub who: index_frozen::Who,
			}
			pub mod index_frozen {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for IndexFrozen {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFrozen";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod accounts {
					use super::runtime_types;
					pub type Accounts = (
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::bool,
					);
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The lookup from index to account."]
				pub fn accounts_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::accounts::Accounts,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Indices",
						"Accounts",
						vec![],
						[
							48u8, 189u8, 43u8, 119u8, 32u8, 168u8, 28u8, 12u8, 245u8, 81u8, 119u8,
							182u8, 23u8, 201u8, 33u8, 147u8, 128u8, 171u8, 155u8, 134u8, 71u8,
							87u8, 100u8, 248u8, 107u8, 129u8, 36u8, 197u8, 220u8, 90u8, 11u8,
							238u8,
						],
					)
				}
				#[doc = " The lookup from index to account."]
				pub fn accounts(
					&self,
					_0: impl ::std::borrow::Borrow<types::accounts::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::accounts::Accounts,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Indices",
						"Accounts",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							48u8, 189u8, 43u8, 119u8, 32u8, 168u8, 28u8, 12u8, 245u8, 81u8, 119u8,
							182u8, 23u8, 201u8, 33u8, 147u8, 128u8, 171u8, 155u8, 134u8, 71u8,
							87u8, 100u8, 248u8, 107u8, 129u8, 36u8, 197u8, 220u8, 90u8, 11u8,
							238u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The deposit needed for reserving an index."]
				pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Indices",
						"Deposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod parachain_system {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::cumulus_pallet_parachain_system::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::cumulus_pallet_parachain_system::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_validation_data`]."]
				pub struct SetValidationData {
					pub data: set_validation_data::Data,
				}
				pub mod set_validation_data {
					use super::runtime_types;
					pub type Data =
						runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetValidationData {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "set_validation_data";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::sudo_send_upward_message`]."]
				pub struct SudoSendUpwardMessage {
					pub message: sudo_send_upward_message::Message,
				}
				pub mod sudo_send_upward_message {
					use super::runtime_types;
					pub type Message = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SudoSendUpwardMessage {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "sudo_send_upward_message";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::authorize_upgrade`]."]
				pub struct AuthorizeUpgrade {
					pub code_hash: authorize_upgrade::CodeHash,
					pub check_version: authorize_upgrade::CheckVersion,
				}
				pub mod authorize_upgrade {
					use super::runtime_types;
					pub type CodeHash = ::subxt::utils::H256;
					pub type CheckVersion = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for AuthorizeUpgrade {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "authorize_upgrade";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::enact_authorized_upgrade`]."]
				pub struct EnactAuthorizedUpgrade {
					pub code: enact_authorized_upgrade::Code,
				}
				pub mod enact_authorized_upgrade {
					use super::runtime_types;
					pub type Code = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for EnactAuthorizedUpgrade {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "enact_authorized_upgrade";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set_validation_data`]."]
				pub fn set_validation_data(
					&self,
					data: types::set_validation_data::Data,
				) -> ::subxt::tx::Payload<types::SetValidationData> {
					::subxt::tx::Payload::new_static(
						"ParachainSystem",
						"set_validation_data",
						types::SetValidationData { data },
						[
							167u8, 126u8, 75u8, 137u8, 220u8, 60u8, 106u8, 214u8, 92u8, 170u8,
							136u8, 176u8, 98u8, 0u8, 234u8, 217u8, 146u8, 113u8, 149u8, 88u8,
							114u8, 141u8, 228u8, 105u8, 136u8, 71u8, 233u8, 18u8, 70u8, 36u8, 24u8,
							249u8,
						],
					)
				}
				#[doc = "See [`Pallet::sudo_send_upward_message`]."]
				pub fn sudo_send_upward_message(
					&self,
					message: types::sudo_send_upward_message::Message,
				) -> ::subxt::tx::Payload<types::SudoSendUpwardMessage> {
					::subxt::tx::Payload::new_static(
						"ParachainSystem",
						"sudo_send_upward_message",
						types::SudoSendUpwardMessage { message },
						[
							1u8, 231u8, 11u8, 78u8, 127u8, 117u8, 248u8, 67u8, 230u8, 199u8, 126u8,
							47u8, 20u8, 62u8, 252u8, 138u8, 199u8, 48u8, 41u8, 21u8, 28u8, 157u8,
							218u8, 143u8, 4u8, 253u8, 62u8, 192u8, 94u8, 252u8, 92u8, 180u8,
						],
					)
				}
				#[doc = "See [`Pallet::authorize_upgrade`]."]
				pub fn authorize_upgrade(
					&self,
					code_hash: types::authorize_upgrade::CodeHash,
					check_version: types::authorize_upgrade::CheckVersion,
				) -> ::subxt::tx::Payload<types::AuthorizeUpgrade> {
					::subxt::tx::Payload::new_static(
						"ParachainSystem",
						"authorize_upgrade",
						types::AuthorizeUpgrade { code_hash, check_version },
						[
							213u8, 114u8, 107u8, 169u8, 223u8, 147u8, 205u8, 204u8, 3u8, 81u8,
							228u8, 0u8, 82u8, 57u8, 43u8, 95u8, 12u8, 59u8, 241u8, 176u8, 143u8,
							131u8, 253u8, 166u8, 98u8, 187u8, 94u8, 235u8, 177u8, 110u8, 162u8,
							218u8,
						],
					)
				}
				#[doc = "See [`Pallet::enact_authorized_upgrade`]."]
				pub fn enact_authorized_upgrade(
					&self,
					code: types::enact_authorized_upgrade::Code,
				) -> ::subxt::tx::Payload<types::EnactAuthorizedUpgrade> {
					::subxt::tx::Payload::new_static(
						"ParachainSystem",
						"enact_authorized_upgrade",
						types::EnactAuthorizedUpgrade { code },
						[
							232u8, 135u8, 114u8, 87u8, 196u8, 146u8, 244u8, 19u8, 106u8, 73u8,
							88u8, 193u8, 48u8, 14u8, 72u8, 133u8, 247u8, 147u8, 50u8, 95u8, 252u8,
							213u8, 192u8, 47u8, 244u8, 102u8, 195u8, 120u8, 179u8, 87u8, 94u8, 8u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The validation function has been scheduled to apply."]
			pub struct ValidationFunctionStored;
			impl ::subxt::events::StaticEvent for ValidationFunctionStored {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionStored";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The validation function was applied as of the contained relay chain block number."]
			pub struct ValidationFunctionApplied {
				pub relay_chain_block_num: validation_function_applied::RelayChainBlockNum,
			}
			pub mod validation_function_applied {
				use super::runtime_types;
				pub type RelayChainBlockNum = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ValidationFunctionApplied {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionApplied";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The relay-chain aborted the upgrade process."]
			pub struct ValidationFunctionDiscarded;
			impl ::subxt::events::StaticEvent for ValidationFunctionDiscarded {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionDiscarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An upgrade has been authorized."]
			pub struct UpgradeAuthorized {
				pub code_hash: upgrade_authorized::CodeHash,
			}
			pub mod upgrade_authorized {
				use super::runtime_types;
				pub type CodeHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for UpgradeAuthorized {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "UpgradeAuthorized";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some downward messages have been received and will be processed."]
			pub struct DownwardMessagesReceived {
				pub count: downward_messages_received::Count,
			}
			pub mod downward_messages_received {
				use super::runtime_types;
				pub type Count = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for DownwardMessagesReceived {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "DownwardMessagesReceived";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward messages were processed using the given weight."]
			pub struct DownwardMessagesProcessed {
				pub weight_used: downward_messages_processed::WeightUsed,
				pub dmq_head: downward_messages_processed::DmqHead,
			}
			pub mod downward_messages_processed {
				use super::runtime_types;
				pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
				pub type DmqHead = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for DownwardMessagesProcessed {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "DownwardMessagesProcessed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An upward message was sent to the relay chain."]
			pub struct UpwardMessageSent {
				pub message_hash: upward_message_sent::MessageHash,
			}
			pub mod upward_message_sent {
				use super::runtime_types;
				pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::events::StaticEvent for UpwardMessageSent {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "UpwardMessageSent";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod unincluded_segment {
					use super::runtime_types;
					pub type UnincludedSegment = :: std :: vec :: Vec < runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: Ancestor < :: subxt :: utils :: H256 > > ;
				}
				pub mod aggregated_unincluded_segment {
					use super::runtime_types;
					pub type AggregatedUnincludedSegment = runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: SegmentTracker < :: subxt :: utils :: H256 > ;
				}
				pub mod pending_validation_code {
					use super::runtime_types;
					pub type PendingValidationCode = ::std::vec::Vec<::core::primitive::u8>;
				}
				pub mod new_validation_code {
					use super::runtime_types;
					pub type NewValidationCode = ::std::vec::Vec<::core::primitive::u8>;
				}
				pub mod validation_data {
					use super::runtime_types;
					pub type ValidationData =
						runtime_types::polkadot_primitives::v6::PersistedValidationData<
							::subxt::utils::H256,
							::core::primitive::u32,
						>;
				}
				pub mod did_set_validation_code {
					use super::runtime_types;
					pub type DidSetValidationCode = ::core::primitive::bool;
				}
				pub mod last_relay_chain_block_number {
					use super::runtime_types;
					pub type LastRelayChainBlockNumber = ::core::primitive::u32;
				}
				pub mod upgrade_restriction_signal {
					use super::runtime_types;
					pub type UpgradeRestrictionSignal = ::core::option::Option<
						runtime_types::polkadot_primitives::v6::UpgradeRestriction,
					>;
				}
				pub mod upgrade_go_ahead {
					use super::runtime_types;
					pub type UpgradeGoAhead = ::core::option::Option<
						runtime_types::polkadot_primitives::v6::UpgradeGoAhead,
					>;
				}
				pub mod relay_state_proof {
					use super::runtime_types;
					pub type RelayStateProof = runtime_types::sp_trie::storage_proof::StorageProof;
				}
				pub mod relevant_messaging_state {
					use super::runtime_types;
					pub type RelevantMessagingState = runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot ;
				}
				pub mod host_configuration {
					use super::runtime_types;
					pub type HostConfiguration =
						runtime_types::polkadot_primitives::v6::AbridgedHostConfiguration;
				}
				pub mod last_dmq_mqc_head {
					use super::runtime_types;
					pub type LastDmqMqcHead =
						runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain;
				}
				pub mod last_hrmp_mqc_heads {
					use super::runtime_types;
					pub type LastHrmpMqcHeads = ::subxt::utils::KeyedVec<
						runtime_types::polkadot_parachain_primitives::primitives::Id,
						runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
					>;
				}
				pub mod processed_downward_messages {
					use super::runtime_types;
					pub type ProcessedDownwardMessages = ::core::primitive::u32;
				}
				pub mod hrmp_watermark {
					use super::runtime_types;
					pub type HrmpWatermark = ::core::primitive::u32;
				}
				pub mod hrmp_outbound_messages {
					use super::runtime_types;
					pub type HrmpOutboundMessages = ::std::vec::Vec<
						runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
							runtime_types::polkadot_parachain_primitives::primitives::Id,
						>,
					>;
				}
				pub mod upward_messages {
					use super::runtime_types;
					pub type UpwardMessages =
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
				}
				pub mod pending_upward_messages {
					use super::runtime_types;
					pub type PendingUpwardMessages =
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
				}
				pub mod upward_delivery_fee_factor {
					use super::runtime_types;
					pub type UpwardDeliveryFeeFactor =
						runtime_types::sp_arithmetic::fixed_point::FixedU128;
				}
				pub mod announced_hrmp_messages_per_candidate {
					use super::runtime_types;
					pub type AnnouncedHrmpMessagesPerCandidate = ::core::primitive::u32;
				}
				pub mod reserved_xcmp_weight_override {
					use super::runtime_types;
					pub type ReservedXcmpWeightOverride =
						runtime_types::sp_weights::weight_v2::Weight;
				}
				pub mod reserved_dmp_weight_override {
					use super::runtime_types;
					pub type ReservedDmpWeightOverride =
						runtime_types::sp_weights::weight_v2::Weight;
				}
				pub mod authorized_upgrade {
					use super::runtime_types;
					pub type AuthorizedUpgrade =
						runtime_types::cumulus_pallet_parachain_system::CodeUpgradeAuthorization;
				}
				pub mod custom_validation_head_data {
					use super::runtime_types;
					pub type CustomValidationHeadData = ::std::vec::Vec<::core::primitive::u8>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Latest included block descendants the runtime accepted. In other words, these are"]
				#[doc = " ancestors of the currently executing block which have not been included in the observed"]
				#[doc = " relay-chain state."]
				#[doc = ""]
				#[doc = " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured"]
				#[doc = " in the pallet."]
				pub fn unincluded_segment(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::unincluded_segment::UnincludedSegment,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"UnincludedSegment",
						vec![],
						[
							73u8, 83u8, 226u8, 16u8, 203u8, 233u8, 221u8, 109u8, 23u8, 114u8, 56u8,
							154u8, 100u8, 116u8, 253u8, 10u8, 164u8, 22u8, 110u8, 73u8, 245u8,
							226u8, 54u8, 146u8, 67u8, 109u8, 149u8, 142u8, 154u8, 218u8, 55u8,
							178u8,
						],
					)
				}
				#[doc = " Storage field that keeps track of bandwidth used by the unincluded segment along with the"]
				#[doc = " latest HRMP watermark. Used for limiting the acceptance of new blocks with"]
				#[doc = " respect to relay chain constraints."]
				pub fn aggregated_unincluded_segment(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::aggregated_unincluded_segment::AggregatedUnincludedSegment,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"AggregatedUnincludedSegment",
						vec![],
						[
							165u8, 51u8, 182u8, 156u8, 65u8, 114u8, 167u8, 133u8, 245u8, 52u8,
							32u8, 119u8, 159u8, 65u8, 201u8, 108u8, 99u8, 43u8, 84u8, 63u8, 95u8,
							182u8, 134u8, 163u8, 51u8, 202u8, 243u8, 82u8, 225u8, 192u8, 186u8,
							2u8,
						],
					)
				}
				#[doc = " In case of a scheduled upgrade, this storage field contains the validation code to be"]
				#[doc = " applied."]
				#[doc = ""]
				#[doc = " As soon as the relay chain gives us the go-ahead signal, we will overwrite the"]
				#[doc = " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process"]
				#[doc = " with the new validation code. This concludes the upgrade process."]
				pub fn pending_validation_code(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_validation_code::PendingValidationCode,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"PendingValidationCode",
						vec![],
						[
							78u8, 159u8, 219u8, 211u8, 177u8, 80u8, 102u8, 93u8, 83u8, 146u8, 90u8,
							233u8, 232u8, 11u8, 104u8, 172u8, 93u8, 68u8, 44u8, 228u8, 99u8, 197u8,
							254u8, 28u8, 181u8, 215u8, 247u8, 238u8, 49u8, 49u8, 195u8, 249u8,
						],
					)
				}
				#[doc = " Validation code that is set by the parachain and is to be communicated to collator and"]
				#[doc = " consequently the relay-chain."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block if no other pallet already set"]
				#[doc = " the value."]
				pub fn new_validation_code(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::new_validation_code::NewValidationCode,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"NewValidationCode",
						vec![],
						[
							185u8, 123u8, 152u8, 122u8, 230u8, 136u8, 79u8, 73u8, 206u8, 19u8,
							59u8, 57u8, 75u8, 250u8, 83u8, 185u8, 29u8, 76u8, 89u8, 137u8, 77u8,
							163u8, 25u8, 125u8, 182u8, 67u8, 2u8, 180u8, 48u8, 237u8, 49u8, 171u8,
						],
					)
				}
				#[doc = " The [`PersistedValidationData`] set for this block."]
				#[doc = " This value is expected to be set only once per block and it's never stored"]
				#[doc = " in the trie."]
				pub fn validation_data(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validation_data::ValidationData,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"ValidationData",
						vec![],
						[
							193u8, 240u8, 25u8, 56u8, 103u8, 173u8, 56u8, 56u8, 229u8, 243u8, 91u8,
							25u8, 249u8, 95u8, 122u8, 93u8, 37u8, 181u8, 54u8, 244u8, 217u8, 200u8,
							62u8, 136u8, 80u8, 148u8, 16u8, 177u8, 124u8, 211u8, 95u8, 24u8,
						],
					)
				}
				#[doc = " Were the validation data set to notify the relay chain?"]
				pub fn did_set_validation_code(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::did_set_validation_code::DidSetValidationCode,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"DidSetValidationCode",
						vec![],
						[
							233u8, 228u8, 48u8, 111u8, 200u8, 35u8, 30u8, 139u8, 251u8, 77u8,
							196u8, 252u8, 35u8, 222u8, 129u8, 235u8, 7u8, 19u8, 156u8, 82u8, 126u8,
							173u8, 29u8, 62u8, 20u8, 67u8, 166u8, 116u8, 108u8, 182u8, 57u8, 246u8,
						],
					)
				}
				#[doc = " The relay chain block number associated with the last parachain block."]
				#[doc = ""]
				#[doc = " This is updated in `on_finalize`."]
				pub fn last_relay_chain_block_number(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::last_relay_chain_block_number::LastRelayChainBlockNumber,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"LastRelayChainBlockNumber",
						vec![],
						[
							17u8, 65u8, 131u8, 169u8, 195u8, 243u8, 195u8, 93u8, 220u8, 174u8,
							75u8, 216u8, 214u8, 227u8, 96u8, 40u8, 8u8, 153u8, 116u8, 160u8, 79u8,
							255u8, 35u8, 232u8, 242u8, 42u8, 100u8, 150u8, 208u8, 210u8, 142u8,
							186u8,
						],
					)
				}
				#[doc = " An option which indicates if the relay-chain restricts signalling a validation code upgrade."]
				#[doc = " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced"]
				#[doc = " candidate will be invalid."]
				#[doc = ""]
				#[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
				#[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
				#[doc = " set after the inherent."]
				pub fn upgrade_restriction_signal(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::upgrade_restriction_signal::UpgradeRestrictionSignal,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"UpgradeRestrictionSignal",
						vec![],
						[
							235u8, 240u8, 37u8, 44u8, 181u8, 52u8, 7u8, 216u8, 20u8, 139u8, 69u8,
							124u8, 21u8, 173u8, 237u8, 64u8, 105u8, 88u8, 49u8, 69u8, 123u8, 55u8,
							181u8, 167u8, 112u8, 183u8, 190u8, 231u8, 231u8, 127u8, 77u8, 148u8,
						],
					)
				}
				#[doc = " Optional upgrade go-ahead signal from the relay-chain."]
				#[doc = ""]
				#[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
				#[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
				#[doc = " set after the inherent."]
				pub fn upgrade_go_ahead(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::upgrade_go_ahead::UpgradeGoAhead,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"UpgradeGoAhead",
						vec![],
						[
							149u8, 144u8, 186u8, 88u8, 180u8, 34u8, 82u8, 226u8, 100u8, 148u8,
							246u8, 55u8, 233u8, 97u8, 43u8, 0u8, 48u8, 31u8, 69u8, 154u8, 29u8,
							147u8, 241u8, 91u8, 81u8, 126u8, 206u8, 117u8, 14u8, 149u8, 87u8, 88u8,
						],
					)
				}
				#[doc = " The state proof for the last relay parent block."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn relay_state_proof(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::relay_state_proof::RelayStateProof,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"RelayStateProof",
						vec![],
						[
							46u8, 115u8, 163u8, 190u8, 246u8, 47u8, 200u8, 159u8, 206u8, 204u8,
							94u8, 250u8, 127u8, 112u8, 109u8, 111u8, 210u8, 195u8, 244u8, 41u8,
							36u8, 187u8, 71u8, 150u8, 149u8, 253u8, 143u8, 33u8, 83u8, 189u8,
							182u8, 238u8,
						],
					)
				}
				#[doc = " The snapshot of some state related to messaging relevant to the current parachain as per"]
				#[doc = " the relay parent."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn relevant_messaging_state(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::relevant_messaging_state::RelevantMessagingState,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"RelevantMessagingState",
						vec![],
						[
							117u8, 166u8, 186u8, 126u8, 21u8, 174u8, 86u8, 253u8, 163u8, 90u8,
							54u8, 226u8, 186u8, 253u8, 126u8, 168u8, 145u8, 45u8, 155u8, 32u8,
							97u8, 110u8, 208u8, 125u8, 47u8, 113u8, 165u8, 199u8, 210u8, 118u8,
							217u8, 73u8,
						],
					)
				}
				#[doc = " The parachain host configuration that was obtained from the relay parent."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn host_configuration(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::host_configuration::HostConfiguration,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"HostConfiguration",
						vec![],
						[
							252u8, 23u8, 111u8, 189u8, 120u8, 204u8, 129u8, 223u8, 248u8, 179u8,
							239u8, 173u8, 133u8, 61u8, 140u8, 2u8, 75u8, 32u8, 204u8, 178u8, 69u8,
							21u8, 44u8, 227u8, 178u8, 179u8, 33u8, 26u8, 131u8, 156u8, 78u8, 85u8,
						],
					)
				}
				#[doc = " The last downward message queue chain head we have observed."]
				#[doc = ""]
				#[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
				#[doc = " by the system inherent."]
				pub fn last_dmq_mqc_head(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::last_dmq_mqc_head::LastDmqMqcHead,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"LastDmqMqcHead",
						vec![],
						[
							1u8, 70u8, 140u8, 40u8, 51u8, 127u8, 75u8, 80u8, 5u8, 49u8, 196u8,
							31u8, 30u8, 61u8, 54u8, 252u8, 0u8, 0u8, 100u8, 115u8, 177u8, 250u8,
							138u8, 48u8, 107u8, 41u8, 93u8, 87u8, 195u8, 107u8, 206u8, 227u8,
						],
					)
				}
				#[doc = " The message queue chain heads we have observed per each channel incoming channel."]
				#[doc = ""]
				#[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
				#[doc = " by the system inherent."]
				pub fn last_hrmp_mqc_heads(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::last_hrmp_mqc_heads::LastHrmpMqcHeads,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"LastHrmpMqcHeads",
						vec![],
						[
							131u8, 170u8, 142u8, 30u8, 101u8, 113u8, 131u8, 81u8, 38u8, 168u8,
							98u8, 3u8, 9u8, 109u8, 96u8, 179u8, 115u8, 177u8, 128u8, 11u8, 238u8,
							54u8, 81u8, 60u8, 97u8, 112u8, 224u8, 175u8, 86u8, 133u8, 182u8, 76u8,
						],
					)
				}
				#[doc = " Number of downward messages processed in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn processed_downward_messages(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::processed_downward_messages::ProcessedDownwardMessages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"ProcessedDownwardMessages",
						vec![],
						[
							151u8, 234u8, 196u8, 87u8, 130u8, 79u8, 4u8, 102u8, 47u8, 10u8, 33u8,
							132u8, 149u8, 118u8, 61u8, 141u8, 5u8, 1u8, 30u8, 120u8, 220u8, 156u8,
							16u8, 11u8, 14u8, 52u8, 126u8, 151u8, 244u8, 149u8, 197u8, 51u8,
						],
					)
				}
				#[doc = " HRMP watermark that was set in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn hrmp_watermark(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::hrmp_watermark::HrmpWatermark,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"HrmpWatermark",
						vec![],
						[
							77u8, 62u8, 59u8, 220u8, 7u8, 125u8, 98u8, 249u8, 108u8, 212u8, 223u8,
							99u8, 152u8, 13u8, 29u8, 80u8, 166u8, 65u8, 232u8, 113u8, 145u8, 128u8,
							123u8, 35u8, 238u8, 31u8, 113u8, 156u8, 220u8, 104u8, 217u8, 165u8,
						],
					)
				}
				#[doc = " HRMP messages that were sent in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn hrmp_outbound_messages(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::hrmp_outbound_messages::HrmpOutboundMessages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"HrmpOutboundMessages",
						vec![],
						[
							42u8, 9u8, 96u8, 217u8, 25u8, 101u8, 129u8, 147u8, 150u8, 20u8, 164u8,
							186u8, 217u8, 178u8, 15u8, 201u8, 233u8, 104u8, 92u8, 120u8, 29u8,
							245u8, 196u8, 13u8, 141u8, 210u8, 102u8, 62u8, 216u8, 80u8, 246u8,
							145u8,
						],
					)
				}
				#[doc = " Upward messages that were sent in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn upward_messages(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::upward_messages::UpwardMessages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"UpwardMessages",
						vec![],
						[
							179u8, 127u8, 8u8, 94u8, 194u8, 246u8, 53u8, 79u8, 80u8, 22u8, 18u8,
							75u8, 116u8, 163u8, 90u8, 161u8, 30u8, 140u8, 57u8, 126u8, 60u8, 91u8,
							23u8, 30u8, 120u8, 245u8, 125u8, 96u8, 152u8, 25u8, 248u8, 85u8,
						],
					)
				}
				#[doc = " Upward messages that are still pending and not yet send to the relay chain."]
				pub fn pending_upward_messages(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_upward_messages::PendingUpwardMessages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"PendingUpwardMessages",
						vec![],
						[
							239u8, 45u8, 18u8, 173u8, 148u8, 150u8, 55u8, 176u8, 173u8, 156u8,
							246u8, 226u8, 198u8, 214u8, 104u8, 187u8, 186u8, 13u8, 83u8, 194u8,
							153u8, 29u8, 228u8, 109u8, 26u8, 18u8, 212u8, 151u8, 246u8, 24u8,
							133u8, 216u8,
						],
					)
				}
				#[doc = " The factor to multiply the base delivery fee by for UMP."]
				pub fn upward_delivery_fee_factor(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::upward_delivery_fee_factor::UpwardDeliveryFeeFactor,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"UpwardDeliveryFeeFactor",
						vec![],
						[
							40u8, 217u8, 164u8, 111u8, 151u8, 132u8, 69u8, 226u8, 163u8, 175u8,
							43u8, 239u8, 179u8, 217u8, 136u8, 161u8, 13u8, 251u8, 163u8, 102u8,
							24u8, 27u8, 168u8, 89u8, 221u8, 83u8, 93u8, 64u8, 96u8, 117u8, 146u8,
							71u8,
						],
					)
				}
				#[doc = " The number of HRMP messages we observed in `on_initialize` and thus used that number for"]
				#[doc = " announcing the weight of `on_initialize` and `on_finalize`."]
				pub fn announced_hrmp_messages_per_candidate(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::announced_hrmp_messages_per_candidate::AnnouncedHrmpMessagesPerCandidate,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"AnnouncedHrmpMessagesPerCandidate",
						vec![],
						[
							93u8, 11u8, 229u8, 172u8, 73u8, 87u8, 13u8, 149u8, 15u8, 94u8, 163u8,
							107u8, 156u8, 22u8, 131u8, 177u8, 96u8, 247u8, 213u8, 224u8, 41u8,
							126u8, 157u8, 33u8, 154u8, 194u8, 95u8, 234u8, 65u8, 19u8, 58u8, 161u8,
						],
					)
				}
				#[doc = " The weight we reserve at the beginning of the block for processing XCMP messages. This"]
				#[doc = " overrides the amount set in the Config trait."]
				pub fn reserved_xcmp_weight_override(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reserved_xcmp_weight_override::ReservedXcmpWeightOverride,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"ReservedXcmpWeightOverride",
						vec![],
						[
							176u8, 93u8, 203u8, 74u8, 18u8, 170u8, 246u8, 203u8, 109u8, 89u8, 86u8,
							77u8, 96u8, 66u8, 189u8, 79u8, 184u8, 253u8, 11u8, 230u8, 87u8, 120u8,
							1u8, 254u8, 215u8, 41u8, 210u8, 86u8, 239u8, 206u8, 60u8, 2u8,
						],
					)
				}
				#[doc = " The weight we reserve at the beginning of the block for processing DMP messages. This"]
				#[doc = " overrides the amount set in the Config trait."]
				pub fn reserved_dmp_weight_override(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reserved_dmp_weight_override::ReservedDmpWeightOverride,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"ReservedDmpWeightOverride",
						vec![],
						[
							205u8, 124u8, 9u8, 156u8, 255u8, 207u8, 208u8, 23u8, 179u8, 132u8,
							254u8, 157u8, 237u8, 240u8, 167u8, 203u8, 253u8, 111u8, 136u8, 32u8,
							100u8, 152u8, 16u8, 19u8, 175u8, 14u8, 108u8, 61u8, 59u8, 231u8, 70u8,
							112u8,
						],
					)
				}
				#[doc = " The next authorized upgrade, if there is one."]
				pub fn authorized_upgrade(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::authorized_upgrade::AuthorizedUpgrade,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"AuthorizedUpgrade",
						vec![],
						[
							165u8, 97u8, 27u8, 138u8, 2u8, 28u8, 55u8, 92u8, 96u8, 96u8, 168u8,
							169u8, 55u8, 178u8, 44u8, 127u8, 58u8, 140u8, 206u8, 178u8, 1u8, 37u8,
							214u8, 213u8, 251u8, 123u8, 5u8, 111u8, 90u8, 148u8, 217u8, 135u8,
						],
					)
				}
				#[doc = " A custom head data that should be returned as result of `validate_block`."]
				#[doc = ""]
				#[doc = " See `Pallet::set_custom_validation_head_data` for more information."]
				pub fn custom_validation_head_data(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::custom_validation_head_data::CustomValidationHeadData,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainSystem",
						"CustomValidationHeadData",
						vec![],
						[
							52u8, 186u8, 187u8, 57u8, 245u8, 171u8, 202u8, 23u8, 92u8, 80u8, 118u8,
							66u8, 251u8, 156u8, 175u8, 254u8, 141u8, 185u8, 115u8, 209u8, 170u8,
							165u8, 1u8, 242u8, 120u8, 234u8, 162u8, 24u8, 135u8, 105u8, 8u8, 177u8,
						],
					)
				}
			}
		}
	}
	pub mod parachain_info {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::staging_parachain_info::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
			}
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod parachain_id {
					use super::runtime_types;
					pub type ParachainId =
						runtime_types::polkadot_parachain_primitives::primitives::Id;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn parachain_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::parachain_id::ParachainId,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainInfo",
						"ParachainId",
						vec![],
						[
							160u8, 130u8, 74u8, 181u8, 231u8, 180u8, 246u8, 152u8, 204u8, 44u8,
							245u8, 91u8, 113u8, 246u8, 218u8, 50u8, 254u8, 248u8, 35u8, 219u8,
							83u8, 144u8, 228u8, 245u8, 122u8, 53u8, 194u8, 172u8, 222u8, 118u8,
							202u8, 91u8,
						],
					)
				}
			}
		}
	}
	pub mod balances {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_balances::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_balances::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_allow_death`]."]
				pub struct TransferAllowDeath {
					pub dest: transfer_allow_death::Dest,
					#[codec(compact)]
					pub value: transfer_allow_death::Value,
				}
				pub mod transfer_allow_death {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferAllowDeath {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "transfer_allow_death";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_transfer`]."]
				pub struct ForceTransfer {
					pub source: force_transfer::Source,
					pub dest: force_transfer::Dest,
					#[codec(compact)]
					pub value: force_transfer::Value,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type Source = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_keep_alive`]."]
				pub struct TransferKeepAlive {
					pub dest: transfer_keep_alive::Dest,
					#[codec(compact)]
					pub value: transfer_keep_alive::Value,
				}
				pub mod transfer_keep_alive {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "transfer_keep_alive";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_all`]."]
				pub struct TransferAll {
					pub dest: transfer_all::Dest,
					pub keep_alive: transfer_all::KeepAlive,
				}
				pub mod transfer_all {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferAll {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "transfer_all";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_unreserve`]."]
				pub struct ForceUnreserve {
					pub who: force_unreserve::Who,
					pub amount: force_unreserve::Amount,
				}
				pub mod force_unreserve {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceUnreserve {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "force_unreserve";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::upgrade_accounts`]."]
				pub struct UpgradeAccounts {
					pub who: upgrade_accounts::Who,
				}
				pub mod upgrade_accounts {
					use super::runtime_types;
					pub type Who = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpgradeAccounts {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "upgrade_accounts";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_set_balance`]."]
				pub struct ForceSetBalance {
					pub who: force_set_balance::Who,
					#[codec(compact)]
					pub new_free: force_set_balance::NewFree,
				}
				pub mod force_set_balance {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type NewFree = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceSetBalance {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "force_set_balance";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::transfer_allow_death`]."]
				pub fn transfer_allow_death(
					&self,
					dest: types::transfer_allow_death::Dest,
					value: types::transfer_allow_death::Value,
				) -> ::subxt::tx::Payload<types::TransferAllowDeath> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"transfer_allow_death",
						types::TransferAllowDeath { dest, value },
						[
							24u8, 176u8, 111u8, 60u8, 103u8, 161u8, 139u8, 10u8, 197u8, 207u8,
							140u8, 212u8, 166u8, 50u8, 47u8, 150u8, 83u8, 180u8, 86u8, 4u8, 159u8,
							84u8, 195u8, 71u8, 204u8, 109u8, 233u8, 23u8, 10u8, 156u8, 209u8,
							153u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_transfer`]."]
				pub fn force_transfer(
					&self,
					source: types::force_transfer::Source,
					dest: types::force_transfer::Dest,
					value: types::force_transfer::Value,
				) -> ::subxt::tx::Payload<types::ForceTransfer> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"force_transfer",
						types::ForceTransfer { source, dest, value },
						[
							23u8, 7u8, 44u8, 138u8, 180u8, 140u8, 216u8, 52u8, 198u8, 3u8, 225u8,
							116u8, 47u8, 26u8, 61u8, 163u8, 55u8, 64u8, 113u8, 250u8, 192u8, 16u8,
							228u8, 228u8, 85u8, 255u8, 100u8, 128u8, 245u8, 132u8, 84u8, 186u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_keep_alive`]."]
				pub fn transfer_keep_alive(
					&self,
					dest: types::transfer_keep_alive::Dest,
					value: types::transfer_keep_alive::Value,
				) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"transfer_keep_alive",
						types::TransferKeepAlive { dest, value },
						[
							196u8, 51u8, 121u8, 239u8, 68u8, 97u8, 174u8, 26u8, 21u8, 9u8, 111u8,
							224u8, 189u8, 35u8, 106u8, 30u8, 83u8, 184u8, 234u8, 174u8, 27u8,
							197u8, 40u8, 126u8, 197u8, 92u8, 201u8, 253u8, 144u8, 175u8, 8u8,
							215u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_all`]."]
				pub fn transfer_all(
					&self,
					dest: types::transfer_all::Dest,
					keep_alive: types::transfer_all::KeepAlive,
				) -> ::subxt::tx::Payload<types::TransferAll> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"transfer_all",
						types::TransferAll { dest, keep_alive },
						[
							13u8, 46u8, 127u8, 231u8, 179u8, 61u8, 45u8, 188u8, 195u8, 251u8,
							146u8, 25u8, 138u8, 19u8, 52u8, 112u8, 148u8, 241u8, 134u8, 145u8,
							97u8, 9u8, 199u8, 172u8, 229u8, 239u8, 67u8, 185u8, 128u8, 36u8, 134u8,
							122u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_unreserve`]."]
				pub fn force_unreserve(
					&self,
					who: types::force_unreserve::Who,
					amount: types::force_unreserve::Amount,
				) -> ::subxt::tx::Payload<types::ForceUnreserve> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"force_unreserve",
						types::ForceUnreserve { who, amount },
						[
							176u8, 105u8, 20u8, 111u8, 49u8, 253u8, 22u8, 225u8, 0u8, 81u8, 221u8,
							39u8, 62u8, 22u8, 95u8, 12u8, 21u8, 251u8, 179u8, 31u8, 104u8, 23u8,
							34u8, 216u8, 119u8, 205u8, 133u8, 196u8, 182u8, 113u8, 36u8, 93u8,
						],
					)
				}
				#[doc = "See [`Pallet::upgrade_accounts`]."]
				pub fn upgrade_accounts(
					&self,
					who: types::upgrade_accounts::Who,
				) -> ::subxt::tx::Payload<types::UpgradeAccounts> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"upgrade_accounts",
						types::UpgradeAccounts { who },
						[
							66u8, 200u8, 179u8, 104u8, 65u8, 2u8, 101u8, 56u8, 130u8, 161u8, 224u8,
							233u8, 255u8, 124u8, 70u8, 122u8, 8u8, 49u8, 103u8, 178u8, 68u8, 47u8,
							214u8, 166u8, 217u8, 116u8, 178u8, 50u8, 212u8, 164u8, 98u8, 226u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_set_balance`]."]
				pub fn force_set_balance(
					&self,
					who: types::force_set_balance::Who,
					new_free: types::force_set_balance::NewFree,
				) -> ::subxt::tx::Payload<types::ForceSetBalance> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"force_set_balance",
						types::ForceSetBalance { who, new_free },
						[
							101u8, 181u8, 86u8, 32u8, 61u8, 75u8, 34u8, 164u8, 142u8, 250u8, 7u8,
							218u8, 125u8, 57u8, 98u8, 222u8, 147u8, 26u8, 115u8, 185u8, 190u8,
							172u8, 12u8, 212u8, 132u8, 80u8, 253u8, 69u8, 26u8, 116u8, 197u8,
							203u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_balances::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub account: endowed::Account,
				pub free_balance: endowed::FreeBalance,
			}
			pub mod endowed {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type FreeBalance = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Endowed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
			#[doc = "resulting in an outright loss."]
			pub struct DustLost {
				pub account: dust_lost::Account,
				pub amount: dust_lost::Amount,
			}
			pub mod dust_lost {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DustLost {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub from: transfer::From,
				pub to: transfer::To,
				pub amount: transfer::Amount,
			}
			pub mod transfer {
				use super::runtime_types;
				pub type From = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Transfer {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub who: balance_set::Who,
				pub free: balance_set::Free,
			}
			pub mod balance_set {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Free = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BalanceSet {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub who: reserved::Who,
				pub amount: reserved::Amount,
			}
			pub mod reserved {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub who: unreserved::Who,
				pub amount: unreserved::Amount,
			}
			pub mod unreserved {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was moved from the reserve of the first account to the second account."]
			#[doc = "Final argument indicates the destination balance type."]
			pub struct ReserveRepatriated {
				pub from: reserve_repatriated::From,
				pub to: reserve_repatriated::To,
				pub amount: reserve_repatriated::Amount,
				pub destination_status: reserve_repatriated::DestinationStatus,
			}
			pub mod reserve_repatriated {
				use super::runtime_types;
				pub type From = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type DestinationStatus =
					runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
			}
			impl ::subxt::events::StaticEvent for ReserveRepatriated {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some amount was deposited (e.g. for transaction fees)."]
			pub struct Deposit {
				pub who: deposit::Who,
				pub amount: deposit::Amount,
			}
			pub mod deposit {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
			pub struct Withdraw {
				pub who: withdraw::Who,
				pub amount: withdraw::Amount,
			}
			pub mod withdraw {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Withdraw {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Withdraw";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
			pub struct Slashed {
				pub who: slashed::Who,
				pub amount: slashed::Amount,
			}
			pub mod slashed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some amount was minted into an account."]
			pub struct Minted {
				pub who: minted::Who,
				pub amount: minted::Amount,
			}
			pub mod minted {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Minted {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Minted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some amount was burned from an account."]
			pub struct Burned {
				pub who: burned::Who,
				pub amount: burned::Amount,
			}
			pub mod burned {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Burned {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Burned";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some amount was suspended from an account (it can be restored later)."]
			pub struct Suspended {
				pub who: suspended::Who,
				pub amount: suspended::Amount,
			}
			pub mod suspended {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Suspended {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Suspended";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some amount was restored into an account."]
			pub struct Restored {
				pub who: restored::Who,
				pub amount: restored::Amount,
			}
			pub mod restored {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Restored {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Restored";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account was upgraded."]
			pub struct Upgraded {
				pub who: upgraded::Who,
			}
			pub mod upgraded {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for Upgraded {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Upgraded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
			pub struct Issued {
				pub amount: issued::Amount,
			}
			pub mod issued {
				use super::runtime_types;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Issued {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
			pub struct Rescinded {
				pub amount: rescinded::Amount,
			}
			pub mod rescinded {
				use super::runtime_types;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Rescinded {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Rescinded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was locked."]
			pub struct Locked {
				pub who: locked::Who,
				pub amount: locked::Amount,
			}
			pub mod locked {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Locked {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Locked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was unlocked."]
			pub struct Unlocked {
				pub who: unlocked::Who,
				pub amount: unlocked::Amount,
			}
			pub mod unlocked {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Unlocked {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Unlocked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was frozen."]
			pub struct Frozen {
				pub who: frozen::Who,
				pub amount: frozen::Amount,
			}
			pub mod frozen {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Frozen {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Frozen";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was thawed."]
			pub struct Thawed {
				pub who: thawed::Who,
				pub amount: thawed::Amount,
			}
			pub mod thawed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Thawed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Thawed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod total_issuance {
					use super::runtime_types;
					pub type TotalIssuance = ::core::primitive::u128;
				}
				pub mod inactive_issuance {
					use super::runtime_types;
					pub type InactiveIssuance = ::core::primitive::u128;
				}
				pub mod account {
					use super::runtime_types;
					pub type Account =
						runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod locks {
					use super::runtime_types;
					pub type Locks =
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							runtime_types::pallet_balances::types::BalanceLock<
								::core::primitive::u128,
							>,
						>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod reserves {
					use super::runtime_types;
					pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::ReserveData<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod holds {
					use super::runtime_types;
					pub type Holds = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::IdAmount<
							runtime_types::tangle_kusama_runtime::RuntimeHoldReason,
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod freezes {
					use super::runtime_types;
					pub type Freezes = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::IdAmount<
							(),
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The total units issued in the system."]
				pub fn total_issuance(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::total_issuance::TotalIssuance,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"TotalIssuance",
						vec![],
						[
							116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
							171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
							255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
							185u8,
						],
					)
				}
				#[doc = " The total units of outstanding deactivated balance in the system."]
				pub fn inactive_issuance(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::inactive_issuance::InactiveIssuance,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"InactiveIssuance",
						vec![],
						[
							212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
							249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
							30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::account::Account,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Account",
						vec![],
						[
							213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
							90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
							18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<types::account::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::account::Account,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Account",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
							90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
							18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::locks::Locks,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Locks",
						vec![],
						[
							10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
							167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
							13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: impl ::std::borrow::Borrow<types::locks::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::locks::Locks,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Locks",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
							167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
							13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reserves::Reserves,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Reserves",
						vec![],
						[
							112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
							140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
							106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: impl ::std::borrow::Borrow<types::reserves::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reserves::Reserves,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Reserves",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
							140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
							106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
						],
					)
				}
				#[doc = " Holds on account balances."]
				pub fn holds_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::holds::Holds,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Holds",
						vec![],
						[
							129u8, 137u8, 55u8, 91u8, 69u8, 138u8, 47u8, 168u8, 33u8, 159u8, 81u8,
							44u8, 125u8, 21u8, 124u8, 211u8, 190u8, 246u8, 14u8, 154u8, 233u8,
							116u8, 250u8, 251u8, 179u8, 82u8, 73u8, 234u8, 168u8, 184u8, 61u8,
							198u8,
						],
					)
				}
				#[doc = " Holds on account balances."]
				pub fn holds(
					&self,
					_0: impl ::std::borrow::Borrow<types::holds::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::holds::Holds,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Holds",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							129u8, 137u8, 55u8, 91u8, 69u8, 138u8, 47u8, 168u8, 33u8, 159u8, 81u8,
							44u8, 125u8, 21u8, 124u8, 211u8, 190u8, 246u8, 14u8, 154u8, 233u8,
							116u8, 250u8, 251u8, 179u8, 82u8, 73u8, 234u8, 168u8, 184u8, 61u8,
							198u8,
						],
					)
				}
				#[doc = " Freeze locks on account balances."]
				pub fn freezes_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::freezes::Freezes,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Freezes",
						vec![],
						[
							69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
							112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
							163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
						],
					)
				}
				#[doc = " Freeze locks on account balances."]
				pub fn freezes(
					&self,
					_0: impl ::std::borrow::Borrow<types::freezes::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::freezes::Freezes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Freezes",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
							112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
							163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!"]
				#[doc = ""]
				#[doc = " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for"]
				#[doc = " this pallet. However, you do so at your own risk: this will open up a major DoS vector."]
				#[doc = " In case you have multiple sources of provider references, you may also get unexpected"]
				#[doc = " behaviour if you set this to zero."]
				#[doc = ""]
				#[doc = " Bottom line: Do yourself a favour and make it at least one!"]
				pub fn existential_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Balances",
						"ExistentialDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of locks that should exist on an account."]
				#[doc = " Not strictly enforced, but used for weight estimation."]
				pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Balances",
						"MaxLocks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Balances",
						"MaxReserves",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of holds that can exist on an account at any time."]
				pub fn max_holds(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Balances",
						"MaxHolds",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of individual freeze locks that can exist on an account at any time."]
				pub fn max_freezes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Balances",
						"MaxFreezes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod transaction_payment {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
			#[doc = "has been paid by `who`."]
			pub struct TransactionFeePaid {
				pub who: transaction_fee_paid::Who,
				pub actual_fee: transaction_fee_paid::ActualFee,
				pub tip: transaction_fee_paid::Tip,
			}
			pub mod transaction_fee_paid {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type ActualFee = ::core::primitive::u128;
				pub type Tip = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TransactionFeePaid {
				const PALLET: &'static str = "TransactionPayment";
				const EVENT: &'static str = "TransactionFeePaid";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod next_fee_multiplier {
					use super::runtime_types;
					pub type NextFeeMultiplier =
						runtime_types::sp_arithmetic::fixed_point::FixedU128;
				}
				pub mod storage_version {
					use super::runtime_types;
					pub type StorageVersion = runtime_types::pallet_transaction_payment::Releases;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn next_fee_multiplier(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_fee_multiplier::NextFeeMultiplier,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionPayment",
						"NextFeeMultiplier",
						vec![],
						[
							247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
							147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
							159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
							197u8,
						],
					)
				}
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::storage_version::StorageVersion,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionPayment",
						"StorageVersion",
						vec![],
						[
							105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
							178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
							251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
							144u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
				#[doc = " `priority`"]
				#[doc = ""]
				#[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
				#[doc = " added to a tip component in regular `priority` calculations."]
				#[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
				#[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
				#[doc = ""]
				#[doc = " ```rust,ignore"]
				#[doc = " // For `Normal`"]
				#[doc = " let priority = priority_calc(tip);"]
				#[doc = ""]
				#[doc = " // For `Operational`"]
				#[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
				#[doc = " let priority = priority_calc(tip + virtual_tip);"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
				#[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
				#[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
				#[doc = " transactions."]
				pub fn operational_fee_multiplier(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u8> {
					::subxt::constants::Address::new_static(
						"TransactionPayment",
						"OperationalFeeMultiplier",
						[
							141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
							28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
							114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
							165u8,
						],
					)
				}
			}
		}
	}
	pub mod authorship {
		use super::root_mod;
		use super::runtime_types;
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod author {
					use super::runtime_types;
					pub type Author = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Author of current block."]
				pub fn author(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::author::Author,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Authorship",
						"Author",
						vec![],
						[
							247u8, 192u8, 118u8, 227u8, 47u8, 20u8, 203u8, 199u8, 216u8, 87u8,
							220u8, 50u8, 166u8, 61u8, 168u8, 213u8, 253u8, 62u8, 202u8, 199u8,
							61u8, 192u8, 237u8, 53u8, 22u8, 148u8, 164u8, 245u8, 99u8, 24u8, 146u8,
							18u8,
						],
					)
				}
			}
		}
	}
	pub mod session {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "Error for the session pallet."]
		pub type Error = runtime_types::pallet_session::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_session::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_keys`]."]
				pub struct SetKeys {
					pub keys: set_keys::Keys,
					pub proof: set_keys::Proof,
				}
				pub mod set_keys {
					use super::runtime_types;
					pub type Keys = runtime_types::tangle_kusama_runtime::SessionKeys;
					pub type Proof = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetKeys {
					const PALLET: &'static str = "Session";
					const CALL: &'static str = "set_keys";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::purge_keys`]."]
				pub struct PurgeKeys;
				impl ::subxt::blocks::StaticExtrinsic for PurgeKeys {
					const PALLET: &'static str = "Session";
					const CALL: &'static str = "purge_keys";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set_keys`]."]
				pub fn set_keys(
					&self,
					keys: types::set_keys::Keys,
					proof: types::set_keys::Proof,
				) -> ::subxt::tx::Payload<types::SetKeys> {
					::subxt::tx::Payload::new_static(
						"Session",
						"set_keys",
						types::SetKeys { keys, proof },
						[
							10u8, 183u8, 202u8, 82u8, 236u8, 202u8, 212u8, 220u8, 51u8, 217u8,
							229u8, 169u8, 238u8, 141u8, 129u8, 231u8, 203u8, 176u8, 97u8, 148u8,
							240u8, 87u8, 177u8, 245u8, 33u8, 109u8, 243u8, 52u8, 46u8, 118u8,
							164u8, 35u8,
						],
					)
				}
				#[doc = "See [`Pallet::purge_keys`]."]
				pub fn purge_keys(&self) -> ::subxt::tx::Payload<types::PurgeKeys> {
					::subxt::tx::Payload::new_static(
						"Session",
						"purge_keys",
						types::PurgeKeys {},
						[
							215u8, 204u8, 146u8, 236u8, 32u8, 78u8, 198u8, 79u8, 85u8, 214u8, 15u8,
							151u8, 158u8, 31u8, 146u8, 119u8, 119u8, 204u8, 151u8, 169u8, 226u8,
							67u8, 217u8, 39u8, 241u8, 245u8, 203u8, 240u8, 203u8, 172u8, 16u8,
							209u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_session::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "New session has happened. Note that the argument is the session index, not the"]
			#[doc = "block number as the type might suggest."]
			pub struct NewSession {
				pub session_index: new_session::SessionIndex,
			}
			pub mod new_session {
				use super::runtime_types;
				pub type SessionIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for NewSession {
				const PALLET: &'static str = "Session";
				const EVENT: &'static str = "NewSession";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod validators {
					use super::runtime_types;
					pub type Validators = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				pub mod current_index {
					use super::runtime_types;
					pub type CurrentIndex = ::core::primitive::u32;
				}
				pub mod queued_changed {
					use super::runtime_types;
					pub type QueuedChanged = ::core::primitive::bool;
				}
				pub mod queued_keys {
					use super::runtime_types;
					pub type QueuedKeys = ::std::vec::Vec<(
						::subxt::utils::AccountId32,
						runtime_types::tangle_kusama_runtime::SessionKeys,
					)>;
				}
				pub mod disabled_validators {
					use super::runtime_types;
					pub type DisabledValidators = ::std::vec::Vec<::core::primitive::u32>;
				}
				pub mod next_keys {
					use super::runtime_types;
					pub type NextKeys = runtime_types::tangle_kusama_runtime::SessionKeys;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod key_owner {
					use super::runtime_types;
					pub type KeyOwner = ::subxt::utils::AccountId32;
					pub type Param0 = runtime_types::sp_core::crypto::KeyTypeId;
					pub type Param1 = [::core::primitive::u8];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current set of validators."]
				pub fn validators(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validators::Validators,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"Validators",
						vec![],
						[
							50u8, 86u8, 154u8, 222u8, 249u8, 209u8, 156u8, 22u8, 155u8, 25u8,
							133u8, 194u8, 210u8, 50u8, 38u8, 28u8, 139u8, 201u8, 90u8, 139u8,
							115u8, 12u8, 12u8, 141u8, 4u8, 178u8, 201u8, 241u8, 223u8, 234u8, 6u8,
							86u8,
						],
					)
				}
				#[doc = " Current index of the session."]
				pub fn current_index(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::current_index::CurrentIndex,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"CurrentIndex",
						vec![],
						[
							167u8, 151u8, 125u8, 150u8, 159u8, 21u8, 78u8, 217u8, 237u8, 183u8,
							135u8, 65u8, 187u8, 114u8, 188u8, 206u8, 16u8, 32u8, 69u8, 208u8,
							134u8, 159u8, 232u8, 224u8, 243u8, 27u8, 31u8, 166u8, 145u8, 44u8,
							221u8, 230u8,
						],
					)
				}
				#[doc = " True if the underlying economic identities or weighting behind the validators"]
				#[doc = " has changed in the queued validator set."]
				pub fn queued_changed(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::queued_changed::QueuedChanged,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"QueuedChanged",
						vec![],
						[
							184u8, 137u8, 224u8, 137u8, 31u8, 236u8, 95u8, 164u8, 102u8, 225u8,
							198u8, 227u8, 140u8, 37u8, 113u8, 57u8, 59u8, 4u8, 202u8, 102u8, 117u8,
							36u8, 226u8, 64u8, 113u8, 141u8, 199u8, 111u8, 99u8, 144u8, 198u8,
							153u8,
						],
					)
				}
				#[doc = " The queued keys for the next session. When the next session begins, these keys"]
				#[doc = " will be used to determine the validator's session keys."]
				pub fn queued_keys(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::queued_keys::QueuedKeys,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"QueuedKeys",
						vec![],
						[
							3u8, 214u8, 191u8, 168u8, 90u8, 94u8, 107u8, 111u8, 170u8, 31u8, 78u8,
							61u8, 240u8, 184u8, 170u8, 104u8, 178u8, 229u8, 159u8, 89u8, 207u8,
							37u8, 49u8, 209u8, 131u8, 165u8, 14u8, 169u8, 13u8, 68u8, 151u8, 144u8,
						],
					)
				}
				#[doc = " Indices of disabled validators."]
				#[doc = ""]
				#[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
				#[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
				#[doc = " a new set of identities."]
				pub fn disabled_validators(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::disabled_validators::DisabledValidators,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"DisabledValidators",
						vec![],
						[
							213u8, 19u8, 168u8, 234u8, 187u8, 200u8, 180u8, 97u8, 234u8, 189u8,
							36u8, 233u8, 158u8, 184u8, 45u8, 35u8, 129u8, 213u8, 133u8, 8u8, 104u8,
							183u8, 46u8, 68u8, 154u8, 240u8, 132u8, 22u8, 247u8, 11u8, 54u8, 221u8,
						],
					)
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_keys::NextKeys,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"NextKeys",
						vec![],
						[
							193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
							241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
							172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
						],
					)
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys(
					&self,
					_0: impl ::std::borrow::Borrow<types::next_keys::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_keys::NextKeys,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"NextKeys",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
							241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
							172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::key_owner::KeyOwner,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"KeyOwner",
						vec![],
						[
							217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
							253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
							253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
							206u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::key_owner::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::key_owner::KeyOwner,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"KeyOwner",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
							253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
							253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
							206u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner(
					&self,
					_0: impl ::std::borrow::Borrow<types::key_owner::Param0>,
					_1: impl ::std::borrow::Borrow<types::key_owner::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::key_owner::KeyOwner,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"KeyOwner",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
							253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
							253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
							206u8,
						],
					)
				}
			}
		}
	}
	pub mod aura {
		use super::root_mod;
		use super::runtime_types;
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod authorities {
					use super::runtime_types;
					pub type Authorities =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
						>;
				}
				pub mod current_slot {
					use super::runtime_types;
					pub type CurrentSlot = runtime_types::sp_consensus_slots::Slot;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current authority set."]
				pub fn authorities(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::authorities::Authorities,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Aura",
						"Authorities",
						vec![],
						[
							232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
							129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
							94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
						],
					)
				}
				#[doc = " The current slot of this block."]
				#[doc = ""]
				#[doc = " This will be set in `on_initialize`."]
				pub fn current_slot(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::current_slot::CurrentSlot,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Aura",
						"CurrentSlot",
						vec![],
						[
							112u8, 199u8, 115u8, 248u8, 217u8, 242u8, 45u8, 231u8, 178u8, 53u8,
							236u8, 167u8, 219u8, 238u8, 81u8, 243u8, 39u8, 140u8, 68u8, 19u8,
							201u8, 169u8, 211u8, 133u8, 135u8, 213u8, 150u8, 105u8, 60u8, 252u8,
							43u8, 57u8,
						],
					)
				}
			}
		}
	}
	pub mod aura_ext {
		use super::root_mod;
		use super::runtime_types;
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod authorities {
					use super::runtime_types;
					pub type Authorities =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
						>;
				}
				pub mod slot_info {
					use super::runtime_types;
					pub type SlotInfo =
						(runtime_types::sp_consensus_slots::Slot, ::core::primitive::u32);
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Serves as cache for the authorities."]
				#[doc = ""]
				#[doc = " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,"]
				#[doc = " but we require the old authorities to verify the seal when validating a PoV. This will"]
				#[doc = " always be updated to the latest AuRa authorities in `on_finalize`."]
				pub fn authorities(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::authorities::Authorities,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AuraExt",
						"Authorities",
						vec![],
						[
							232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
							129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
							94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
						],
					)
				}
				#[doc = " Current slot paired with a number of authored blocks."]
				#[doc = ""]
				#[doc = " Updated on each block initialization."]
				pub fn slot_info(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::slot_info::SlotInfo,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AuraExt",
						"SlotInfo",
						vec![],
						[
							135u8, 135u8, 71u8, 123u8, 102u8, 223u8, 215u8, 76u8, 183u8, 169u8,
							108u8, 60u8, 122u8, 5u8, 24u8, 201u8, 96u8, 59u8, 132u8, 95u8, 253u8,
							100u8, 148u8, 184u8, 133u8, 146u8, 101u8, 201u8, 91u8, 30u8, 76u8,
							169u8,
						],
					)
				}
			}
		}
	}
	pub mod parachain_staking {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_parachain_staking::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_parachain_staking::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_staking_expectations`]."]
				pub struct SetStakingExpectations {
					pub expectations: set_staking_expectations::Expectations,
				}
				pub mod set_staking_expectations {
					use super::runtime_types;
					pub type Expectations =
						runtime_types::tangle_parachain_staking::inflation::Range<
							::core::primitive::u128,
						>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetStakingExpectations {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "set_staking_expectations";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_inflation`]."]
				pub struct SetInflation {
					pub schedule: set_inflation::Schedule,
				}
				pub mod set_inflation {
					use super::runtime_types;
					pub type Schedule = runtime_types::tangle_parachain_staking::inflation::Range<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetInflation {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "set_inflation";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_parachain_bond_account`]."]
				pub struct SetParachainBondAccount {
					pub new: set_parachain_bond_account::New,
				}
				pub mod set_parachain_bond_account {
					use super::runtime_types;
					pub type New = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetParachainBondAccount {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "set_parachain_bond_account";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_parachain_bond_reserve_percent`]."]
				pub struct SetParachainBondReservePercent {
					pub new: set_parachain_bond_reserve_percent::New,
				}
				pub mod set_parachain_bond_reserve_percent {
					use super::runtime_types;
					pub type New = runtime_types::sp_arithmetic::per_things::Percent;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetParachainBondReservePercent {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "set_parachain_bond_reserve_percent";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_total_selected`]."]
				pub struct SetTotalSelected {
					pub new: set_total_selected::New,
				}
				pub mod set_total_selected {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetTotalSelected {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "set_total_selected";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_collator_commission`]."]
				pub struct SetCollatorCommission {
					pub new: set_collator_commission::New,
				}
				pub mod set_collator_commission {
					use super::runtime_types;
					pub type New = runtime_types::sp_arithmetic::per_things::Perbill;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetCollatorCommission {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "set_collator_commission";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_blocks_per_round`]."]
				pub struct SetBlocksPerRound {
					pub new: set_blocks_per_round::New,
				}
				pub mod set_blocks_per_round {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetBlocksPerRound {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "set_blocks_per_round";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::join_candidates`]."]
				pub struct JoinCandidates {
					pub bond: join_candidates::Bond,
					pub candidate_count: join_candidates::CandidateCount,
				}
				pub mod join_candidates {
					use super::runtime_types;
					pub type Bond = ::core::primitive::u128;
					pub type CandidateCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for JoinCandidates {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "join_candidates";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_leave_candidates`]."]
				pub struct ScheduleLeaveCandidates {
					pub candidate_count: schedule_leave_candidates::CandidateCount,
				}
				pub mod schedule_leave_candidates {
					use super::runtime_types;
					pub type CandidateCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ScheduleLeaveCandidates {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "schedule_leave_candidates";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::execute_leave_candidates`]."]
				pub struct ExecuteLeaveCandidates {
					pub candidate: execute_leave_candidates::Candidate,
					pub candidate_delegation_count:
						execute_leave_candidates::CandidateDelegationCount,
				}
				pub mod execute_leave_candidates {
					use super::runtime_types;
					pub type Candidate = ::subxt::utils::AccountId32;
					pub type CandidateDelegationCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExecuteLeaveCandidates {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "execute_leave_candidates";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_leave_candidates`]."]
				pub struct CancelLeaveCandidates {
					pub candidate_count: cancel_leave_candidates::CandidateCount,
				}
				pub mod cancel_leave_candidates {
					use super::runtime_types;
					pub type CandidateCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CancelLeaveCandidates {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "cancel_leave_candidates";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::go_offline`]."]
				pub struct GoOffline;
				impl ::subxt::blocks::StaticExtrinsic for GoOffline {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "go_offline";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::go_online`]."]
				pub struct GoOnline;
				impl ::subxt::blocks::StaticExtrinsic for GoOnline {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "go_online";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::candidate_bond_more`]."]
				pub struct CandidateBondMore {
					pub more: candidate_bond_more::More,
				}
				pub mod candidate_bond_more {
					use super::runtime_types;
					pub type More = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for CandidateBondMore {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "candidate_bond_more";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_candidate_bond_less`]."]
				pub struct ScheduleCandidateBondLess {
					pub less: schedule_candidate_bond_less::Less,
				}
				pub mod schedule_candidate_bond_less {
					use super::runtime_types;
					pub type Less = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ScheduleCandidateBondLess {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "schedule_candidate_bond_less";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::execute_candidate_bond_less`]."]
				pub struct ExecuteCandidateBondLess {
					pub candidate: execute_candidate_bond_less::Candidate,
				}
				pub mod execute_candidate_bond_less {
					use super::runtime_types;
					pub type Candidate = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExecuteCandidateBondLess {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "execute_candidate_bond_less";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_candidate_bond_less`]."]
				pub struct CancelCandidateBondLess;
				impl ::subxt::blocks::StaticExtrinsic for CancelCandidateBondLess {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "cancel_candidate_bond_less";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::delegate`]."]
				pub struct Delegate {
					pub candidate: delegate::Candidate,
					pub amount: delegate::Amount,
					pub candidate_delegation_count: delegate::CandidateDelegationCount,
					pub delegation_count: delegate::DelegationCount,
				}
				pub mod delegate {
					use super::runtime_types;
					pub type Candidate = ::subxt::utils::AccountId32;
					pub type Amount = ::core::primitive::u128;
					pub type CandidateDelegationCount = ::core::primitive::u32;
					pub type DelegationCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Delegate {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "delegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_leave_delegators`]."]
				pub struct ScheduleLeaveDelegators;
				impl ::subxt::blocks::StaticExtrinsic for ScheduleLeaveDelegators {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "schedule_leave_delegators";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::execute_leave_delegators`]."]
				pub struct ExecuteLeaveDelegators {
					pub delegator: execute_leave_delegators::Delegator,
					pub delegation_count: execute_leave_delegators::DelegationCount,
				}
				pub mod execute_leave_delegators {
					use super::runtime_types;
					pub type Delegator = ::subxt::utils::AccountId32;
					pub type DelegationCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExecuteLeaveDelegators {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "execute_leave_delegators";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_leave_delegators`]."]
				pub struct CancelLeaveDelegators;
				impl ::subxt::blocks::StaticExtrinsic for CancelLeaveDelegators {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "cancel_leave_delegators";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_revoke_delegation`]."]
				pub struct ScheduleRevokeDelegation {
					pub collator: schedule_revoke_delegation::Collator,
				}
				pub mod schedule_revoke_delegation {
					use super::runtime_types;
					pub type Collator = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ScheduleRevokeDelegation {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "schedule_revoke_delegation";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::delegator_bond_more`]."]
				pub struct DelegatorBondMore {
					pub candidate: delegator_bond_more::Candidate,
					pub more: delegator_bond_more::More,
				}
				pub mod delegator_bond_more {
					use super::runtime_types;
					pub type Candidate = ::subxt::utils::AccountId32;
					pub type More = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for DelegatorBondMore {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "delegator_bond_more";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_delegator_bond_less`]."]
				pub struct ScheduleDelegatorBondLess {
					pub candidate: schedule_delegator_bond_less::Candidate,
					pub less: schedule_delegator_bond_less::Less,
				}
				pub mod schedule_delegator_bond_less {
					use super::runtime_types;
					pub type Candidate = ::subxt::utils::AccountId32;
					pub type Less = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ScheduleDelegatorBondLess {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "schedule_delegator_bond_less";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::execute_delegation_request`]."]
				pub struct ExecuteDelegationRequest {
					pub delegator: execute_delegation_request::Delegator,
					pub candidate: execute_delegation_request::Candidate,
				}
				pub mod execute_delegation_request {
					use super::runtime_types;
					pub type Delegator = ::subxt::utils::AccountId32;
					pub type Candidate = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExecuteDelegationRequest {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "execute_delegation_request";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_delegation_request`]."]
				pub struct CancelDelegationRequest {
					pub candidate: cancel_delegation_request::Candidate,
				}
				pub mod cancel_delegation_request {
					use super::runtime_types;
					pub type Candidate = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CancelDelegationRequest {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "cancel_delegation_request";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::hotfix_remove_delegation_requests_exited_candidates`]."]
				pub struct HotfixRemoveDelegationRequestsExitedCandidates {
					pub candidates: hotfix_remove_delegation_requests_exited_candidates::Candidates,
				}
				pub mod hotfix_remove_delegation_requests_exited_candidates {
					use super::runtime_types;
					pub type Candidates = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for HotfixRemoveDelegationRequestsExitedCandidates {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str =
						"hotfix_remove_delegation_requests_exited_candidates";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::hotfix_migrate_delegators_from_reserve_to_locks`]."]
				pub struct HotfixMigrateDelegatorsFromReserveToLocks {
					pub delegators: hotfix_migrate_delegators_from_reserve_to_locks::Delegators,
				}
				pub mod hotfix_migrate_delegators_from_reserve_to_locks {
					use super::runtime_types;
					pub type Delegators = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for HotfixMigrateDelegatorsFromReserveToLocks {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "hotfix_migrate_delegators_from_reserve_to_locks";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::hotfix_migrate_collators_from_reserve_to_locks`]."]
				pub struct HotfixMigrateCollatorsFromReserveToLocks {
					pub collators: hotfix_migrate_collators_from_reserve_to_locks::Collators,
				}
				pub mod hotfix_migrate_collators_from_reserve_to_locks {
					use super::runtime_types;
					pub type Collators = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for HotfixMigrateCollatorsFromReserveToLocks {
					const PALLET: &'static str = "ParachainStaking";
					const CALL: &'static str = "hotfix_migrate_collators_from_reserve_to_locks";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set_staking_expectations`]."]
				pub fn set_staking_expectations(
					&self,
					expectations: types::set_staking_expectations::Expectations,
				) -> ::subxt::tx::Payload<types::SetStakingExpectations> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"set_staking_expectations",
						types::SetStakingExpectations { expectations },
						[
							155u8, 194u8, 28u8, 69u8, 52u8, 160u8, 182u8, 40u8, 220u8, 227u8, 35u8,
							78u8, 29u8, 252u8, 218u8, 230u8, 2u8, 224u8, 180u8, 5u8, 169u8, 237u8,
							187u8, 149u8, 0u8, 55u8, 188u8, 142u8, 73u8, 157u8, 121u8, 66u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_inflation`]."]
				pub fn set_inflation(
					&self,
					schedule: types::set_inflation::Schedule,
				) -> ::subxt::tx::Payload<types::SetInflation> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"set_inflation",
						types::SetInflation { schedule },
						[
							203u8, 129u8, 17u8, 18u8, 85u8, 158u8, 30u8, 207u8, 33u8, 95u8, 31u8,
							146u8, 116u8, 62u8, 17u8, 84u8, 50u8, 108u8, 246u8, 191u8, 240u8,
							130u8, 203u8, 70u8, 56u8, 70u8, 223u8, 200u8, 82u8, 21u8, 88u8, 191u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_parachain_bond_account`]."]
				pub fn set_parachain_bond_account(
					&self,
					new: types::set_parachain_bond_account::New,
				) -> ::subxt::tx::Payload<types::SetParachainBondAccount> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"set_parachain_bond_account",
						types::SetParachainBondAccount { new },
						[
							53u8, 81u8, 160u8, 84u8, 54u8, 28u8, 137u8, 57u8, 27u8, 109u8, 200u8,
							219u8, 44u8, 190u8, 168u8, 234u8, 82u8, 48u8, 32u8, 94u8, 229u8, 176u8,
							227u8, 223u8, 27u8, 119u8, 188u8, 109u8, 52u8, 214u8, 126u8, 101u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_parachain_bond_reserve_percent`]."]
				pub fn set_parachain_bond_reserve_percent(
					&self,
					new: types::set_parachain_bond_reserve_percent::New,
				) -> ::subxt::tx::Payload<types::SetParachainBondReservePercent> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"set_parachain_bond_reserve_percent",
						types::SetParachainBondReservePercent { new },
						[
							141u8, 154u8, 136u8, 24u8, 63u8, 197u8, 94u8, 9u8, 176u8, 27u8, 10u8,
							75u8, 165u8, 218u8, 230u8, 185u8, 254u8, 40u8, 243u8, 19u8, 148u8,
							252u8, 74u8, 236u8, 24u8, 103u8, 100u8, 65u8, 10u8, 89u8, 97u8, 7u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_total_selected`]."]
				pub fn set_total_selected(
					&self,
					new: types::set_total_selected::New,
				) -> ::subxt::tx::Payload<types::SetTotalSelected> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"set_total_selected",
						types::SetTotalSelected { new },
						[
							79u8, 99u8, 189u8, 86u8, 137u8, 181u8, 252u8, 121u8, 117u8, 188u8,
							204u8, 247u8, 36u8, 179u8, 253u8, 211u8, 108u8, 234u8, 149u8, 239u8,
							120u8, 27u8, 90u8, 7u8, 85u8, 150u8, 31u8, 134u8, 224u8, 248u8, 18u8,
							179u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_collator_commission`]."]
				pub fn set_collator_commission(
					&self,
					new: types::set_collator_commission::New,
				) -> ::subxt::tx::Payload<types::SetCollatorCommission> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"set_collator_commission",
						types::SetCollatorCommission { new },
						[
							166u8, 106u8, 4u8, 178u8, 151u8, 254u8, 151u8, 254u8, 73u8, 228u8,
							144u8, 234u8, 186u8, 200u8, 200u8, 49u8, 247u8, 158u8, 87u8, 173u8,
							110u8, 97u8, 184u8, 69u8, 145u8, 224u8, 173u8, 198u8, 236u8, 5u8,
							248u8, 161u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_blocks_per_round`]."]
				pub fn set_blocks_per_round(
					&self,
					new: types::set_blocks_per_round::New,
				) -> ::subxt::tx::Payload<types::SetBlocksPerRound> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"set_blocks_per_round",
						types::SetBlocksPerRound { new },
						[
							15u8, 238u8, 7u8, 157u8, 190u8, 212u8, 210u8, 16u8, 192u8, 27u8, 74u8,
							162u8, 239u8, 90u8, 149u8, 176u8, 227u8, 29u8, 155u8, 209u8, 94u8,
							157u8, 63u8, 253u8, 21u8, 54u8, 116u8, 154u8, 234u8, 48u8, 70u8, 66u8,
						],
					)
				}
				#[doc = "See [`Pallet::join_candidates`]."]
				pub fn join_candidates(
					&self,
					bond: types::join_candidates::Bond,
					candidate_count: types::join_candidates::CandidateCount,
				) -> ::subxt::tx::Payload<types::JoinCandidates> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"join_candidates",
						types::JoinCandidates { bond, candidate_count },
						[
							122u8, 240u8, 57u8, 122u8, 25u8, 58u8, 53u8, 111u8, 54u8, 10u8, 191u8,
							193u8, 167u8, 216u8, 183u8, 155u8, 236u8, 101u8, 136u8, 44u8, 30u8,
							178u8, 34u8, 56u8, 158u8, 45u8, 207u8, 89u8, 74u8, 224u8, 15u8, 58u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_leave_candidates`]."]
				pub fn schedule_leave_candidates(
					&self,
					candidate_count: types::schedule_leave_candidates::CandidateCount,
				) -> ::subxt::tx::Payload<types::ScheduleLeaveCandidates> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"schedule_leave_candidates",
						types::ScheduleLeaveCandidates { candidate_count },
						[
							38u8, 95u8, 168u8, 104u8, 240u8, 115u8, 200u8, 24u8, 171u8, 60u8, 75u8,
							183u8, 58u8, 126u8, 195u8, 186u8, 246u8, 204u8, 3u8, 68u8, 109u8,
							110u8, 157u8, 141u8, 115u8, 38u8, 99u8, 252u8, 217u8, 254u8, 67u8,
							226u8,
						],
					)
				}
				#[doc = "See [`Pallet::execute_leave_candidates`]."]
				pub fn execute_leave_candidates(
					&self,
					candidate: types::execute_leave_candidates::Candidate,
					candidate_delegation_count : types :: execute_leave_candidates :: CandidateDelegationCount,
				) -> ::subxt::tx::Payload<types::ExecuteLeaveCandidates> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"execute_leave_candidates",
						types::ExecuteLeaveCandidates { candidate, candidate_delegation_count },
						[
							170u8, 194u8, 213u8, 45u8, 100u8, 39u8, 138u8, 15u8, 157u8, 14u8, 61u8,
							69u8, 197u8, 54u8, 157u8, 173u8, 12u8, 121u8, 61u8, 122u8, 18u8, 241u8,
							241u8, 198u8, 24u8, 52u8, 130u8, 29u8, 57u8, 29u8, 45u8, 204u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_leave_candidates`]."]
				pub fn cancel_leave_candidates(
					&self,
					candidate_count: types::cancel_leave_candidates::CandidateCount,
				) -> ::subxt::tx::Payload<types::CancelLeaveCandidates> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"cancel_leave_candidates",
						types::CancelLeaveCandidates { candidate_count },
						[
							142u8, 203u8, 196u8, 63u8, 28u8, 190u8, 133u8, 202u8, 72u8, 85u8,
							143u8, 29u8, 41u8, 8u8, 50u8, 232u8, 123u8, 197u8, 174u8, 198u8, 100u8,
							162u8, 167u8, 233u8, 62u8, 39u8, 230u8, 31u8, 172u8, 101u8, 72u8,
							234u8,
						],
					)
				}
				#[doc = "See [`Pallet::go_offline`]."]
				pub fn go_offline(&self) -> ::subxt::tx::Payload<types::GoOffline> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"go_offline",
						types::GoOffline {},
						[
							229u8, 123u8, 37u8, 67u8, 121u8, 41u8, 249u8, 87u8, 1u8, 78u8, 249u8,
							173u8, 135u8, 228u8, 239u8, 244u8, 177u8, 153u8, 242u8, 112u8, 157u8,
							150u8, 12u8, 213u8, 38u8, 250u8, 85u8, 150u8, 252u8, 60u8, 204u8,
							134u8,
						],
					)
				}
				#[doc = "See [`Pallet::go_online`]."]
				pub fn go_online(&self) -> ::subxt::tx::Payload<types::GoOnline> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"go_online",
						types::GoOnline {},
						[
							58u8, 44u8, 183u8, 212u8, 2u8, 121u8, 216u8, 100u8, 238u8, 222u8,
							118u8, 20u8, 145u8, 231u8, 226u8, 156u8, 130u8, 2u8, 113u8, 3u8, 49u8,
							119u8, 211u8, 112u8, 151u8, 192u8, 181u8, 139u8, 108u8, 209u8, 80u8,
							47u8,
						],
					)
				}
				#[doc = "See [`Pallet::candidate_bond_more`]."]
				pub fn candidate_bond_more(
					&self,
					more: types::candidate_bond_more::More,
				) -> ::subxt::tx::Payload<types::CandidateBondMore> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"candidate_bond_more",
						types::CandidateBondMore { more },
						[
							14u8, 255u8, 179u8, 188u8, 169u8, 177u8, 241u8, 66u8, 17u8, 69u8, 87u8,
							29u8, 55u8, 86u8, 22u8, 14u8, 198u8, 184u8, 18u8, 12u8, 153u8, 36u8,
							146u8, 35u8, 15u8, 93u8, 106u8, 75u8, 30u8, 230u8, 20u8, 73u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_candidate_bond_less`]."]
				pub fn schedule_candidate_bond_less(
					&self,
					less: types::schedule_candidate_bond_less::Less,
				) -> ::subxt::tx::Payload<types::ScheduleCandidateBondLess> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"schedule_candidate_bond_less",
						types::ScheduleCandidateBondLess { less },
						[
							128u8, 77u8, 9u8, 178u8, 190u8, 213u8, 12u8, 108u8, 117u8, 174u8,
							210u8, 130u8, 78u8, 111u8, 181u8, 173u8, 0u8, 92u8, 43u8, 79u8, 134u8,
							9u8, 120u8, 241u8, 3u8, 58u8, 88u8, 113u8, 249u8, 22u8, 0u8, 177u8,
						],
					)
				}
				#[doc = "See [`Pallet::execute_candidate_bond_less`]."]
				pub fn execute_candidate_bond_less(
					&self,
					candidate: types::execute_candidate_bond_less::Candidate,
				) -> ::subxt::tx::Payload<types::ExecuteCandidateBondLess> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"execute_candidate_bond_less",
						types::ExecuteCandidateBondLess { candidate },
						[
							84u8, 17u8, 61u8, 199u8, 183u8, 144u8, 160u8, 155u8, 123u8, 184u8, 7u8,
							140u8, 222u8, 136u8, 71u8, 101u8, 160u8, 24u8, 214u8, 185u8, 59u8,
							233u8, 40u8, 242u8, 142u8, 234u8, 48u8, 176u8, 224u8, 187u8, 152u8,
							232u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_candidate_bond_less`]."]
				pub fn cancel_candidate_bond_less(
					&self,
				) -> ::subxt::tx::Payload<types::CancelCandidateBondLess> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"cancel_candidate_bond_less",
						types::CancelCandidateBondLess {},
						[
							77u8, 45u8, 124u8, 162u8, 55u8, 171u8, 40u8, 192u8, 101u8, 96u8, 58u8,
							112u8, 9u8, 112u8, 72u8, 135u8, 200u8, 115u8, 103u8, 177u8, 152u8,
							185u8, 29u8, 8u8, 130u8, 208u8, 27u8, 74u8, 9u8, 57u8, 76u8, 71u8,
						],
					)
				}
				#[doc = "See [`Pallet::delegate`]."]
				pub fn delegate(
					&self,
					candidate: types::delegate::Candidate,
					amount: types::delegate::Amount,
					candidate_delegation_count: types::delegate::CandidateDelegationCount,
					delegation_count: types::delegate::DelegationCount,
				) -> ::subxt::tx::Payload<types::Delegate> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"delegate",
						types::Delegate {
							candidate,
							amount,
							candidate_delegation_count,
							delegation_count,
						},
						[
							216u8, 56u8, 144u8, 157u8, 99u8, 91u8, 101u8, 19u8, 17u8, 165u8, 97u8,
							153u8, 190u8, 223u8, 74u8, 74u8, 64u8, 244u8, 45u8, 11u8, 200u8, 218u8,
							188u8, 170u8, 210u8, 37u8, 181u8, 13u8, 22u8, 179u8, 69u8, 8u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_leave_delegators`]."]
				pub fn schedule_leave_delegators(
					&self,
				) -> ::subxt::tx::Payload<types::ScheduleLeaveDelegators> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"schedule_leave_delegators",
						types::ScheduleLeaveDelegators {},
						[
							79u8, 161u8, 131u8, 47u8, 146u8, 172u8, 95u8, 85u8, 146u8, 253u8,
							246u8, 33u8, 107u8, 164u8, 133u8, 129u8, 177u8, 168u8, 206u8, 138u8,
							77u8, 29u8, 48u8, 149u8, 246u8, 98u8, 213u8, 0u8, 42u8, 43u8, 60u8,
							36u8,
						],
					)
				}
				#[doc = "See [`Pallet::execute_leave_delegators`]."]
				pub fn execute_leave_delegators(
					&self,
					delegator: types::execute_leave_delegators::Delegator,
					delegation_count: types::execute_leave_delegators::DelegationCount,
				) -> ::subxt::tx::Payload<types::ExecuteLeaveDelegators> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"execute_leave_delegators",
						types::ExecuteLeaveDelegators { delegator, delegation_count },
						[
							14u8, 10u8, 145u8, 209u8, 165u8, 122u8, 126u8, 8u8, 147u8, 3u8, 33u8,
							50u8, 216u8, 207u8, 10u8, 197u8, 226u8, 239u8, 8u8, 138u8, 190u8,
							224u8, 223u8, 187u8, 92u8, 10u8, 39u8, 33u8, 100u8, 148u8, 118u8, 2u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_leave_delegators`]."]
				pub fn cancel_leave_delegators(
					&self,
				) -> ::subxt::tx::Payload<types::CancelLeaveDelegators> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"cancel_leave_delegators",
						types::CancelLeaveDelegators {},
						[
							141u8, 227u8, 180u8, 84u8, 53u8, 31u8, 19u8, 252u8, 189u8, 55u8, 65u8,
							115u8, 91u8, 199u8, 236u8, 74u8, 90u8, 45u8, 209u8, 218u8, 126u8,
							177u8, 228u8, 131u8, 93u8, 111u8, 39u8, 30u8, 131u8, 136u8, 0u8, 131u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_revoke_delegation`]."]
				pub fn schedule_revoke_delegation(
					&self,
					collator: types::schedule_revoke_delegation::Collator,
				) -> ::subxt::tx::Payload<types::ScheduleRevokeDelegation> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"schedule_revoke_delegation",
						types::ScheduleRevokeDelegation { collator },
						[
							101u8, 80u8, 54u8, 97u8, 53u8, 217u8, 22u8, 71u8, 170u8, 203u8, 249u8,
							136u8, 19u8, 182u8, 201u8, 232u8, 203u8, 163u8, 118u8, 230u8, 216u8,
							161u8, 209u8, 137u8, 133u8, 125u8, 11u8, 131u8, 29u8, 108u8, 186u8,
							232u8,
						],
					)
				}
				#[doc = "See [`Pallet::delegator_bond_more`]."]
				pub fn delegator_bond_more(
					&self,
					candidate: types::delegator_bond_more::Candidate,
					more: types::delegator_bond_more::More,
				) -> ::subxt::tx::Payload<types::DelegatorBondMore> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"delegator_bond_more",
						types::DelegatorBondMore { candidate, more },
						[
							113u8, 161u8, 241u8, 58u8, 199u8, 248u8, 157u8, 227u8, 82u8, 142u8,
							77u8, 34u8, 241u8, 173u8, 114u8, 25u8, 126u8, 241u8, 29u8, 167u8,
							247u8, 230u8, 205u8, 226u8, 146u8, 12u8, 108u8, 81u8, 27u8, 168u8, 2u8,
							208u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_delegator_bond_less`]."]
				pub fn schedule_delegator_bond_less(
					&self,
					candidate: types::schedule_delegator_bond_less::Candidate,
					less: types::schedule_delegator_bond_less::Less,
				) -> ::subxt::tx::Payload<types::ScheduleDelegatorBondLess> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"schedule_delegator_bond_less",
						types::ScheduleDelegatorBondLess { candidate, less },
						[
							46u8, 112u8, 48u8, 42u8, 21u8, 232u8, 158u8, 41u8, 97u8, 127u8, 232u8,
							198u8, 248u8, 195u8, 87u8, 50u8, 88u8, 24u8, 41u8, 187u8, 101u8, 216u8,
							162u8, 83u8, 255u8, 108u8, 186u8, 158u8, 58u8, 171u8, 194u8, 165u8,
						],
					)
				}
				#[doc = "See [`Pallet::execute_delegation_request`]."]
				pub fn execute_delegation_request(
					&self,
					delegator: types::execute_delegation_request::Delegator,
					candidate: types::execute_delegation_request::Candidate,
				) -> ::subxt::tx::Payload<types::ExecuteDelegationRequest> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"execute_delegation_request",
						types::ExecuteDelegationRequest { delegator, candidate },
						[
							106u8, 33u8, 195u8, 9u8, 68u8, 197u8, 244u8, 232u8, 47u8, 125u8, 151u8,
							62u8, 115u8, 72u8, 198u8, 168u8, 80u8, 237u8, 124u8, 188u8, 85u8,
							168u8, 235u8, 82u8, 53u8, 225u8, 152u8, 146u8, 168u8, 240u8, 40u8,
							110u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_delegation_request`]."]
				pub fn cancel_delegation_request(
					&self,
					candidate: types::cancel_delegation_request::Candidate,
				) -> ::subxt::tx::Payload<types::CancelDelegationRequest> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"cancel_delegation_request",
						types::CancelDelegationRequest { candidate },
						[
							114u8, 210u8, 191u8, 154u8, 189u8, 245u8, 169u8, 174u8, 1u8, 152u8,
							71u8, 209u8, 217u8, 175u8, 165u8, 89u8, 181u8, 214u8, 233u8, 101u8,
							202u8, 242u8, 164u8, 28u8, 71u8, 76u8, 32u8, 125u8, 21u8, 25u8, 186u8,
							191u8,
						],
					)
				}
				#[doc = "See [`Pallet::hotfix_remove_delegation_requests_exited_candidates`]."]
				pub fn hotfix_remove_delegation_requests_exited_candidates(
					&self,
					candidates : types :: hotfix_remove_delegation_requests_exited_candidates :: Candidates,
				) -> ::subxt::tx::Payload<types::HotfixRemoveDelegationRequestsExitedCandidates> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"hotfix_remove_delegation_requests_exited_candidates",
						types::HotfixRemoveDelegationRequestsExitedCandidates { candidates },
						[
							202u8, 221u8, 162u8, 111u8, 247u8, 83u8, 239u8, 18u8, 205u8, 11u8,
							211u8, 146u8, 35u8, 122u8, 145u8, 207u8, 202u8, 189u8, 213u8, 168u8,
							94u8, 225u8, 234u8, 67u8, 75u8, 216u8, 135u8, 3u8, 49u8, 41u8, 49u8,
							115u8,
						],
					)
				}
				#[doc = "See [`Pallet::hotfix_migrate_delegators_from_reserve_to_locks`]."]
				pub fn hotfix_migrate_delegators_from_reserve_to_locks(
					&self,
					delegators: types::hotfix_migrate_delegators_from_reserve_to_locks::Delegators,
				) -> ::subxt::tx::Payload<types::HotfixMigrateDelegatorsFromReserveToLocks> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"hotfix_migrate_delegators_from_reserve_to_locks",
						types::HotfixMigrateDelegatorsFromReserveToLocks { delegators },
						[
							243u8, 150u8, 190u8, 218u8, 96u8, 255u8, 166u8, 71u8, 224u8, 63u8,
							115u8, 140u8, 97u8, 142u8, 238u8, 99u8, 204u8, 239u8, 116u8, 199u8,
							89u8, 160u8, 61u8, 26u8, 31u8, 103u8, 199u8, 159u8, 53u8, 70u8, 61u8,
							9u8,
						],
					)
				}
				#[doc = "See [`Pallet::hotfix_migrate_collators_from_reserve_to_locks`]."]
				pub fn hotfix_migrate_collators_from_reserve_to_locks(
					&self,
					collators: types::hotfix_migrate_collators_from_reserve_to_locks::Collators,
				) -> ::subxt::tx::Payload<types::HotfixMigrateCollatorsFromReserveToLocks> {
					::subxt::tx::Payload::new_static(
						"ParachainStaking",
						"hotfix_migrate_collators_from_reserve_to_locks",
						types::HotfixMigrateCollatorsFromReserveToLocks { collators },
						[
							249u8, 187u8, 30u8, 148u8, 128u8, 114u8, 16u8, 77u8, 229u8, 61u8, 84u8,
							11u8, 52u8, 1u8, 161u8, 62u8, 210u8, 162u8, 121u8, 88u8, 135u8, 109u8,
							175u8, 92u8, 236u8, 158u8, 172u8, 20u8, 36u8, 246u8, 32u8, 90u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_parachain_staking::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Started new round."]
			pub struct NewRound {
				pub starting_block: new_round::StartingBlock,
				pub round: new_round::Round,
				pub selected_collators_number: new_round::SelectedCollatorsNumber,
				pub total_balance: new_round::TotalBalance,
			}
			pub mod new_round {
				use super::runtime_types;
				pub type StartingBlock = ::core::primitive::u32;
				pub type Round = ::core::primitive::u32;
				pub type SelectedCollatorsNumber = ::core::primitive::u32;
				pub type TotalBalance = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for NewRound {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "NewRound";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Account joined the set of collator candidates."]
			pub struct JoinedCollatorCandidates {
				pub account: joined_collator_candidates::Account,
				pub amount_locked: joined_collator_candidates::AmountLocked,
				pub new_total_amt_locked: joined_collator_candidates::NewTotalAmtLocked,
			}
			pub mod joined_collator_candidates {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type AmountLocked = ::core::primitive::u128;
				pub type NewTotalAmtLocked = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for JoinedCollatorCandidates {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "JoinedCollatorCandidates";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate selected for collators. Total Exposed Amount includes all delegations."]
			pub struct CollatorChosen {
				pub round: collator_chosen::Round,
				pub collator_account: collator_chosen::CollatorAccount,
				pub total_exposed_amount: collator_chosen::TotalExposedAmount,
			}
			pub mod collator_chosen {
				use super::runtime_types;
				pub type Round = ::core::primitive::u32;
				pub type CollatorAccount = ::subxt::utils::AccountId32;
				pub type TotalExposedAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for CollatorChosen {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CollatorChosen";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate requested to decrease a self bond."]
			pub struct CandidateBondLessRequested {
				pub candidate: candidate_bond_less_requested::Candidate,
				pub amount_to_decrease: candidate_bond_less_requested::AmountToDecrease,
				pub execute_round: candidate_bond_less_requested::ExecuteRound,
			}
			pub mod candidate_bond_less_requested {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type AmountToDecrease = ::core::primitive::u128;
				pub type ExecuteRound = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for CandidateBondLessRequested {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CandidateBondLessRequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate has increased a self bond."]
			pub struct CandidateBondedMore {
				pub candidate: candidate_bonded_more::Candidate,
				pub amount: candidate_bonded_more::Amount,
				pub new_total_bond: candidate_bonded_more::NewTotalBond,
			}
			pub mod candidate_bonded_more {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type NewTotalBond = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for CandidateBondedMore {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CandidateBondedMore";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate has decreased a self bond."]
			pub struct CandidateBondedLess {
				pub candidate: candidate_bonded_less::Candidate,
				pub amount: candidate_bonded_less::Amount,
				pub new_bond: candidate_bonded_less::NewBond,
			}
			pub mod candidate_bonded_less {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type NewBond = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for CandidateBondedLess {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CandidateBondedLess";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate temporarily leave the set of collator candidates without unbonding."]
			pub struct CandidateWentOffline {
				pub candidate: candidate_went_offline::Candidate,
			}
			pub mod candidate_went_offline {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CandidateWentOffline {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CandidateWentOffline";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate rejoins the set of collator candidates."]
			pub struct CandidateBackOnline {
				pub candidate: candidate_back_online::Candidate,
			}
			pub mod candidate_back_online {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CandidateBackOnline {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CandidateBackOnline";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate has requested to leave the set of candidates."]
			pub struct CandidateScheduledExit {
				pub exit_allowed_round: candidate_scheduled_exit::ExitAllowedRound,
				pub candidate: candidate_scheduled_exit::Candidate,
				pub scheduled_exit: candidate_scheduled_exit::ScheduledExit,
			}
			pub mod candidate_scheduled_exit {
				use super::runtime_types;
				pub type ExitAllowedRound = ::core::primitive::u32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type ScheduledExit = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for CandidateScheduledExit {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CandidateScheduledExit";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Cancelled request to leave the set of candidates."]
			pub struct CancelledCandidateExit {
				pub candidate: cancelled_candidate_exit::Candidate,
			}
			pub mod cancelled_candidate_exit {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CancelledCandidateExit {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CancelledCandidateExit";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Cancelled request to decrease candidate's bond."]
			pub struct CancelledCandidateBondLess {
				pub candidate: cancelled_candidate_bond_less::Candidate,
				pub amount: cancelled_candidate_bond_less::Amount,
				pub execute_round: cancelled_candidate_bond_less::ExecuteRound,
			}
			pub mod cancelled_candidate_bond_less {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type ExecuteRound = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for CancelledCandidateBondLess {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CancelledCandidateBondLess";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Candidate has left the set of candidates."]
			pub struct CandidateLeft {
				pub ex_candidate: candidate_left::ExCandidate,
				pub unlocked_amount: candidate_left::UnlockedAmount,
				pub new_total_amt_locked: candidate_left::NewTotalAmtLocked,
			}
			pub mod candidate_left {
				use super::runtime_types;
				pub type ExCandidate = ::subxt::utils::AccountId32;
				pub type UnlockedAmount = ::core::primitive::u128;
				pub type NewTotalAmtLocked = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for CandidateLeft {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CandidateLeft";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Delegator requested to decrease a bond for the collator candidate."]
			pub struct DelegationDecreaseScheduled {
				pub delegator: delegation_decrease_scheduled::Delegator,
				pub candidate: delegation_decrease_scheduled::Candidate,
				pub amount_to_decrease: delegation_decrease_scheduled::AmountToDecrease,
				pub execute_round: delegation_decrease_scheduled::ExecuteRound,
			}
			pub mod delegation_decrease_scheduled {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type AmountToDecrease = ::core::primitive::u128;
				pub type ExecuteRound = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for DelegationDecreaseScheduled {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegationDecreaseScheduled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegationIncreased {
				pub delegator: delegation_increased::Delegator,
				pub candidate: delegation_increased::Candidate,
				pub amount: delegation_increased::Amount,
				pub in_top: delegation_increased::InTop,
			}
			pub mod delegation_increased {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type InTop = ::core::primitive::bool;
			}
			impl ::subxt::events::StaticEvent for DelegationIncreased {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegationIncreased";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegationDecreased {
				pub delegator: delegation_decreased::Delegator,
				pub candidate: delegation_decreased::Candidate,
				pub amount: delegation_decreased::Amount,
				pub in_top: delegation_decreased::InTop,
			}
			pub mod delegation_decreased {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type InTop = ::core::primitive::bool;
			}
			impl ::subxt::events::StaticEvent for DelegationDecreased {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegationDecreased";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Delegator requested to leave the set of delegators."]
			pub struct DelegatorExitScheduled {
				pub round: delegator_exit_scheduled::Round,
				pub delegator: delegator_exit_scheduled::Delegator,
				pub scheduled_exit: delegator_exit_scheduled::ScheduledExit,
			}
			pub mod delegator_exit_scheduled {
				use super::runtime_types;
				pub type Round = ::core::primitive::u32;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type ScheduledExit = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for DelegatorExitScheduled {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegatorExitScheduled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Delegator requested to revoke delegation."]
			pub struct DelegationRevocationScheduled {
				pub round: delegation_revocation_scheduled::Round,
				pub delegator: delegation_revocation_scheduled::Delegator,
				pub candidate: delegation_revocation_scheduled::Candidate,
				pub scheduled_exit: delegation_revocation_scheduled::ScheduledExit,
			}
			pub mod delegation_revocation_scheduled {
				use super::runtime_types;
				pub type Round = ::core::primitive::u32;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type ScheduledExit = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for DelegationRevocationScheduled {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegationRevocationScheduled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Delegator has left the set of delegators."]
			pub struct DelegatorLeft {
				pub delegator: delegator_left::Delegator,
				pub unstaked_amount: delegator_left::UnstakedAmount,
			}
			pub mod delegator_left {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type UnstakedAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DelegatorLeft {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegatorLeft";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Delegation revoked."]
			pub struct DelegationRevoked {
				pub delegator: delegation_revoked::Delegator,
				pub candidate: delegation_revoked::Candidate,
				pub unstaked_amount: delegation_revoked::UnstakedAmount,
			}
			pub mod delegation_revoked {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type UnstakedAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DelegationRevoked {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegationRevoked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Delegation kicked."]
			pub struct DelegationKicked {
				pub delegator: delegation_kicked::Delegator,
				pub candidate: delegation_kicked::Candidate,
				pub unstaked_amount: delegation_kicked::UnstakedAmount,
			}
			pub mod delegation_kicked {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type UnstakedAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DelegationKicked {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegationKicked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Cancelled a pending request to exit the set of delegators."]
			pub struct DelegatorExitCancelled {
				pub delegator: delegator_exit_cancelled::Delegator,
			}
			pub mod delegator_exit_cancelled {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for DelegatorExitCancelled {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegatorExitCancelled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Cancelled request to change an existing delegation."]
			pub struct CancelledDelegationRequest {
				pub delegator: cancelled_delegation_request::Delegator,
				pub cancelled_request: cancelled_delegation_request::CancelledRequest,
				pub collator: cancelled_delegation_request::Collator,
			}
			pub mod cancelled_delegation_request {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type CancelledRequest = runtime_types :: tangle_parachain_staking :: delegation_requests :: CancelledScheduledRequest < :: core :: primitive :: u128 > ;
				pub type Collator = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CancelledDelegationRequest {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CancelledDelegationRequest";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "New delegation (increase of the existing one)."]
			pub struct Delegation {
				pub delegator: delegation::Delegator,
				pub locked_amount: delegation::LockedAmount,
				pub candidate: delegation::Candidate,
				pub delegator_position: delegation::DelegatorPosition,
			}
			pub mod delegation {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type LockedAmount = ::core::primitive::u128;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type DelegatorPosition =
					runtime_types::tangle_parachain_staking::types::DelegatorAdded<
						::core::primitive::u128,
					>;
			}
			impl ::subxt::events::StaticEvent for Delegation {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "Delegation";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Delegation from candidate state has been remove."]
			pub struct DelegatorLeftCandidate {
				pub delegator: delegator_left_candidate::Delegator,
				pub candidate: delegator_left_candidate::Candidate,
				pub unstaked_amount: delegator_left_candidate::UnstakedAmount,
				pub total_candidate_staked: delegator_left_candidate::TotalCandidateStaked,
			}
			pub mod delegator_left_candidate {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type UnstakedAmount = ::core::primitive::u128;
				pub type TotalCandidateStaked = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DelegatorLeftCandidate {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "DelegatorLeftCandidate";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Paid the account (delegator or collator) the balance as liquid rewards."]
			pub struct Rewarded {
				pub account: rewarded::Account,
				pub rewards: rewarded::Rewards,
			}
			pub mod rewarded {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type Rewards = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Rewarded {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "Rewarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Transferred to account which holds funds reserved for parachain bond."]
			pub struct ReservedForParachainBond {
				pub account: reserved_for_parachain_bond::Account,
				pub value: reserved_for_parachain_bond::Value,
			}
			pub mod reserved_for_parachain_bond {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type Value = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for ReservedForParachainBond {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "ReservedForParachainBond";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Account (re)set for parachain bond treasury."]
			pub struct ParachainBondAccountSet {
				pub old: parachain_bond_account_set::Old,
				pub new: parachain_bond_account_set::New,
			}
			pub mod parachain_bond_account_set {
				use super::runtime_types;
				pub type Old = ::subxt::utils::AccountId32;
				pub type New = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for ParachainBondAccountSet {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "ParachainBondAccountSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Percent of inflation reserved for parachain bond (re)set."]
			pub struct ParachainBondReservePercentSet {
				pub old: parachain_bond_reserve_percent_set::Old,
				pub new: parachain_bond_reserve_percent_set::New,
			}
			pub mod parachain_bond_reserve_percent_set {
				use super::runtime_types;
				pub type Old = runtime_types::sp_arithmetic::per_things::Percent;
				pub type New = runtime_types::sp_arithmetic::per_things::Percent;
			}
			impl ::subxt::events::StaticEvent for ParachainBondReservePercentSet {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "ParachainBondReservePercentSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"]
			pub struct InflationSet {
				pub annual_min: inflation_set::AnnualMin,
				pub annual_ideal: inflation_set::AnnualIdeal,
				pub annual_max: inflation_set::AnnualMax,
				pub round_min: inflation_set::RoundMin,
				pub round_ideal: inflation_set::RoundIdeal,
				pub round_max: inflation_set::RoundMax,
			}
			pub mod inflation_set {
				use super::runtime_types;
				pub type AnnualMin = runtime_types::sp_arithmetic::per_things::Perbill;
				pub type AnnualIdeal = runtime_types::sp_arithmetic::per_things::Perbill;
				pub type AnnualMax = runtime_types::sp_arithmetic::per_things::Perbill;
				pub type RoundMin = runtime_types::sp_arithmetic::per_things::Perbill;
				pub type RoundIdeal = runtime_types::sp_arithmetic::per_things::Perbill;
				pub type RoundMax = runtime_types::sp_arithmetic::per_things::Perbill;
			}
			impl ::subxt::events::StaticEvent for InflationSet {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "InflationSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Staking expectations set."]
			pub struct StakeExpectationsSet {
				pub expect_min: stake_expectations_set::ExpectMin,
				pub expect_ideal: stake_expectations_set::ExpectIdeal,
				pub expect_max: stake_expectations_set::ExpectMax,
			}
			pub mod stake_expectations_set {
				use super::runtime_types;
				pub type ExpectMin = ::core::primitive::u128;
				pub type ExpectIdeal = ::core::primitive::u128;
				pub type ExpectMax = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for StakeExpectationsSet {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "StakeExpectationsSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Set total selected candidates to this value."]
			pub struct TotalSelectedSet {
				pub old: total_selected_set::Old,
				pub new: total_selected_set::New,
			}
			pub mod total_selected_set {
				use super::runtime_types;
				pub type Old = ::core::primitive::u32;
				pub type New = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for TotalSelectedSet {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "TotalSelectedSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Set collator commission to this value."]
			pub struct CollatorCommissionSet {
				pub old: collator_commission_set::Old,
				pub new: collator_commission_set::New,
			}
			pub mod collator_commission_set {
				use super::runtime_types;
				pub type Old = runtime_types::sp_arithmetic::per_things::Perbill;
				pub type New = runtime_types::sp_arithmetic::per_things::Perbill;
			}
			impl ::subxt::events::StaticEvent for CollatorCommissionSet {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "CollatorCommissionSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Set blocks per round"]
			pub struct BlocksPerRoundSet {
				pub current_round: blocks_per_round_set::CurrentRound,
				pub first_block: blocks_per_round_set::FirstBlock,
				pub old: blocks_per_round_set::Old,
				pub new: blocks_per_round_set::New,
				pub new_per_round_inflation_min: blocks_per_round_set::NewPerRoundInflationMin,
				pub new_per_round_inflation_ideal: blocks_per_round_set::NewPerRoundInflationIdeal,
				pub new_per_round_inflation_max: blocks_per_round_set::NewPerRoundInflationMax,
			}
			pub mod blocks_per_round_set {
				use super::runtime_types;
				pub type CurrentRound = ::core::primitive::u32;
				pub type FirstBlock = ::core::primitive::u32;
				pub type Old = ::core::primitive::u32;
				pub type New = ::core::primitive::u32;
				pub type NewPerRoundInflationMin =
					runtime_types::sp_arithmetic::per_things::Perbill;
				pub type NewPerRoundInflationIdeal =
					runtime_types::sp_arithmetic::per_things::Perbill;
				pub type NewPerRoundInflationMax =
					runtime_types::sp_arithmetic::per_things::Perbill;
			}
			impl ::subxt::events::StaticEvent for BlocksPerRoundSet {
				const PALLET: &'static str = "ParachainStaking";
				const EVENT: &'static str = "BlocksPerRoundSet";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod collator_commission {
					use super::runtime_types;
					pub type CollatorCommission = runtime_types::sp_arithmetic::per_things::Perbill;
				}
				pub mod total_selected {
					use super::runtime_types;
					pub type TotalSelected = ::core::primitive::u32;
				}
				pub mod parachain_bond_info {
					use super::runtime_types;
					pub type ParachainBondInfo =
						runtime_types::tangle_parachain_staking::types::ParachainBondConfig<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>;
				}
				pub mod round {
					use super::runtime_types;
					pub type Round = runtime_types::tangle_parachain_staking::types::RoundInfo<
						::core::primitive::u32,
					>;
				}
				pub mod delegator_state {
					use super::runtime_types;
					pub type DelegatorState =
						runtime_types::tangle_parachain_staking::types::Delegator<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod candidate_info {
					use super::runtime_types;
					pub type CandidateInfo =
						runtime_types::tangle_parachain_staking::types::CandidateMetadata<
							::core::primitive::u128,
						>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod delegator_reserve_to_lock_migrations {
					use super::runtime_types;
					pub type DelegatorReserveToLockMigrations = ::core::primitive::bool;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod collator_reserve_to_lock_migrations {
					use super::runtime_types;
					pub type CollatorReserveToLockMigrations = ::core::primitive::bool;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod delegation_scheduled_requests {
					use super::runtime_types;
					pub type DelegationScheduledRequests = :: std :: vec :: Vec < runtime_types :: tangle_parachain_staking :: delegation_requests :: ScheduledRequest < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u128 > > ;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod top_delegations {
					use super::runtime_types;
					pub type TopDelegations =
						runtime_types::tangle_parachain_staking::types::Delegations<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod bottom_delegations {
					use super::runtime_types;
					pub type BottomDelegations =
						runtime_types::tangle_parachain_staking::types::Delegations<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod selected_candidates {
					use super::runtime_types;
					pub type SelectedCandidates = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				pub mod total {
					use super::runtime_types;
					pub type Total = ::core::primitive::u128;
				}
				pub mod candidate_pool {
					use super::runtime_types;
					pub type CandidatePool =
						runtime_types::tangle_parachain_staking::set::OrderedSet<
							runtime_types::tangle_parachain_staking::types::Bond<
								::subxt::utils::AccountId32,
								::core::primitive::u128,
							>,
						>;
				}
				pub mod at_stake {
					use super::runtime_types;
					pub type AtStake =
						runtime_types::tangle_parachain_staking::types::CollatorSnapshot<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = ::subxt::utils::AccountId32;
				}
				pub mod delayed_payouts {
					use super::runtime_types;
					pub type DelayedPayouts =
						runtime_types::tangle_parachain_staking::types::DelayedPayout<
							::core::primitive::u128,
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod staked {
					use super::runtime_types;
					pub type Staked = ::core::primitive::u128;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod inflation_config {
					use super::runtime_types;
					pub type InflationConfig =
						runtime_types::tangle_parachain_staking::inflation::InflationInfo<
							::core::primitive::u128,
						>;
				}
				pub mod points {
					use super::runtime_types;
					pub type Points = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod awarded_pts {
					use super::runtime_types;
					pub type AwardedPts = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Commission percent taken off of rewards for all collators"]
				pub fn collator_commission(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::collator_commission::CollatorCommission,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"CollatorCommission",
						vec![],
						[
							224u8, 174u8, 87u8, 155u8, 58u8, 228u8, 184u8, 141u8, 241u8, 63u8,
							115u8, 13u8, 105u8, 242u8, 194u8, 185u8, 226u8, 225u8, 225u8, 75u8,
							150u8, 118u8, 8u8, 15u8, 122u8, 144u8, 234u8, 202u8, 25u8, 200u8, 2u8,
							86u8,
						],
					)
				}
				#[doc = " The total candidates selected every round"]
				pub fn total_selected(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::total_selected::TotalSelected,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"TotalSelected",
						vec![],
						[
							197u8, 168u8, 229u8, 97u8, 69u8, 217u8, 117u8, 140u8, 226u8, 215u8,
							255u8, 171u8, 236u8, 171u8, 4u8, 253u8, 41u8, 59u8, 227u8, 237u8,
							198u8, 99u8, 4u8, 239u8, 60u8, 75u8, 41u8, 161u8, 28u8, 234u8, 255u8,
							127u8,
						],
					)
				}
				#[doc = " Parachain bond config info { account, percent_of_inflation }"]
				pub fn parachain_bond_info(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::parachain_bond_info::ParachainBondInfo,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"ParachainBondInfo",
						vec![],
						[
							69u8, 194u8, 194u8, 45u8, 126u8, 94u8, 184u8, 121u8, 0u8, 100u8, 200u8,
							198u8, 130u8, 194u8, 205u8, 147u8, 42u8, 124u8, 254u8, 116u8, 253u8,
							254u8, 27u8, 98u8, 106u8, 147u8, 89u8, 84u8, 27u8, 121u8, 143u8, 127u8,
						],
					)
				}
				#[doc = " Current round index and next round scheduled transition"]
				pub fn round(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::round::Round,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"Round",
						vec![],
						[
							63u8, 128u8, 229u8, 212u8, 121u8, 0u8, 188u8, 77u8, 121u8, 83u8, 235u8,
							70u8, 162u8, 37u8, 8u8, 204u8, 13u8, 238u8, 180u8, 145u8, 159u8, 106u8,
							183u8, 209u8, 119u8, 75u8, 68u8, 5u8, 144u8, 159u8, 201u8, 29u8,
						],
					)
				}
				#[doc = " Get delegator state associated with an account if account is delegating else None"]
				pub fn delegator_state_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_state::DelegatorState,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelegatorState",
						vec![],
						[
							254u8, 175u8, 197u8, 146u8, 51u8, 53u8, 225u8, 232u8, 47u8, 86u8,
							104u8, 221u8, 195u8, 208u8, 149u8, 112u8, 2u8, 191u8, 47u8, 139u8,
							27u8, 125u8, 172u8, 115u8, 199u8, 203u8, 114u8, 123u8, 90u8, 65u8,
							143u8, 159u8,
						],
					)
				}
				#[doc = " Get delegator state associated with an account if account is delegating else None"]
				pub fn delegator_state(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_state::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_state::DelegatorState,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelegatorState",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							254u8, 175u8, 197u8, 146u8, 51u8, 53u8, 225u8, 232u8, 47u8, 86u8,
							104u8, 221u8, 195u8, 208u8, 149u8, 112u8, 2u8, 191u8, 47u8, 139u8,
							27u8, 125u8, 172u8, 115u8, 199u8, 203u8, 114u8, 123u8, 90u8, 65u8,
							143u8, 159u8,
						],
					)
				}
				#[doc = " Get collator candidate info associated with an account if account is candidate else None"]
				pub fn candidate_info_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::candidate_info::CandidateInfo,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"CandidateInfo",
						vec![],
						[
							68u8, 190u8, 187u8, 249u8, 86u8, 46u8, 82u8, 203u8, 235u8, 117u8,
							151u8, 238u8, 14u8, 234u8, 189u8, 207u8, 40u8, 242u8, 254u8, 224u8,
							221u8, 216u8, 246u8, 103u8, 208u8, 113u8, 107u8, 97u8, 123u8, 204u8,
							59u8, 104u8,
						],
					)
				}
				#[doc = " Get collator candidate info associated with an account if account is candidate else None"]
				pub fn candidate_info(
					&self,
					_0: impl ::std::borrow::Borrow<types::candidate_info::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::candidate_info::CandidateInfo,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"CandidateInfo",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							68u8, 190u8, 187u8, 249u8, 86u8, 46u8, 82u8, 203u8, 235u8, 117u8,
							151u8, 238u8, 14u8, 234u8, 189u8, 207u8, 40u8, 242u8, 254u8, 224u8,
							221u8, 216u8, 246u8, 103u8, 208u8, 113u8, 107u8, 97u8, 123u8, 204u8,
							59u8, 104u8,
						],
					)
				}
				#[doc = " Temporary storage item to track whether a given delegator's reserve has been migrated."]
				pub fn delegator_reserve_to_lock_migrations_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_reserve_to_lock_migrations::DelegatorReserveToLockMigrations,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelegatorReserveToLockMigrations",
						vec![],
						[
							118u8, 196u8, 240u8, 236u8, 76u8, 202u8, 191u8, 254u8, 110u8, 86u8,
							141u8, 40u8, 205u8, 55u8, 49u8, 206u8, 110u8, 222u8, 183u8, 195u8,
							145u8, 125u8, 193u8, 110u8, 219u8, 109u8, 191u8, 75u8, 230u8, 222u8,
							135u8, 188u8,
						],
					)
				}
				#[doc = " Temporary storage item to track whether a given delegator's reserve has been migrated."]
				pub fn delegator_reserve_to_lock_migrations(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_reserve_to_lock_migrations::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_reserve_to_lock_migrations::DelegatorReserveToLockMigrations,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelegatorReserveToLockMigrations",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							118u8, 196u8, 240u8, 236u8, 76u8, 202u8, 191u8, 254u8, 110u8, 86u8,
							141u8, 40u8, 205u8, 55u8, 49u8, 206u8, 110u8, 222u8, 183u8, 195u8,
							145u8, 125u8, 193u8, 110u8, 219u8, 109u8, 191u8, 75u8, 230u8, 222u8,
							135u8, 188u8,
						],
					)
				}
				#[doc = " Temporary storage item to track whether a given collator's reserve has been migrated."]
				pub fn collator_reserve_to_lock_migrations_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::collator_reserve_to_lock_migrations::CollatorReserveToLockMigrations,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"CollatorReserveToLockMigrations",
						vec![],
						[
							162u8, 168u8, 114u8, 222u8, 227u8, 28u8, 73u8, 54u8, 79u8, 4u8, 141u8,
							178u8, 125u8, 9u8, 76u8, 120u8, 4u8, 237u8, 62u8, 120u8, 106u8, 109u8,
							108u8, 240u8, 101u8, 28u8, 25u8, 122u8, 30u8, 116u8, 199u8, 192u8,
						],
					)
				}
				#[doc = " Temporary storage item to track whether a given collator's reserve has been migrated."]
				pub fn collator_reserve_to_lock_migrations(
					&self,
					_0: impl ::std::borrow::Borrow<types::collator_reserve_to_lock_migrations::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::collator_reserve_to_lock_migrations::CollatorReserveToLockMigrations,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"CollatorReserveToLockMigrations",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							162u8, 168u8, 114u8, 222u8, 227u8, 28u8, 73u8, 54u8, 79u8, 4u8, 141u8,
							178u8, 125u8, 9u8, 76u8, 120u8, 4u8, 237u8, 62u8, 120u8, 106u8, 109u8,
							108u8, 240u8, 101u8, 28u8, 25u8, 122u8, 30u8, 116u8, 199u8, 192u8,
						],
					)
				}
				#[doc = " Stores outstanding delegation requests per collator."]
				pub fn delegation_scheduled_requests_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegation_scheduled_requests::DelegationScheduledRequests,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelegationScheduledRequests",
						vec![],
						[
							94u8, 166u8, 31u8, 239u8, 1u8, 216u8, 142u8, 247u8, 224u8, 140u8, 11u8,
							117u8, 69u8, 83u8, 235u8, 164u8, 106u8, 63u8, 21u8, 96u8, 2u8, 105u8,
							222u8, 249u8, 216u8, 125u8, 54u8, 229u8, 163u8, 238u8, 139u8, 9u8,
						],
					)
				}
				#[doc = " Stores outstanding delegation requests per collator."]
				pub fn delegation_scheduled_requests(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegation_scheduled_requests::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegation_scheduled_requests::DelegationScheduledRequests,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelegationScheduledRequests",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							94u8, 166u8, 31u8, 239u8, 1u8, 216u8, 142u8, 247u8, 224u8, 140u8, 11u8,
							117u8, 69u8, 83u8, 235u8, 164u8, 106u8, 63u8, 21u8, 96u8, 2u8, 105u8,
							222u8, 249u8, 216u8, 125u8, 54u8, 229u8, 163u8, 238u8, 139u8, 9u8,
						],
					)
				}
				#[doc = " Top delegations for collator candidate"]
				pub fn top_delegations_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::top_delegations::TopDelegations,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"TopDelegations",
						vec![],
						[
							239u8, 42u8, 22u8, 136u8, 150u8, 96u8, 97u8, 161u8, 29u8, 165u8, 31u8,
							132u8, 114u8, 182u8, 67u8, 37u8, 138u8, 5u8, 23u8, 151u8, 105u8, 133u8,
							238u8, 114u8, 29u8, 9u8, 51u8, 243u8, 242u8, 191u8, 88u8, 25u8,
						],
					)
				}
				#[doc = " Top delegations for collator candidate"]
				pub fn top_delegations(
					&self,
					_0: impl ::std::borrow::Borrow<types::top_delegations::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::top_delegations::TopDelegations,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"TopDelegations",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							239u8, 42u8, 22u8, 136u8, 150u8, 96u8, 97u8, 161u8, 29u8, 165u8, 31u8,
							132u8, 114u8, 182u8, 67u8, 37u8, 138u8, 5u8, 23u8, 151u8, 105u8, 133u8,
							238u8, 114u8, 29u8, 9u8, 51u8, 243u8, 242u8, 191u8, 88u8, 25u8,
						],
					)
				}
				#[doc = " Bottom delegations for collator candidate"]
				pub fn bottom_delegations_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bottom_delegations::BottomDelegations,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"BottomDelegations",
						vec![],
						[
							116u8, 255u8, 235u8, 118u8, 26u8, 73u8, 96u8, 198u8, 237u8, 50u8, 63u8,
							37u8, 80u8, 151u8, 171u8, 189u8, 37u8, 2u8, 168u8, 92u8, 216u8, 124u8,
							167u8, 35u8, 186u8, 190u8, 146u8, 65u8, 102u8, 28u8, 30u8, 181u8,
						],
					)
				}
				#[doc = " Bottom delegations for collator candidate"]
				pub fn bottom_delegations(
					&self,
					_0: impl ::std::borrow::Borrow<types::bottom_delegations::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bottom_delegations::BottomDelegations,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"BottomDelegations",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							116u8, 255u8, 235u8, 118u8, 26u8, 73u8, 96u8, 198u8, 237u8, 50u8, 63u8,
							37u8, 80u8, 151u8, 171u8, 189u8, 37u8, 2u8, 168u8, 92u8, 216u8, 124u8,
							167u8, 35u8, 186u8, 190u8, 146u8, 65u8, 102u8, 28u8, 30u8, 181u8,
						],
					)
				}
				#[doc = " The collator candidates selected for the current round"]
				pub fn selected_candidates(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::selected_candidates::SelectedCandidates,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"SelectedCandidates",
						vec![],
						[
							216u8, 59u8, 28u8, 40u8, 24u8, 74u8, 18u8, 18u8, 178u8, 200u8, 212u8,
							2u8, 157u8, 176u8, 237u8, 183u8, 21u8, 95u8, 157u8, 201u8, 158u8, 53u8,
							224u8, 5u8, 171u8, 113u8, 93u8, 252u8, 81u8, 78u8, 108u8, 80u8,
						],
					)
				}
				#[doc = " Total capital locked by this staking pallet"]
				pub fn total(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::total::Total,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"Total",
						vec![],
						[
							188u8, 31u8, 219u8, 189u8, 49u8, 213u8, 203u8, 89u8, 125u8, 58u8,
							232u8, 159u8, 131u8, 155u8, 166u8, 113u8, 99u8, 24u8, 40u8, 242u8,
							118u8, 183u8, 108u8, 230u8, 135u8, 150u8, 84u8, 86u8, 118u8, 91u8,
							168u8, 62u8,
						],
					)
				}
				#[doc = " The pool of collator candidates, each with their total backing stake"]
				pub fn candidate_pool(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::candidate_pool::CandidatePool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"CandidatePool",
						vec![],
						[
							156u8, 77u8, 37u8, 146u8, 227u8, 181u8, 108u8, 27u8, 20u8, 26u8, 204u8,
							81u8, 201u8, 244u8, 96u8, 163u8, 164u8, 75u8, 19u8, 225u8, 10u8, 76u8,
							228u8, 32u8, 3u8, 212u8, 138u8, 176u8, 179u8, 18u8, 178u8, 34u8,
						],
					)
				}
				#[doc = " Snapshot of collator delegation stake at the start of the round"]
				pub fn at_stake_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::at_stake::AtStake,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"AtStake",
						vec![],
						[
							158u8, 149u8, 159u8, 106u8, 51u8, 34u8, 53u8, 227u8, 82u8, 251u8, 18u8,
							48u8, 170u8, 103u8, 18u8, 136u8, 183u8, 50u8, 10u8, 91u8, 250u8, 226u8,
							57u8, 173u8, 144u8, 32u8, 156u8, 188u8, 180u8, 61u8, 74u8, 13u8,
						],
					)
				}
				#[doc = " Snapshot of collator delegation stake at the start of the round"]
				pub fn at_stake_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::at_stake::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::at_stake::AtStake,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"AtStake",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							158u8, 149u8, 159u8, 106u8, 51u8, 34u8, 53u8, 227u8, 82u8, 251u8, 18u8,
							48u8, 170u8, 103u8, 18u8, 136u8, 183u8, 50u8, 10u8, 91u8, 250u8, 226u8,
							57u8, 173u8, 144u8, 32u8, 156u8, 188u8, 180u8, 61u8, 74u8, 13u8,
						],
					)
				}
				#[doc = " Snapshot of collator delegation stake at the start of the round"]
				pub fn at_stake(
					&self,
					_0: impl ::std::borrow::Borrow<types::at_stake::Param0>,
					_1: impl ::std::borrow::Borrow<types::at_stake::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::at_stake::AtStake,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"AtStake",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							158u8, 149u8, 159u8, 106u8, 51u8, 34u8, 53u8, 227u8, 82u8, 251u8, 18u8,
							48u8, 170u8, 103u8, 18u8, 136u8, 183u8, 50u8, 10u8, 91u8, 250u8, 226u8,
							57u8, 173u8, 144u8, 32u8, 156u8, 188u8, 180u8, 61u8, 74u8, 13u8,
						],
					)
				}
				#[doc = " Delayed payouts"]
				pub fn delayed_payouts_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delayed_payouts::DelayedPayouts,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelayedPayouts",
						vec![],
						[
							160u8, 16u8, 120u8, 191u8, 50u8, 29u8, 157u8, 223u8, 25u8, 227u8,
							253u8, 126u8, 213u8, 142u8, 188u8, 212u8, 27u8, 91u8, 19u8, 158u8,
							172u8, 4u8, 10u8, 160u8, 175u8, 204u8, 229u8, 230u8, 181u8, 74u8, 11u8,
							144u8,
						],
					)
				}
				#[doc = " Delayed payouts"]
				pub fn delayed_payouts(
					&self,
					_0: impl ::std::borrow::Borrow<types::delayed_payouts::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delayed_payouts::DelayedPayouts,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"DelayedPayouts",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							160u8, 16u8, 120u8, 191u8, 50u8, 29u8, 157u8, 223u8, 25u8, 227u8,
							253u8, 126u8, 213u8, 142u8, 188u8, 212u8, 27u8, 91u8, 19u8, 158u8,
							172u8, 4u8, 10u8, 160u8, 175u8, 204u8, 229u8, 230u8, 181u8, 74u8, 11u8,
							144u8,
						],
					)
				}
				#[doc = " Total counted stake for selected candidates in the round"]
				pub fn staked_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::staked::Staked,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"Staked",
						vec![],
						[
							245u8, 200u8, 139u8, 234u8, 94u8, 128u8, 236u8, 14u8, 251u8, 213u8,
							2u8, 196u8, 227u8, 90u8, 26u8, 108u8, 73u8, 133u8, 18u8, 234u8, 84u8,
							30u8, 19u8, 85u8, 81u8, 252u8, 189u8, 83u8, 186u8, 3u8, 29u8, 61u8,
						],
					)
				}
				#[doc = " Total counted stake for selected candidates in the round"]
				pub fn staked(
					&self,
					_0: impl ::std::borrow::Borrow<types::staked::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::staked::Staked,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"Staked",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							245u8, 200u8, 139u8, 234u8, 94u8, 128u8, 236u8, 14u8, 251u8, 213u8,
							2u8, 196u8, 227u8, 90u8, 26u8, 108u8, 73u8, 133u8, 18u8, 234u8, 84u8,
							30u8, 19u8, 85u8, 81u8, 252u8, 189u8, 83u8, 186u8, 3u8, 29u8, 61u8,
						],
					)
				}
				#[doc = " Inflation configuration"]
				pub fn inflation_config(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::inflation_config::InflationConfig,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"InflationConfig",
						vec![],
						[
							249u8, 22u8, 47u8, 245u8, 35u8, 169u8, 245u8, 14u8, 247u8, 117u8,
							133u8, 93u8, 46u8, 250u8, 148u8, 76u8, 251u8, 137u8, 84u8, 168u8, 16u8,
							98u8, 6u8, 218u8, 24u8, 241u8, 163u8, 213u8, 44u8, 31u8, 190u8, 86u8,
						],
					)
				}
				#[doc = " Total points awarded to collators for block production in the round"]
				pub fn points_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::points::Points,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"Points",
						vec![],
						[
							72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
							117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
							192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
						],
					)
				}
				#[doc = " Total points awarded to collators for block production in the round"]
				pub fn points(
					&self,
					_0: impl ::std::borrow::Borrow<types::points::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::points::Points,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"Points",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
							117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
							192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
						],
					)
				}
				#[doc = " Points for each collator per round"]
				pub fn awarded_pts_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::awarded_pts::AwardedPts,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"AwardedPts",
						vec![],
						[
							145u8, 114u8, 240u8, 17u8, 179u8, 220u8, 151u8, 211u8, 29u8, 127u8,
							16u8, 243u8, 102u8, 113u8, 141u8, 19u8, 171u8, 224u8, 219u8, 89u8,
							26u8, 84u8, 86u8, 177u8, 129u8, 127u8, 247u8, 238u8, 114u8, 182u8,
							125u8, 29u8,
						],
					)
				}
				#[doc = " Points for each collator per round"]
				pub fn awarded_pts_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::awarded_pts::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::awarded_pts::AwardedPts,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"AwardedPts",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							145u8, 114u8, 240u8, 17u8, 179u8, 220u8, 151u8, 211u8, 29u8, 127u8,
							16u8, 243u8, 102u8, 113u8, 141u8, 19u8, 171u8, 224u8, 219u8, 89u8,
							26u8, 84u8, 86u8, 177u8, 129u8, 127u8, 247u8, 238u8, 114u8, 182u8,
							125u8, 29u8,
						],
					)
				}
				#[doc = " Points for each collator per round"]
				pub fn awarded_pts(
					&self,
					_0: impl ::std::borrow::Borrow<types::awarded_pts::Param0>,
					_1: impl ::std::borrow::Borrow<types::awarded_pts::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::awarded_pts::AwardedPts,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ParachainStaking",
						"AwardedPts",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							145u8, 114u8, 240u8, 17u8, 179u8, 220u8, 151u8, 211u8, 29u8, 127u8,
							16u8, 243u8, 102u8, 113u8, 141u8, 19u8, 171u8, 224u8, 219u8, 89u8,
							26u8, 84u8, 86u8, 177u8, 129u8, 127u8, 247u8, 238u8, 114u8, 182u8,
							125u8, 29u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Minimum number of blocks per round"]
				pub fn min_blocks_per_round(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MinBlocksPerRound",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Default number of blocks per round at genesis"]
				pub fn default_blocks_per_round(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"DefaultBlocksPerRound",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of rounds that candidates remain bonded before exit request is executable"]
				pub fn leave_candidates_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"LeaveCandidatesDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of rounds candidate requests to decrease self-bond must wait to be executable"]
				pub fn candidate_bond_less_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"CandidateBondLessDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of rounds that delegators remain bonded before exit request is executable"]
				pub fn leave_delegators_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"LeaveDelegatorsDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of rounds that delegations remain bonded before revocation request is executable"]
				pub fn revoke_delegation_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"RevokeDelegationDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of rounds that delegation less requests must wait before executable"]
				pub fn delegation_bond_less_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"DelegationBondLessDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of rounds after which block authors are rewarded"]
				pub fn reward_payment_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"RewardPaymentDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Minimum number of selected candidates every round"]
				pub fn min_selected_candidates(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MinSelectedCandidates",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum top delegations counted per candidate"]
				pub fn max_top_delegations_per_candidate(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MaxTopDelegationsPerCandidate",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum bottom delegations (not counted) per candidate"]
				pub fn max_bottom_delegations_per_candidate(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MaxBottomDelegationsPerCandidate",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum delegations per delegator"]
				pub fn max_delegations_per_delegator(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MaxDelegationsPerDelegator",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Default commission due to collators, is `CollatorCommission` storage value in genesis"]
				pub fn default_collator_commission(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Perbill>
				{
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"DefaultCollatorCommission",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " Default percent of inflation set aside for parachain bond account"]
				pub fn default_parachain_bond_reserve_percent(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Percent>
				{
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"DefaultParachainBondReservePercent",
						[
							40u8, 171u8, 69u8, 196u8, 34u8, 184u8, 50u8, 128u8, 139u8, 192u8, 63u8,
							231u8, 249u8, 200u8, 252u8, 73u8, 244u8, 170u8, 51u8, 177u8, 106u8,
							47u8, 114u8, 234u8, 84u8, 104u8, 62u8, 118u8, 227u8, 50u8, 225u8,
							122u8,
						],
					)
				}
				#[doc = " Minimum stake required for any candidate to be in `SelectedCandidates` for the round"]
				pub fn min_collator_stk(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MinCollatorStk",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Minimum stake required for any account to be a collator candidate"]
				pub fn min_candidate_stk(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MinCandidateStk",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Minimum stake for any registered on-chain account to delegate"]
				pub fn min_delegation(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MinDelegation",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Minimum stake for any registered on-chain account to be a delegator"]
				pub fn min_delegator_stk(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"MinDelegatorStk",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Allow inflation or not"]
				pub fn allow_inflation(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::bool> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"AllowInflation",
						[
							165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
							252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
							100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
						],
					)
				}
				#[doc = " Fix payment in one round if no inflation"]
				pub fn payment_in_round(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"PaymentInRound",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Invulnables to migrate"]
				pub fn to_migrate_invulnables(
					&self,
				) -> ::subxt::constants::Address<::std::vec::Vec<::subxt::utils::AccountId32>> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"ToMigrateInvulnables",
						[
							159u8, 243u8, 198u8, 79u8, 81u8, 7u8, 128u8, 181u8, 126u8, 45u8, 15u8,
							106u8, 164u8, 241u8, 117u8, 238u8, 10u8, 136u8, 214u8, 198u8, 211u8,
							251u8, 200u8, 221u8, 44u8, 25u8, 38u8, 104u8, 22u8, 78u8, 231u8, 193u8,
						],
					)
				}
				#[doc = " Invulnables init stake"]
				pub fn init_seed_stk(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"InitSeedStk",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " PalletId"]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"ParachainStaking",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
			}
		}
	}
	pub mod democracy {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_democracy::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_democracy::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::propose`]."]
				pub struct Propose {
					pub proposal: propose::Proposal,
					#[codec(compact)]
					pub value: propose::Value,
				}
				pub mod propose {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::tangle_kusama_runtime::RuntimeCall,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Propose {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "propose";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::second`]."]
				pub struct Second {
					#[codec(compact)]
					pub proposal: second::Proposal,
				}
				pub mod second {
					use super::runtime_types;
					pub type Proposal = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Second {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "second";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::vote`]."]
				pub struct Vote {
					#[codec(compact)]
					pub ref_index: vote::RefIndex,
					pub vote: vote::Vote,
				}
				pub mod vote {
					use super::runtime_types;
					pub type RefIndex = ::core::primitive::u32;
					pub type Vote =
						runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::emergency_cancel`]."]
				pub struct EmergencyCancel {
					pub ref_index: emergency_cancel::RefIndex,
				}
				pub mod emergency_cancel {
					use super::runtime_types;
					pub type RefIndex = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for EmergencyCancel {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "emergency_cancel";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::external_propose`]."]
				pub struct ExternalPropose {
					pub proposal: external_propose::Proposal,
				}
				pub mod external_propose {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::tangle_kusama_runtime::RuntimeCall,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExternalPropose {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "external_propose";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::external_propose_majority`]."]
				pub struct ExternalProposeMajority {
					pub proposal: external_propose_majority::Proposal,
				}
				pub mod external_propose_majority {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::tangle_kusama_runtime::RuntimeCall,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExternalProposeMajority {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "external_propose_majority";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::external_propose_default`]."]
				pub struct ExternalProposeDefault {
					pub proposal: external_propose_default::Proposal,
				}
				pub mod external_propose_default {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::tangle_kusama_runtime::RuntimeCall,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExternalProposeDefault {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "external_propose_default";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::fast_track`]."]
				pub struct FastTrack {
					pub proposal_hash: fast_track::ProposalHash,
					pub voting_period: fast_track::VotingPeriod,
					pub delay: fast_track::Delay,
				}
				pub mod fast_track {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::utils::H256;
					pub type VotingPeriod = ::core::primitive::u32;
					pub type Delay = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for FastTrack {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "fast_track";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::veto_external`]."]
				pub struct VetoExternal {
					pub proposal_hash: veto_external::ProposalHash,
				}
				pub mod veto_external {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for VetoExternal {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "veto_external";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_referendum`]."]
				pub struct CancelReferendum {
					#[codec(compact)]
					pub ref_index: cancel_referendum::RefIndex,
				}
				pub mod cancel_referendum {
					use super::runtime_types;
					pub type RefIndex = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CancelReferendum {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "cancel_referendum";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::delegate`]."]
				pub struct Delegate {
					pub to: delegate::To,
					pub conviction: delegate::Conviction,
					pub balance: delegate::Balance,
				}
				pub mod delegate {
					use super::runtime_types;
					pub type To = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Conviction = runtime_types::pallet_democracy::conviction::Conviction;
					pub type Balance = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Delegate {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "delegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::undelegate`]."]
				pub struct Undelegate;
				impl ::subxt::blocks::StaticExtrinsic for Undelegate {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "undelegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::clear_public_proposals`]."]
				pub struct ClearPublicProposals;
				impl ::subxt::blocks::StaticExtrinsic for ClearPublicProposals {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "clear_public_proposals";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unlock`]."]
				pub struct Unlock {
					pub target: unlock::Target,
				}
				pub mod unlock {
					use super::runtime_types;
					pub type Target = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Unlock {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "unlock";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_vote`]."]
				pub struct RemoveVote {
					pub index: remove_vote::Index,
				}
				pub mod remove_vote {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveVote {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "remove_vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_other_vote`]."]
				pub struct RemoveOtherVote {
					pub target: remove_other_vote::Target,
					pub index: remove_other_vote::Index,
				}
				pub mod remove_other_vote {
					use super::runtime_types;
					pub type Target = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveOtherVote {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "remove_other_vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::blacklist`]."]
				pub struct Blacklist {
					pub proposal_hash: blacklist::ProposalHash,
					pub maybe_ref_index: blacklist::MaybeRefIndex,
				}
				pub mod blacklist {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::utils::H256;
					pub type MaybeRefIndex = ::core::option::Option<::core::primitive::u32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Blacklist {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "blacklist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_proposal`]."]
				pub struct CancelProposal {
					#[codec(compact)]
					pub prop_index: cancel_proposal::PropIndex,
				}
				pub mod cancel_proposal {
					use super::runtime_types;
					pub type PropIndex = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CancelProposal {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "cancel_proposal";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_metadata`]."]
				pub struct SetMetadata {
					pub owner: set_metadata::Owner,
					pub maybe_hash: set_metadata::MaybeHash,
				}
				pub mod set_metadata {
					use super::runtime_types;
					pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
					pub type MaybeHash = ::core::option::Option<::subxt::utils::H256>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "set_metadata";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::propose`]."]
				pub fn propose(
					&self,
					proposal: types::propose::Proposal,
					value: types::propose::Value,
				) -> ::subxt::tx::Payload<types::Propose> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"propose",
						types::Propose { proposal, value },
						[
							164u8, 45u8, 183u8, 137u8, 222u8, 27u8, 138u8, 45u8, 20u8, 18u8, 234u8,
							211u8, 52u8, 184u8, 234u8, 222u8, 193u8, 9u8, 160u8, 58u8, 198u8,
							106u8, 236u8, 210u8, 172u8, 34u8, 194u8, 107u8, 135u8, 83u8, 22u8,
							238u8,
						],
					)
				}
				#[doc = "See [`Pallet::second`]."]
				pub fn second(
					&self,
					proposal: types::second::Proposal,
				) -> ::subxt::tx::Payload<types::Second> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"second",
						types::Second { proposal },
						[
							195u8, 55u8, 178u8, 55u8, 129u8, 64u8, 10u8, 131u8, 217u8, 79u8, 1u8,
							187u8, 73u8, 126u8, 191u8, 221u8, 110u8, 10u8, 13u8, 65u8, 190u8,
							107u8, 21u8, 236u8, 175u8, 130u8, 227u8, 179u8, 173u8, 39u8, 32u8,
							147u8,
						],
					)
				}
				#[doc = "See [`Pallet::vote`]."]
				pub fn vote(
					&self,
					ref_index: types::vote::RefIndex,
					vote: types::vote::Vote,
				) -> ::subxt::tx::Payload<types::Vote> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"vote",
						types::Vote { ref_index, vote },
						[
							106u8, 195u8, 229u8, 44u8, 217u8, 214u8, 8u8, 234u8, 175u8, 62u8, 97u8,
							83u8, 193u8, 180u8, 103u8, 26u8, 174u8, 8u8, 2u8, 158u8, 25u8, 122u8,
							203u8, 122u8, 32u8, 14u8, 107u8, 169u8, 43u8, 240u8, 143u8, 103u8,
						],
					)
				}
				#[doc = "See [`Pallet::emergency_cancel`]."]
				pub fn emergency_cancel(
					&self,
					ref_index: types::emergency_cancel::RefIndex,
				) -> ::subxt::tx::Payload<types::EmergencyCancel> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"emergency_cancel",
						types::EmergencyCancel { ref_index },
						[
							82u8, 232u8, 19u8, 158u8, 88u8, 69u8, 96u8, 225u8, 106u8, 253u8, 6u8,
							136u8, 87u8, 0u8, 68u8, 128u8, 122u8, 16u8, 107u8, 76u8, 209u8, 14u8,
							230u8, 49u8, 228u8, 100u8, 187u8, 10u8, 76u8, 71u8, 197u8, 72u8,
						],
					)
				}
				#[doc = "See [`Pallet::external_propose`]."]
				pub fn external_propose(
					&self,
					proposal: types::external_propose::Proposal,
				) -> ::subxt::tx::Payload<types::ExternalPropose> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"external_propose",
						types::ExternalPropose { proposal },
						[
							99u8, 120u8, 61u8, 124u8, 244u8, 68u8, 12u8, 240u8, 11u8, 168u8, 4u8,
							50u8, 19u8, 152u8, 255u8, 97u8, 20u8, 195u8, 141u8, 199u8, 31u8, 250u8,
							222u8, 136u8, 47u8, 162u8, 0u8, 32u8, 215u8, 110u8, 94u8, 109u8,
						],
					)
				}
				#[doc = "See [`Pallet::external_propose_majority`]."]
				pub fn external_propose_majority(
					&self,
					proposal: types::external_propose_majority::Proposal,
				) -> ::subxt::tx::Payload<types::ExternalProposeMajority> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"external_propose_majority",
						types::ExternalProposeMajority { proposal },
						[
							35u8, 61u8, 130u8, 81u8, 81u8, 180u8, 127u8, 202u8, 67u8, 84u8, 105u8,
							113u8, 112u8, 210u8, 1u8, 191u8, 10u8, 39u8, 157u8, 164u8, 9u8, 231u8,
							75u8, 25u8, 17u8, 175u8, 128u8, 180u8, 238u8, 58u8, 236u8, 214u8,
						],
					)
				}
				#[doc = "See [`Pallet::external_propose_default`]."]
				pub fn external_propose_default(
					&self,
					proposal: types::external_propose_default::Proposal,
				) -> ::subxt::tx::Payload<types::ExternalProposeDefault> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"external_propose_default",
						types::ExternalProposeDefault { proposal },
						[
							136u8, 199u8, 244u8, 69u8, 5u8, 174u8, 166u8, 251u8, 102u8, 196u8,
							25u8, 6u8, 33u8, 216u8, 141u8, 78u8, 118u8, 125u8, 128u8, 218u8, 120u8,
							170u8, 166u8, 15u8, 124u8, 216u8, 128u8, 178u8, 5u8, 74u8, 170u8, 25u8,
						],
					)
				}
				#[doc = "See [`Pallet::fast_track`]."]
				pub fn fast_track(
					&self,
					proposal_hash: types::fast_track::ProposalHash,
					voting_period: types::fast_track::VotingPeriod,
					delay: types::fast_track::Delay,
				) -> ::subxt::tx::Payload<types::FastTrack> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"fast_track",
						types::FastTrack { proposal_hash, voting_period, delay },
						[
							96u8, 201u8, 216u8, 109u8, 4u8, 244u8, 52u8, 237u8, 120u8, 234u8, 30u8,
							102u8, 186u8, 132u8, 214u8, 22u8, 40u8, 75u8, 118u8, 23u8, 56u8, 68u8,
							192u8, 129u8, 74u8, 61u8, 247u8, 98u8, 103u8, 127u8, 200u8, 171u8,
						],
					)
				}
				#[doc = "See [`Pallet::veto_external`]."]
				pub fn veto_external(
					&self,
					proposal_hash: types::veto_external::ProposalHash,
				) -> ::subxt::tx::Payload<types::VetoExternal> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"veto_external",
						types::VetoExternal { proposal_hash },
						[
							121u8, 217u8, 249u8, 134u8, 45u8, 19u8, 126u8, 166u8, 218u8, 223u8,
							165u8, 124u8, 162u8, 59u8, 56u8, 200u8, 227u8, 125u8, 23u8, 133u8,
							196u8, 93u8, 210u8, 15u8, 39u8, 26u8, 58u8, 236u8, 9u8, 101u8, 202u8,
							168u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_referendum`]."]
				pub fn cancel_referendum(
					&self,
					ref_index: types::cancel_referendum::RefIndex,
				) -> ::subxt::tx::Payload<types::CancelReferendum> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"cancel_referendum",
						types::CancelReferendum { ref_index },
						[
							149u8, 120u8, 70u8, 20u8, 126u8, 21u8, 30u8, 33u8, 82u8, 124u8, 229u8,
							179u8, 169u8, 243u8, 173u8, 146u8, 140u8, 22u8, 124u8, 154u8, 228u8,
							117u8, 109u8, 88u8, 11u8, 100u8, 235u8, 243u8, 118u8, 99u8, 250u8,
							140u8,
						],
					)
				}
				#[doc = "See [`Pallet::delegate`]."]
				pub fn delegate(
					&self,
					to: types::delegate::To,
					conviction: types::delegate::Conviction,
					balance: types::delegate::Balance,
				) -> ::subxt::tx::Payload<types::Delegate> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"delegate",
						types::Delegate { to, conviction, balance },
						[
							98u8, 204u8, 103u8, 220u8, 240u8, 72u8, 17u8, 89u8, 31u8, 234u8, 53u8,
							234u8, 85u8, 150u8, 42u8, 130u8, 14u8, 164u8, 148u8, 103u8, 199u8,
							230u8, 119u8, 192u8, 95u8, 200u8, 10u8, 214u8, 48u8, 252u8, 64u8, 45u8,
						],
					)
				}
				#[doc = "See [`Pallet::undelegate`]."]
				pub fn undelegate(&self) -> ::subxt::tx::Payload<types::Undelegate> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"undelegate",
						types::Undelegate {},
						[
							225u8, 156u8, 102u8, 1u8, 172u8, 145u8, 88u8, 12u8, 89u8, 32u8, 51u8,
							83u8, 25u8, 149u8, 132u8, 203u8, 246u8, 98u8, 155u8, 36u8, 165u8,
							206u8, 233u8, 169u8, 91u8, 85u8, 105u8, 67u8, 46u8, 134u8, 244u8,
							250u8,
						],
					)
				}
				#[doc = "See [`Pallet::clear_public_proposals`]."]
				pub fn clear_public_proposals(
					&self,
				) -> ::subxt::tx::Payload<types::ClearPublicProposals> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"clear_public_proposals",
						types::ClearPublicProposals {},
						[
							116u8, 160u8, 246u8, 216u8, 23u8, 188u8, 144u8, 63u8, 97u8, 198u8,
							11u8, 243u8, 165u8, 84u8, 159u8, 153u8, 235u8, 169u8, 166u8, 15u8,
							23u8, 116u8, 30u8, 56u8, 133u8, 31u8, 158u8, 114u8, 158u8, 86u8, 106u8,
							93u8,
						],
					)
				}
				#[doc = "See [`Pallet::unlock`]."]
				pub fn unlock(
					&self,
					target: types::unlock::Target,
				) -> ::subxt::tx::Payload<types::Unlock> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"unlock",
						types::Unlock { target },
						[
							116u8, 108u8, 113u8, 20u8, 39u8, 227u8, 153u8, 96u8, 178u8, 223u8,
							155u8, 95u8, 111u8, 168u8, 169u8, 32u8, 230u8, 125u8, 119u8, 162u8,
							8u8, 40u8, 57u8, 237u8, 22u8, 160u8, 100u8, 203u8, 247u8, 20u8, 251u8,
							99u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_vote`]."]
				pub fn remove_vote(
					&self,
					index: types::remove_vote::Index,
				) -> ::subxt::tx::Payload<types::RemoveVote> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"remove_vote",
						types::RemoveVote { index },
						[
							98u8, 146u8, 215u8, 63u8, 222u8, 70u8, 61u8, 186u8, 90u8, 34u8, 63u8,
							25u8, 195u8, 119u8, 228u8, 189u8, 38u8, 163u8, 58u8, 210u8, 216u8,
							156u8, 20u8, 204u8, 136u8, 192u8, 33u8, 210u8, 124u8, 65u8, 153u8,
							105u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_other_vote`]."]
				pub fn remove_other_vote(
					&self,
					target: types::remove_other_vote::Target,
					index: types::remove_other_vote::Index,
				) -> ::subxt::tx::Payload<types::RemoveOtherVote> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"remove_other_vote",
						types::RemoveOtherVote { target, index },
						[
							71u8, 148u8, 41u8, 68u8, 78u8, 40u8, 128u8, 217u8, 49u8, 83u8, 128u8,
							13u8, 225u8, 24u8, 41u8, 69u8, 119u8, 229u8, 241u8, 178u8, 20u8, 91u8,
							1u8, 180u8, 113u8, 127u8, 8u8, 2u8, 233u8, 174u8, 192u8, 140u8,
						],
					)
				}
				#[doc = "See [`Pallet::blacklist`]."]
				pub fn blacklist(
					&self,
					proposal_hash: types::blacklist::ProposalHash,
					maybe_ref_index: types::blacklist::MaybeRefIndex,
				) -> ::subxt::tx::Payload<types::Blacklist> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"blacklist",
						types::Blacklist { proposal_hash, maybe_ref_index },
						[
							227u8, 200u8, 88u8, 154u8, 134u8, 121u8, 131u8, 177u8, 94u8, 119u8,
							12u8, 129u8, 150u8, 59u8, 108u8, 103u8, 109u8, 55u8, 220u8, 211u8,
							250u8, 103u8, 160u8, 170u8, 63u8, 142u8, 112u8, 244u8, 29u8, 238u8,
							101u8, 24u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_proposal`]."]
				pub fn cancel_proposal(
					&self,
					prop_index: types::cancel_proposal::PropIndex,
				) -> ::subxt::tx::Payload<types::CancelProposal> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"cancel_proposal",
						types::CancelProposal { prop_index },
						[
							213u8, 5u8, 215u8, 209u8, 71u8, 229u8, 66u8, 38u8, 171u8, 38u8, 14u8,
							103u8, 248u8, 176u8, 217u8, 143u8, 234u8, 89u8, 110u8, 250u8, 3u8,
							190u8, 151u8, 74u8, 55u8, 58u8, 249u8, 138u8, 25u8, 191u8, 55u8, 142u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_metadata`]."]
				pub fn set_metadata(
					&self,
					owner: types::set_metadata::Owner,
					maybe_hash: types::set_metadata::MaybeHash,
				) -> ::subxt::tx::Payload<types::SetMetadata> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"set_metadata",
						types::SetMetadata { owner, maybe_hash },
						[
							191u8, 200u8, 139u8, 27u8, 167u8, 250u8, 72u8, 78u8, 18u8, 98u8, 108u8,
							1u8, 122u8, 120u8, 47u8, 77u8, 174u8, 60u8, 247u8, 69u8, 228u8, 196u8,
							149u8, 107u8, 239u8, 45u8, 47u8, 118u8, 87u8, 233u8, 79u8, 29u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_democracy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion has been proposed by a public account."]
			pub struct Proposed {
				pub proposal_index: proposed::ProposalIndex,
				pub deposit: proposed::Deposit,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A public proposal has been tabled for referendum vote."]
			pub struct Tabled {
				pub proposal_index: tabled::ProposalIndex,
				pub deposit: tabled::Deposit,
			}
			pub mod tabled {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Tabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Tabled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An external proposal has been tabled."]
			pub struct ExternalTabled;
			impl ::subxt::events::StaticEvent for ExternalTabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ExternalTabled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has begun."]
			pub struct Started {
				pub ref_index: started::RefIndex,
				pub threshold: started::Threshold,
			}
			pub mod started {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
				pub type Threshold = runtime_types::pallet_democracy::vote_threshold::VoteThreshold;
			}
			impl ::subxt::events::StaticEvent for Started {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Started";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal has been approved by referendum."]
			pub struct Passed {
				pub ref_index: passed::RefIndex,
			}
			pub mod passed {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Passed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Passed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal has been rejected by referendum."]
			pub struct NotPassed {
				pub ref_index: not_passed::RefIndex,
			}
			pub mod not_passed {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for NotPassed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "NotPassed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been cancelled."]
			pub struct Cancelled {
				pub ref_index: cancelled::RefIndex,
			}
			pub mod cancelled {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account has delegated their vote to another account."]
			pub struct Delegated {
				pub who: delegated::Who,
				pub target: delegated::Target,
			}
			pub mod delegated {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Target = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for Delegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account has cancelled a previous delegation operation."]
			pub struct Undelegated {
				pub account: undelegated::Account,
			}
			pub mod undelegated {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Undelegated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An external proposal has been vetoed."]
			pub struct Vetoed {
				pub who: vetoed::Who,
				pub proposal_hash: vetoed::ProposalHash,
				pub until: vetoed::Until,
			}
			pub mod vetoed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Until = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Vetoed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Vetoed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal_hash has been blacklisted permanently."]
			pub struct Blacklisted {
				pub proposal_hash: blacklisted::ProposalHash,
			}
			pub mod blacklisted {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Blacklisted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Blacklisted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account has voted in a referendum"]
			pub struct Voted {
				pub voter: voted::Voter,
				pub ref_index: voted::RefIndex,
				pub vote: voted::Vote,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Voter = ::subxt::utils::AccountId32;
				pub type RefIndex = ::core::primitive::u32;
				pub type Vote =
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account has secconded a proposal"]
			pub struct Seconded {
				pub seconder: seconded::Seconder,
				pub prop_index: seconded::PropIndex,
			}
			pub mod seconded {
				use super::runtime_types;
				pub type Seconder = ::subxt::utils::AccountId32;
				pub type PropIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Seconded {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Seconded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal got canceled."]
			pub struct ProposalCanceled {
				pub prop_index: proposal_canceled::PropIndex,
			}
			pub mod proposal_canceled {
				use super::runtime_types;
				pub type PropIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ProposalCanceled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ProposalCanceled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Metadata for a proposal or a referendum has been set."]
			pub struct MetadataSet {
				pub owner: metadata_set::Owner,
				pub hash: metadata_set::Hash,
			}
			pub mod metadata_set {
				use super::runtime_types;
				pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Metadata for a proposal or a referendum has been cleared."]
			pub struct MetadataCleared {
				pub owner: metadata_cleared::Owner,
				pub hash: metadata_cleared::Hash,
			}
			pub mod metadata_cleared {
				use super::runtime_types;
				pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataCleared";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Metadata has been transferred to new owner."]
			pub struct MetadataTransferred {
				pub prev_owner: metadata_transferred::PrevOwner,
				pub owner: metadata_transferred::Owner,
				pub hash: metadata_transferred::Hash,
			}
			pub mod metadata_transferred {
				use super::runtime_types;
				pub type PrevOwner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for MetadataTransferred {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataTransferred";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod public_prop_count {
					use super::runtime_types;
					pub type PublicPropCount = ::core::primitive::u32;
				}
				pub mod public_props {
					use super::runtime_types;
					pub type PublicProps =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u32,
							runtime_types::frame_support::traits::preimages::Bounded<
								runtime_types::tangle_kusama_runtime::RuntimeCall,
								runtime_types::sp_runtime::traits::BlakeTwo256,
							>,
							::subxt::utils::AccountId32,
						)>;
				}
				pub mod deposit_of {
					use super::runtime_types;
					pub type DepositOf = (
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
						::core::primitive::u128,
					);
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod referendum_count {
					use super::runtime_types;
					pub type ReferendumCount = ::core::primitive::u32;
				}
				pub mod lowest_unbaked {
					use super::runtime_types;
					pub type LowestUnbaked = ::core::primitive::u32;
				}
				pub mod referendum_info_of {
					use super::runtime_types;
					pub type ReferendumInfoOf =
						runtime_types::pallet_democracy::types::ReferendumInfo<
							::core::primitive::u32,
							runtime_types::frame_support::traits::preimages::Bounded<
								runtime_types::tangle_kusama_runtime::RuntimeCall,
								runtime_types::sp_runtime::traits::BlakeTwo256,
							>,
							::core::primitive::u128,
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod voting_of {
					use super::runtime_types;
					pub type VotingOf = runtime_types::pallet_democracy::vote::Voting<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod last_tabled_was_external {
					use super::runtime_types;
					pub type LastTabledWasExternal = ::core::primitive::bool;
				}
				pub mod next_external {
					use super::runtime_types;
					pub type NextExternal = (
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					);
				}
				pub mod blacklist {
					use super::runtime_types;
					pub type Blacklist = (
						::core::primitive::u32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					);
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod cancellations {
					use super::runtime_types;
					pub type Cancellations = ::core::primitive::bool;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod metadata_of {
					use super::runtime_types;
					pub type MetadataOf = ::subxt::utils::H256;
					pub type Param0 = runtime_types::pallet_democracy::types::MetadataOwner;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The number of (public) proposals that have been made so far."]
				pub fn public_prop_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::public_prop_count::PublicPropCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"PublicPropCount",
						vec![],
						[
							51u8, 175u8, 184u8, 94u8, 91u8, 212u8, 100u8, 108u8, 127u8, 162u8,
							233u8, 137u8, 12u8, 209u8, 29u8, 130u8, 125u8, 179u8, 208u8, 160u8,
							173u8, 149u8, 12u8, 111u8, 1u8, 82u8, 196u8, 137u8, 51u8, 204u8, 153u8,
							198u8,
						],
					)
				}
				#[doc = " The public proposals. Unsorted. The second item is the proposal."]
				pub fn public_props(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::public_props::PublicProps,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"PublicProps",
						vec![],
						[
							174u8, 85u8, 209u8, 117u8, 29u8, 193u8, 230u8, 16u8, 94u8, 219u8, 69u8,
							29u8, 116u8, 35u8, 252u8, 43u8, 127u8, 0u8, 43u8, 218u8, 240u8, 176u8,
							73u8, 81u8, 207u8, 131u8, 227u8, 132u8, 242u8, 45u8, 172u8, 50u8,
						],
					)
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::deposit_of::DepositOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"DepositOf",
						vec![],
						[
							115u8, 12u8, 250u8, 191u8, 201u8, 165u8, 90u8, 140u8, 101u8, 47u8,
							46u8, 3u8, 78u8, 30u8, 180u8, 22u8, 28u8, 154u8, 36u8, 99u8, 255u8,
							84u8, 33u8, 21u8, 65u8, 110u8, 52u8, 245u8, 19u8, 6u8, 104u8, 167u8,
						],
					)
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::deposit_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::deposit_of::DepositOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"DepositOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							115u8, 12u8, 250u8, 191u8, 201u8, 165u8, 90u8, 140u8, 101u8, 47u8,
							46u8, 3u8, 78u8, 30u8, 180u8, 22u8, 28u8, 154u8, 36u8, 99u8, 255u8,
							84u8, 33u8, 21u8, 65u8, 110u8, 52u8, 245u8, 19u8, 6u8, 104u8, 167u8,
						],
					)
				}
				#[doc = " The next free referendum index, aka the number of referenda started so far."]
				pub fn referendum_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_count::ReferendumCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"ReferendumCount",
						vec![],
						[
							64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
							139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
							198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
							67u8,
						],
					)
				}
				#[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
				#[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
				pub fn lowest_unbaked(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::lowest_unbaked::LowestUnbaked,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"LowestUnbaked",
						vec![],
						[
							237u8, 222u8, 144u8, 214u8, 0u8, 186u8, 81u8, 176u8, 51u8, 14u8, 204u8,
							184u8, 147u8, 97u8, 187u8, 84u8, 40u8, 8u8, 86u8, 241u8, 16u8, 157u8,
							202u8, 44u8, 185u8, 111u8, 70u8, 114u8, 40u8, 135u8, 1u8, 155u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_of::ReferendumInfoOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"ReferendumInfoOf",
						vec![],
						[
							245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
							119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
							186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
							234u8, 206u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::referendum_info_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_of::ReferendumInfoOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"ReferendumInfoOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
							119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
							186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
							234u8, 206u8,
						],
					)
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_of::VotingOf,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"VotingOf",
						vec![],
						[
							234u8, 35u8, 206u8, 197u8, 17u8, 251u8, 1u8, 230u8, 80u8, 235u8, 108u8,
							126u8, 82u8, 145u8, 39u8, 104u8, 209u8, 16u8, 209u8, 52u8, 165u8,
							231u8, 110u8, 92u8, 113u8, 212u8, 72u8, 57u8, 60u8, 73u8, 107u8, 118u8,
						],
					)
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_of::VotingOf,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"VotingOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							234u8, 35u8, 206u8, 197u8, 17u8, 251u8, 1u8, 230u8, 80u8, 235u8, 108u8,
							126u8, 82u8, 145u8, 39u8, 104u8, 209u8, 16u8, 209u8, 52u8, 165u8,
							231u8, 110u8, 92u8, 113u8, 212u8, 72u8, 57u8, 60u8, 73u8, 107u8, 118u8,
						],
					)
				}
				#[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
				#[doc = " proposal."]
				pub fn last_tabled_was_external(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::last_tabled_was_external::LastTabledWasExternal,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"LastTabledWasExternal",
						vec![],
						[
							162u8, 201u8, 72u8, 9u8, 78u8, 49u8, 72u8, 62u8, 240u8, 69u8, 20u8,
							135u8, 26u8, 59u8, 71u8, 46u8, 19u8, 25u8, 195u8, 11u8, 99u8, 31u8,
							104u8, 4u8, 24u8, 129u8, 47u8, 69u8, 219u8, 178u8, 104u8, 190u8,
						],
					)
				}
				#[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
				#[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
				#[doc = " - `LastTabledWasExternal` is `false`; or"]
				#[doc = " - `PublicProps` is empty."]
				pub fn next_external(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_external::NextExternal,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"NextExternal",
						vec![],
						[
							240u8, 58u8, 238u8, 86u8, 35u8, 48u8, 192u8, 51u8, 91u8, 4u8, 47u8,
							202u8, 21u8, 74u8, 158u8, 64u8, 107u8, 247u8, 248u8, 240u8, 122u8,
							109u8, 204u8, 180u8, 103u8, 239u8, 156u8, 68u8, 141u8, 253u8, 131u8,
							239u8,
						],
					)
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::blacklist::Blacklist,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Blacklist",
						vec![],
						[
							12u8, 231u8, 204u8, 151u8, 57u8, 182u8, 5u8, 74u8, 231u8, 100u8, 165u8,
							28u8, 147u8, 109u8, 119u8, 37u8, 138u8, 159u8, 7u8, 175u8, 41u8, 110u8,
							205u8, 69u8, 17u8, 9u8, 39u8, 102u8, 90u8, 244u8, 165u8, 141u8,
						],
					)
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist(
					&self,
					_0: impl ::std::borrow::Borrow<types::blacklist::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::blacklist::Blacklist,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Blacklist",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							12u8, 231u8, 204u8, 151u8, 57u8, 182u8, 5u8, 74u8, 231u8, 100u8, 165u8,
							28u8, 147u8, 109u8, 119u8, 37u8, 138u8, 159u8, 7u8, 175u8, 41u8, 110u8,
							205u8, 69u8, 17u8, 9u8, 39u8, 102u8, 90u8, 244u8, 165u8, 141u8,
						],
					)
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::cancellations::Cancellations,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Cancellations",
						vec![],
						[
							80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
							232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
							149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
							186u8, 244u8,
						],
					)
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations(
					&self,
					_0: impl ::std::borrow::Borrow<types::cancellations::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::cancellations::Cancellations,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Cancellations",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
							232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
							149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
							186u8, 244u8,
						],
					)
				}
				#[doc = " General information concerning any proposal or referendum."]
				#[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::metadata_of::MetadataOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"MetadataOf",
						vec![],
						[
							52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
							102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
							147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
							180u8,
						],
					)
				}
				#[doc = " General information concerning any proposal or referendum."]
				#[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::metadata_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::metadata_of::MetadataOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"MetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
							102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
							147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
							180u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The period between a proposal being approved and enacted."]
				#[doc = ""]
				#[doc = " It should generally be a little more than the unstake period to ensure that"]
				#[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
				#[doc = " where they are on the losing side of a vote."]
				pub fn enactment_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"EnactmentPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How often (in blocks) new public referenda are launched."]
				pub fn launch_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"LaunchPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How often (in blocks) to check for new votes."]
				pub fn voting_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"VotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum period of vote locking."]
				#[doc = ""]
				#[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
				#[doc = " those successful voters are locked into the consequences that their votes entail."]
				pub fn vote_locking_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"VoteLockingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
				pub fn minimum_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MinimumDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
				#[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
				#[doc = " as an upgrade having happened recently."]
				pub fn instant_allowed(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::bool> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"InstantAllowed",
						[
							165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
							252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
							100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
						],
					)
				}
				#[doc = " Minimum voting period allowed for a fast-track referendum."]
				pub fn fast_track_voting_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"FastTrackVotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
				pub fn cooloff_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"CooloffPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of votes for an account."]
				#[doc = ""]
				#[doc = " Also used to compute weight, an overly big value can"]
				#[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
				pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of public proposals that can exist at any time."]
				pub fn max_proposals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxProposals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of deposits a public proposal may have at any time."]
				pub fn max_deposits(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxDeposits",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of items which can be blacklisted."]
				pub fn max_blacklisted(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxBlacklisted",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod council {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_collective::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_collective::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_members`]."]
				pub struct SetMembers {
					pub new_members: set_members::NewMembers,
					pub prime: set_members::Prime,
					pub old_count: set_members::OldCount,
				}
				pub mod set_members {
					use super::runtime_types;
					pub type NewMembers = ::std::vec::Vec<::subxt::utils::AccountId32>;
					pub type Prime = ::core::option::Option<::subxt::utils::AccountId32>;
					pub type OldCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMembers {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "set_members";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::execute`]."]
				pub struct Execute {
					pub proposal: ::std::boxed::Box<execute::Proposal>,
					#[codec(compact)]
					pub length_bound: execute::LengthBound,
				}
				pub mod execute {
					use super::runtime_types;
					pub type Proposal = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Execute {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "execute";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::propose`]."]
				pub struct Propose {
					#[codec(compact)]
					pub threshold: propose::Threshold,
					pub proposal: ::std::boxed::Box<propose::Proposal>,
					#[codec(compact)]
					pub length_bound: propose::LengthBound,
				}
				pub mod propose {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u32;
					pub type Proposal = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Propose {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "propose";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::vote`]."]
				pub struct Vote {
					pub proposal: vote::Proposal,
					#[codec(compact)]
					pub index: vote::Index,
					pub approve: vote::Approve,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Proposal = ::subxt::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type Approve = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::disapprove_proposal`]."]
				pub struct DisapproveProposal {
					pub proposal_hash: disapprove_proposal::ProposalHash,
				}
				pub mod disapprove_proposal {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "disapprove_proposal";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::close`]."]
				pub struct Close {
					pub proposal_hash: close::ProposalHash,
					#[codec(compact)]
					pub index: close::Index,
					pub proposal_weight_bound: close::ProposalWeightBound,
					#[codec(compact)]
					pub length_bound: close::LengthBound,
				}
				pub mod close {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Close {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "close";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set_members`]."]
				pub fn set_members(
					&self,
					new_members: types::set_members::NewMembers,
					prime: types::set_members::Prime,
					old_count: types::set_members::OldCount,
				) -> ::subxt::tx::Payload<types::SetMembers> {
					::subxt::tx::Payload::new_static(
						"Council",
						"set_members",
						types::SetMembers { new_members, prime, old_count },
						[
							66u8, 224u8, 186u8, 178u8, 41u8, 208u8, 67u8, 192u8, 57u8, 242u8,
							141u8, 31u8, 216u8, 118u8, 192u8, 43u8, 125u8, 213u8, 226u8, 85u8,
							142u8, 225u8, 131u8, 45u8, 172u8, 142u8, 12u8, 9u8, 73u8, 7u8, 218u8,
							61u8,
						],
					)
				}
				#[doc = "See [`Pallet::execute`]."]
				pub fn execute(
					&self,
					proposal: types::execute::Proposal,
					length_bound: types::execute::LengthBound,
				) -> ::subxt::tx::Payload<types::Execute> {
					::subxt::tx::Payload::new_static(
						"Council",
						"execute",
						types::Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
						[
							100u8, 225u8, 10u8, 54u8, 16u8, 175u8, 220u8, 254u8, 45u8, 98u8, 210u8,
							113u8, 238u8, 70u8, 168u8, 143u8, 71u8, 235u8, 163u8, 210u8, 205u8,
							40u8, 121u8, 150u8, 63u8, 7u8, 6u8, 99u8, 246u8, 52u8, 157u8, 23u8,
						],
					)
				}
				#[doc = "See [`Pallet::propose`]."]
				pub fn propose(
					&self,
					threshold: types::propose::Threshold,
					proposal: types::propose::Proposal,
					length_bound: types::propose::LengthBound,
				) -> ::subxt::tx::Payload<types::Propose> {
					::subxt::tx::Payload::new_static(
						"Council",
						"propose",
						types::Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							214u8, 205u8, 53u8, 190u8, 187u8, 37u8, 172u8, 65u8, 231u8, 168u8,
							77u8, 27u8, 190u8, 69u8, 226u8, 241u8, 101u8, 20u8, 166u8, 82u8, 225u8,
							135u8, 144u8, 255u8, 98u8, 29u8, 11u8, 206u8, 56u8, 24u8, 233u8, 212u8,
						],
					)
				}
				#[doc = "See [`Pallet::vote`]."]
				pub fn vote(
					&self,
					proposal: types::vote::Proposal,
					index: types::vote::Index,
					approve: types::vote::Approve,
				) -> ::subxt::tx::Payload<types::Vote> {
					::subxt::tx::Payload::new_static(
						"Council",
						"vote",
						types::Vote { proposal, index, approve },
						[
							110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
							129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
							176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
							120u8,
						],
					)
				}
				#[doc = "See [`Pallet::disapprove_proposal`]."]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: types::disapprove_proposal::ProposalHash,
				) -> ::subxt::tx::Payload<types::DisapproveProposal> {
					::subxt::tx::Payload::new_static(
						"Council",
						"disapprove_proposal",
						types::DisapproveProposal { proposal_hash },
						[
							26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
							155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
							156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
						],
					)
				}
				#[doc = "See [`Pallet::close`]."]
				pub fn close(
					&self,
					proposal_hash: types::close::ProposalHash,
					index: types::close::Index,
					proposal_weight_bound: types::close::ProposalWeightBound,
					length_bound: types::close::LengthBound,
				) -> ::subxt::tx::Payload<types::Close> {
					::subxt::tx::Payload::new_static(
						"Council",
						"close",
						types::Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
							34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
							157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: proposed::Account,
				pub proposal_index: proposed::ProposalIndex,
				pub proposal_hash: proposed::ProposalHash,
				pub threshold: proposed::Threshold,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Threshold = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: voted::Account,
				pub proposal_hash: voted::ProposalHash,
				pub voted: voted::Voted,
				pub yes: voted::Yes,
				pub no: voted::No,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Voted = ::core::primitive::bool;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: approved::ProposalHash,
			}
			pub mod approved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: disapproved::ProposalHash,
			}
			pub mod disapproved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: executed::ProposalHash,
				pub result: executed::Result,
			}
			pub mod executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: member_executed::ProposalHash,
				pub result: member_executed::Result,
			}
			pub mod member_executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: closed::ProposalHash,
				pub yes: closed::Yes,
				pub no: closed::No,
			}
			pub mod closed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Closed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proposals {
					use super::runtime_types;
					pub type Proposals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::H256,
						>;
				}
				pub mod proposal_of {
					use super::runtime_types;
					pub type ProposalOf = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod voting {
					use super::runtime_types;
					pub type Voting = runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod proposal_count {
					use super::runtime_types;
					pub type ProposalCount = ::core::primitive::u32;
				}
				pub mod members {
					use super::runtime_types;
					pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposals::Proposals,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Proposals",
						vec![],
						[
							210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
							147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
							198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposal_of::ProposalOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"ProposalOf",
						vec![],
						[
							152u8, 214u8, 211u8, 185u8, 218u8, 190u8, 185u8, 238u8, 13u8, 238u8,
							231u8, 122u8, 171u8, 146u8, 244u8, 220u8, 2u8, 134u8, 39u8, 237u8,
							43u8, 93u8, 163u8, 77u8, 53u8, 110u8, 192u8, 76u8, 253u8, 193u8, 85u8,
							154u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::proposal_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposal_of::ProposalOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"ProposalOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							152u8, 214u8, 211u8, 185u8, 218u8, 190u8, 185u8, 238u8, 13u8, 238u8,
							231u8, 122u8, 171u8, 146u8, 244u8, 220u8, 2u8, 134u8, 39u8, 237u8,
							43u8, 93u8, 163u8, 77u8, 53u8, 110u8, 192u8, 76u8, 253u8, 193u8, 85u8,
							154u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Voting",
						vec![],
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposal_count::ProposalCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"ProposalCount",
						vec![],
						[
							91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
							216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
							29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
						],
					)
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Members",
						vec![],
						[
							16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
							81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
							90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
						],
					)
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::prime::Prime,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Prime",
						vec![],
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
				pub fn max_proposal_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"Council",
						"MaxProposalWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_committee {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_collective::pallet::Error2;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_collective::pallet::Call2;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_members`]."]
				pub struct SetMembers {
					pub new_members: set_members::NewMembers,
					pub prime: set_members::Prime,
					pub old_count: set_members::OldCount,
				}
				pub mod set_members {
					use super::runtime_types;
					pub type NewMembers = ::std::vec::Vec<::subxt::utils::AccountId32>;
					pub type Prime = ::core::option::Option<::subxt::utils::AccountId32>;
					pub type OldCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMembers {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "set_members";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::execute`]."]
				pub struct Execute {
					pub proposal: ::std::boxed::Box<execute::Proposal>,
					#[codec(compact)]
					pub length_bound: execute::LengthBound,
				}
				pub mod execute {
					use super::runtime_types;
					pub type Proposal = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Execute {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "execute";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::propose`]."]
				pub struct Propose {
					#[codec(compact)]
					pub threshold: propose::Threshold,
					pub proposal: ::std::boxed::Box<propose::Proposal>,
					#[codec(compact)]
					pub length_bound: propose::LengthBound,
				}
				pub mod propose {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u32;
					pub type Proposal = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Propose {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "propose";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::vote`]."]
				pub struct Vote {
					pub proposal: vote::Proposal,
					#[codec(compact)]
					pub index: vote::Index,
					pub approve: vote::Approve,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Proposal = ::subxt::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type Approve = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::disapprove_proposal`]."]
				pub struct DisapproveProposal {
					pub proposal_hash: disapprove_proposal::ProposalHash,
				}
				pub mod disapprove_proposal {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "disapprove_proposal";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::close`]."]
				pub struct Close {
					pub proposal_hash: close::ProposalHash,
					#[codec(compact)]
					pub index: close::Index,
					pub proposal_weight_bound: close::ProposalWeightBound,
					#[codec(compact)]
					pub length_bound: close::LengthBound,
				}
				pub mod close {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Close {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "close";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set_members`]."]
				pub fn set_members(
					&self,
					new_members: types::set_members::NewMembers,
					prime: types::set_members::Prime,
					old_count: types::set_members::OldCount,
				) -> ::subxt::tx::Payload<types::SetMembers> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"set_members",
						types::SetMembers { new_members, prime, old_count },
						[
							66u8, 224u8, 186u8, 178u8, 41u8, 208u8, 67u8, 192u8, 57u8, 242u8,
							141u8, 31u8, 216u8, 118u8, 192u8, 43u8, 125u8, 213u8, 226u8, 85u8,
							142u8, 225u8, 131u8, 45u8, 172u8, 142u8, 12u8, 9u8, 73u8, 7u8, 218u8,
							61u8,
						],
					)
				}
				#[doc = "See [`Pallet::execute`]."]
				pub fn execute(
					&self,
					proposal: types::execute::Proposal,
					length_bound: types::execute::LengthBound,
				) -> ::subxt::tx::Payload<types::Execute> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"execute",
						types::Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
						[
							100u8, 225u8, 10u8, 54u8, 16u8, 175u8, 220u8, 254u8, 45u8, 98u8, 210u8,
							113u8, 238u8, 70u8, 168u8, 143u8, 71u8, 235u8, 163u8, 210u8, 205u8,
							40u8, 121u8, 150u8, 63u8, 7u8, 6u8, 99u8, 246u8, 52u8, 157u8, 23u8,
						],
					)
				}
				#[doc = "See [`Pallet::propose`]."]
				pub fn propose(
					&self,
					threshold: types::propose::Threshold,
					proposal: types::propose::Proposal,
					length_bound: types::propose::LengthBound,
				) -> ::subxt::tx::Payload<types::Propose> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"propose",
						types::Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							214u8, 205u8, 53u8, 190u8, 187u8, 37u8, 172u8, 65u8, 231u8, 168u8,
							77u8, 27u8, 190u8, 69u8, 226u8, 241u8, 101u8, 20u8, 166u8, 82u8, 225u8,
							135u8, 144u8, 255u8, 98u8, 29u8, 11u8, 206u8, 56u8, 24u8, 233u8, 212u8,
						],
					)
				}
				#[doc = "See [`Pallet::vote`]."]
				pub fn vote(
					&self,
					proposal: types::vote::Proposal,
					index: types::vote::Index,
					approve: types::vote::Approve,
				) -> ::subxt::tx::Payload<types::Vote> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"vote",
						types::Vote { proposal, index, approve },
						[
							110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
							129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
							176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
							120u8,
						],
					)
				}
				#[doc = "See [`Pallet::disapprove_proposal`]."]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: types::disapprove_proposal::ProposalHash,
				) -> ::subxt::tx::Payload<types::DisapproveProposal> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"disapprove_proposal",
						types::DisapproveProposal { proposal_hash },
						[
							26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
							155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
							156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
						],
					)
				}
				#[doc = "See [`Pallet::close`]."]
				pub fn close(
					&self,
					proposal_hash: types::close::ProposalHash,
					index: types::close::Index,
					proposal_weight_bound: types::close::ProposalWeightBound,
					length_bound: types::close::LengthBound,
				) -> ::subxt::tx::Payload<types::Close> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"close",
						types::Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
							34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
							157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_collective::pallet::Event2;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: proposed::Account,
				pub proposal_index: proposed::ProposalIndex,
				pub proposal_hash: proposed::ProposalHash,
				pub threshold: proposed::Threshold,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Threshold = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: voted::Account,
				pub proposal_hash: voted::ProposalHash,
				pub voted: voted::Voted,
				pub yes: voted::Yes,
				pub no: voted::No,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Account = ::subxt::utils::AccountId32;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Voted = ::core::primitive::bool;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: approved::ProposalHash,
			}
			pub mod approved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: disapproved::ProposalHash,
			}
			pub mod disapproved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: executed::ProposalHash,
				pub result: executed::Result,
			}
			pub mod executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: member_executed::ProposalHash,
				pub result: member_executed::Result,
			}
			pub mod member_executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: closed::ProposalHash,
				pub yes: closed::Yes,
				pub no: closed::No,
			}
			pub mod closed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::utils::H256;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Closed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proposals {
					use super::runtime_types;
					pub type Proposals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::H256,
						>;
				}
				pub mod proposal_of {
					use super::runtime_types;
					pub type ProposalOf = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod voting {
					use super::runtime_types;
					pub type Voting = runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod proposal_count {
					use super::runtime_types;
					pub type ProposalCount = ::core::primitive::u32;
				}
				pub mod members {
					use super::runtime_types;
					pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposals::Proposals,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Proposals",
						vec![],
						[
							210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
							147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
							198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposal_of::ProposalOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"ProposalOf",
						vec![],
						[
							152u8, 214u8, 211u8, 185u8, 218u8, 190u8, 185u8, 238u8, 13u8, 238u8,
							231u8, 122u8, 171u8, 146u8, 244u8, 220u8, 2u8, 134u8, 39u8, 237u8,
							43u8, 93u8, 163u8, 77u8, 53u8, 110u8, 192u8, 76u8, 253u8, 193u8, 85u8,
							154u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::proposal_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposal_of::ProposalOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"ProposalOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							152u8, 214u8, 211u8, 185u8, 218u8, 190u8, 185u8, 238u8, 13u8, 238u8,
							231u8, 122u8, 171u8, 146u8, 244u8, 220u8, 2u8, 134u8, 39u8, 237u8,
							43u8, 93u8, 163u8, 77u8, 53u8, 110u8, 192u8, 76u8, 253u8, 193u8, 85u8,
							154u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Voting",
						vec![],
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposal_count::ProposalCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"ProposalCount",
						vec![],
						[
							91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
							216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
							29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
						],
					)
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Members",
						vec![],
						[
							16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
							81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
							90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
						],
					)
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::prime::Prime,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Prime",
						vec![],
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
				pub fn max_proposal_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"TechnicalCommittee",
						"MaxProposalWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
			}
		}
	}
	pub mod phragmen_election {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_elections_phragmen::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_elections_phragmen::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::vote`]."]
				pub struct Vote {
					pub votes: vote::Votes,
					#[codec(compact)]
					pub value: vote::Value,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Votes = ::std::vec::Vec<::subxt::utils::AccountId32>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "PhragmenElection";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_voter`]."]
				pub struct RemoveVoter;
				impl ::subxt::blocks::StaticExtrinsic for RemoveVoter {
					const PALLET: &'static str = "PhragmenElection";
					const CALL: &'static str = "remove_voter";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::submit_candidacy`]."]
				pub struct SubmitCandidacy {
					#[codec(compact)]
					pub candidate_count: submit_candidacy::CandidateCount,
				}
				pub mod submit_candidacy {
					use super::runtime_types;
					pub type CandidateCount = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SubmitCandidacy {
					const PALLET: &'static str = "PhragmenElection";
					const CALL: &'static str = "submit_candidacy";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::renounce_candidacy`]."]
				pub struct RenounceCandidacy {
					pub renouncing: renounce_candidacy::Renouncing,
				}
				pub mod renounce_candidacy {
					use super::runtime_types;
					pub type Renouncing = runtime_types::pallet_elections_phragmen::Renouncing;
				}
				impl ::subxt::blocks::StaticExtrinsic for RenounceCandidacy {
					const PALLET: &'static str = "PhragmenElection";
					const CALL: &'static str = "renounce_candidacy";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_member`]."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
					pub slash_bond: remove_member::SlashBond,
					pub rerun_election: remove_member::RerunElection,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type SlashBond = ::core::primitive::bool;
					pub type RerunElection = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "PhragmenElection";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::clean_defunct_voters`]."]
				pub struct CleanDefunctVoters {
					pub num_voters: clean_defunct_voters::NumVoters,
					pub num_defunct: clean_defunct_voters::NumDefunct,
				}
				pub mod clean_defunct_voters {
					use super::runtime_types;
					pub type NumVoters = ::core::primitive::u32;
					pub type NumDefunct = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CleanDefunctVoters {
					const PALLET: &'static str = "PhragmenElection";
					const CALL: &'static str = "clean_defunct_voters";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::vote`]."]
				pub fn vote(
					&self,
					votes: types::vote::Votes,
					value: types::vote::Value,
				) -> ::subxt::tx::Payload<types::Vote> {
					::subxt::tx::Payload::new_static(
						"PhragmenElection",
						"vote",
						types::Vote { votes, value },
						[
							229u8, 163u8, 1u8, 49u8, 26u8, 130u8, 7u8, 228u8, 34u8, 80u8, 17u8,
							125u8, 32u8, 180u8, 174u8, 69u8, 17u8, 171u8, 163u8, 54u8, 42u8, 139u8,
							201u8, 205u8, 196u8, 18u8, 16u8, 211u8, 252u8, 64u8, 73u8, 5u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_voter`]."]
				pub fn remove_voter(&self) -> ::subxt::tx::Payload<types::RemoveVoter> {
					::subxt::tx::Payload::new_static(
						"PhragmenElection",
						"remove_voter",
						types::RemoveVoter {},
						[
							89u8, 43u8, 70u8, 117u8, 76u8, 84u8, 230u8, 114u8, 229u8, 91u8, 75u8,
							213u8, 47u8, 143u8, 233u8, 47u8, 108u8, 120u8, 171u8, 167u8, 14u8,
							62u8, 52u8, 20u8, 227u8, 106u8, 249u8, 239u8, 33u8, 115u8, 155u8,
							106u8,
						],
					)
				}
				#[doc = "See [`Pallet::submit_candidacy`]."]
				pub fn submit_candidacy(
					&self,
					candidate_count: types::submit_candidacy::CandidateCount,
				) -> ::subxt::tx::Payload<types::SubmitCandidacy> {
					::subxt::tx::Payload::new_static(
						"PhragmenElection",
						"submit_candidacy",
						types::SubmitCandidacy { candidate_count },
						[
							229u8, 169u8, 247u8, 102u8, 33u8, 7u8, 9u8, 125u8, 190u8, 179u8, 241u8,
							220u8, 205u8, 242u8, 168u8, 112u8, 197u8, 169u8, 135u8, 133u8, 102u8,
							173u8, 168u8, 203u8, 17u8, 135u8, 224u8, 145u8, 101u8, 204u8, 253u8,
							4u8,
						],
					)
				}
				#[doc = "See [`Pallet::renounce_candidacy`]."]
				pub fn renounce_candidacy(
					&self,
					renouncing: types::renounce_candidacy::Renouncing,
				) -> ::subxt::tx::Payload<types::RenounceCandidacy> {
					::subxt::tx::Payload::new_static(
						"PhragmenElection",
						"renounce_candidacy",
						types::RenounceCandidacy { renouncing },
						[
							230u8, 140u8, 205u8, 240u8, 110u8, 247u8, 242u8, 185u8, 228u8, 135u8,
							243u8, 73u8, 71u8, 200u8, 88u8, 134u8, 132u8, 174u8, 190u8, 251u8,
							81u8, 85u8, 174u8, 230u8, 94u8, 97u8, 96u8, 230u8, 15u8, 204u8, 247u8,
							214u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_member`]."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
					slash_bond: types::remove_member::SlashBond,
					rerun_election: types::remove_member::RerunElection,
				) -> ::subxt::tx::Payload<types::RemoveMember> {
					::subxt::tx::Payload::new_static(
						"PhragmenElection",
						"remove_member",
						types::RemoveMember { who, slash_bond, rerun_election },
						[
							108u8, 79u8, 187u8, 116u8, 243u8, 133u8, 188u8, 142u8, 71u8, 3u8,
							206u8, 109u8, 255u8, 118u8, 165u8, 21u8, 38u8, 192u8, 205u8, 69u8,
							223u8, 240u8, 104u8, 85u8, 234u8, 153u8, 153u8, 120u8, 36u8, 70u8,
							67u8, 124u8,
						],
					)
				}
				#[doc = "See [`Pallet::clean_defunct_voters`]."]
				pub fn clean_defunct_voters(
					&self,
					num_voters: types::clean_defunct_voters::NumVoters,
					num_defunct: types::clean_defunct_voters::NumDefunct,
				) -> ::subxt::tx::Payload<types::CleanDefunctVoters> {
					::subxt::tx::Payload::new_static(
						"PhragmenElection",
						"clean_defunct_voters",
						types::CleanDefunctVoters { num_voters, num_defunct },
						[
							99u8, 129u8, 198u8, 141u8, 41u8, 90u8, 151u8, 167u8, 50u8, 236u8, 88u8,
							57u8, 25u8, 26u8, 130u8, 61u8, 123u8, 177u8, 98u8, 57u8, 39u8, 204u8,
							29u8, 24u8, 191u8, 229u8, 224u8, 110u8, 223u8, 248u8, 191u8, 177u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_elections_phragmen::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
			#[doc = "the election, not that enough have has been elected. The inner value must be examined"]
			#[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
			#[doc = "slashed and none were elected, whiLst `EmptyTerm` means that no candidates existed to"]
			#[doc = "begin with."]
			pub struct NewTerm {
				pub new_members: new_term::NewMembers,
			}
			pub mod new_term {
				use super::runtime_types;
				pub type NewMembers =
					::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>;
			}
			impl ::subxt::events::StaticEvent for NewTerm {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "NewTerm";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "No (or not enough) candidates existed for this round. This is different from"]
			#[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
			pub struct EmptyTerm;
			impl ::subxt::events::StaticEvent for EmptyTerm {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "EmptyTerm";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Internal error happened while trying to perform election."]
			pub struct ElectionError;
			impl ::subxt::events::StaticEvent for ElectionError {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "ElectionError";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
			#[doc = "`EmptyTerm`."]
			pub struct MemberKicked {
				pub member: member_kicked::Member,
			}
			pub mod member_kicked {
				use super::runtime_types;
				pub type Member = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for MemberKicked {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "MemberKicked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Someone has renounced their candidacy."]
			pub struct Renounced {
				pub candidate: renounced::Candidate,
			}
			pub mod renounced {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for Renounced {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "Renounced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
			#[doc = "runner-up."]
			#[doc = ""]
			#[doc = "Note that old members and runners-up are also candidates."]
			pub struct CandidateSlashed {
				pub candidate: candidate_slashed::Candidate,
				pub amount: candidate_slashed::Amount,
			}
			pub mod candidate_slashed {
				use super::runtime_types;
				pub type Candidate = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for CandidateSlashed {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "CandidateSlashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
			pub struct SeatHolderSlashed {
				pub seat_holder: seat_holder_slashed::SeatHolder,
				pub amount: seat_holder_slashed::Amount,
			}
			pub mod seat_holder_slashed {
				use super::runtime_types;
				pub type SeatHolder = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SeatHolderSlashed {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "SeatHolderSlashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod members {
					use super::runtime_types;
					pub type Members = ::std::vec::Vec<
						runtime_types::pallet_elections_phragmen::SeatHolder<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>;
				}
				pub mod runners_up {
					use super::runtime_types;
					pub type RunnersUp = ::std::vec::Vec<
						runtime_types::pallet_elections_phragmen::SeatHolder<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>;
				}
				pub mod candidates {
					use super::runtime_types;
					pub type Candidates =
						::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>;
				}
				pub mod election_rounds {
					use super::runtime_types;
					pub type ElectionRounds = ::core::primitive::u32;
				}
				pub mod voting {
					use super::runtime_types;
					pub type Voting = runtime_types::pallet_elections_phragmen::Voter<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current elected members."]
				#[doc = ""]
				#[doc = " Invariant: Always sorted based on account id."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PhragmenElection",
						"Members",
						vec![],
						[
							121u8, 128u8, 120u8, 242u8, 54u8, 127u8, 90u8, 113u8, 74u8, 54u8,
							181u8, 207u8, 213u8, 130u8, 123u8, 238u8, 66u8, 247u8, 177u8, 209u8,
							47u8, 106u8, 3u8, 130u8, 57u8, 217u8, 190u8, 164u8, 92u8, 223u8, 53u8,
							8u8,
						],
					)
				}
				#[doc = " The current reserved runners-up."]
				#[doc = ""]
				#[doc = " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the"]
				#[doc = " last (i.e. _best_) runner-up will be replaced."]
				pub fn runners_up(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::runners_up::RunnersUp,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PhragmenElection",
						"RunnersUp",
						vec![],
						[
							252u8, 213u8, 152u8, 58u8, 93u8, 84u8, 170u8, 162u8, 180u8, 51u8, 52u8,
							156u8, 18u8, 58u8, 210u8, 150u8, 76u8, 159u8, 75u8, 43u8, 103u8, 21u8,
							181u8, 184u8, 155u8, 198u8, 236u8, 173u8, 245u8, 49u8, 134u8, 153u8,
						],
					)
				}
				#[doc = " The present candidate list. A current member or runner-up can never enter this vector"]
				#[doc = " and is always implicitly assumed to be a candidate."]
				#[doc = ""]
				#[doc = " Second element is the deposit."]
				#[doc = ""]
				#[doc = " Invariant: Always sorted based on account id."]
				pub fn candidates(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::candidates::Candidates,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PhragmenElection",
						"Candidates",
						vec![],
						[
							220u8, 219u8, 115u8, 204u8, 15u8, 0u8, 135u8, 72u8, 241u8, 89u8, 10u8,
							105u8, 106u8, 93u8, 18u8, 63u8, 43u8, 117u8, 120u8, 73u8, 8u8, 143u8,
							244u8, 144u8, 223u8, 155u8, 217u8, 132u8, 246u8, 228u8, 210u8, 53u8,
						],
					)
				}
				#[doc = " The total number of vote rounds that have happened, excluding the upcoming one."]
				pub fn election_rounds(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::election_rounds::ElectionRounds,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PhragmenElection",
						"ElectionRounds",
						vec![],
						[
							97u8, 151u8, 159u8, 133u8, 59u8, 215u8, 12u8, 178u8, 203u8, 24u8,
							138u8, 36u8, 108u8, 134u8, 217u8, 137u8, 24u8, 6u8, 126u8, 87u8, 49u8,
							90u8, 198u8, 16u8, 36u8, 109u8, 223u8, 190u8, 81u8, 7u8, 239u8, 243u8,
						],
					)
				}
				#[doc = " Votes and locked stake of a particular voter."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
				pub fn voting_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PhragmenElection",
						"Voting",
						vec![],
						[
							37u8, 74u8, 221u8, 188u8, 168u8, 43u8, 125u8, 246u8, 191u8, 21u8, 85u8,
							87u8, 124u8, 180u8, 218u8, 43u8, 186u8, 170u8, 140u8, 186u8, 88u8,
							71u8, 111u8, 22u8, 46u8, 207u8, 178u8, 96u8, 55u8, 203u8, 21u8, 92u8,
						],
					)
				}
				#[doc = " Votes and locked stake of a particular voter."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PhragmenElection",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							37u8, 74u8, 221u8, 188u8, 168u8, 43u8, 125u8, 246u8, 191u8, 21u8, 85u8,
							87u8, 124u8, 180u8, 218u8, 43u8, 186u8, 170u8, 140u8, 186u8, 88u8,
							71u8, 111u8, 22u8, 46u8, 207u8, 178u8, 96u8, 55u8, 203u8, 21u8, 92u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Identifier for the elections-phragmen pallet's lock"]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<[::core::primitive::u8; 8usize]> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"PalletId",
						[
							157u8, 118u8, 79u8, 88u8, 241u8, 22u8, 185u8, 37u8, 42u8, 20u8, 133u8,
							240u8, 11u8, 25u8, 66u8, 154u8, 84u8, 163u8, 78u8, 92u8, 171u8, 82u8,
							248u8, 76u8, 189u8, 70u8, 142u8, 249u8, 153u8, 84u8, 180u8, 60u8,
						],
					)
				}
				#[doc = " How much should be locked up in order to submit one's candidacy."]
				pub fn candidacy_bond(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"CandidacyBond",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Base deposit associated with voting."]
				#[doc = ""]
				#[doc = " This should be sensibly high to economically ensure the pallet cannot be attacked by"]
				#[doc = " creating a gigantic number of votes."]
				pub fn voting_bond_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"VotingBondBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of bond that need to be locked for each vote (32 bytes)."]
				pub fn voting_bond_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"VotingBondFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Number of members to elect."]
				pub fn desired_members(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"DesiredMembers",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of runners_up to keep."]
				pub fn desired_runners_up(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"DesiredRunnersUp",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How long each seat is kept. This defines the next block number at which an election"]
				#[doc = " round will happen. If set to zero, no elections are ever triggered and the module will"]
				#[doc = " be in passive mode."]
				pub fn term_duration(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"TermDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of candidates in a phragmen election."]
				#[doc = ""]
				#[doc = " Warning: This impacts the size of the election which is run onchain. Chose wisely, and"]
				#[doc = " consider how it will impact `T::WeightInfo::election_phragmen`."]
				#[doc = ""]
				#[doc = " When this limit is reached no more candidates are accepted in the election."]
				pub fn max_candidates(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"MaxCandidates",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of voters to allow in a phragmen election."]
				#[doc = ""]
				#[doc = " Warning: This impacts the size of the election which is run onchain. Chose wisely, and"]
				#[doc = " consider how it will impact `T::WeightInfo::election_phragmen`."]
				#[doc = ""]
				#[doc = " When the limit is reached the new voters are ignored."]
				pub fn max_voters(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"MaxVoters",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum numbers of votes per voter."]
				#[doc = ""]
				#[doc = " Warning: This impacts the size of the election which is run onchain. Chose wisely, and"]
				#[doc = " consider how it will impact `T::WeightInfo::election_phragmen`."]
				pub fn max_votes_per_voter(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"PhragmenElection",
						"MaxVotesPerVoter",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod council_membership {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_membership::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_membership::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_member`]."]
				pub struct AddMember {
					pub who: add_member::Who,
				}
				pub mod add_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddMember {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "add_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_member`]."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::swap_member`]."]
				pub struct SwapMember {
					pub remove: swap_member::Remove,
					pub add: swap_member::Add,
				}
				pub mod swap_member {
					use super::runtime_types;
					pub type Remove = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Add = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapMember {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "swap_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reset_members`]."]
				pub struct ResetMembers {
					pub members: reset_members::Members,
				}
				pub mod reset_members {
					use super::runtime_types;
					pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ResetMembers {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "reset_members";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::change_key`]."]
				pub struct ChangeKey {
					pub new: change_key::New,
				}
				pub mod change_key {
					use super::runtime_types;
					pub type New = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ChangeKey {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "change_key";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_prime`]."]
				pub struct SetPrime {
					pub who: set_prime::Who,
				}
				pub mod set_prime {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetPrime {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "set_prime";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::clear_prime`]."]
				pub struct ClearPrime;
				impl ::subxt::blocks::StaticExtrinsic for ClearPrime {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "clear_prime";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::add_member`]."]
				pub fn add_member(
					&self,
					who: types::add_member::Who,
				) -> ::subxt::tx::Payload<types::AddMember> {
					::subxt::tx::Payload::new_static(
						"CouncilMembership",
						"add_member",
						types::AddMember { who },
						[
							237u8, 212u8, 114u8, 106u8, 42u8, 1u8, 28u8, 244u8, 161u8, 140u8, 80u8,
							251u8, 217u8, 116u8, 9u8, 155u8, 234u8, 94u8, 3u8, 156u8, 5u8, 68u8,
							197u8, 90u8, 47u8, 223u8, 235u8, 200u8, 194u8, 195u8, 90u8, 70u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_member`]."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
				) -> ::subxt::tx::Payload<types::RemoveMember> {
					::subxt::tx::Payload::new_static(
						"CouncilMembership",
						"remove_member",
						types::RemoveMember { who },
						[
							182u8, 80u8, 149u8, 27u8, 252u8, 160u8, 231u8, 23u8, 208u8, 93u8,
							116u8, 252u8, 5u8, 28u8, 162u8, 221u8, 14u8, 150u8, 62u8, 65u8, 169u8,
							164u8, 226u8, 53u8, 152u8, 237u8, 37u8, 171u8, 209u8, 52u8, 235u8,
							11u8,
						],
					)
				}
				#[doc = "See [`Pallet::swap_member`]."]
				pub fn swap_member(
					&self,
					remove: types::swap_member::Remove,
					add: types::swap_member::Add,
				) -> ::subxt::tx::Payload<types::SwapMember> {
					::subxt::tx::Payload::new_static(
						"CouncilMembership",
						"swap_member",
						types::SwapMember { remove, add },
						[
							11u8, 68u8, 57u8, 232u8, 242u8, 45u8, 34u8, 178u8, 250u8, 195u8, 254u8,
							22u8, 13u8, 164u8, 86u8, 193u8, 47u8, 198u8, 164u8, 143u8, 66u8, 245u8,
							222u8, 24u8, 240u8, 97u8, 241u8, 166u8, 198u8, 236u8, 148u8, 195u8,
						],
					)
				}
				#[doc = "See [`Pallet::reset_members`]."]
				pub fn reset_members(
					&self,
					members: types::reset_members::Members,
				) -> ::subxt::tx::Payload<types::ResetMembers> {
					::subxt::tx::Payload::new_static(
						"CouncilMembership",
						"reset_members",
						types::ResetMembers { members },
						[
							212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
							8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
							99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
						],
					)
				}
				#[doc = "See [`Pallet::change_key`]."]
				pub fn change_key(
					&self,
					new: types::change_key::New,
				) -> ::subxt::tx::Payload<types::ChangeKey> {
					::subxt::tx::Payload::new_static(
						"CouncilMembership",
						"change_key",
						types::ChangeKey { new },
						[
							189u8, 13u8, 214u8, 17u8, 2u8, 171u8, 123u8, 104u8, 227u8, 136u8,
							198u8, 88u8, 216u8, 105u8, 246u8, 70u8, 25u8, 19u8, 244u8, 19u8, 112u8,
							105u8, 14u8, 16u8, 75u8, 183u8, 85u8, 183u8, 131u8, 186u8, 129u8,
							231u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_prime`]."]
				pub fn set_prime(
					&self,
					who: types::set_prime::Who,
				) -> ::subxt::tx::Payload<types::SetPrime> {
					::subxt::tx::Payload::new_static(
						"CouncilMembership",
						"set_prime",
						types::SetPrime { who },
						[
							76u8, 172u8, 20u8, 105u8, 143u8, 253u8, 234u8, 255u8, 138u8, 98u8,
							81u8, 183u8, 147u8, 232u8, 49u8, 234u8, 17u8, 129u8, 20u8, 119u8,
							116u8, 214u8, 131u8, 112u8, 38u8, 21u8, 93u8, 139u8, 161u8, 242u8,
							88u8, 152u8,
						],
					)
				}
				#[doc = "See [`Pallet::clear_prime`]."]
				pub fn clear_prime(&self) -> ::subxt::tx::Payload<types::ClearPrime> {
					::subxt::tx::Payload::new_static(
						"CouncilMembership",
						"clear_prime",
						types::ClearPrime {},
						[
							71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
							109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
							125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_membership::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::events::StaticEvent for Dummy {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod members {
					use super::runtime_types;
					pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"CouncilMembership",
						"Members",
						vec![],
						[
							109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
							80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
							223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
							193u8,
						],
					)
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::prime::Prime,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"CouncilMembership",
						"Prime",
						vec![],
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_membership {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_membership::pallet::Error2;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_membership::pallet::Call2;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_member`]."]
				pub struct AddMember {
					pub who: add_member::Who,
				}
				pub mod add_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddMember {
					const PALLET: &'static str = "TechnicalMembership";
					const CALL: &'static str = "add_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_member`]."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "TechnicalMembership";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::swap_member`]."]
				pub struct SwapMember {
					pub remove: swap_member::Remove,
					pub add: swap_member::Add,
				}
				pub mod swap_member {
					use super::runtime_types;
					pub type Remove = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Add = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapMember {
					const PALLET: &'static str = "TechnicalMembership";
					const CALL: &'static str = "swap_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reset_members`]."]
				pub struct ResetMembers {
					pub members: reset_members::Members,
				}
				pub mod reset_members {
					use super::runtime_types;
					pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ResetMembers {
					const PALLET: &'static str = "TechnicalMembership";
					const CALL: &'static str = "reset_members";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::change_key`]."]
				pub struct ChangeKey {
					pub new: change_key::New,
				}
				pub mod change_key {
					use super::runtime_types;
					pub type New = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ChangeKey {
					const PALLET: &'static str = "TechnicalMembership";
					const CALL: &'static str = "change_key";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_prime`]."]
				pub struct SetPrime {
					pub who: set_prime::Who,
				}
				pub mod set_prime {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetPrime {
					const PALLET: &'static str = "TechnicalMembership";
					const CALL: &'static str = "set_prime";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::clear_prime`]."]
				pub struct ClearPrime;
				impl ::subxt::blocks::StaticExtrinsic for ClearPrime {
					const PALLET: &'static str = "TechnicalMembership";
					const CALL: &'static str = "clear_prime";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::add_member`]."]
				pub fn add_member(
					&self,
					who: types::add_member::Who,
				) -> ::subxt::tx::Payload<types::AddMember> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"add_member",
						types::AddMember { who },
						[
							237u8, 212u8, 114u8, 106u8, 42u8, 1u8, 28u8, 244u8, 161u8, 140u8, 80u8,
							251u8, 217u8, 116u8, 9u8, 155u8, 234u8, 94u8, 3u8, 156u8, 5u8, 68u8,
							197u8, 90u8, 47u8, 223u8, 235u8, 200u8, 194u8, 195u8, 90u8, 70u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_member`]."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
				) -> ::subxt::tx::Payload<types::RemoveMember> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"remove_member",
						types::RemoveMember { who },
						[
							182u8, 80u8, 149u8, 27u8, 252u8, 160u8, 231u8, 23u8, 208u8, 93u8,
							116u8, 252u8, 5u8, 28u8, 162u8, 221u8, 14u8, 150u8, 62u8, 65u8, 169u8,
							164u8, 226u8, 53u8, 152u8, 237u8, 37u8, 171u8, 209u8, 52u8, 235u8,
							11u8,
						],
					)
				}
				#[doc = "See [`Pallet::swap_member`]."]
				pub fn swap_member(
					&self,
					remove: types::swap_member::Remove,
					add: types::swap_member::Add,
				) -> ::subxt::tx::Payload<types::SwapMember> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"swap_member",
						types::SwapMember { remove, add },
						[
							11u8, 68u8, 57u8, 232u8, 242u8, 45u8, 34u8, 178u8, 250u8, 195u8, 254u8,
							22u8, 13u8, 164u8, 86u8, 193u8, 47u8, 198u8, 164u8, 143u8, 66u8, 245u8,
							222u8, 24u8, 240u8, 97u8, 241u8, 166u8, 198u8, 236u8, 148u8, 195u8,
						],
					)
				}
				#[doc = "See [`Pallet::reset_members`]."]
				pub fn reset_members(
					&self,
					members: types::reset_members::Members,
				) -> ::subxt::tx::Payload<types::ResetMembers> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"reset_members",
						types::ResetMembers { members },
						[
							212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
							8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
							99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
						],
					)
				}
				#[doc = "See [`Pallet::change_key`]."]
				pub fn change_key(
					&self,
					new: types::change_key::New,
				) -> ::subxt::tx::Payload<types::ChangeKey> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"change_key",
						types::ChangeKey { new },
						[
							189u8, 13u8, 214u8, 17u8, 2u8, 171u8, 123u8, 104u8, 227u8, 136u8,
							198u8, 88u8, 216u8, 105u8, 246u8, 70u8, 25u8, 19u8, 244u8, 19u8, 112u8,
							105u8, 14u8, 16u8, 75u8, 183u8, 85u8, 183u8, 131u8, 186u8, 129u8,
							231u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_prime`]."]
				pub fn set_prime(
					&self,
					who: types::set_prime::Who,
				) -> ::subxt::tx::Payload<types::SetPrime> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"set_prime",
						types::SetPrime { who },
						[
							76u8, 172u8, 20u8, 105u8, 143u8, 253u8, 234u8, 255u8, 138u8, 98u8,
							81u8, 183u8, 147u8, 232u8, 49u8, 234u8, 17u8, 129u8, 20u8, 119u8,
							116u8, 214u8, 131u8, 112u8, 38u8, 21u8, 93u8, 139u8, 161u8, 242u8,
							88u8, 152u8,
						],
					)
				}
				#[doc = "See [`Pallet::clear_prime`]."]
				pub fn clear_prime(&self) -> ::subxt::tx::Payload<types::ClearPrime> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"clear_prime",
						types::ClearPrime {},
						[
							71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
							109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
							125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_membership::pallet::Event2;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::events::StaticEvent for Dummy {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod members {
					use super::runtime_types;
					pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalMembership",
						"Members",
						vec![],
						[
							109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
							80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
							223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
							193u8,
						],
					)
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::prime::Prime,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalMembership",
						"Prime",
						vec![],
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
	}
	pub mod conviction_voting {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_conviction_voting::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_conviction_voting::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::vote`]."]
				pub struct Vote {
					#[codec(compact)]
					pub poll_index: vote::PollIndex,
					pub vote: vote::Vote,
				}
				pub mod vote {
					use super::runtime_types;
					pub type PollIndex = ::core::primitive::u32;
					pub type Vote = runtime_types::pallet_conviction_voting::vote::AccountVote<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::delegate`]."]
				pub struct Delegate {
					pub class: delegate::Class,
					pub to: delegate::To,
					pub conviction: delegate::Conviction,
					pub balance: delegate::Balance,
				}
				pub mod delegate {
					use super::runtime_types;
					pub type Class = ::core::primitive::u16;
					pub type To = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Conviction =
						runtime_types::pallet_conviction_voting::conviction::Conviction;
					pub type Balance = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Delegate {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "delegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::undelegate`]."]
				pub struct Undelegate {
					pub class: undelegate::Class,
				}
				pub mod undelegate {
					use super::runtime_types;
					pub type Class = ::core::primitive::u16;
				}
				impl ::subxt::blocks::StaticExtrinsic for Undelegate {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "undelegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unlock`]."]
				pub struct Unlock {
					pub class: unlock::Class,
					pub target: unlock::Target,
				}
				pub mod unlock {
					use super::runtime_types;
					pub type Class = ::core::primitive::u16;
					pub type Target = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Unlock {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "unlock";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_vote`]."]
				pub struct RemoveVote {
					pub class: remove_vote::Class,
					pub index: remove_vote::Index,
				}
				pub mod remove_vote {
					use super::runtime_types;
					pub type Class = ::core::option::Option<::core::primitive::u16>;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveVote {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "remove_vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_other_vote`]."]
				pub struct RemoveOtherVote {
					pub target: remove_other_vote::Target,
					pub class: remove_other_vote::Class,
					pub index: remove_other_vote::Index,
				}
				pub mod remove_other_vote {
					use super::runtime_types;
					pub type Target = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Class = ::core::primitive::u16;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveOtherVote {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "remove_other_vote";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::vote`]."]
				pub fn vote(
					&self,
					poll_index: types::vote::PollIndex,
					vote: types::vote::Vote,
				) -> ::subxt::tx::Payload<types::Vote> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"vote",
						types::Vote { poll_index, vote },
						[
							57u8, 170u8, 177u8, 168u8, 158u8, 43u8, 87u8, 242u8, 176u8, 85u8,
							230u8, 64u8, 103u8, 239u8, 190u8, 6u8, 228u8, 165u8, 248u8, 77u8,
							231u8, 221u8, 186u8, 107u8, 249u8, 201u8, 226u8, 52u8, 129u8, 90u8,
							142u8, 159u8,
						],
					)
				}
				#[doc = "See [`Pallet::delegate`]."]
				pub fn delegate(
					&self,
					class: types::delegate::Class,
					to: types::delegate::To,
					conviction: types::delegate::Conviction,
					balance: types::delegate::Balance,
				) -> ::subxt::tx::Payload<types::Delegate> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"delegate",
						types::Delegate { class, to, conviction, balance },
						[
							72u8, 121u8, 108u8, 197u8, 6u8, 127u8, 240u8, 48u8, 195u8, 205u8, 4u8,
							163u8, 24u8, 104u8, 187u8, 59u8, 10u8, 192u8, 242u8, 254u8, 140u8,
							42u8, 152u8, 199u8, 119u8, 205u8, 146u8, 131u8, 84u8, 192u8, 232u8,
							81u8,
						],
					)
				}
				#[doc = "See [`Pallet::undelegate`]."]
				pub fn undelegate(
					&self,
					class: types::undelegate::Class,
				) -> ::subxt::tx::Payload<types::Undelegate> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"undelegate",
						types::Undelegate { class },
						[
							140u8, 232u8, 6u8, 53u8, 228u8, 8u8, 131u8, 144u8, 65u8, 66u8, 245u8,
							247u8, 147u8, 135u8, 198u8, 57u8, 82u8, 212u8, 89u8, 46u8, 236u8,
							168u8, 200u8, 220u8, 93u8, 168u8, 101u8, 29u8, 110u8, 76u8, 67u8,
							181u8,
						],
					)
				}
				#[doc = "See [`Pallet::unlock`]."]
				pub fn unlock(
					&self,
					class: types::unlock::Class,
					target: types::unlock::Target,
				) -> ::subxt::tx::Payload<types::Unlock> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"unlock",
						types::Unlock { class, target },
						[
							144u8, 162u8, 27u8, 86u8, 133u8, 252u8, 118u8, 223u8, 152u8, 116u8,
							181u8, 159u8, 122u8, 73u8, 88u8, 171u8, 144u8, 15u8, 128u8, 194u8,
							69u8, 80u8, 11u8, 173u8, 43u8, 255u8, 52u8, 140u8, 180u8, 177u8, 142u8,
							75u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_vote`]."]
				pub fn remove_vote(
					&self,
					class: types::remove_vote::Class,
					index: types::remove_vote::Index,
				) -> ::subxt::tx::Payload<types::RemoveVote> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"remove_vote",
						types::RemoveVote { class, index },
						[
							255u8, 108u8, 211u8, 146u8, 168u8, 231u8, 207u8, 44u8, 76u8, 24u8,
							235u8, 60u8, 23u8, 79u8, 192u8, 192u8, 46u8, 40u8, 134u8, 27u8, 125u8,
							114u8, 125u8, 247u8, 85u8, 102u8, 76u8, 159u8, 34u8, 167u8, 152u8,
							148u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_other_vote`]."]
				pub fn remove_other_vote(
					&self,
					target: types::remove_other_vote::Target,
					class: types::remove_other_vote::Class,
					index: types::remove_other_vote::Index,
				) -> ::subxt::tx::Payload<types::RemoveOtherVote> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"remove_other_vote",
						types::RemoveOtherVote { target, class, index },
						[
							83u8, 50u8, 64u8, 13u8, 168u8, 112u8, 177u8, 133u8, 205u8, 85u8, 178u8,
							197u8, 41u8, 111u8, 241u8, 32u8, 206u8, 12u8, 210u8, 145u8, 119u8,
							92u8, 24u8, 84u8, 172u8, 110u8, 175u8, 44u8, 124u8, 18u8, 176u8, 124u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_conviction_voting::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
			pub struct Delegated(pub delegated::Field0, pub delegated::Field1);
			pub mod delegated {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for Delegated {
				const PALLET: &'static str = "ConvictionVoting";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An \\[account\\] has cancelled a previous delegation operation."]
			pub struct Undelegated(pub undelegated::Field0);
			pub mod undelegated {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "ConvictionVoting";
				const EVENT: &'static str = "Undelegated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod voting_for {
					use super::runtime_types;
					pub type VotingFor = runtime_types::pallet_conviction_voting::vote::Voting<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = ::core::primitive::u16;
				}
				pub mod class_locks_for {
					use super::runtime_types;
					pub type ClassLocksFor =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u16,
							::core::primitive::u128,
						)>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_for::VotingFor,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"VotingFor",
						vec![],
						[
							76u8, 63u8, 153u8, 193u8, 39u8, 137u8, 186u8, 29u8, 202u8, 56u8, 169u8,
							56u8, 103u8, 138u8, 192u8, 18u8, 179u8, 114u8, 56u8, 121u8, 197u8,
							12u8, 29u8, 239u8, 220u8, 231u8, 24u8, 46u8, 134u8, 99u8, 53u8, 206u8,
						],
					)
				}
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_for::VotingFor,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"VotingFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							76u8, 63u8, 153u8, 193u8, 39u8, 137u8, 186u8, 29u8, 202u8, 56u8, 169u8,
							56u8, 103u8, 138u8, 192u8, 18u8, 179u8, 114u8, 56u8, 121u8, 197u8,
							12u8, 29u8, 239u8, 220u8, 231u8, 24u8, 46u8, 134u8, 99u8, 53u8, 206u8,
						],
					)
				}
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting_for::Param0>,
					_1: impl ::std::borrow::Borrow<types::voting_for::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_for::VotingFor,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"VotingFor",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							76u8, 63u8, 153u8, 193u8, 39u8, 137u8, 186u8, 29u8, 202u8, 56u8, 169u8,
							56u8, 103u8, 138u8, 192u8, 18u8, 179u8, 114u8, 56u8, 121u8, 197u8,
							12u8, 29u8, 239u8, 220u8, 231u8, 24u8, 46u8, 134u8, 99u8, 53u8, 206u8,
						],
					)
				}
				#[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
				#[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
				#[doc = " this list."]
				pub fn class_locks_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::class_locks_for::ClassLocksFor,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"ClassLocksFor",
						vec![],
						[
							74u8, 74u8, 8u8, 82u8, 215u8, 61u8, 13u8, 9u8, 44u8, 222u8, 33u8,
							245u8, 195u8, 124u8, 6u8, 174u8, 65u8, 245u8, 71u8, 42u8, 47u8, 46u8,
							164u8, 231u8, 11u8, 245u8, 115u8, 207u8, 209u8, 137u8, 90u8, 6u8,
						],
					)
				}
				#[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
				#[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
				#[doc = " this list."]
				pub fn class_locks_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::class_locks_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::class_locks_for::ClassLocksFor,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"ClassLocksFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							74u8, 74u8, 8u8, 82u8, 215u8, 61u8, 13u8, 9u8, 44u8, 222u8, 33u8,
							245u8, 195u8, 124u8, 6u8, 174u8, 65u8, 245u8, 71u8, 42u8, 47u8, 46u8,
							164u8, 231u8, 11u8, 245u8, 115u8, 207u8, 209u8, 137u8, 90u8, 6u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum number of concurrent votes an account may have."]
				#[doc = ""]
				#[doc = " Also used to compute weight, an overly large value can lead to extrinsics with large"]
				#[doc = " weight estimation: see `delegate` for instance."]
				pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ConvictionVoting",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum period of vote locking."]
				#[doc = ""]
				#[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
				#[doc = " those successful voters are locked into the consequences that their votes entail."]
				pub fn vote_locking_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ConvictionVoting",
						"VoteLockingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod referenda {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_referenda::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_referenda::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::submit`]."]
				pub struct Submit {
					pub proposal_origin: ::std::boxed::Box<submit::ProposalOrigin>,
					pub proposal: submit::Proposal,
					pub enactment_moment: submit::EnactmentMoment,
				}
				pub mod submit {
					use super::runtime_types;
					pub type ProposalOrigin = runtime_types::tangle_kusama_runtime::OriginCaller;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::tangle_kusama_runtime::RuntimeCall,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>;
					pub type EnactmentMoment =
						runtime_types::frame_support::traits::schedule::DispatchTime<
							::core::primitive::u32,
						>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Submit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "submit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::place_decision_deposit`]."]
				pub struct PlaceDecisionDeposit {
					pub index: place_decision_deposit::Index,
				}
				pub mod place_decision_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for PlaceDecisionDeposit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "place_decision_deposit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::refund_decision_deposit`]."]
				pub struct RefundDecisionDeposit {
					pub index: refund_decision_deposit::Index,
				}
				pub mod refund_decision_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RefundDecisionDeposit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "refund_decision_deposit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel`]."]
				pub struct Cancel {
					pub index: cancel::Index,
				}
				pub mod cancel {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Cancel {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "cancel";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::kill`]."]
				pub struct Kill {
					pub index: kill::Index,
				}
				pub mod kill {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Kill {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "kill";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::nudge_referendum`]."]
				pub struct NudgeReferendum {
					pub index: nudge_referendum::Index,
				}
				pub mod nudge_referendum {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for NudgeReferendum {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "nudge_referendum";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::one_fewer_deciding`]."]
				pub struct OneFewerDeciding {
					pub track: one_fewer_deciding::Track,
				}
				pub mod one_fewer_deciding {
					use super::runtime_types;
					pub type Track = ::core::primitive::u16;
				}
				impl ::subxt::blocks::StaticExtrinsic for OneFewerDeciding {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "one_fewer_deciding";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::refund_submission_deposit`]."]
				pub struct RefundSubmissionDeposit {
					pub index: refund_submission_deposit::Index,
				}
				pub mod refund_submission_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RefundSubmissionDeposit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "refund_submission_deposit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_metadata`]."]
				pub struct SetMetadata {
					pub index: set_metadata::Index,
					pub maybe_hash: set_metadata::MaybeHash,
				}
				pub mod set_metadata {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
					pub type MaybeHash = ::core::option::Option<::subxt::utils::H256>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "set_metadata";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::submit`]."]
				pub fn submit(
					&self,
					proposal_origin: types::submit::ProposalOrigin,
					proposal: types::submit::Proposal,
					enactment_moment: types::submit::EnactmentMoment,
				) -> ::subxt::tx::Payload<types::Submit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"submit",
						types::Submit {
							proposal_origin: ::std::boxed::Box::new(proposal_origin),
							proposal,
							enactment_moment,
						},
						[
							42u8, 83u8, 126u8, 44u8, 70u8, 163u8, 221u8, 129u8, 10u8, 198u8, 167u8,
							71u8, 217u8, 48u8, 215u8, 176u8, 185u8, 245u8, 185u8, 172u8, 122u8,
							61u8, 200u8, 230u8, 149u8, 3u8, 76u8, 82u8, 25u8, 230u8, 182u8, 183u8,
						],
					)
				}
				#[doc = "See [`Pallet::place_decision_deposit`]."]
				pub fn place_decision_deposit(
					&self,
					index: types::place_decision_deposit::Index,
				) -> ::subxt::tx::Payload<types::PlaceDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"place_decision_deposit",
						types::PlaceDecisionDeposit { index },
						[
							247u8, 158u8, 55u8, 191u8, 188u8, 200u8, 3u8, 47u8, 20u8, 175u8, 86u8,
							203u8, 52u8, 253u8, 91u8, 131u8, 21u8, 213u8, 56u8, 68u8, 40u8, 84u8,
							184u8, 30u8, 9u8, 193u8, 63u8, 182u8, 178u8, 241u8, 247u8, 220u8,
						],
					)
				}
				#[doc = "See [`Pallet::refund_decision_deposit`]."]
				pub fn refund_decision_deposit(
					&self,
					index: types::refund_decision_deposit::Index,
				) -> ::subxt::tx::Payload<types::RefundDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"refund_decision_deposit",
						types::RefundDecisionDeposit { index },
						[
							159u8, 19u8, 35u8, 216u8, 114u8, 105u8, 18u8, 42u8, 148u8, 151u8,
							136u8, 92u8, 117u8, 30u8, 29u8, 41u8, 238u8, 58u8, 195u8, 91u8, 115u8,
							135u8, 96u8, 99u8, 154u8, 233u8, 8u8, 249u8, 145u8, 165u8, 77u8, 164u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel`]."]
				pub fn cancel(
					&self,
					index: types::cancel::Index,
				) -> ::subxt::tx::Payload<types::Cancel> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"cancel",
						types::Cancel { index },
						[
							55u8, 206u8, 119u8, 156u8, 238u8, 165u8, 193u8, 73u8, 242u8, 13u8,
							212u8, 75u8, 136u8, 156u8, 151u8, 14u8, 35u8, 41u8, 156u8, 107u8, 60u8,
							190u8, 39u8, 216u8, 8u8, 74u8, 213u8, 130u8, 160u8, 131u8, 237u8,
							122u8,
						],
					)
				}
				#[doc = "See [`Pallet::kill`]."]
				pub fn kill(&self, index: types::kill::Index) -> ::subxt::tx::Payload<types::Kill> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"kill",
						types::Kill { index },
						[
							50u8, 89u8, 57u8, 0u8, 87u8, 129u8, 113u8, 140u8, 179u8, 178u8, 126u8,
							198u8, 92u8, 92u8, 189u8, 64u8, 123u8, 232u8, 57u8, 227u8, 223u8,
							219u8, 73u8, 217u8, 179u8, 44u8, 210u8, 125u8, 180u8, 10u8, 143u8,
							48u8,
						],
					)
				}
				#[doc = "See [`Pallet::nudge_referendum`]."]
				pub fn nudge_referendum(
					&self,
					index: types::nudge_referendum::Index,
				) -> ::subxt::tx::Payload<types::NudgeReferendum> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"nudge_referendum",
						types::NudgeReferendum { index },
						[
							75u8, 99u8, 172u8, 30u8, 170u8, 150u8, 211u8, 229u8, 249u8, 128u8,
							194u8, 246u8, 100u8, 142u8, 193u8, 184u8, 232u8, 81u8, 29u8, 17u8,
							99u8, 91u8, 236u8, 85u8, 230u8, 226u8, 57u8, 115u8, 45u8, 170u8, 54u8,
							213u8,
						],
					)
				}
				#[doc = "See [`Pallet::one_fewer_deciding`]."]
				pub fn one_fewer_deciding(
					&self,
					track: types::one_fewer_deciding::Track,
				) -> ::subxt::tx::Payload<types::OneFewerDeciding> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"one_fewer_deciding",
						types::OneFewerDeciding { track },
						[
							15u8, 84u8, 79u8, 231u8, 21u8, 239u8, 244u8, 143u8, 183u8, 215u8,
							181u8, 25u8, 225u8, 195u8, 95u8, 171u8, 17u8, 156u8, 182u8, 128u8,
							111u8, 40u8, 151u8, 102u8, 196u8, 55u8, 36u8, 212u8, 89u8, 190u8,
							131u8, 167u8,
						],
					)
				}
				#[doc = "See [`Pallet::refund_submission_deposit`]."]
				pub fn refund_submission_deposit(
					&self,
					index: types::refund_submission_deposit::Index,
				) -> ::subxt::tx::Payload<types::RefundSubmissionDeposit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"refund_submission_deposit",
						types::RefundSubmissionDeposit { index },
						[
							20u8, 217u8, 115u8, 6u8, 1u8, 60u8, 54u8, 136u8, 35u8, 41u8, 38u8,
							23u8, 85u8, 100u8, 141u8, 126u8, 30u8, 160u8, 61u8, 46u8, 134u8, 98u8,
							82u8, 38u8, 211u8, 124u8, 208u8, 222u8, 210u8, 10u8, 155u8, 122u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_metadata`]."]
				pub fn set_metadata(
					&self,
					index: types::set_metadata::Index,
					maybe_hash: types::set_metadata::MaybeHash,
				) -> ::subxt::tx::Payload<types::SetMetadata> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"set_metadata",
						types::SetMetadata { index, maybe_hash },
						[
							207u8, 29u8, 146u8, 233u8, 219u8, 205u8, 88u8, 118u8, 106u8, 61u8,
							124u8, 101u8, 2u8, 41u8, 169u8, 70u8, 114u8, 189u8, 162u8, 118u8, 1u8,
							108u8, 234u8, 98u8, 245u8, 245u8, 183u8, 126u8, 89u8, 13u8, 112u8,
							88u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_referenda::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been submitted."]
			pub struct Submitted {
				pub index: submitted::Index,
				pub track: submitted::Track,
				pub proposal: submitted::Proposal,
			}
			pub mod submitted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Track = ::core::primitive::u16;
				pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::tangle_kusama_runtime::RuntimeCall,
					runtime_types::sp_runtime::traits::BlakeTwo256,
				>;
			}
			impl ::subxt::events::StaticEvent for Submitted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Submitted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The decision deposit has been placed."]
			pub struct DecisionDepositPlaced {
				pub index: decision_deposit_placed::Index,
				pub who: decision_deposit_placed::Who,
				pub amount: decision_deposit_placed::Amount,
			}
			pub mod decision_deposit_placed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DecisionDepositPlaced {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionDepositPlaced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The decision deposit has been refunded."]
			pub struct DecisionDepositRefunded {
				pub index: decision_deposit_refunded::Index,
				pub who: decision_deposit_refunded::Who,
				pub amount: decision_deposit_refunded::Amount,
			}
			pub mod decision_deposit_refunded {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DecisionDepositRefunded {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionDepositRefunded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A deposit has been slashaed."]
			pub struct DepositSlashed {
				pub who: deposit_slashed::Who,
				pub amount: deposit_slashed::Amount,
			}
			pub mod deposit_slashed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DepositSlashed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DepositSlashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has moved into the deciding phase."]
			pub struct DecisionStarted {
				pub index: decision_started::Index,
				pub track: decision_started::Track,
				pub proposal: decision_started::Proposal,
				pub tally: decision_started::Tally,
			}
			pub mod decision_started {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Track = ::core::primitive::u16;
				pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::tangle_kusama_runtime::RuntimeCall,
					runtime_types::sp_runtime::traits::BlakeTwo256,
				>;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for DecisionStarted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmStarted {
				pub index: confirm_started::Index,
			}
			pub mod confirm_started {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ConfirmStarted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "ConfirmStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmAborted {
				pub index: confirm_aborted::Index,
			}
			pub mod confirm_aborted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ConfirmAborted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "ConfirmAborted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has ended its confirmation phase and is ready for approval."]
			pub struct Confirmed {
				pub index: confirmed::Index,
				pub tally: confirmed::Tally,
			}
			pub mod confirmed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for Confirmed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Confirmed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been approved and its proposal has been scheduled."]
			pub struct Approved {
				pub index: approved::Index,
			}
			pub mod approved {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal has been rejected by referendum."]
			pub struct Rejected {
				pub index: rejected::Index,
				pub tally: rejected::Tally,
			}
			pub mod rejected {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for Rejected {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been timed out without being decided."]
			pub struct TimedOut {
				pub index: timed_out::Index,
				pub tally: timed_out::Tally,
			}
			pub mod timed_out {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for TimedOut {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "TimedOut";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been cancelled."]
			pub struct Cancelled {
				pub index: cancelled::Index,
				pub tally: cancelled::Tally,
			}
			pub mod cancelled {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been killed."]
			pub struct Killed {
				pub index: killed::Index,
				pub tally: killed::Tally,
			}
			pub mod killed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for Killed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Killed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The submission deposit has been refunded."]
			pub struct SubmissionDepositRefunded {
				pub index: submission_deposit_refunded::Index,
				pub who: submission_deposit_refunded::Who,
				pub amount: submission_deposit_refunded::Amount,
			}
			pub mod submission_deposit_refunded {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SubmissionDepositRefunded {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "SubmissionDepositRefunded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Metadata for a referendum has been set."]
			pub struct MetadataSet {
				pub index: metadata_set::Index,
				pub hash: metadata_set::Hash,
			}
			pub mod metadata_set {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Metadata for a referendum has been cleared."]
			pub struct MetadataCleared {
				pub index: metadata_cleared::Index,
				pub hash: metadata_cleared::Hash,
			}
			pub mod metadata_cleared {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "MetadataCleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod referendum_count {
					use super::runtime_types;
					pub type ReferendumCount = ::core::primitive::u32;
				}
				pub mod referendum_info_for {
					use super::runtime_types;
					pub type ReferendumInfoFor =
						runtime_types::pallet_referenda::types::ReferendumInfo<
							::core::primitive::u16,
							runtime_types::tangle_kusama_runtime::OriginCaller,
							::core::primitive::u32,
							runtime_types::frame_support::traits::preimages::Bounded<
								runtime_types::tangle_kusama_runtime::RuntimeCall,
								runtime_types::sp_runtime::traits::BlakeTwo256,
							>,
							::core::primitive::u128,
							runtime_types::pallet_conviction_voting::types::Tally<
								::core::primitive::u128,
							>,
							::subxt::utils::AccountId32,
							(::core::primitive::u32, ::core::primitive::u32),
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod track_queue {
					use super::runtime_types;
					pub type TrackQueue =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u32,
							::core::primitive::u128,
						)>;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod deciding_count {
					use super::runtime_types;
					pub type DecidingCount = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod metadata_of {
					use super::runtime_types;
					pub type MetadataOf = ::subxt::utils::H256;
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The next free referendum index, aka the number of referenda started so far."]
				pub fn referendum_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_count::ReferendumCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"ReferendumCount",
						vec![],
						[
							64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
							139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
							198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
							67u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_for::ReferendumInfoFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"ReferendumInfoFor",
						vec![],
						[
							12u8, 28u8, 30u8, 210u8, 189u8, 129u8, 93u8, 147u8, 63u8, 150u8, 44u8,
							18u8, 63u8, 164u8, 1u8, 188u8, 163u8, 205u8, 124u8, 156u8, 61u8, 228u8,
							53u8, 206u8, 54u8, 233u8, 215u8, 219u8, 202u8, 79u8, 188u8, 251u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::referendum_info_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_for::ReferendumInfoFor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"ReferendumInfoFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							12u8, 28u8, 30u8, 210u8, 189u8, 129u8, 93u8, 147u8, 63u8, 150u8, 44u8,
							18u8, 63u8, 164u8, 1u8, 188u8, 163u8, 205u8, 124u8, 156u8, 61u8, 228u8,
							53u8, 206u8, 54u8, 233u8, 215u8, 219u8, 202u8, 79u8, 188u8, 251u8,
						],
					)
				}
				#[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
				#[doc = " conviction-weighted approvals."]
				#[doc = ""]
				#[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
				pub fn track_queue_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::track_queue::TrackQueue,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"TrackQueue",
						vec![],
						[
							125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
							20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
							183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
						],
					)
				}
				#[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
				#[doc = " conviction-weighted approvals."]
				#[doc = ""]
				#[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
				pub fn track_queue(
					&self,
					_0: impl ::std::borrow::Borrow<types::track_queue::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::track_queue::TrackQueue,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"TrackQueue",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
							20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
							183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
						],
					)
				}
				#[doc = " The number of referenda being decided currently."]
				pub fn deciding_count_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::deciding_count::DecidingCount,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"DecidingCount",
						vec![],
						[
							203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
							146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
							103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
							245u8,
						],
					)
				}
				#[doc = " The number of referenda being decided currently."]
				pub fn deciding_count(
					&self,
					_0: impl ::std::borrow::Borrow<types::deciding_count::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::deciding_count::DecidingCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"DecidingCount",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
							146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
							103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
							245u8,
						],
					)
				}
				#[doc = " The metadata is a general information concerning the referendum."]
				#[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::metadata_of::MetadataOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"MetadataOf",
						vec![],
						[
							159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
							124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
							45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
							110u8,
						],
					)
				}
				#[doc = " The metadata is a general information concerning the referendum."]
				#[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::metadata_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::metadata_of::MetadataOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"MetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
							124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
							45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
							110u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
				pub fn submission_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"SubmissionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum size of the referendum queue for a single track."]
				pub fn max_queued(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"MaxQueued",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The number of blocks after submission that a referendum must begin being decided by."]
				#[doc = " Once this passes, then anyone may cancel the referendum."]
				pub fn undeciding_timeout(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"UndecidingTimeout",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Quantization level for the referendum wakeup scheduler. A higher number will result in"]
				#[doc = " fewer storage reads/writes needed for smaller voters, but also result in delays to the"]
				#[doc = " automatic referendum status changes. Explicit servicing instructions are unaffected."]
				pub fn alarm_interval(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"AlarmInterval",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Information concerning the different referendum tracks."]
				pub fn tracks(
					&self,
				) -> ::subxt::constants::Address<
					::std::vec::Vec<(
						::core::primitive::u16,
						runtime_types::pallet_referenda::types::TrackInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					)>,
				> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"Tracks",
						[
							35u8, 226u8, 207u8, 234u8, 184u8, 139u8, 187u8, 184u8, 128u8, 199u8,
							227u8, 15u8, 31u8, 196u8, 5u8, 207u8, 138u8, 174u8, 130u8, 201u8,
							200u8, 113u8, 86u8, 93u8, 221u8, 243u8, 229u8, 24u8, 18u8, 150u8, 56u8,
							159u8,
						],
					)
				}
			}
		}
	}
	pub mod origins {
		use super::root_mod;
		use super::runtime_types;
	}
	pub mod whitelist {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_whitelist::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_whitelist::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::whitelist_call`]."]
				pub struct WhitelistCall {
					pub call_hash: whitelist_call::CallHash,
				}
				pub mod whitelist_call {
					use super::runtime_types;
					pub type CallHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for WhitelistCall {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "whitelist_call";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_whitelisted_call`]."]
				pub struct RemoveWhitelistedCall {
					pub call_hash: remove_whitelisted_call::CallHash,
				}
				pub mod remove_whitelisted_call {
					use super::runtime_types;
					pub type CallHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveWhitelistedCall {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "remove_whitelisted_call";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::dispatch_whitelisted_call`]."]
				pub struct DispatchWhitelistedCall {
					pub call_hash: dispatch_whitelisted_call::CallHash,
					pub call_encoded_len: dispatch_whitelisted_call::CallEncodedLen,
					pub call_weight_witness: dispatch_whitelisted_call::CallWeightWitness,
				}
				pub mod dispatch_whitelisted_call {
					use super::runtime_types;
					pub type CallHash = ::subxt::utils::H256;
					pub type CallEncodedLen = ::core::primitive::u32;
					pub type CallWeightWitness = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for DispatchWhitelistedCall {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "dispatch_whitelisted_call";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."]
				pub struct DispatchWhitelistedCallWithPreimage {
					pub call: ::std::boxed::Box<dispatch_whitelisted_call_with_preimage::Call>,
				}
				pub mod dispatch_whitelisted_call_with_preimage {
					use super::runtime_types;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for DispatchWhitelistedCallWithPreimage {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "dispatch_whitelisted_call_with_preimage";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::whitelist_call`]."]
				pub fn whitelist_call(
					&self,
					call_hash: types::whitelist_call::CallHash,
				) -> ::subxt::tx::Payload<types::WhitelistCall> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"whitelist_call",
						types::WhitelistCall { call_hash },
						[
							121u8, 165u8, 49u8, 37u8, 127u8, 38u8, 126u8, 213u8, 115u8, 148u8,
							122u8, 211u8, 24u8, 91u8, 147u8, 27u8, 87u8, 210u8, 84u8, 104u8, 229u8,
							155u8, 133u8, 30u8, 34u8, 249u8, 107u8, 110u8, 31u8, 191u8, 128u8,
							28u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_whitelisted_call`]."]
				pub fn remove_whitelisted_call(
					&self,
					call_hash: types::remove_whitelisted_call::CallHash,
				) -> ::subxt::tx::Payload<types::RemoveWhitelistedCall> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"remove_whitelisted_call",
						types::RemoveWhitelistedCall { call_hash },
						[
							30u8, 47u8, 13u8, 231u8, 165u8, 219u8, 246u8, 210u8, 11u8, 38u8, 219u8,
							218u8, 151u8, 226u8, 101u8, 175u8, 0u8, 239u8, 35u8, 46u8, 156u8,
							104u8, 145u8, 173u8, 105u8, 100u8, 21u8, 189u8, 123u8, 227u8, 196u8,
							40u8,
						],
					)
				}
				#[doc = "See [`Pallet::dispatch_whitelisted_call`]."]
				pub fn dispatch_whitelisted_call(
					&self,
					call_hash: types::dispatch_whitelisted_call::CallHash,
					call_encoded_len: types::dispatch_whitelisted_call::CallEncodedLen,
					call_weight_witness: types::dispatch_whitelisted_call::CallWeightWitness,
				) -> ::subxt::tx::Payload<types::DispatchWhitelistedCall> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"dispatch_whitelisted_call",
						types::DispatchWhitelistedCall {
							call_hash,
							call_encoded_len,
							call_weight_witness,
						},
						[
							112u8, 67u8, 72u8, 26u8, 3u8, 214u8, 86u8, 102u8, 29u8, 96u8, 222u8,
							24u8, 115u8, 15u8, 124u8, 160u8, 148u8, 184u8, 56u8, 162u8, 188u8,
							123u8, 213u8, 234u8, 208u8, 123u8, 133u8, 253u8, 43u8, 226u8, 66u8,
							116u8,
						],
					)
				}
				#[doc = "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."]
				pub fn dispatch_whitelisted_call_with_preimage(
					&self,
					call: types::dispatch_whitelisted_call_with_preimage::Call,
				) -> ::subxt::tx::Payload<types::DispatchWhitelistedCallWithPreimage> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"dispatch_whitelisted_call_with_preimage",
						types::DispatchWhitelistedCallWithPreimage {
							call: ::std::boxed::Box::new(call),
						},
						[
							129u8, 131u8, 150u8, 163u8, 63u8, 210u8, 15u8, 7u8, 220u8, 187u8,
							166u8, 83u8, 242u8, 254u8, 92u8, 241u8, 251u8, 136u8, 7u8, 224u8,
							230u8, 11u8, 102u8, 82u8, 247u8, 101u8, 62u8, 88u8, 115u8, 169u8,
							231u8, 117u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_whitelist::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CallWhitelisted {
				pub call_hash: call_whitelisted::CallHash,
			}
			pub mod call_whitelisted {
				use super::runtime_types;
				pub type CallHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for CallWhitelisted {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "CallWhitelisted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WhitelistedCallRemoved {
				pub call_hash: whitelisted_call_removed::CallHash,
			}
			pub mod whitelisted_call_removed {
				use super::runtime_types;
				pub type CallHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for WhitelistedCallRemoved {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "WhitelistedCallRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WhitelistedCallDispatched {
				pub call_hash: whitelisted_call_dispatched::CallHash,
				pub result: whitelisted_call_dispatched::Result,
			}
			pub mod whitelisted_call_dispatched {
				use super::runtime_types;
				pub type CallHash = ::subxt::utils::H256;
				pub type Result = ::core::result::Result<
					runtime_types::frame_support::dispatch::PostDispatchInfo,
					runtime_types::sp_runtime::DispatchErrorWithPostInfo<
						runtime_types::frame_support::dispatch::PostDispatchInfo,
					>,
				>;
			}
			impl ::subxt::events::StaticEvent for WhitelistedCallDispatched {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "WhitelistedCallDispatched";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod whitelisted_call {
					use super::runtime_types;
					pub type WhitelistedCall = ();
					pub type Param0 = ::subxt::utils::H256;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn whitelisted_call_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::whitelisted_call::WhitelistedCall,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Whitelist",
						"WhitelistedCall",
						vec![],
						[
							82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
							87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
							167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
						],
					)
				}
				pub fn whitelisted_call(
					&self,
					_0: impl ::std::borrow::Borrow<types::whitelisted_call::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::whitelisted_call::WhitelistedCall,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Whitelist",
						"WhitelistedCall",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
							87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
							167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
						],
					)
				}
			}
		}
	}
	pub mod xcmp_queue {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::cumulus_pallet_xcmp_queue::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::cumulus_pallet_xcmp_queue::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::service_overweight`]."]
				pub struct ServiceOverweight {
					pub index: service_overweight::Index,
					pub weight_limit: service_overweight::WeightLimit,
				}
				pub mod service_overweight {
					use super::runtime_types;
					pub type Index = ::core::primitive::u64;
					pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for ServiceOverweight {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "service_overweight";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::suspend_xcm_execution`]."]
				pub struct SuspendXcmExecution;
				impl ::subxt::blocks::StaticExtrinsic for SuspendXcmExecution {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "suspend_xcm_execution";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::resume_xcm_execution`]."]
				pub struct ResumeXcmExecution;
				impl ::subxt::blocks::StaticExtrinsic for ResumeXcmExecution {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "resume_xcm_execution";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_suspend_threshold`]."]
				pub struct UpdateSuspendThreshold {
					pub new: update_suspend_threshold::New,
				}
				pub mod update_suspend_threshold {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateSuspendThreshold {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_suspend_threshold";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_drop_threshold`]."]
				pub struct UpdateDropThreshold {
					pub new: update_drop_threshold::New,
				}
				pub mod update_drop_threshold {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateDropThreshold {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_drop_threshold";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_resume_threshold`]."]
				pub struct UpdateResumeThreshold {
					pub new: update_resume_threshold::New,
				}
				pub mod update_resume_threshold {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateResumeThreshold {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_resume_threshold";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_threshold_weight`]."]
				pub struct UpdateThresholdWeight {
					pub new: update_threshold_weight::New,
				}
				pub mod update_threshold_weight {
					use super::runtime_types;
					pub type New = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateThresholdWeight {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_threshold_weight";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_weight_restrict_decay`]."]
				pub struct UpdateWeightRestrictDecay {
					pub new: update_weight_restrict_decay::New,
				}
				pub mod update_weight_restrict_decay {
					use super::runtime_types;
					pub type New = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateWeightRestrictDecay {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_weight_restrict_decay";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_xcmp_max_individual_weight`]."]
				pub struct UpdateXcmpMaxIndividualWeight {
					pub new: update_xcmp_max_individual_weight::New,
				}
				pub mod update_xcmp_max_individual_weight {
					use super::runtime_types;
					pub type New = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateXcmpMaxIndividualWeight {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_xcmp_max_individual_weight";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::service_overweight`]."]
				pub fn service_overweight(
					&self,
					index: types::service_overweight::Index,
					weight_limit: types::service_overweight::WeightLimit,
				) -> ::subxt::tx::Payload<types::ServiceOverweight> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"service_overweight",
						types::ServiceOverweight { index, weight_limit },
						[
							235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
							50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
							247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
							7u8,
						],
					)
				}
				#[doc = "See [`Pallet::suspend_xcm_execution`]."]
				pub fn suspend_xcm_execution(
					&self,
				) -> ::subxt::tx::Payload<types::SuspendXcmExecution> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"suspend_xcm_execution",
						types::SuspendXcmExecution {},
						[
							54u8, 120u8, 33u8, 251u8, 74u8, 56u8, 29u8, 76u8, 104u8, 218u8, 115u8,
							198u8, 148u8, 237u8, 9u8, 191u8, 241u8, 48u8, 33u8, 24u8, 60u8, 144u8,
							22u8, 78u8, 58u8, 50u8, 26u8, 188u8, 231u8, 42u8, 201u8, 76u8,
						],
					)
				}
				#[doc = "See [`Pallet::resume_xcm_execution`]."]
				pub fn resume_xcm_execution(
					&self,
				) -> ::subxt::tx::Payload<types::ResumeXcmExecution> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"resume_xcm_execution",
						types::ResumeXcmExecution {},
						[
							173u8, 231u8, 78u8, 253u8, 108u8, 234u8, 199u8, 124u8, 184u8, 154u8,
							95u8, 194u8, 13u8, 77u8, 175u8, 7u8, 7u8, 112u8, 161u8, 72u8, 133u8,
							71u8, 63u8, 218u8, 97u8, 226u8, 133u8, 6u8, 93u8, 177u8, 247u8, 109u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_suspend_threshold`]."]
				pub fn update_suspend_threshold(
					&self,
					new: types::update_suspend_threshold::New,
				) -> ::subxt::tx::Payload<types::UpdateSuspendThreshold> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"update_suspend_threshold",
						types::UpdateSuspendThreshold { new },
						[
							64u8, 91u8, 172u8, 51u8, 220u8, 174u8, 54u8, 47u8, 57u8, 89u8, 75u8,
							39u8, 126u8, 198u8, 143u8, 35u8, 70u8, 125u8, 167u8, 14u8, 17u8, 18u8,
							146u8, 222u8, 100u8, 92u8, 81u8, 239u8, 173u8, 43u8, 42u8, 174u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_drop_threshold`]."]
				pub fn update_drop_threshold(
					&self,
					new: types::update_drop_threshold::New,
				) -> ::subxt::tx::Payload<types::UpdateDropThreshold> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"update_drop_threshold",
						types::UpdateDropThreshold { new },
						[
							123u8, 54u8, 12u8, 180u8, 165u8, 198u8, 141u8, 200u8, 149u8, 168u8,
							186u8, 237u8, 162u8, 91u8, 89u8, 242u8, 229u8, 16u8, 32u8, 254u8, 59u8,
							168u8, 31u8, 134u8, 217u8, 251u8, 0u8, 102u8, 113u8, 194u8, 175u8, 9u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_resume_threshold`]."]
				pub fn update_resume_threshold(
					&self,
					new: types::update_resume_threshold::New,
				) -> ::subxt::tx::Payload<types::UpdateResumeThreshold> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"update_resume_threshold",
						types::UpdateResumeThreshold { new },
						[
							172u8, 136u8, 11u8, 106u8, 42u8, 157u8, 167u8, 183u8, 87u8, 62u8,
							182u8, 17u8, 184u8, 59u8, 215u8, 230u8, 18u8, 243u8, 212u8, 34u8, 54u8,
							188u8, 95u8, 119u8, 173u8, 20u8, 91u8, 206u8, 212u8, 57u8, 136u8, 77u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_threshold_weight`]."]
				pub fn update_threshold_weight(
					&self,
					new: types::update_threshold_weight::New,
				) -> ::subxt::tx::Payload<types::UpdateThresholdWeight> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"update_threshold_weight",
						types::UpdateThresholdWeight { new },
						[
							79u8, 1u8, 102u8, 119u8, 93u8, 104u8, 197u8, 189u8, 248u8, 215u8, 30u8,
							227u8, 83u8, 26u8, 149u8, 99u8, 174u8, 191u8, 97u8, 82u8, 168u8, 128u8,
							130u8, 136u8, 185u8, 54u8, 104u8, 186u8, 231u8, 11u8, 66u8, 184u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_weight_restrict_decay`]."]
				pub fn update_weight_restrict_decay(
					&self,
					new: types::update_weight_restrict_decay::New,
				) -> ::subxt::tx::Payload<types::UpdateWeightRestrictDecay> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"update_weight_restrict_decay",
						types::UpdateWeightRestrictDecay { new },
						[
							37u8, 210u8, 52u8, 253u8, 67u8, 66u8, 63u8, 238u8, 117u8, 80u8, 77u8,
							102u8, 166u8, 103u8, 173u8, 135u8, 54u8, 139u8, 100u8, 225u8, 115u8,
							214u8, 160u8, 228u8, 195u8, 221u8, 160u8, 62u8, 192u8, 105u8, 188u8,
							139u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_xcmp_max_individual_weight`]."]
				pub fn update_xcmp_max_individual_weight(
					&self,
					new: types::update_xcmp_max_individual_weight::New,
				) -> ::subxt::tx::Payload<types::UpdateXcmpMaxIndividualWeight> {
					::subxt::tx::Payload::new_static(
						"XcmpQueue",
						"update_xcmp_max_individual_weight",
						types::UpdateXcmpMaxIndividualWeight { new },
						[
							185u8, 199u8, 32u8, 102u8, 179u8, 139u8, 101u8, 14u8, 48u8, 173u8,
							123u8, 158u8, 161u8, 153u8, 81u8, 109u8, 196u8, 217u8, 235u8, 150u8,
							176u8, 55u8, 168u8, 31u8, 34u8, 251u8, 128u8, 53u8, 160u8, 220u8,
							140u8, 174u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some XCM was executed ok."]
			pub struct Success {
				pub message_hash: success::MessageHash,
				pub message_id: success::MessageId,
				pub weight: success::Weight,
			}
			pub mod success {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for Success {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "Success";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some XCM failed."]
			pub struct Fail {
				pub message_hash: fail::MessageHash,
				pub message_id: fail::MessageId,
				pub error: fail::Error,
				pub weight: fail::Weight,
			}
			pub mod fail {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type Error = runtime_types::xcm::v3::traits::Error;
				pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for Fail {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "Fail";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Bad XCM version used."]
			pub struct BadVersion {
				pub message_hash: bad_version::MessageHash,
			}
			pub mod bad_version {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for BadVersion {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "BadVersion";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Bad XCM format used."]
			pub struct BadFormat {
				pub message_hash: bad_format::MessageHash,
			}
			pub mod bad_format {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for BadFormat {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "BadFormat";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An HRMP message was sent to a sibling parachain."]
			pub struct XcmpMessageSent {
				pub message_hash: xcmp_message_sent::MessageHash,
			}
			pub mod xcmp_message_sent {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for XcmpMessageSent {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "XcmpMessageSent";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An XCM exceeded the individual message weight budget."]
			pub struct OverweightEnqueued {
				pub sender: overweight_enqueued::Sender,
				pub sent_at: overweight_enqueued::SentAt,
				pub index: overweight_enqueued::Index,
				pub required: overweight_enqueued::Required,
			}
			pub mod overweight_enqueued {
				use super::runtime_types;
				pub type Sender = runtime_types::polkadot_parachain_primitives::primitives::Id;
				pub type SentAt = ::core::primitive::u32;
				pub type Index = ::core::primitive::u64;
				pub type Required = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for OverweightEnqueued {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
			pub struct OverweightServiced {
				pub index: overweight_serviced::Index,
				pub used: overweight_serviced::Used,
			}
			pub mod overweight_serviced {
				use super::runtime_types;
				pub type Index = ::core::primitive::u64;
				pub type Used = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for OverweightServiced {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "OverweightServiced";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod inbound_xcmp_status {
					use super::runtime_types;
					pub type InboundXcmpStatus = ::std::vec::Vec<
						runtime_types::cumulus_pallet_xcmp_queue::InboundChannelDetails,
					>;
				}
				pub mod inbound_xcmp_messages {
					use super::runtime_types;
					pub type InboundXcmpMessages = ::std::vec::Vec<::core::primitive::u8>;
					pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod outbound_xcmp_status {
					use super::runtime_types;
					pub type OutboundXcmpStatus = ::std::vec::Vec<
						runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
					>;
				}
				pub mod outbound_xcmp_messages {
					use super::runtime_types;
					pub type OutboundXcmpMessages = ::std::vec::Vec<::core::primitive::u8>;
					pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
					pub type Param1 = ::core::primitive::u16;
				}
				pub mod signal_messages {
					use super::runtime_types;
					pub type SignalMessages = ::std::vec::Vec<::core::primitive::u8>;
					pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
				}
				pub mod queue_config {
					use super::runtime_types;
					pub type QueueConfig =
						runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData;
				}
				pub mod overweight {
					use super::runtime_types;
					pub type Overweight = (
						runtime_types::polkadot_parachain_primitives::primitives::Id,
						::core::primitive::u32,
						::std::vec::Vec<::core::primitive::u8>,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod counter_for_overweight {
					use super::runtime_types;
					pub type CounterForOverweight = ::core::primitive::u32;
				}
				pub mod overweight_count {
					use super::runtime_types;
					pub type OverweightCount = ::core::primitive::u64;
				}
				pub mod queue_suspended {
					use super::runtime_types;
					pub type QueueSuspended = ::core::primitive::bool;
				}
				pub mod delivery_fee_factor {
					use super::runtime_types;
					pub type DeliveryFeeFactor =
						runtime_types::sp_arithmetic::fixed_point::FixedU128;
					pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Status of the inbound XCMP channels."]
				pub fn inbound_xcmp_status(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::inbound_xcmp_status::InboundXcmpStatus,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"InboundXcmpStatus",
						vec![],
						[
							216u8, 138u8, 138u8, 71u8, 210u8, 155u8, 255u8, 91u8, 44u8, 147u8,
							80u8, 187u8, 203u8, 88u8, 34u8, 54u8, 80u8, 232u8, 249u8, 20u8, 169u8,
							138u8, 123u8, 139u8, 182u8, 184u8, 0u8, 205u8, 101u8, 9u8, 194u8,
							122u8,
						],
					)
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::inbound_xcmp_messages::InboundXcmpMessages,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"InboundXcmpMessages",
						vec![],
						[
							60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
							213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
							85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
						],
					)
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::inbound_xcmp_messages::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::inbound_xcmp_messages::InboundXcmpMessages,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"InboundXcmpMessages",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
							213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
							85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
						],
					)
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages(
					&self,
					_0: impl ::std::borrow::Borrow<types::inbound_xcmp_messages::Param0>,
					_1: impl ::std::borrow::Borrow<types::inbound_xcmp_messages::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::inbound_xcmp_messages::InboundXcmpMessages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"InboundXcmpMessages",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
							213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
							85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
						],
					)
				}
				#[doc = " The non-empty XCMP channels in order of becoming non-empty, and the index of the first"]
				#[doc = " and last outbound message. If the two indices are equal, then it indicates an empty"]
				#[doc = " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"]
				#[doc = " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"]
				#[doc = " case of the need to send a high-priority signal message this block."]
				#[doc = " The bool is true if there is a signal message waiting to be sent."]
				pub fn outbound_xcmp_status(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::outbound_xcmp_status::OutboundXcmpStatus,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"OutboundXcmpStatus",
						vec![],
						[
							181u8, 5u8, 216u8, 176u8, 154u8, 233u8, 116u8, 14u8, 151u8, 1u8, 114u8,
							16u8, 42u8, 20u8, 63u8, 233u8, 79u8, 122u8, 87u8, 255u8, 75u8, 149u8,
							176u8, 106u8, 23u8, 101u8, 228u8, 120u8, 217u8, 167u8, 127u8, 117u8,
						],
					)
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::outbound_xcmp_messages::OutboundXcmpMessages,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"OutboundXcmpMessages",
						vec![],
						[
							156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
							159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
							144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
						],
					)
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::outbound_xcmp_messages::OutboundXcmpMessages,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"OutboundXcmpMessages",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
							159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
							144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
						],
					)
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages(
					&self,
					_0: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
					_1: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::outbound_xcmp_messages::OutboundXcmpMessages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"OutboundXcmpMessages",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
							159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
							144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
						],
					)
				}
				#[doc = " Any signal messages waiting to be sent."]
				pub fn signal_messages_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::signal_messages::SignalMessages,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"SignalMessages",
						vec![],
						[
							182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
							229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
							249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
							180u8, 24u8,
						],
					)
				}
				#[doc = " Any signal messages waiting to be sent."]
				pub fn signal_messages(
					&self,
					_0: impl ::std::borrow::Borrow<types::signal_messages::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::signal_messages::SignalMessages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"SignalMessages",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
							229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
							249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
							180u8, 24u8,
						],
					)
				}
				#[doc = " The configuration which controls the dynamics of the outbound queue."]
				pub fn queue_config(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::queue_config::QueueConfig,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"QueueConfig",
						vec![],
						[
							112u8, 136u8, 198u8, 133u8, 5u8, 66u8, 33u8, 29u8, 99u8, 72u8, 70u8,
							56u8, 182u8, 57u8, 48u8, 10u8, 135u8, 63u8, 103u8, 13u8, 143u8, 121u8,
							12u8, 126u8, 207u8, 56u8, 244u8, 63u8, 126u8, 51u8, 100u8, 69u8,
						],
					)
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These message stay in this storage map until they are manually dispatched via"]
				#[doc = " `service_overweight`."]
				pub fn overweight_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::overweight::Overweight,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"Overweight",
						vec![],
						[
							4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
							234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
							27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
							81u8,
						],
					)
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These message stay in this storage map until they are manually dispatched via"]
				#[doc = " `service_overweight`."]
				pub fn overweight(
					&self,
					_0: impl ::std::borrow::Borrow<types::overweight::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::overweight::Overweight,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"Overweight",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
							234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
							27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
							81u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_overweight(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::counter_for_overweight::CounterForOverweight,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"CounterForOverweight",
						vec![],
						[
							44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
							28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
							143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
							247u8, 0u8,
						],
					)
				}
				#[doc = " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next"]
				#[doc = " available free overweight index."]
				pub fn overweight_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::overweight_count::OverweightCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"OverweightCount",
						vec![],
						[
							28u8, 72u8, 218u8, 167u8, 253u8, 30u8, 10u8, 51u8, 49u8, 101u8, 86u8,
							26u8, 146u8, 2u8, 153u8, 232u8, 129u8, 38u8, 111u8, 105u8, 246u8, 84u8,
							192u8, 157u8, 193u8, 57u8, 222u8, 122u8, 38u8, 160u8, 56u8, 39u8,
						],
					)
				}
				#[doc = " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
				pub fn queue_suspended(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::queue_suspended::QueueSuspended,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"QueueSuspended",
						vec![],
						[
							165u8, 66u8, 105u8, 244u8, 113u8, 43u8, 177u8, 252u8, 212u8, 243u8,
							143u8, 184u8, 87u8, 51u8, 163u8, 104u8, 29u8, 84u8, 119u8, 74u8, 233u8,
							129u8, 203u8, 105u8, 2u8, 101u8, 19u8, 170u8, 69u8, 253u8, 80u8, 132u8,
						],
					)
				}
				#[doc = " The factor to multiply the base delivery fee by."]
				pub fn delivery_fee_factor_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delivery_fee_factor::DeliveryFeeFactor,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"DeliveryFeeFactor",
						vec![],
						[
							43u8, 5u8, 63u8, 235u8, 115u8, 155u8, 130u8, 27u8, 75u8, 216u8, 177u8,
							135u8, 203u8, 147u8, 167u8, 95u8, 208u8, 188u8, 25u8, 14u8, 84u8, 63u8,
							116u8, 41u8, 148u8, 110u8, 115u8, 215u8, 196u8, 36u8, 75u8, 102u8,
						],
					)
				}
				#[doc = " The factor to multiply the base delivery fee by."]
				pub fn delivery_fee_factor(
					&self,
					_0: impl ::std::borrow::Borrow<types::delivery_fee_factor::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delivery_fee_factor::DeliveryFeeFactor,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmpQueue",
						"DeliveryFeeFactor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							43u8, 5u8, 63u8, 235u8, 115u8, 155u8, 130u8, 27u8, 75u8, 216u8, 177u8,
							135u8, 203u8, 147u8, 167u8, 95u8, 208u8, 188u8, 25u8, 14u8, 84u8, 63u8,
							116u8, 41u8, 148u8, 110u8, 115u8, 215u8, 196u8, 36u8, 75u8, 102u8,
						],
					)
				}
			}
		}
	}
	pub mod polkadot_xcm {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_xcm::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_xcm::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::send`]."]
				pub struct Send {
					pub dest: ::std::boxed::Box<send::Dest>,
					pub message: ::std::boxed::Box<send::Message>,
				}
				pub mod send {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Message = runtime_types::xcm::VersionedXcm;
				}
				impl ::subxt::blocks::StaticExtrinsic for Send {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "send";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::teleport_assets`]."]
				pub struct TeleportAssets {
					pub dest: ::std::boxed::Box<teleport_assets::Dest>,
					pub beneficiary: ::std::boxed::Box<teleport_assets::Beneficiary>,
					pub assets: ::std::boxed::Box<teleport_assets::Assets>,
					pub fee_asset_item: teleport_assets::FeeAssetItem,
				}
				pub mod teleport_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for TeleportAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "teleport_assets";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reserve_transfer_assets`]."]
				pub struct ReserveTransferAssets {
					pub dest: ::std::boxed::Box<reserve_transfer_assets::Dest>,
					pub beneficiary: ::std::boxed::Box<reserve_transfer_assets::Beneficiary>,
					pub assets: ::std::boxed::Box<reserve_transfer_assets::Assets>,
					pub fee_asset_item: reserve_transfer_assets::FeeAssetItem,
				}
				pub mod reserve_transfer_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ReserveTransferAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "reserve_transfer_assets";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::execute`]."]
				pub struct Execute {
					pub message: ::std::boxed::Box<execute::Message>,
					pub max_weight: execute::MaxWeight,
				}
				pub mod execute {
					use super::runtime_types;
					pub type Message = runtime_types::xcm::VersionedXcm2;
					pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for Execute {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "execute";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_xcm_version`]."]
				pub struct ForceXcmVersion {
					pub location: ::std::boxed::Box<force_xcm_version::Location>,
					pub version: force_xcm_version::Version,
				}
				pub mod force_xcm_version {
					use super::runtime_types;
					pub type Location =
						runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Version = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceXcmVersion {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_xcm_version";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_default_xcm_version`]."]
				pub struct ForceDefaultXcmVersion {
					pub maybe_xcm_version: force_default_xcm_version::MaybeXcmVersion,
				}
				pub mod force_default_xcm_version {
					use super::runtime_types;
					pub type MaybeXcmVersion = ::core::option::Option<::core::primitive::u32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceDefaultXcmVersion {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_default_xcm_version";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_subscribe_version_notify`]."]
				pub struct ForceSubscribeVersionNotify {
					pub location: ::std::boxed::Box<force_subscribe_version_notify::Location>,
				}
				pub mod force_subscribe_version_notify {
					use super::runtime_types;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceSubscribeVersionNotify {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_subscribe_version_notify";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_unsubscribe_version_notify`]."]
				pub struct ForceUnsubscribeVersionNotify {
					pub location: ::std::boxed::Box<force_unsubscribe_version_notify::Location>,
				}
				pub mod force_unsubscribe_version_notify {
					use super::runtime_types;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceUnsubscribeVersionNotify {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_unsubscribe_version_notify";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::limited_reserve_transfer_assets`]."]
				pub struct LimitedReserveTransferAssets {
					pub dest: ::std::boxed::Box<limited_reserve_transfer_assets::Dest>,
					pub beneficiary:
						::std::boxed::Box<limited_reserve_transfer_assets::Beneficiary>,
					pub assets: ::std::boxed::Box<limited_reserve_transfer_assets::Assets>,
					pub fee_asset_item: limited_reserve_transfer_assets::FeeAssetItem,
					pub weight_limit: limited_reserve_transfer_assets::WeightLimit,
				}
				pub mod limited_reserve_transfer_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
					pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for LimitedReserveTransferAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "limited_reserve_transfer_assets";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::limited_teleport_assets`]."]
				pub struct LimitedTeleportAssets {
					pub dest: ::std::boxed::Box<limited_teleport_assets::Dest>,
					pub beneficiary: ::std::boxed::Box<limited_teleport_assets::Beneficiary>,
					pub assets: ::std::boxed::Box<limited_teleport_assets::Assets>,
					pub fee_asset_item: limited_teleport_assets::FeeAssetItem,
					pub weight_limit: limited_teleport_assets::WeightLimit,
				}
				pub mod limited_teleport_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
					pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for LimitedTeleportAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "limited_teleport_assets";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_suspension`]."]
				pub struct ForceSuspension {
					pub suspended: force_suspension::Suspended,
				}
				pub mod force_suspension {
					use super::runtime_types;
					pub type Suspended = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceSuspension {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_suspension";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::send`]."]
				pub fn send(
					&self,
					dest: types::send::Dest,
					message: types::send::Message,
				) -> ::subxt::tx::Payload<types::Send> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"send",
						types::Send {
							dest: ::std::boxed::Box::new(dest),
							message: ::std::boxed::Box::new(message),
						},
						[
							147u8, 255u8, 86u8, 82u8, 17u8, 159u8, 225u8, 145u8, 220u8, 89u8, 71u8,
							23u8, 193u8, 249u8, 12u8, 70u8, 19u8, 140u8, 232u8, 97u8, 12u8, 220u8,
							113u8, 65u8, 4u8, 255u8, 138u8, 10u8, 231u8, 122u8, 67u8, 105u8,
						],
					)
				}
				#[doc = "See [`Pallet::teleport_assets`]."]
				pub fn teleport_assets(
					&self,
					dest: types::teleport_assets::Dest,
					beneficiary: types::teleport_assets::Beneficiary,
					assets: types::teleport_assets::Assets,
					fee_asset_item: types::teleport_assets::FeeAssetItem,
				) -> ::subxt::tx::Payload<types::TeleportAssets> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"teleport_assets",
						types::TeleportAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
						},
						[
							56u8, 144u8, 237u8, 60u8, 157u8, 5u8, 7u8, 129u8, 41u8, 149u8, 160u8,
							100u8, 233u8, 102u8, 181u8, 140u8, 115u8, 213u8, 29u8, 132u8, 16u8,
							30u8, 23u8, 82u8, 140u8, 134u8, 37u8, 87u8, 3u8, 99u8, 172u8, 42u8,
						],
					)
				}
				#[doc = "See [`Pallet::reserve_transfer_assets`]."]
				pub fn reserve_transfer_assets(
					&self,
					dest: types::reserve_transfer_assets::Dest,
					beneficiary: types::reserve_transfer_assets::Beneficiary,
					assets: types::reserve_transfer_assets::Assets,
					fee_asset_item: types::reserve_transfer_assets::FeeAssetItem,
				) -> ::subxt::tx::Payload<types::ReserveTransferAssets> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"reserve_transfer_assets",
						types::ReserveTransferAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
						},
						[
							21u8, 167u8, 44u8, 22u8, 210u8, 73u8, 148u8, 7u8, 91u8, 108u8, 148u8,
							205u8, 170u8, 243u8, 142u8, 224u8, 205u8, 119u8, 252u8, 22u8, 203u8,
							32u8, 73u8, 200u8, 178u8, 14u8, 167u8, 147u8, 166u8, 55u8, 14u8, 231u8,
						],
					)
				}
				#[doc = "See [`Pallet::execute`]."]
				pub fn execute(
					&self,
					message: types::execute::Message,
					max_weight: types::execute::MaxWeight,
				) -> ::subxt::tx::Payload<types::Execute> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"execute",
						types::Execute { message: ::std::boxed::Box::new(message), max_weight },
						[
							15u8, 97u8, 86u8, 111u8, 105u8, 116u8, 109u8, 206u8, 70u8, 8u8, 57u8,
							232u8, 133u8, 132u8, 30u8, 219u8, 34u8, 69u8, 0u8, 213u8, 98u8, 241u8,
							186u8, 93u8, 216u8, 39u8, 73u8, 24u8, 193u8, 87u8, 92u8, 31u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_xcm_version`]."]
				pub fn force_xcm_version(
					&self,
					location: types::force_xcm_version::Location,
					version: types::force_xcm_version::Version,
				) -> ::subxt::tx::Payload<types::ForceXcmVersion> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"force_xcm_version",
						types::ForceXcmVersion {
							location: ::std::boxed::Box::new(location),
							version,
						},
						[
							110u8, 11u8, 78u8, 255u8, 66u8, 2u8, 55u8, 108u8, 92u8, 151u8, 231u8,
							175u8, 75u8, 156u8, 34u8, 191u8, 0u8, 56u8, 104u8, 197u8, 70u8, 204u8,
							73u8, 234u8, 173u8, 251u8, 88u8, 226u8, 3u8, 136u8, 228u8, 136u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_default_xcm_version`]."]
				pub fn force_default_xcm_version(
					&self,
					maybe_xcm_version: types::force_default_xcm_version::MaybeXcmVersion,
				) -> ::subxt::tx::Payload<types::ForceDefaultXcmVersion> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"force_default_xcm_version",
						types::ForceDefaultXcmVersion { maybe_xcm_version },
						[
							43u8, 114u8, 102u8, 104u8, 209u8, 234u8, 108u8, 173u8, 109u8, 188u8,
							94u8, 214u8, 136u8, 43u8, 153u8, 75u8, 161u8, 192u8, 76u8, 12u8, 221u8,
							237u8, 158u8, 247u8, 41u8, 193u8, 35u8, 174u8, 183u8, 207u8, 79u8,
							213u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_subscribe_version_notify`]."]
				pub fn force_subscribe_version_notify(
					&self,
					location: types::force_subscribe_version_notify::Location,
				) -> ::subxt::tx::Payload<types::ForceSubscribeVersionNotify> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"force_subscribe_version_notify",
						types::ForceSubscribeVersionNotify {
							location: ::std::boxed::Box::new(location),
						},
						[
							112u8, 254u8, 138u8, 12u8, 203u8, 176u8, 251u8, 167u8, 223u8, 0u8,
							71u8, 148u8, 19u8, 179u8, 47u8, 96u8, 188u8, 189u8, 14u8, 172u8, 1u8,
							1u8, 192u8, 107u8, 137u8, 158u8, 22u8, 9u8, 138u8, 241u8, 32u8, 47u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_unsubscribe_version_notify`]."]
				pub fn force_unsubscribe_version_notify(
					&self,
					location: types::force_unsubscribe_version_notify::Location,
				) -> ::subxt::tx::Payload<types::ForceUnsubscribeVersionNotify> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"force_unsubscribe_version_notify",
						types::ForceUnsubscribeVersionNotify {
							location: ::std::boxed::Box::new(location),
						},
						[
							205u8, 143u8, 230u8, 143u8, 166u8, 184u8, 53u8, 252u8, 118u8, 184u8,
							209u8, 227u8, 225u8, 184u8, 254u8, 244u8, 101u8, 56u8, 27u8, 128u8,
							40u8, 159u8, 178u8, 62u8, 63u8, 164u8, 59u8, 236u8, 1u8, 168u8, 202u8,
							42u8,
						],
					)
				}
				#[doc = "See [`Pallet::limited_reserve_transfer_assets`]."]
				pub fn limited_reserve_transfer_assets(
					&self,
					dest: types::limited_reserve_transfer_assets::Dest,
					beneficiary: types::limited_reserve_transfer_assets::Beneficiary,
					assets: types::limited_reserve_transfer_assets::Assets,
					fee_asset_item: types::limited_reserve_transfer_assets::FeeAssetItem,
					weight_limit: types::limited_reserve_transfer_assets::WeightLimit,
				) -> ::subxt::tx::Payload<types::LimitedReserveTransferAssets> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"limited_reserve_transfer_assets",
						types::LimitedReserveTransferAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						},
						[
							10u8, 139u8, 165u8, 239u8, 92u8, 178u8, 169u8, 62u8, 166u8, 236u8,
							50u8, 12u8, 196u8, 3u8, 233u8, 209u8, 3u8, 159u8, 184u8, 234u8, 171u8,
							46u8, 145u8, 134u8, 241u8, 155u8, 221u8, 173u8, 166u8, 94u8, 147u8,
							88u8,
						],
					)
				}
				#[doc = "See [`Pallet::limited_teleport_assets`]."]
				pub fn limited_teleport_assets(
					&self,
					dest: types::limited_teleport_assets::Dest,
					beneficiary: types::limited_teleport_assets::Beneficiary,
					assets: types::limited_teleport_assets::Assets,
					fee_asset_item: types::limited_teleport_assets::FeeAssetItem,
					weight_limit: types::limited_teleport_assets::WeightLimit,
				) -> ::subxt::tx::Payload<types::LimitedTeleportAssets> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"limited_teleport_assets",
						types::LimitedTeleportAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						},
						[
							156u8, 205u8, 105u8, 18u8, 120u8, 130u8, 144u8, 67u8, 152u8, 188u8,
							109u8, 121u8, 4u8, 240u8, 123u8, 112u8, 72u8, 153u8, 2u8, 111u8, 183u8,
							170u8, 199u8, 82u8, 33u8, 117u8, 43u8, 133u8, 208u8, 44u8, 118u8,
							107u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_suspension`]."]
				pub fn force_suspension(
					&self,
					suspended: types::force_suspension::Suspended,
				) -> ::subxt::tx::Payload<types::ForceSuspension> {
					::subxt::tx::Payload::new_static(
						"PolkadotXcm",
						"force_suspension",
						types::ForceSuspension { suspended },
						[
							78u8, 125u8, 93u8, 55u8, 129u8, 44u8, 36u8, 227u8, 75u8, 46u8, 68u8,
							202u8, 81u8, 127u8, 111u8, 92u8, 149u8, 38u8, 225u8, 185u8, 183u8,
							154u8, 89u8, 159u8, 79u8, 10u8, 229u8, 1u8, 226u8, 243u8, 65u8, 238u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_xcm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Execution of an XCM message was attempted."]
			pub struct Attempted {
				pub outcome: attempted::Outcome,
			}
			pub mod attempted {
				use super::runtime_types;
				pub type Outcome = runtime_types::xcm::v3::traits::Outcome;
			}
			impl ::subxt::events::StaticEvent for Attempted {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "Attempted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A XCM message was sent."]
			pub struct Sent {
				pub origin: sent::Origin,
				pub destination: sent::Destination,
				pub message: sent::Message,
				pub message_id: sent::MessageId,
			}
			pub mod sent {
				use super::runtime_types;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Destination = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Message = runtime_types::xcm::v3::Xcm;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for Sent {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "Sent";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Query response received which does not match a registered query. This may be because a"]
			#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
			#[doc = "because the query timed out."]
			pub struct UnexpectedResponse {
				pub origin: unexpected_response::Origin,
				pub query_id: unexpected_response::QueryId,
			}
			pub mod unexpected_response {
				use super::runtime_types;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for UnexpectedResponse {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "UnexpectedResponse";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
			#[doc = "no registered notification call."]
			pub struct ResponseReady {
				pub query_id: response_ready::QueryId,
				pub response: response_ready::Response,
			}
			pub mod response_ready {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
				pub type Response = runtime_types::xcm::v3::Response;
			}
			impl ::subxt::events::StaticEvent for ResponseReady {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "ResponseReady";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. The registered notification has"]
			#[doc = "been dispatched and executed successfully."]
			pub struct Notified {
				pub query_id: notified::QueryId,
				pub pallet_index: notified::PalletIndex,
				pub call_index: notified::CallIndex,
			}
			pub mod notified {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
				pub type PalletIndex = ::core::primitive::u8;
				pub type CallIndex = ::core::primitive::u8;
			}
			impl ::subxt::events::StaticEvent for Notified {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "Notified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. The registered notification"]
			#[doc = "could not be dispatched because the dispatch weight is greater than the maximum weight"]
			#[doc = "originally budgeted by this runtime for the query result."]
			pub struct NotifyOverweight {
				pub query_id: notify_overweight::QueryId,
				pub pallet_index: notify_overweight::PalletIndex,
				pub call_index: notify_overweight::CallIndex,
				pub actual_weight: notify_overweight::ActualWeight,
				pub max_budgeted_weight: notify_overweight::MaxBudgetedWeight,
			}
			pub mod notify_overweight {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
				pub type PalletIndex = ::core::primitive::u8;
				pub type CallIndex = ::core::primitive::u8;
				pub type ActualWeight = runtime_types::sp_weights::weight_v2::Weight;
				pub type MaxBudgetedWeight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for NotifyOverweight {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyOverweight";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. There was a general error with"]
			#[doc = "dispatching the notification call."]
			pub struct NotifyDispatchError {
				pub query_id: notify_dispatch_error::QueryId,
				pub pallet_index: notify_dispatch_error::PalletIndex,
				pub call_index: notify_dispatch_error::CallIndex,
			}
			pub mod notify_dispatch_error {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
				pub type PalletIndex = ::core::primitive::u8;
				pub type CallIndex = ::core::primitive::u8;
			}
			impl ::subxt::events::StaticEvent for NotifyDispatchError {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyDispatchError";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
			#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
			#[doc = "is not `(origin, QueryId, Response)`."]
			pub struct NotifyDecodeFailed {
				pub query_id: notify_decode_failed::QueryId,
				pub pallet_index: notify_decode_failed::PalletIndex,
				pub call_index: notify_decode_failed::CallIndex,
			}
			pub mod notify_decode_failed {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
				pub type PalletIndex = ::core::primitive::u8;
				pub type CallIndex = ::core::primitive::u8;
			}
			impl ::subxt::events::StaticEvent for NotifyDecodeFailed {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyDecodeFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the origin location of the response does"]
			#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
			#[doc = "be received and acted upon."]
			pub struct InvalidResponder {
				pub origin: invalid_responder::Origin,
				pub query_id: invalid_responder::QueryId,
				pub expected_location: invalid_responder::ExpectedLocation,
			}
			pub mod invalid_responder {
				use super::runtime_types;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
				pub type ExpectedLocation = ::core::option::Option<
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				>;
			}
			impl ::subxt::events::StaticEvent for InvalidResponder {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidResponder";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the expected origin location placed in"]
			#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
			#[doc = ""]
			#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
			#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
			#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
			#[doc = "needed."]
			pub struct InvalidResponderVersion {
				pub origin: invalid_responder_version::Origin,
				pub query_id: invalid_responder_version::QueryId,
			}
			pub mod invalid_responder_version {
				use super::runtime_types;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for InvalidResponderVersion {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidResponderVersion";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Received query response has been read and removed."]
			pub struct ResponseTaken {
				pub query_id: response_taken::QueryId,
			}
			pub mod response_taken {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for ResponseTaken {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "ResponseTaken";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some assets have been placed in an asset trap."]
			pub struct AssetsTrapped {
				pub hash: assets_trapped::Hash,
				pub origin: assets_trapped::Origin,
				pub assets: assets_trapped::Assets,
			}
			pub mod assets_trapped {
				use super::runtime_types;
				pub type Hash = ::subxt::utils::H256;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Assets = runtime_types::xcm::VersionedMultiAssets;
			}
			impl ::subxt::events::StaticEvent for AssetsTrapped {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "AssetsTrapped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An XCM version change notification message has been attempted to be sent."]
			#[doc = ""]
			#[doc = "The cost of sending it (borne by the chain) is included."]
			pub struct VersionChangeNotified {
				pub destination: version_change_notified::Destination,
				pub result: version_change_notified::Result,
				pub cost: version_change_notified::Cost,
				pub message_id: version_change_notified::MessageId,
			}
			pub mod version_change_notified {
				use super::runtime_types;
				pub type Destination = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Result = ::core::primitive::u32;
				pub type Cost = runtime_types::xcm::v3::multiasset::MultiAssets;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for VersionChangeNotified {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionChangeNotified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The supported version of a location has been changed. This might be through an"]
			#[doc = "automatic notification or a manual intervention."]
			pub struct SupportedVersionChanged {
				pub location: supported_version_changed::Location,
				pub version: supported_version_changed::Version,
			}
			pub mod supported_version_changed {
				use super::runtime_types;
				pub type Location = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Version = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for SupportedVersionChanged {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "SupportedVersionChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "sending the notification to it."]
			pub struct NotifyTargetSendFail {
				pub location: notify_target_send_fail::Location,
				pub query_id: notify_target_send_fail::QueryId,
				pub error: notify_target_send_fail::Error,
			}
			pub mod notify_target_send_fail {
				use super::runtime_types;
				pub type Location = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
				pub type Error = runtime_types::xcm::v3::traits::Error;
			}
			impl ::subxt::events::StaticEvent for NotifyTargetSendFail {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyTargetSendFail";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "migrating the location to our new XCM format."]
			pub struct NotifyTargetMigrationFail {
				pub location: notify_target_migration_fail::Location,
				pub query_id: notify_target_migration_fail::QueryId,
			}
			pub mod notify_target_migration_fail {
				use super::runtime_types;
				pub type Location = runtime_types::xcm::VersionedMultiLocation;
				pub type QueryId = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for NotifyTargetMigrationFail {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyTargetMigrationFail";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the expected querier location placed in"]
			#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
			#[doc = ""]
			#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
			#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
			#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
			#[doc = "needed."]
			pub struct InvalidQuerierVersion {
				pub origin: invalid_querier_version::Origin,
				pub query_id: invalid_querier_version::QueryId,
			}
			pub mod invalid_querier_version {
				use super::runtime_types;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for InvalidQuerierVersion {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidQuerierVersion";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the querier location of the response does"]
			#[doc = "not match the expected. The query remains registered for a later, valid, response to"]
			#[doc = "be received and acted upon."]
			pub struct InvalidQuerier {
				pub origin: invalid_querier::Origin,
				pub query_id: invalid_querier::QueryId,
				pub expected_querier: invalid_querier::ExpectedQuerier,
				pub maybe_actual_querier: invalid_querier::MaybeActualQuerier,
			}
			pub mod invalid_querier {
				use super::runtime_types;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
				pub type ExpectedQuerier =
					runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type MaybeActualQuerier = ::core::option::Option<
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				>;
			}
			impl ::subxt::events::StaticEvent for InvalidQuerier {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidQuerier";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A remote has requested XCM version change notification from us and we have honored it."]
			#[doc = "A version information message is sent to them and its cost is included."]
			pub struct VersionNotifyStarted {
				pub destination: version_notify_started::Destination,
				pub cost: version_notify_started::Cost,
				pub message_id: version_notify_started::MessageId,
			}
			pub mod version_notify_started {
				use super::runtime_types;
				pub type Destination = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Cost = runtime_types::xcm::v3::multiasset::MultiAssets;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for VersionNotifyStarted {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionNotifyStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "We have requested that a remote chain send us XCM version change notifications."]
			pub struct VersionNotifyRequested {
				pub destination: version_notify_requested::Destination,
				pub cost: version_notify_requested::Cost,
				pub message_id: version_notify_requested::MessageId,
			}
			pub mod version_notify_requested {
				use super::runtime_types;
				pub type Destination = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Cost = runtime_types::xcm::v3::multiasset::MultiAssets;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for VersionNotifyRequested {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionNotifyRequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "We have requested that a remote chain stops sending us XCM version change"]
			#[doc = "notifications."]
			pub struct VersionNotifyUnrequested {
				pub destination: version_notify_unrequested::Destination,
				pub cost: version_notify_unrequested::Cost,
				pub message_id: version_notify_unrequested::MessageId,
			}
			pub mod version_notify_unrequested {
				use super::runtime_types;
				pub type Destination = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Cost = runtime_types::xcm::v3::multiasset::MultiAssets;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for VersionNotifyUnrequested {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionNotifyUnrequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
			pub struct FeesPaid {
				pub paying: fees_paid::Paying,
				pub fees: fees_paid::Fees,
			}
			pub mod fees_paid {
				use super::runtime_types;
				pub type Paying = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Fees = runtime_types::xcm::v3::multiasset::MultiAssets;
			}
			impl ::subxt::events::StaticEvent for FeesPaid {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "FeesPaid";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some assets have been claimed from an asset trap"]
			pub struct AssetsClaimed {
				pub hash: assets_claimed::Hash,
				pub origin: assets_claimed::Origin,
				pub assets: assets_claimed::Assets,
			}
			pub mod assets_claimed {
				use super::runtime_types;
				pub type Hash = ::subxt::utils::H256;
				pub type Origin = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Assets = runtime_types::xcm::VersionedMultiAssets;
			}
			impl ::subxt::events::StaticEvent for AssetsClaimed {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "AssetsClaimed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod query_counter {
					use super::runtime_types;
					pub type QueryCounter = ::core::primitive::u64;
				}
				pub mod queries {
					use super::runtime_types;
					pub type Queries =
						runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>;
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod asset_traps {
					use super::runtime_types;
					pub type AssetTraps = ::core::primitive::u32;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod safe_xcm_version {
					use super::runtime_types;
					pub type SafeXcmVersion = ::core::primitive::u32;
				}
				pub mod supported_version {
					use super::runtime_types;
					pub type SupportedVersion = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::xcm::VersionedMultiLocation;
				}
				pub mod version_notifiers {
					use super::runtime_types;
					pub type VersionNotifiers = ::core::primitive::u64;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::xcm::VersionedMultiLocation;
				}
				pub mod version_notify_targets {
					use super::runtime_types;
					pub type VersionNotifyTargets = (
						::core::primitive::u64,
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u32,
					);
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::xcm::VersionedMultiLocation;
				}
				pub mod version_discovery_queue {
					use super::runtime_types;
					pub type VersionDiscoveryQueue =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::xcm::VersionedMultiLocation,
							::core::primitive::u32,
						)>;
				}
				pub mod current_migration {
					use super::runtime_types;
					pub type CurrentMigration =
						runtime_types::pallet_xcm::pallet::VersionMigrationStage;
				}
				pub mod remote_locked_fungibles {
					use super::runtime_types;
					pub type RemoteLockedFungibles =
						runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord<()>;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = ::subxt::utils::AccountId32;
					pub type Param2 = runtime_types::xcm::VersionedAssetId;
				}
				pub mod locked_fungibles {
					use super::runtime_types;
					pub type LockedFungibles =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u128,
							runtime_types::xcm::VersionedMultiLocation,
						)>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod xcm_execution_suspended {
					use super::runtime_types;
					pub type XcmExecutionSuspended = ::core::primitive::bool;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The latest available query index."]
				pub fn query_counter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::query_counter::QueryCounter,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"QueryCounter",
						vec![],
						[
							216u8, 73u8, 160u8, 232u8, 60u8, 245u8, 218u8, 219u8, 152u8, 68u8,
							146u8, 219u8, 255u8, 7u8, 86u8, 112u8, 83u8, 49u8, 94u8, 173u8, 64u8,
							203u8, 147u8, 226u8, 236u8, 39u8, 129u8, 106u8, 209u8, 113u8, 150u8,
							50u8,
						],
					)
				}
				#[doc = " The ongoing queries."]
				pub fn queries_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::queries::Queries,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"Queries",
						vec![],
						[
							119u8, 5u8, 12u8, 91u8, 117u8, 240u8, 52u8, 192u8, 135u8, 139u8, 220u8,
							78u8, 207u8, 199u8, 71u8, 163u8, 100u8, 17u8, 6u8, 65u8, 200u8, 245u8,
							191u8, 82u8, 232u8, 128u8, 126u8, 70u8, 39u8, 63u8, 148u8, 219u8,
						],
					)
				}
				#[doc = " The ongoing queries."]
				pub fn queries(
					&self,
					_0: impl ::std::borrow::Borrow<types::queries::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::queries::Queries,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"Queries",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							119u8, 5u8, 12u8, 91u8, 117u8, 240u8, 52u8, 192u8, 135u8, 139u8, 220u8,
							78u8, 207u8, 199u8, 71u8, 163u8, 100u8, 17u8, 6u8, 65u8, 200u8, 245u8,
							191u8, 82u8, 232u8, 128u8, 126u8, 70u8, 39u8, 63u8, 148u8, 219u8,
						],
					)
				}
				#[doc = " The existing asset traps."]
				#[doc = ""]
				#[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
				#[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
				pub fn asset_traps_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::asset_traps::AssetTraps,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"AssetTraps",
						vec![],
						[
							148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
							50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
							126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
						],
					)
				}
				#[doc = " The existing asset traps."]
				#[doc = ""]
				#[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
				#[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
				pub fn asset_traps(
					&self,
					_0: impl ::std::borrow::Borrow<types::asset_traps::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::asset_traps::AssetTraps,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"AssetTraps",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
							50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
							126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
						],
					)
				}
				#[doc = " Default version to encode XCM when latest version of destination is unknown. If `None`,"]
				#[doc = " then the destinations whose XCM version is unknown are considered unreachable."]
				pub fn safe_xcm_version(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::safe_xcm_version::SafeXcmVersion,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"SafeXcmVersion",
						vec![],
						[
							187u8, 8u8, 74u8, 126u8, 80u8, 215u8, 177u8, 60u8, 223u8, 123u8, 196u8,
							155u8, 166u8, 66u8, 25u8, 164u8, 191u8, 66u8, 116u8, 131u8, 116u8,
							188u8, 224u8, 122u8, 75u8, 195u8, 246u8, 188u8, 83u8, 134u8, 49u8,
							143u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::supported_version::SupportedVersion,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"SupportedVersion",
						vec![],
						[
							144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
							212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
							111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::supported_version::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::supported_version::SupportedVersion,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"SupportedVersion",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
							212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
							111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version(
					&self,
					_0: impl ::std::borrow::Borrow<types::supported_version::Param0>,
					_1: impl ::std::borrow::Borrow<types::supported_version::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::supported_version::SupportedVersion,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"SupportedVersion",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
							212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
							111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::version_notifiers::VersionNotifiers,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"VersionNotifiers",
						vec![],
						[
							49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
							170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
							46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::version_notifiers::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::version_notifiers::VersionNotifiers,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"VersionNotifiers",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
							170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
							46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers(
					&self,
					_0: impl ::std::borrow::Borrow<types::version_notifiers::Param0>,
					_1: impl ::std::borrow::Borrow<types::version_notifiers::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::version_notifiers::VersionNotifiers,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"VersionNotifiers",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
							170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
							46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::version_notify_targets::VersionNotifyTargets,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"VersionNotifyTargets",
						vec![],
						[
							1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
							253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
							150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
							173u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::version_notify_targets::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::version_notify_targets::VersionNotifyTargets,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"VersionNotifyTargets",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
							253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
							150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
							173u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets(
					&self,
					_0: impl ::std::borrow::Borrow<types::version_notify_targets::Param0>,
					_1: impl ::std::borrow::Borrow<types::version_notify_targets::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::version_notify_targets::VersionNotifyTargets,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"VersionNotifyTargets",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
							253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
							150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
							173u8,
						],
					)
				}
				#[doc = " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and"]
				#[doc = " the `u32` counter is the number of times that a send to the destination has been attempted,"]
				#[doc = " which is used as a prioritization."]
				pub fn version_discovery_queue(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::version_discovery_queue::VersionDiscoveryQueue,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"VersionDiscoveryQueue",
						vec![],
						[
							110u8, 87u8, 102u8, 193u8, 125u8, 129u8, 0u8, 221u8, 218u8, 229u8,
							101u8, 94u8, 74u8, 229u8, 246u8, 180u8, 113u8, 11u8, 15u8, 159u8, 98u8,
							90u8, 30u8, 112u8, 164u8, 236u8, 151u8, 220u8, 19u8, 83u8, 67u8, 248u8,
						],
					)
				}
				#[doc = " The current migration's stage, if any."]
				pub fn current_migration(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::current_migration::CurrentMigration,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"CurrentMigration",
						vec![],
						[
							74u8, 138u8, 181u8, 162u8, 59u8, 251u8, 37u8, 28u8, 232u8, 51u8, 30u8,
							152u8, 252u8, 133u8, 95u8, 195u8, 47u8, 127u8, 21u8, 44u8, 62u8, 143u8,
							170u8, 234u8, 160u8, 37u8, 131u8, 179u8, 57u8, 241u8, 140u8, 124u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::remote_locked_fungibles::RemoteLockedFungibles,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						vec![],
						[
							74u8, 249u8, 83u8, 245u8, 44u8, 230u8, 152u8, 82u8, 4u8, 163u8, 230u8,
							121u8, 87u8, 143u8, 184u8, 12u8, 117u8, 112u8, 131u8, 160u8, 232u8,
							62u8, 175u8, 15u8, 81u8, 198u8, 182u8, 255u8, 37u8, 81u8, 6u8, 57u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::remote_locked_fungibles::RemoteLockedFungibles,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							74u8, 249u8, 83u8, 245u8, 44u8, 230u8, 152u8, 82u8, 4u8, 163u8, 230u8,
							121u8, 87u8, 143u8, 184u8, 12u8, 117u8, 112u8, 131u8, 160u8, 232u8,
							62u8, 175u8, 15u8, 81u8, 198u8, 182u8, 255u8, 37u8, 81u8, 6u8, 57u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles_iter2(
					&self,
					_0: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param0>,
					_1: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::remote_locked_fungibles::RemoteLockedFungibles,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							74u8, 249u8, 83u8, 245u8, 44u8, 230u8, 152u8, 82u8, 4u8, 163u8, 230u8,
							121u8, 87u8, 143u8, 184u8, 12u8, 117u8, 112u8, 131u8, 160u8, 232u8,
							62u8, 175u8, 15u8, 81u8, 198u8, 182u8, 255u8, 37u8, 81u8, 6u8, 57u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles(
					&self,
					_0: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param0>,
					_1: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param1>,
					_2: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param2>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::remote_locked_fungibles::RemoteLockedFungibles,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
						],
						[
							74u8, 249u8, 83u8, 245u8, 44u8, 230u8, 152u8, 82u8, 4u8, 163u8, 230u8,
							121u8, 87u8, 143u8, 184u8, 12u8, 117u8, 112u8, 131u8, 160u8, 232u8,
							62u8, 175u8, 15u8, 81u8, 198u8, 182u8, 255u8, 37u8, 81u8, 6u8, 57u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on this chain."]
				pub fn locked_fungibles_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::locked_fungibles::LockedFungibles,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"LockedFungibles",
						vec![],
						[
							110u8, 220u8, 127u8, 176u8, 219u8, 23u8, 132u8, 36u8, 224u8, 187u8,
							25u8, 103u8, 126u8, 99u8, 34u8, 105u8, 57u8, 182u8, 162u8, 69u8, 24u8,
							67u8, 221u8, 103u8, 79u8, 139u8, 187u8, 162u8, 113u8, 109u8, 163u8,
							35u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on this chain."]
				pub fn locked_fungibles(
					&self,
					_0: impl ::std::borrow::Borrow<types::locked_fungibles::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::locked_fungibles::LockedFungibles,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"LockedFungibles",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							110u8, 220u8, 127u8, 176u8, 219u8, 23u8, 132u8, 36u8, 224u8, 187u8,
							25u8, 103u8, 126u8, 99u8, 34u8, 105u8, 57u8, 182u8, 162u8, 69u8, 24u8,
							67u8, 221u8, 103u8, 79u8, 139u8, 187u8, 162u8, 113u8, 109u8, 163u8,
							35u8,
						],
					)
				}
				#[doc = " Global suspension state of the XCM executor."]
				pub fn xcm_execution_suspended(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::xcm_execution_suspended::XcmExecutionSuspended,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"PolkadotXcm",
						"XcmExecutionSuspended",
						vec![],
						[
							182u8, 54u8, 69u8, 68u8, 78u8, 76u8, 103u8, 79u8, 47u8, 136u8, 99u8,
							104u8, 128u8, 129u8, 249u8, 54u8, 214u8, 136u8, 97u8, 48u8, 178u8,
							42u8, 26u8, 27u8, 82u8, 24u8, 33u8, 77u8, 33u8, 27u8, 20u8, 127u8,
						],
					)
				}
			}
		}
	}
	pub mod cumulus_xcm {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::cumulus_pallet_xcm::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::cumulus_pallet_xcm::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
			}
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message is invalid XCM."]
			#[doc = "\\[ id \\]"]
			pub struct InvalidFormat(pub invalid_format::Field0);
			pub mod invalid_format {
				use super::runtime_types;
				pub type Field0 = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for InvalidFormat {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "InvalidFormat";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message is unsupported version of XCM."]
			#[doc = "\\[ id \\]"]
			pub struct UnsupportedVersion(pub unsupported_version::Field0);
			pub mod unsupported_version {
				use super::runtime_types;
				pub type Field0 = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for UnsupportedVersion {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "UnsupportedVersion";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message executed with the given outcome."]
			#[doc = "\\[ id, outcome \\]"]
			pub struct ExecutedDownward(
				pub executed_downward::Field0,
				pub executed_downward::Field1,
			);
			pub mod executed_downward {
				use super::runtime_types;
				pub type Field0 = [::core::primitive::u8; 32usize];
				pub type Field1 = runtime_types::xcm::v3::traits::Outcome;
			}
			impl ::subxt::events::StaticEvent for ExecutedDownward {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "ExecutedDownward";
			}
		}
	}
	pub mod dmp_queue {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::cumulus_pallet_dmp_queue::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::cumulus_pallet_dmp_queue::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::service_overweight`]."]
				pub struct ServiceOverweight {
					pub index: service_overweight::Index,
					pub weight_limit: service_overweight::WeightLimit,
				}
				pub mod service_overweight {
					use super::runtime_types;
					pub type Index = ::core::primitive::u64;
					pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for ServiceOverweight {
					const PALLET: &'static str = "DmpQueue";
					const CALL: &'static str = "service_overweight";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::service_overweight`]."]
				pub fn service_overweight(
					&self,
					index: types::service_overweight::Index,
					weight_limit: types::service_overweight::WeightLimit,
				) -> ::subxt::tx::Payload<types::ServiceOverweight> {
					::subxt::tx::Payload::new_static(
						"DmpQueue",
						"service_overweight",
						types::ServiceOverweight { index, weight_limit },
						[
							235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
							50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
							247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
							7u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::cumulus_pallet_dmp_queue::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message is invalid XCM."]
			pub struct InvalidFormat {
				pub message_hash: invalid_format::MessageHash,
			}
			pub mod invalid_format {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for InvalidFormat {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "InvalidFormat";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message is unsupported version of XCM."]
			pub struct UnsupportedVersion {
				pub message_hash: unsupported_version::MessageHash,
			}
			pub mod unsupported_version {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for UnsupportedVersion {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "UnsupportedVersion";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message executed with the given outcome."]
			pub struct ExecutedDownward {
				pub message_hash: executed_downward::MessageHash,
				pub message_id: executed_downward::MessageId,
				pub outcome: executed_downward::Outcome,
			}
			pub mod executed_downward {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type Outcome = runtime_types::xcm::v3::traits::Outcome;
			}
			impl ::subxt::events::StaticEvent for ExecutedDownward {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "ExecutedDownward";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The weight limit for handling downward messages was reached."]
			pub struct WeightExhausted {
				pub message_hash: weight_exhausted::MessageHash,
				pub message_id: weight_exhausted::MessageId,
				pub remaining_weight: weight_exhausted::RemainingWeight,
				pub required_weight: weight_exhausted::RequiredWeight,
			}
			pub mod weight_exhausted {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type RemainingWeight = runtime_types::sp_weights::weight_v2::Weight;
				pub type RequiredWeight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for WeightExhausted {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "WeightExhausted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message is overweight and was placed in the overweight queue."]
			pub struct OverweightEnqueued {
				pub message_hash: overweight_enqueued::MessageHash,
				pub message_id: overweight_enqueued::MessageId,
				pub overweight_index: overweight_enqueued::OverweightIndex,
				pub required_weight: overweight_enqueued::RequiredWeight,
			}
			pub mod overweight_enqueued {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type OverweightIndex = ::core::primitive::u64;
				pub type RequiredWeight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for OverweightEnqueued {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Downward message from the overweight queue was executed."]
			pub struct OverweightServiced {
				pub overweight_index: overweight_serviced::OverweightIndex,
				pub weight_used: overweight_serviced::WeightUsed,
			}
			pub mod overweight_serviced {
				use super::runtime_types;
				pub type OverweightIndex = ::core::primitive::u64;
				pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for OverweightServiced {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "OverweightServiced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The maximum number of downward messages was reached."]
			pub struct MaxMessagesExhausted {
				pub message_hash: max_messages_exhausted::MessageHash,
			}
			pub mod max_messages_exhausted {
				use super::runtime_types;
				pub type MessageHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for MaxMessagesExhausted {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "MaxMessagesExhausted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod configuration {
					use super::runtime_types;
					pub type Configuration = runtime_types::cumulus_pallet_dmp_queue::ConfigData;
				}
				pub mod page_index {
					use super::runtime_types;
					pub type PageIndex = runtime_types::cumulus_pallet_dmp_queue::PageIndexData;
				}
				pub mod pages {
					use super::runtime_types;
					pub type Pages = ::std::vec::Vec<(
						::core::primitive::u32,
						::std::vec::Vec<::core::primitive::u8>,
					)>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod overweight {
					use super::runtime_types;
					pub type Overweight =
						(::core::primitive::u32, ::std::vec::Vec<::core::primitive::u8>);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod counter_for_overweight {
					use super::runtime_types;
					pub type CounterForOverweight = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The configuration."]
				pub fn configuration(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::configuration::Configuration,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"DmpQueue",
						"Configuration",
						vec![],
						[
							28u8, 58u8, 57u8, 84u8, 115u8, 69u8, 158u8, 234u8, 180u8, 37u8, 138u8,
							120u8, 182u8, 145u8, 109u8, 203u8, 62u8, 102u8, 168u8, 56u8, 236u8,
							10u8, 236u8, 104u8, 232u8, 245u8, 107u8, 143u8, 247u8, 232u8, 135u8,
							131u8,
						],
					)
				}
				#[doc = " The page index."]
				pub fn page_index(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::page_index::PageIndex,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"DmpQueue",
						"PageIndex",
						vec![],
						[
							246u8, 129u8, 111u8, 255u8, 168u8, 54u8, 121u8, 21u8, 159u8, 142u8,
							252u8, 173u8, 3u8, 191u8, 202u8, 158u8, 86u8, 26u8, 76u8, 134u8, 201u8,
							138u8, 103u8, 75u8, 223u8, 57u8, 36u8, 45u8, 171u8, 190u8, 21u8, 60u8,
						],
					)
				}
				#[doc = " The queue pages."]
				pub fn pages_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pages::Pages,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"DmpQueue",
						"Pages",
						vec![],
						[
							24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
							133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
							30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
						],
					)
				}
				#[doc = " The queue pages."]
				pub fn pages(
					&self,
					_0: impl ::std::borrow::Borrow<types::pages::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pages::Pages,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"DmpQueue",
						"Pages",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
							133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
							30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
						],
					)
				}
				#[doc = " The overweight messages."]
				pub fn overweight_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::overweight::Overweight,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"DmpQueue",
						"Overweight",
						vec![],
						[
							86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
							48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
							117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
						],
					)
				}
				#[doc = " The overweight messages."]
				pub fn overweight(
					&self,
					_0: impl ::std::borrow::Borrow<types::overweight::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::overweight::Overweight,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"DmpQueue",
						"Overweight",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
							48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
							117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_overweight(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::counter_for_overweight::CounterForOverweight,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"DmpQueue",
						"CounterForOverweight",
						vec![],
						[
							44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
							28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
							143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
							247u8, 0u8,
						],
					)
				}
			}
		}
	}
	pub mod utility {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_utility::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_utility::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::batch`]."]
				pub struct Batch {
					pub calls: batch::Calls,
				}
				pub mod batch {
					use super::runtime_types;
					pub type Calls =
						::std::vec::Vec<runtime_types::tangle_kusama_runtime::RuntimeCall>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Batch {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "batch";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::as_derivative`]."]
				pub struct AsDerivative {
					pub index: as_derivative::Index,
					pub call: ::std::boxed::Box<as_derivative::Call>,
				}
				pub mod as_derivative {
					use super::runtime_types;
					pub type Index = ::core::primitive::u16;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for AsDerivative {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "as_derivative";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::batch_all`]."]
				pub struct BatchAll {
					pub calls: batch_all::Calls,
				}
				pub mod batch_all {
					use super::runtime_types;
					pub type Calls =
						::std::vec::Vec<runtime_types::tangle_kusama_runtime::RuntimeCall>;
				}
				impl ::subxt::blocks::StaticExtrinsic for BatchAll {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "batch_all";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::dispatch_as`]."]
				pub struct DispatchAs {
					pub as_origin: ::std::boxed::Box<dispatch_as::AsOrigin>,
					pub call: ::std::boxed::Box<dispatch_as::Call>,
				}
				pub mod dispatch_as {
					use super::runtime_types;
					pub type AsOrigin = runtime_types::tangle_kusama_runtime::OriginCaller;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for DispatchAs {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "dispatch_as";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_batch`]."]
				pub struct ForceBatch {
					pub calls: force_batch::Calls,
				}
				pub mod force_batch {
					use super::runtime_types;
					pub type Calls =
						::std::vec::Vec<runtime_types::tangle_kusama_runtime::RuntimeCall>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceBatch {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "force_batch";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::with_weight`]."]
				pub struct WithWeight {
					pub call: ::std::boxed::Box<with_weight::Call>,
					pub weight: with_weight::Weight,
				}
				pub mod with_weight {
					use super::runtime_types;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for WithWeight {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "with_weight";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::batch`]."]
				pub fn batch(
					&self,
					calls: types::batch::Calls,
				) -> ::subxt::tx::Payload<types::Batch> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"batch",
						types::Batch { calls },
						[
							116u8, 247u8, 119u8, 116u8, 198u8, 182u8, 52u8, 242u8, 90u8, 232u8,
							190u8, 44u8, 103u8, 203u8, 173u8, 206u8, 242u8, 46u8, 185u8, 238u8,
							135u8, 179u8, 204u8, 159u8, 177u8, 172u8, 242u8, 179u8, 172u8, 129u8,
							217u8, 93u8,
						],
					)
				}
				#[doc = "See [`Pallet::as_derivative`]."]
				pub fn as_derivative(
					&self,
					index: types::as_derivative::Index,
					call: types::as_derivative::Call,
				) -> ::subxt::tx::Payload<types::AsDerivative> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"as_derivative",
						types::AsDerivative { index, call: ::std::boxed::Box::new(call) },
						[
							19u8, 163u8, 110u8, 41u8, 46u8, 125u8, 134u8, 219u8, 183u8, 153u8,
							121u8, 95u8, 183u8, 156u8, 129u8, 42u8, 44u8, 188u8, 169u8, 145u8,
							252u8, 34u8, 243u8, 32u8, 59u8, 174u8, 75u8, 120u8, 137u8, 204u8,
							242u8, 12u8,
						],
					)
				}
				#[doc = "See [`Pallet::batch_all`]."]
				pub fn batch_all(
					&self,
					calls: types::batch_all::Calls,
				) -> ::subxt::tx::Payload<types::BatchAll> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"batch_all",
						types::BatchAll { calls },
						[
							144u8, 189u8, 15u8, 91u8, 79u8, 94u8, 61u8, 208u8, 118u8, 98u8, 246u8,
							11u8, 103u8, 135u8, 37u8, 231u8, 81u8, 59u8, 55u8, 61u8, 141u8, 97u8,
							161u8, 152u8, 209u8, 116u8, 81u8, 33u8, 91u8, 248u8, 170u8, 166u8,
						],
					)
				}
				#[doc = "See [`Pallet::dispatch_as`]."]
				pub fn dispatch_as(
					&self,
					as_origin: types::dispatch_as::AsOrigin,
					call: types::dispatch_as::Call,
				) -> ::subxt::tx::Payload<types::DispatchAs> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"dispatch_as",
						types::DispatchAs {
							as_origin: ::std::boxed::Box::new(as_origin),
							call: ::std::boxed::Box::new(call),
						},
						[
							32u8, 28u8, 171u8, 220u8, 103u8, 76u8, 125u8, 9u8, 46u8, 49u8, 161u8,
							159u8, 200u8, 247u8, 54u8, 203u8, 251u8, 64u8, 169u8, 35u8, 118u8,
							181u8, 135u8, 140u8, 139u8, 243u8, 102u8, 59u8, 166u8, 46u8, 230u8,
							161u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_batch`]."]
				pub fn force_batch(
					&self,
					calls: types::force_batch::Calls,
				) -> ::subxt::tx::Payload<types::ForceBatch> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"force_batch",
						types::ForceBatch { calls },
						[
							18u8, 113u8, 239u8, 160u8, 91u8, 107u8, 238u8, 231u8, 197u8, 110u8,
							180u8, 42u8, 175u8, 55u8, 116u8, 68u8, 228u8, 236u8, 240u8, 178u8,
							238u8, 73u8, 160u8, 169u8, 227u8, 82u8, 50u8, 80u8, 87u8, 247u8, 108u8,
							198u8,
						],
					)
				}
				#[doc = "See [`Pallet::with_weight`]."]
				pub fn with_weight(
					&self,
					call: types::with_weight::Call,
					weight: types::with_weight::Weight,
				) -> ::subxt::tx::Payload<types::WithWeight> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"with_weight",
						types::WithWeight { call: ::std::boxed::Box::new(call), weight },
						[
							152u8, 250u8, 129u8, 74u8, 144u8, 141u8, 15u8, 24u8, 181u8, 187u8,
							157u8, 191u8, 127u8, 212u8, 178u8, 11u8, 130u8, 235u8, 230u8, 166u8,
							246u8, 254u8, 114u8, 188u8, 218u8, 90u8, 61u8, 139u8, 152u8, 234u8,
							164u8, 44u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_utility::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
			#[doc = "well as the error."]
			pub struct BatchInterrupted {
				pub index: batch_interrupted::Index,
				pub error: batch_interrupted::Error,
			}
			pub mod batch_interrupted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Error = runtime_types::sp_runtime::DispatchError;
			}
			impl ::subxt::events::StaticEvent for BatchInterrupted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchInterrupted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Batch of dispatches completed fully with no error."]
			pub struct BatchCompleted;
			impl ::subxt::events::StaticEvent for BatchCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompleted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Batch of dispatches completed but has errors."]
			pub struct BatchCompletedWithErrors;
			impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompletedWithErrors";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A single item within a Batch of dispatches has completed with no error."]
			pub struct ItemCompleted;
			impl ::subxt::events::StaticEvent for ItemCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemCompleted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A single item within a Batch of dispatches has completed with error."]
			pub struct ItemFailed {
				pub error: item_failed::Error,
			}
			pub mod item_failed {
				use super::runtime_types;
				pub type Error = runtime_types::sp_runtime::DispatchError;
			}
			impl ::subxt::events::StaticEvent for ItemFailed {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A call was dispatched."]
			pub struct DispatchedAs {
				pub result: dispatched_as::Result,
			}
			pub mod dispatched_as {
				use super::runtime_types;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for DispatchedAs {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "DispatchedAs";
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The limit on the number of batched calls."]
				pub fn batched_calls_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Utility",
						"batched_calls_limit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod scheduler {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_scheduler::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_scheduler::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule`]."]
				pub struct Schedule {
					pub when: schedule::When,
					pub maybe_periodic: schedule::MaybePeriodic,
					pub priority: schedule::Priority,
					pub call: ::std::boxed::Box<schedule::Call>,
				}
				pub mod schedule {
					use super::runtime_types;
					pub type When = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for Schedule {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel`]."]
				pub struct Cancel {
					pub when: cancel::When,
					pub index: cancel::Index,
				}
				pub mod cancel {
					use super::runtime_types;
					pub type When = ::core::primitive::u32;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Cancel {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "cancel";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_named`]."]
				pub struct ScheduleNamed {
					pub id: schedule_named::Id,
					pub when: schedule_named::When,
					pub maybe_periodic: schedule_named::MaybePeriodic,
					pub priority: schedule_named::Priority,
					pub call: ::std::boxed::Box<schedule_named::Call>,
				}
				pub mod schedule_named {
					use super::runtime_types;
					pub type Id = [::core::primitive::u8; 32usize];
					pub type When = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for ScheduleNamed {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule_named";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_named`]."]
				pub struct CancelNamed {
					pub id: cancel_named::Id,
				}
				pub mod cancel_named {
					use super::runtime_types;
					pub type Id = [::core::primitive::u8; 32usize];
				}
				impl ::subxt::blocks::StaticExtrinsic for CancelNamed {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "cancel_named";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_after`]."]
				pub struct ScheduleAfter {
					pub after: schedule_after::After,
					pub maybe_periodic: schedule_after::MaybePeriodic,
					pub priority: schedule_after::Priority,
					pub call: ::std::boxed::Box<schedule_after::Call>,
				}
				pub mod schedule_after {
					use super::runtime_types;
					pub type After = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for ScheduleAfter {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule_after";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::schedule_named_after`]."]
				pub struct ScheduleNamedAfter {
					pub id: schedule_named_after::Id,
					pub after: schedule_named_after::After,
					pub maybe_periodic: schedule_named_after::MaybePeriodic,
					pub priority: schedule_named_after::Priority,
					pub call: ::std::boxed::Box<schedule_named_after::Call>,
				}
				pub mod schedule_named_after {
					use super::runtime_types;
					pub type Id = [::core::primitive::u8; 32usize];
					pub type After = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for ScheduleNamedAfter {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule_named_after";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::schedule`]."]
				pub fn schedule(
					&self,
					when: types::schedule::When,
					maybe_periodic: types::schedule::MaybePeriodic,
					priority: types::schedule::Priority,
					call: types::schedule::Call,
				) -> ::subxt::tx::Payload<types::Schedule> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule",
						types::Schedule {
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							128u8, 253u8, 222u8, 41u8, 96u8, 200u8, 102u8, 163u8, 83u8, 36u8, 41u8,
							21u8, 218u8, 120u8, 109u8, 182u8, 120u8, 222u8, 32u8, 138u8, 239u8,
							66u8, 37u8, 121u8, 189u8, 182u8, 156u8, 67u8, 211u8, 175u8, 90u8, 34u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel`]."]
				pub fn cancel(
					&self,
					when: types::cancel::When,
					index: types::cancel::Index,
				) -> ::subxt::tx::Payload<types::Cancel> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"cancel",
						types::Cancel { when, index },
						[
							183u8, 204u8, 143u8, 86u8, 17u8, 130u8, 132u8, 91u8, 133u8, 168u8,
							103u8, 129u8, 114u8, 56u8, 123u8, 42u8, 123u8, 120u8, 221u8, 211u8,
							26u8, 85u8, 82u8, 246u8, 192u8, 39u8, 254u8, 45u8, 147u8, 56u8, 178u8,
							133u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_named`]."]
				pub fn schedule_named(
					&self,
					id: types::schedule_named::Id,
					when: types::schedule_named::When,
					maybe_periodic: types::schedule_named::MaybePeriodic,
					priority: types::schedule_named::Priority,
					call: types::schedule_named::Call,
				) -> ::subxt::tx::Payload<types::ScheduleNamed> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule_named",
						types::ScheduleNamed {
							id,
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							36u8, 61u8, 1u8, 132u8, 164u8, 22u8, 210u8, 250u8, 99u8, 3u8, 62u8,
							60u8, 144u8, 255u8, 68u8, 151u8, 5u8, 131u8, 229u8, 92u8, 4u8, 192u8,
							151u8, 13u8, 232u8, 232u8, 30u8, 152u8, 209u8, 52u8, 49u8, 188u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_named`]."]
				pub fn cancel_named(
					&self,
					id: types::cancel_named::Id,
				) -> ::subxt::tx::Payload<types::CancelNamed> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"cancel_named",
						types::CancelNamed { id },
						[
							205u8, 35u8, 28u8, 57u8, 224u8, 7u8, 49u8, 233u8, 236u8, 163u8, 93u8,
							236u8, 103u8, 69u8, 65u8, 51u8, 121u8, 84u8, 9u8, 196u8, 147u8, 122u8,
							227u8, 200u8, 181u8, 233u8, 62u8, 240u8, 174u8, 83u8, 129u8, 193u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_after`]."]
				pub fn schedule_after(
					&self,
					after: types::schedule_after::After,
					maybe_periodic: types::schedule_after::MaybePeriodic,
					priority: types::schedule_after::Priority,
					call: types::schedule_after::Call,
				) -> ::subxt::tx::Payload<types::ScheduleAfter> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule_after",
						types::ScheduleAfter {
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							121u8, 242u8, 110u8, 57u8, 86u8, 17u8, 197u8, 129u8, 94u8, 239u8,
							148u8, 94u8, 2u8, 100u8, 167u8, 173u8, 127u8, 7u8, 137u8, 116u8, 220u8,
							31u8, 113u8, 155u8, 129u8, 65u8, 207u8, 203u8, 115u8, 229u8, 34u8,
							13u8,
						],
					)
				}
				#[doc = "See [`Pallet::schedule_named_after`]."]
				pub fn schedule_named_after(
					&self,
					id: types::schedule_named_after::Id,
					after: types::schedule_named_after::After,
					maybe_periodic: types::schedule_named_after::MaybePeriodic,
					priority: types::schedule_named_after::Priority,
					call: types::schedule_named_after::Call,
				) -> ::subxt::tx::Payload<types::ScheduleNamedAfter> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule_named_after",
						types::ScheduleNamedAfter {
							id,
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							132u8, 3u8, 108u8, 51u8, 90u8, 5u8, 5u8, 79u8, 164u8, 4u8, 231u8,
							249u8, 174u8, 156u8, 71u8, 252u8, 233u8, 145u8, 128u8, 52u8, 3u8,
							202u8, 50u8, 82u8, 194u8, 191u8, 186u8, 34u8, 242u8, 217u8, 224u8,
							13u8,
						],
					)
				}
			}
		}
		#[doc = "Events type."]
		pub type Event = runtime_types::pallet_scheduler::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Scheduled some task."]
			pub struct Scheduled {
				pub when: scheduled::When,
				pub index: scheduled::Index,
			}
			pub mod scheduled {
				use super::runtime_types;
				pub type When = ::core::primitive::u32;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Scheduled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Scheduled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Canceled some task."]
			pub struct Canceled {
				pub when: canceled::When,
				pub index: canceled::Index,
			}
			pub mod canceled {
				use super::runtime_types;
				pub type When = ::core::primitive::u32;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Canceled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Canceled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Dispatched some task."]
			pub struct Dispatched {
				pub task: dispatched::Task,
				pub id: dispatched::Id,
				pub result: dispatched::Result,
			}
			pub mod dispatched {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for Dispatched {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Dispatched";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The call for the provided hash was not found so the task has been aborted."]
			pub struct CallUnavailable {
				pub task: call_unavailable::Task,
				pub id: call_unavailable::Id,
			}
			pub mod call_unavailable {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::events::StaticEvent for CallUnavailable {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "CallUnavailable";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given task was unable to be renewed since the agenda is full at that block."]
			pub struct PeriodicFailed {
				pub task: periodic_failed::Task,
				pub id: periodic_failed::Id,
			}
			pub mod periodic_failed {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::events::StaticEvent for PeriodicFailed {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "PeriodicFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given task can never be executed since it is overweight."]
			pub struct PermanentlyOverweight {
				pub task: permanently_overweight::Task,
				pub id: permanently_overweight::Id,
			}
			pub mod permanently_overweight {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::events::StaticEvent for PermanentlyOverweight {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "PermanentlyOverweight";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod incomplete_since {
					use super::runtime_types;
					pub type IncompleteSince = ::core::primitive::u32;
				}
				pub mod agenda {
					use super::runtime_types;
					pub type Agenda = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::option::Option<
							runtime_types::pallet_scheduler::Scheduled<
								[::core::primitive::u8; 32usize],
								runtime_types::frame_support::traits::preimages::Bounded<
									runtime_types::tangle_kusama_runtime::RuntimeCall,
									runtime_types::sp_runtime::traits::BlakeTwo256,
								>,
								::core::primitive::u32,
								runtime_types::tangle_kusama_runtime::OriginCaller,
								::subxt::utils::AccountId32,
							>,
						>,
					>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod lookup {
					use super::runtime_types;
					pub type Lookup = (::core::primitive::u32, ::core::primitive::u32);
					pub type Param0 = [::core::primitive::u8; 32usize];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn incomplete_since(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::incomplete_since::IncompleteSince,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"IncompleteSince",
						vec![],
						[
							250u8, 83u8, 64u8, 167u8, 205u8, 59u8, 225u8, 97u8, 205u8, 12u8, 76u8,
							130u8, 197u8, 4u8, 111u8, 208u8, 92u8, 217u8, 145u8, 119u8, 38u8,
							135u8, 1u8, 242u8, 228u8, 143u8, 56u8, 25u8, 115u8, 233u8, 227u8, 66u8,
						],
					)
				}
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::agenda::Agenda,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Agenda",
						vec![],
						[
							16u8, 56u8, 99u8, 146u8, 193u8, 204u8, 191u8, 65u8, 151u8, 27u8, 156u8,
							124u8, 43u8, 216u8, 41u8, 218u8, 59u8, 121u8, 137u8, 231u8, 37u8, 26u8,
							157u8, 169u8, 67u8, 73u8, 105u8, 255u8, 186u8, 195u8, 61u8, 186u8,
						],
					)
				}
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda(
					&self,
					_0: impl ::std::borrow::Borrow<types::agenda::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::agenda::Agenda,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Agenda",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							16u8, 56u8, 99u8, 146u8, 193u8, 204u8, 191u8, 65u8, 151u8, 27u8, 156u8,
							124u8, 43u8, 216u8, 41u8, 218u8, 59u8, 121u8, 137u8, 231u8, 37u8, 26u8,
							157u8, 169u8, 67u8, 73u8, 105u8, 255u8, 186u8, 195u8, 61u8, 186u8,
						],
					)
				}
				#[doc = " Lookup from a name to the block number and index of the task."]
				#[doc = ""]
				#[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
				#[doc = " identities."]
				pub fn lookup_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::lookup::Lookup,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Lookup",
						vec![],
						[
							24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
							98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
							70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
						],
					)
				}
				#[doc = " Lookup from a name to the block number and index of the task."]
				#[doc = ""]
				#[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
				#[doc = " identities."]
				pub fn lookup(
					&self,
					_0: impl ::std::borrow::Borrow<types::lookup::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::lookup::Lookup,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Lookup",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
							98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
							70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight that may be scheduled per block for any dispatchables."]
				pub fn maximum_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"Scheduler",
						"MaximumWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
				#[doc = " The maximum number of scheduled calls in the queue for a single block."]
				#[doc = ""]
				#[doc = " NOTE:"]
				#[doc = " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a"]
				#[doc = " higher limit under `runtime-benchmarks` feature."]
				pub fn max_scheduled_per_block(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Scheduler",
						"MaxScheduledPerBlock",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod proxy {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_proxy::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_proxy::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::proxy`]."]
				pub struct Proxy {
					pub real: proxy::Real,
					pub force_proxy_type: proxy::ForceProxyType,
					pub call: ::std::boxed::Box<proxy::Call>,
				}
				pub mod proxy {
					use super::runtime_types;
					pub type Real = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ForceProxyType =
						::core::option::Option<runtime_types::tangle_kusama_runtime::ProxyType>;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for Proxy {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "proxy";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_proxy`]."]
				pub struct AddProxy {
					pub delegate: add_proxy::Delegate,
					pub proxy_type: add_proxy::ProxyType,
					pub delay: add_proxy::Delay,
				}
				pub mod add_proxy {
					use super::runtime_types;
					pub type Delegate = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ProxyType = runtime_types::tangle_kusama_runtime::ProxyType;
					pub type Delay = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddProxy {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "add_proxy";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_proxy`]."]
				pub struct RemoveProxy {
					pub delegate: remove_proxy::Delegate,
					pub proxy_type: remove_proxy::ProxyType,
					pub delay: remove_proxy::Delay,
				}
				pub mod remove_proxy {
					use super::runtime_types;
					pub type Delegate = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ProxyType = runtime_types::tangle_kusama_runtime::ProxyType;
					pub type Delay = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveProxy {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "remove_proxy";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_proxies`]."]
				pub struct RemoveProxies;
				impl ::subxt::blocks::StaticExtrinsic for RemoveProxies {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "remove_proxies";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::create_pure`]."]
				pub struct CreatePure {
					pub proxy_type: create_pure::ProxyType,
					pub delay: create_pure::Delay,
					pub index: create_pure::Index,
				}
				pub mod create_pure {
					use super::runtime_types;
					pub type ProxyType = runtime_types::tangle_kusama_runtime::ProxyType;
					pub type Delay = ::core::primitive::u32;
					pub type Index = ::core::primitive::u16;
				}
				impl ::subxt::blocks::StaticExtrinsic for CreatePure {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "create_pure";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::kill_pure`]."]
				pub struct KillPure {
					pub spawner: kill_pure::Spawner,
					pub proxy_type: kill_pure::ProxyType,
					pub index: kill_pure::Index,
					#[codec(compact)]
					pub height: kill_pure::Height,
					#[codec(compact)]
					pub ext_index: kill_pure::ExtIndex,
				}
				pub mod kill_pure {
					use super::runtime_types;
					pub type Spawner = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ProxyType = runtime_types::tangle_kusama_runtime::ProxyType;
					pub type Index = ::core::primitive::u16;
					pub type Height = ::core::primitive::u32;
					pub type ExtIndex = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for KillPure {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "kill_pure";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::announce`]."]
				pub struct Announce {
					pub real: announce::Real,
					pub call_hash: announce::CallHash,
				}
				pub mod announce {
					use super::runtime_types;
					pub type Real = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CallHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for Announce {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "announce";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_announcement`]."]
				pub struct RemoveAnnouncement {
					pub real: remove_announcement::Real,
					pub call_hash: remove_announcement::CallHash,
				}
				pub mod remove_announcement {
					use super::runtime_types;
					pub type Real = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CallHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveAnnouncement {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "remove_announcement";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reject_announcement`]."]
				pub struct RejectAnnouncement {
					pub delegate: reject_announcement::Delegate,
					pub call_hash: reject_announcement::CallHash,
				}
				pub mod reject_announcement {
					use super::runtime_types;
					pub type Delegate = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CallHash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for RejectAnnouncement {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "reject_announcement";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::proxy_announced`]."]
				pub struct ProxyAnnounced {
					pub delegate: proxy_announced::Delegate,
					pub real: proxy_announced::Real,
					pub force_proxy_type: proxy_announced::ForceProxyType,
					pub call: ::std::boxed::Box<proxy_announced::Call>,
				}
				pub mod proxy_announced {
					use super::runtime_types;
					pub type Delegate = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Real = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ForceProxyType =
						::core::option::Option<runtime_types::tangle_kusama_runtime::ProxyType>;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for ProxyAnnounced {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "proxy_announced";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::proxy`]."]
				pub fn proxy(
					&self,
					real: types::proxy::Real,
					force_proxy_type: types::proxy::ForceProxyType,
					call: types::proxy::Call,
				) -> ::subxt::tx::Payload<types::Proxy> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"proxy",
						types::Proxy { real, force_proxy_type, call: ::std::boxed::Box::new(call) },
						[
							143u8, 6u8, 127u8, 173u8, 228u8, 167u8, 134u8, 235u8, 52u8, 49u8,
							187u8, 249u8, 125u8, 113u8, 34u8, 146u8, 58u8, 189u8, 59u8, 105u8,
							108u8, 211u8, 40u8, 118u8, 3u8, 82u8, 213u8, 92u8, 116u8, 20u8, 181u8,
							236u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_proxy`]."]
				pub fn add_proxy(
					&self,
					delegate: types::add_proxy::Delegate,
					proxy_type: types::add_proxy::ProxyType,
					delay: types::add_proxy::Delay,
				) -> ::subxt::tx::Payload<types::AddProxy> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"add_proxy",
						types::AddProxy { delegate, proxy_type, delay },
						[
							32u8, 112u8, 39u8, 173u8, 101u8, 108u8, 208u8, 232u8, 202u8, 114u8,
							108u8, 39u8, 78u8, 33u8, 208u8, 98u8, 248u8, 130u8, 112u8, 210u8,
							205u8, 232u8, 137u8, 23u8, 99u8, 53u8, 231u8, 70u8, 49u8, 156u8, 141u8,
							82u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_proxy`]."]
				pub fn remove_proxy(
					&self,
					delegate: types::remove_proxy::Delegate,
					proxy_type: types::remove_proxy::ProxyType,
					delay: types::remove_proxy::Delay,
				) -> ::subxt::tx::Payload<types::RemoveProxy> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"remove_proxy",
						types::RemoveProxy { delegate, proxy_type, delay },
						[
							243u8, 195u8, 163u8, 244u8, 141u8, 206u8, 241u8, 80u8, 49u8, 170u8,
							146u8, 86u8, 236u8, 198u8, 66u8, 236u8, 204u8, 82u8, 166u8, 25u8,
							228u8, 8u8, 71u8, 171u8, 73u8, 55u8, 219u8, 189u8, 239u8, 209u8, 198u8,
							104u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_proxies`]."]
				pub fn remove_proxies(&self) -> ::subxt::tx::Payload<types::RemoveProxies> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"remove_proxies",
						types::RemoveProxies {},
						[
							1u8, 126u8, 36u8, 227u8, 185u8, 34u8, 218u8, 236u8, 125u8, 231u8, 68u8,
							185u8, 145u8, 63u8, 250u8, 225u8, 103u8, 3u8, 189u8, 37u8, 172u8,
							195u8, 197u8, 216u8, 99u8, 210u8, 240u8, 162u8, 158u8, 132u8, 24u8,
							6u8,
						],
					)
				}
				#[doc = "See [`Pallet::create_pure`]."]
				pub fn create_pure(
					&self,
					proxy_type: types::create_pure::ProxyType,
					delay: types::create_pure::Delay,
					index: types::create_pure::Index,
				) -> ::subxt::tx::Payload<types::CreatePure> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"create_pure",
						types::CreatePure { proxy_type, delay, index },
						[
							0u8, 19u8, 213u8, 160u8, 178u8, 84u8, 3u8, 14u8, 235u8, 63u8, 117u8,
							250u8, 192u8, 57u8, 76u8, 244u8, 115u8, 152u8, 120u8, 201u8, 217u8,
							147u8, 119u8, 64u8, 87u8, 28u8, 140u8, 211u8, 170u8, 147u8, 175u8,
							143u8,
						],
					)
				}
				#[doc = "See [`Pallet::kill_pure`]."]
				pub fn kill_pure(
					&self,
					spawner: types::kill_pure::Spawner,
					proxy_type: types::kill_pure::ProxyType,
					index: types::kill_pure::Index,
					height: types::kill_pure::Height,
					ext_index: types::kill_pure::ExtIndex,
				) -> ::subxt::tx::Payload<types::KillPure> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"kill_pure",
						types::KillPure { spawner, proxy_type, index, height, ext_index },
						[
							247u8, 30u8, 45u8, 50u8, 17u8, 127u8, 221u8, 82u8, 222u8, 226u8, 156u8,
							208u8, 43u8, 232u8, 25u8, 129u8, 231u8, 17u8, 203u8, 19u8, 16u8, 62u8,
							55u8, 84u8, 243u8, 71u8, 239u8, 109u8, 138u8, 239u8, 193u8, 182u8,
						],
					)
				}
				#[doc = "See [`Pallet::announce`]."]
				pub fn announce(
					&self,
					real: types::announce::Real,
					call_hash: types::announce::CallHash,
				) -> ::subxt::tx::Payload<types::Announce> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"announce",
						types::Announce { real, call_hash },
						[
							32u8, 88u8, 145u8, 33u8, 55u8, 44u8, 136u8, 153u8, 26u8, 111u8, 73u8,
							15u8, 247u8, 188u8, 14u8, 236u8, 221u8, 222u8, 60u8, 97u8, 71u8, 229u8,
							18u8, 120u8, 182u8, 43u8, 67u8, 248u8, 169u8, 80u8, 170u8, 207u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_announcement`]."]
				pub fn remove_announcement(
					&self,
					real: types::remove_announcement::Real,
					call_hash: types::remove_announcement::CallHash,
				) -> ::subxt::tx::Payload<types::RemoveAnnouncement> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"remove_announcement",
						types::RemoveAnnouncement { real, call_hash },
						[
							195u8, 224u8, 61u8, 33u8, 27u8, 100u8, 168u8, 18u8, 105u8, 23u8, 220u8,
							168u8, 207u8, 231u8, 136u8, 46u8, 181u8, 85u8, 15u8, 151u8, 126u8,
							227u8, 97u8, 162u8, 232u8, 39u8, 45u8, 255u8, 44u8, 167u8, 237u8, 38u8,
						],
					)
				}
				#[doc = "See [`Pallet::reject_announcement`]."]
				pub fn reject_announcement(
					&self,
					delegate: types::reject_announcement::Delegate,
					call_hash: types::reject_announcement::CallHash,
				) -> ::subxt::tx::Payload<types::RejectAnnouncement> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"reject_announcement",
						types::RejectAnnouncement { delegate, call_hash },
						[
							29u8, 140u8, 243u8, 165u8, 143u8, 166u8, 205u8, 203u8, 111u8, 196u8,
							11u8, 2u8, 4u8, 230u8, 11u8, 136u8, 249u8, 139u8, 224u8, 242u8, 96u8,
							146u8, 118u8, 210u8, 104u8, 77u8, 168u8, 28u8, 67u8, 244u8, 91u8, 65u8,
						],
					)
				}
				#[doc = "See [`Pallet::proxy_announced`]."]
				pub fn proxy_announced(
					&self,
					delegate: types::proxy_announced::Delegate,
					real: types::proxy_announced::Real,
					force_proxy_type: types::proxy_announced::ForceProxyType,
					call: types::proxy_announced::Call,
				) -> ::subxt::tx::Payload<types::ProxyAnnounced> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"proxy_announced",
						types::ProxyAnnounced {
							delegate,
							real,
							force_proxy_type,
							call: ::std::boxed::Box::new(call),
						},
						[
							139u8, 185u8, 28u8, 185u8, 90u8, 107u8, 1u8, 62u8, 141u8, 124u8, 69u8,
							60u8, 164u8, 52u8, 128u8, 168u8, 215u8, 51u8, 216u8, 147u8, 16u8,
							167u8, 31u8, 204u8, 114u8, 63u8, 164u8, 229u8, 128u8, 6u8, 68u8, 27u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_proxy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proxy was executed correctly, with the given."]
			pub struct ProxyExecuted {
				pub result: proxy_executed::Result,
			}
			pub mod proxy_executed {
				use super::runtime_types;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for ProxyExecuted {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pure account has been created by new proxy with given"]
			#[doc = "disambiguation index and proxy type."]
			pub struct PureCreated {
				pub pure: pure_created::Pure,
				pub who: pure_created::Who,
				pub proxy_type: pure_created::ProxyType,
				pub disambiguation_index: pure_created::DisambiguationIndex,
			}
			pub mod pure_created {
				use super::runtime_types;
				pub type Pure = ::subxt::utils::AccountId32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type ProxyType = runtime_types::tangle_kusama_runtime::ProxyType;
				pub type DisambiguationIndex = ::core::primitive::u16;
			}
			impl ::subxt::events::StaticEvent for PureCreated {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "PureCreated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An announcement was placed to make a call in the future."]
			pub struct Announced {
				pub real: announced::Real,
				pub proxy: announced::Proxy,
				pub call_hash: announced::CallHash,
			}
			pub mod announced {
				use super::runtime_types;
				pub type Real = ::subxt::utils::AccountId32;
				pub type Proxy = ::subxt::utils::AccountId32;
				pub type CallHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Announced {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "Announced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proxy was added."]
			pub struct ProxyAdded {
				pub delegator: proxy_added::Delegator,
				pub delegatee: proxy_added::Delegatee,
				pub proxy_type: proxy_added::ProxyType,
				pub delay: proxy_added::Delay,
			}
			pub mod proxy_added {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Delegatee = ::subxt::utils::AccountId32;
				pub type ProxyType = runtime_types::tangle_kusama_runtime::ProxyType;
				pub type Delay = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ProxyAdded {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proxy was removed."]
			pub struct ProxyRemoved {
				pub delegator: proxy_removed::Delegator,
				pub delegatee: proxy_removed::Delegatee,
				pub proxy_type: proxy_removed::ProxyType,
				pub delay: proxy_removed::Delay,
			}
			pub mod proxy_removed {
				use super::runtime_types;
				pub type Delegator = ::subxt::utils::AccountId32;
				pub type Delegatee = ::subxt::utils::AccountId32;
				pub type ProxyType = runtime_types::tangle_kusama_runtime::ProxyType;
				pub type Delay = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ProxyRemoved {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proxies {
					use super::runtime_types;
					pub type Proxies = (
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::ProxyDefinition<
								::subxt::utils::AccountId32,
								runtime_types::tangle_kusama_runtime::ProxyType,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					);
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod announcements {
					use super::runtime_types;
					pub type Announcements = (
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::Announcement<
								::subxt::utils::AccountId32,
								::subxt::utils::H256,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					);
					pub type Param0 = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proxies::Proxies,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Proxies",
						vec![],
						[
							194u8, 0u8, 169u8, 134u8, 144u8, 129u8, 110u8, 180u8, 27u8, 99u8,
							210u8, 113u8, 139u8, 249u8, 152u8, 20u8, 11u8, 6u8, 161u8, 169u8, 35u8,
							197u8, 194u8, 16u8, 41u8, 117u8, 97u8, 211u8, 81u8, 37u8, 87u8, 253u8,
						],
					)
				}
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies(
					&self,
					_0: impl ::std::borrow::Borrow<types::proxies::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proxies::Proxies,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Proxies",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							194u8, 0u8, 169u8, 134u8, 144u8, 129u8, 110u8, 180u8, 27u8, 99u8,
							210u8, 113u8, 139u8, 249u8, 152u8, 20u8, 11u8, 6u8, 161u8, 169u8, 35u8,
							197u8, 194u8, 16u8, 41u8, 117u8, 97u8, 211u8, 81u8, 37u8, 87u8, 253u8,
						],
					)
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::announcements::Announcements,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Announcements",
						vec![],
						[
							129u8, 228u8, 198u8, 210u8, 90u8, 69u8, 151u8, 198u8, 206u8, 174u8,
							148u8, 58u8, 134u8, 14u8, 53u8, 56u8, 234u8, 71u8, 84u8, 247u8, 246u8,
							207u8, 117u8, 221u8, 84u8, 72u8, 254u8, 215u8, 102u8, 49u8, 21u8,
							173u8,
						],
					)
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements(
					&self,
					_0: impl ::std::borrow::Borrow<types::announcements::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::announcements::Announcements,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Announcements",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							129u8, 228u8, 198u8, 210u8, 90u8, 69u8, 151u8, 198u8, 206u8, 174u8,
							148u8, 58u8, 134u8, 14u8, 53u8, 56u8, 234u8, 71u8, 84u8, 247u8, 246u8,
							207u8, 117u8, 221u8, 84u8, 72u8, 254u8, 215u8, 102u8, 49u8, 21u8,
							173u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The base amount of currency needed to reserve for creating a proxy."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
				pub fn proxy_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"ProxyDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per proxy added."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
				#[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
				#[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
				pub fn proxy_deposit_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"ProxyDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount of proxies allowed for a single account."]
				pub fn max_proxies(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"MaxProxies",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
				pub fn max_pending(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"MaxPending",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The base amount of currency needed to reserve for creating an announcement."]
				#[doc = ""]
				#[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
				#[doc = " bytes)."]
				pub fn announcement_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"AnnouncementDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per announcement made."]
				#[doc = ""]
				#[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
				#[doc = " into a pre-existing storage value."]
				pub fn announcement_deposit_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"AnnouncementDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod multisig {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_multisig::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_multisig::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::as_multi_threshold_1`]."]
				pub struct AsMultiThreshold1 {
					pub other_signatories: as_multi_threshold1::OtherSignatories,
					pub call: ::std::boxed::Box<as_multi_threshold1::Call>,
				}
				pub mod as_multi_threshold1 {
					use super::runtime_types;
					pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
				}
				impl ::subxt::blocks::StaticExtrinsic for AsMultiThreshold1 {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "as_multi_threshold_1";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::as_multi`]."]
				pub struct AsMulti {
					pub threshold: as_multi::Threshold,
					pub other_signatories: as_multi::OtherSignatories,
					pub maybe_timepoint: as_multi::MaybeTimepoint,
					pub call: ::std::boxed::Box<as_multi::Call>,
					pub max_weight: as_multi::MaxWeight,
				}
				pub mod as_multi {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u16;
					pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
					pub type MaybeTimepoint = ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>;
					pub type Call = runtime_types::tangle_kusama_runtime::RuntimeCall;
					pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for AsMulti {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "as_multi";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::approve_as_multi`]."]
				pub struct ApproveAsMulti {
					pub threshold: approve_as_multi::Threshold,
					pub other_signatories: approve_as_multi::OtherSignatories,
					pub maybe_timepoint: approve_as_multi::MaybeTimepoint,
					pub call_hash: approve_as_multi::CallHash,
					pub max_weight: approve_as_multi::MaxWeight,
				}
				pub mod approve_as_multi {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u16;
					pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
					pub type MaybeTimepoint = ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>;
					pub type CallHash = [::core::primitive::u8; 32usize];
					pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for ApproveAsMulti {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "approve_as_multi";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_as_multi`]."]
				pub struct CancelAsMulti {
					pub threshold: cancel_as_multi::Threshold,
					pub other_signatories: cancel_as_multi::OtherSignatories,
					pub timepoint: cancel_as_multi::Timepoint,
					pub call_hash: cancel_as_multi::CallHash,
				}
				pub mod cancel_as_multi {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u16;
					pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
					pub type Timepoint =
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
					pub type CallHash = [::core::primitive::u8; 32usize];
				}
				impl ::subxt::blocks::StaticExtrinsic for CancelAsMulti {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "cancel_as_multi";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::as_multi_threshold_1`]."]
				pub fn as_multi_threshold_1(
					&self,
					other_signatories: types::as_multi_threshold1::OtherSignatories,
					call: types::as_multi_threshold1::Call,
				) -> ::subxt::tx::Payload<types::AsMultiThreshold1> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"as_multi_threshold_1",
						types::AsMultiThreshold1 {
							other_signatories,
							call: ::std::boxed::Box::new(call),
						},
						[
							185u8, 84u8, 173u8, 206u8, 35u8, 85u8, 115u8, 119u8, 23u8, 130u8, 96u8,
							138u8, 137u8, 144u8, 32u8, 27u8, 161u8, 34u8, 98u8, 113u8, 50u8, 81u8,
							78u8, 246u8, 93u8, 220u8, 156u8, 174u8, 142u8, 12u8, 208u8, 131u8,
						],
					)
				}
				#[doc = "See [`Pallet::as_multi`]."]
				pub fn as_multi(
					&self,
					threshold: types::as_multi::Threshold,
					other_signatories: types::as_multi::OtherSignatories,
					maybe_timepoint: types::as_multi::MaybeTimepoint,
					call: types::as_multi::Call,
					max_weight: types::as_multi::MaxWeight,
				) -> ::subxt::tx::Payload<types::AsMulti> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"as_multi",
						types::AsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call: ::std::boxed::Box::new(call),
							max_weight,
						},
						[
							52u8, 227u8, 124u8, 180u8, 198u8, 74u8, 25u8, 126u8, 191u8, 84u8,
							172u8, 171u8, 225u8, 221u8, 186u8, 185u8, 28u8, 121u8, 92u8, 145u8,
							154u8, 14u8, 3u8, 189u8, 40u8, 128u8, 38u8, 99u8, 40u8, 163u8, 226u8,
							139u8,
						],
					)
				}
				#[doc = "See [`Pallet::approve_as_multi`]."]
				pub fn approve_as_multi(
					&self,
					threshold: types::approve_as_multi::Threshold,
					other_signatories: types::approve_as_multi::OtherSignatories,
					maybe_timepoint: types::approve_as_multi::MaybeTimepoint,
					call_hash: types::approve_as_multi::CallHash,
					max_weight: types::approve_as_multi::MaxWeight,
				) -> ::subxt::tx::Payload<types::ApproveAsMulti> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"approve_as_multi",
						types::ApproveAsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call_hash,
							max_weight,
						},
						[
							248u8, 46u8, 131u8, 35u8, 204u8, 12u8, 218u8, 150u8, 88u8, 131u8, 89u8,
							13u8, 95u8, 122u8, 87u8, 107u8, 136u8, 154u8, 92u8, 199u8, 108u8, 92u8,
							207u8, 171u8, 113u8, 8u8, 47u8, 248u8, 65u8, 26u8, 203u8, 135u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_as_multi`]."]
				pub fn cancel_as_multi(
					&self,
					threshold: types::cancel_as_multi::Threshold,
					other_signatories: types::cancel_as_multi::OtherSignatories,
					timepoint: types::cancel_as_multi::Timepoint,
					call_hash: types::cancel_as_multi::CallHash,
				) -> ::subxt::tx::Payload<types::CancelAsMulti> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"cancel_as_multi",
						types::CancelAsMulti { threshold, other_signatories, timepoint, call_hash },
						[
							212u8, 179u8, 123u8, 40u8, 209u8, 228u8, 181u8, 0u8, 109u8, 28u8, 27u8,
							48u8, 15u8, 47u8, 203u8, 54u8, 106u8, 114u8, 28u8, 118u8, 101u8, 201u8,
							95u8, 187u8, 46u8, 182u8, 4u8, 30u8, 227u8, 105u8, 14u8, 81u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_multisig::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A new multisig operation has begun."]
			pub struct NewMultisig {
				pub approving: new_multisig::Approving,
				pub multisig: new_multisig::Multisig,
				pub call_hash: new_multisig::CallHash,
			}
			pub mod new_multisig {
				use super::runtime_types;
				pub type Approving = ::subxt::utils::AccountId32;
				pub type Multisig = ::subxt::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for NewMultisig {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "NewMultisig";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A multisig operation has been approved by someone."]
			pub struct MultisigApproval {
				pub approving: multisig_approval::Approving,
				pub timepoint: multisig_approval::Timepoint,
				pub multisig: multisig_approval::Multisig,
				pub call_hash: multisig_approval::CallHash,
			}
			pub mod multisig_approval {
				use super::runtime_types;
				pub type Approving = ::subxt::utils::AccountId32;
				pub type Timepoint =
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
				pub type Multisig = ::subxt::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for MultisigApproval {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigApproval";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A multisig operation has been executed."]
			pub struct MultisigExecuted {
				pub approving: multisig_executed::Approving,
				pub timepoint: multisig_executed::Timepoint,
				pub multisig: multisig_executed::Multisig,
				pub call_hash: multisig_executed::CallHash,
				pub result: multisig_executed::Result,
			}
			pub mod multisig_executed {
				use super::runtime_types;
				pub type Approving = ::subxt::utils::AccountId32;
				pub type Timepoint =
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
				pub type Multisig = ::subxt::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::events::StaticEvent for MultisigExecuted {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A multisig operation has been cancelled."]
			pub struct MultisigCancelled {
				pub cancelling: multisig_cancelled::Cancelling,
				pub timepoint: multisig_cancelled::Timepoint,
				pub multisig: multisig_cancelled::Multisig,
				pub call_hash: multisig_cancelled::CallHash,
			}
			pub mod multisig_cancelled {
				use super::runtime_types;
				pub type Cancelling = ::subxt::utils::AccountId32;
				pub type Timepoint =
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
				pub type Multisig = ::subxt::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::events::StaticEvent for MultisigCancelled {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigCancelled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod multisigs {
					use super::runtime_types;
					pub type Multisigs = runtime_types::pallet_multisig::Multisig<
						::core::primitive::u32,
						::core::primitive::u128,
						::subxt::utils::AccountId32,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = [::core::primitive::u8; 32usize];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of open multisig operations."]
				pub fn multisigs_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::multisigs::Multisigs,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Multisig",
						"Multisigs",
						vec![],
						[
							154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
							151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
							37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
						],
					)
				}
				#[doc = " The set of open multisig operations."]
				pub fn multisigs_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::multisigs::Multisigs,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Multisig",
						"Multisigs",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
							151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
							37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
						],
					)
				}
				#[doc = " The set of open multisig operations."]
				pub fn multisigs(
					&self,
					_0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
					_1: impl ::std::borrow::Borrow<types::multisigs::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::multisigs::Multisigs,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Multisig",
						"Multisigs",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
							151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
							37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
				#[doc = " store a dispatch call for later."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
				#[doc = " `32 + sizeof(AccountId)` bytes."]
				pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Multisig",
						"DepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
				pub fn deposit_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Multisig",
						"DepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount of signatories allowed in the multisig."]
				pub fn max_signatories(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Multisig",
						"MaxSignatories",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod identity {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_identity::pallet::Error;
		#[doc = "Identity pallet declaration."]
		pub type Call = runtime_types::pallet_identity::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_registrar`]."]
				pub struct AddRegistrar {
					pub account: add_registrar::Account,
				}
				pub mod add_registrar {
					use super::runtime_types;
					pub type Account = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddRegistrar {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "add_registrar";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_identity`]."]
				pub struct SetIdentity {
					pub info: ::std::boxed::Box<set_identity::Info>,
				}
				pub mod set_identity {
					use super::runtime_types;
					pub type Info = runtime_types::pallet_identity::simple::IdentityInfo;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetIdentity {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "set_identity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_subs`]."]
				pub struct SetSubs {
					pub subs: set_subs::Subs,
				}
				pub mod set_subs {
					use super::runtime_types;
					pub type Subs = ::std::vec::Vec<(
						::subxt::utils::AccountId32,
						runtime_types::pallet_identity::types::Data,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetSubs {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "set_subs";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::clear_identity`]."]
				pub struct ClearIdentity;
				impl ::subxt::blocks::StaticExtrinsic for ClearIdentity {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "clear_identity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::request_judgement`]."]
				pub struct RequestJudgement {
					#[codec(compact)]
					pub reg_index: request_judgement::RegIndex,
					#[codec(compact)]
					pub max_fee: request_judgement::MaxFee,
				}
				pub mod request_judgement {
					use super::runtime_types;
					pub type RegIndex = ::core::primitive::u32;
					pub type MaxFee = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for RequestJudgement {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "request_judgement";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel_request`]."]
				pub struct CancelRequest {
					pub reg_index: cancel_request::RegIndex,
				}
				pub mod cancel_request {
					use super::runtime_types;
					pub type RegIndex = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CancelRequest {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "cancel_request";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_fee`]."]
				pub struct SetFee {
					#[codec(compact)]
					pub index: set_fee::Index,
					#[codec(compact)]
					pub fee: set_fee::Fee,
				}
				pub mod set_fee {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
					pub type Fee = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetFee {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "set_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_account_id`]."]
				pub struct SetAccountId {
					#[codec(compact)]
					pub index: set_account_id::Index,
					pub new: set_account_id::New,
				}
				pub mod set_account_id {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
					pub type New = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetAccountId {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "set_account_id";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_fields`]."]
				pub struct SetFields {
					#[codec(compact)]
					pub index: set_fields::Index,
					pub fields: set_fields::Fields,
				}
				pub mod set_fields {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
					pub type Fields = runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::simple::IdentityField,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetFields {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "set_fields";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::provide_judgement`]."]
				pub struct ProvideJudgement {
					#[codec(compact)]
					pub reg_index: provide_judgement::RegIndex,
					pub target: provide_judgement::Target,
					pub judgement: provide_judgement::Judgement,
					pub identity: provide_judgement::Identity,
				}
				pub mod provide_judgement {
					use super::runtime_types;
					pub type RegIndex = ::core::primitive::u32;
					pub type Target = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Judgement =
						runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>;
					pub type Identity = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for ProvideJudgement {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "provide_judgement";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::kill_identity`]."]
				pub struct KillIdentity {
					pub target: kill_identity::Target,
				}
				pub mod kill_identity {
					use super::runtime_types;
					pub type Target = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for KillIdentity {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "kill_identity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_sub`]."]
				pub struct AddSub {
					pub sub: add_sub::Sub,
					pub data: add_sub::Data,
				}
				pub mod add_sub {
					use super::runtime_types;
					pub type Sub = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Data = runtime_types::pallet_identity::types::Data;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddSub {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "add_sub";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::rename_sub`]."]
				pub struct RenameSub {
					pub sub: rename_sub::Sub,
					pub data: rename_sub::Data,
				}
				pub mod rename_sub {
					use super::runtime_types;
					pub type Sub = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Data = runtime_types::pallet_identity::types::Data;
				}
				impl ::subxt::blocks::StaticExtrinsic for RenameSub {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "rename_sub";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_sub`]."]
				pub struct RemoveSub {
					pub sub: remove_sub::Sub,
				}
				pub mod remove_sub {
					use super::runtime_types;
					pub type Sub = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveSub {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "remove_sub";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::quit_sub`]."]
				pub struct QuitSub;
				impl ::subxt::blocks::StaticExtrinsic for QuitSub {
					const PALLET: &'static str = "Identity";
					const CALL: &'static str = "quit_sub";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::add_registrar`]."]
				pub fn add_registrar(
					&self,
					account: types::add_registrar::Account,
				) -> ::subxt::tx::Payload<types::AddRegistrar> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"add_registrar",
						types::AddRegistrar { account },
						[
							206u8, 30u8, 240u8, 168u8, 67u8, 228u8, 17u8, 74u8, 26u8, 222u8, 61u8,
							15u8, 100u8, 25u8, 162u8, 159u8, 83u8, 110u8, 30u8, 52u8, 201u8, 49u8,
							115u8, 152u8, 142u8, 76u8, 14u8, 239u8, 184u8, 136u8, 195u8, 39u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_identity`]."]
				pub fn set_identity(
					&self,
					info: types::set_identity::Info,
				) -> ::subxt::tx::Payload<types::SetIdentity> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_identity",
						types::SetIdentity { info: ::std::boxed::Box::new(info) },
						[
							18u8, 86u8, 67u8, 10u8, 116u8, 254u8, 94u8, 95u8, 166u8, 30u8, 204u8,
							189u8, 174u8, 70u8, 191u8, 255u8, 149u8, 93u8, 156u8, 120u8, 105u8,
							138u8, 199u8, 181u8, 43u8, 150u8, 143u8, 254u8, 182u8, 81u8, 86u8,
							45u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_subs`]."]
				pub fn set_subs(
					&self,
					subs: types::set_subs::Subs,
				) -> ::subxt::tx::Payload<types::SetSubs> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_subs",
						types::SetSubs { subs },
						[
							34u8, 184u8, 18u8, 155u8, 112u8, 247u8, 235u8, 75u8, 209u8, 236u8,
							21u8, 238u8, 43u8, 237u8, 223u8, 147u8, 48u8, 6u8, 39u8, 231u8, 174u8,
							164u8, 243u8, 184u8, 220u8, 151u8, 165u8, 69u8, 219u8, 122u8, 234u8,
							100u8,
						],
					)
				}
				#[doc = "See [`Pallet::clear_identity`]."]
				pub fn clear_identity(&self) -> ::subxt::tx::Payload<types::ClearIdentity> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"clear_identity",
						types::ClearIdentity {},
						[
							43u8, 115u8, 205u8, 44u8, 24u8, 130u8, 220u8, 69u8, 247u8, 176u8,
							200u8, 175u8, 67u8, 183u8, 36u8, 200u8, 162u8, 132u8, 242u8, 25u8,
							21u8, 106u8, 197u8, 219u8, 141u8, 51u8, 204u8, 13u8, 191u8, 201u8,
							31u8, 31u8,
						],
					)
				}
				#[doc = "See [`Pallet::request_judgement`]."]
				pub fn request_judgement(
					&self,
					reg_index: types::request_judgement::RegIndex,
					max_fee: types::request_judgement::MaxFee,
				) -> ::subxt::tx::Payload<types::RequestJudgement> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"request_judgement",
						types::RequestJudgement { reg_index, max_fee },
						[
							83u8, 85u8, 55u8, 184u8, 14u8, 54u8, 49u8, 212u8, 26u8, 148u8, 33u8,
							147u8, 182u8, 54u8, 180u8, 12u8, 61u8, 179u8, 216u8, 157u8, 103u8,
							52u8, 120u8, 252u8, 83u8, 203u8, 144u8, 65u8, 15u8, 3u8, 21u8, 33u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel_request`]."]
				pub fn cancel_request(
					&self,
					reg_index: types::cancel_request::RegIndex,
				) -> ::subxt::tx::Payload<types::CancelRequest> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"cancel_request",
						types::CancelRequest { reg_index },
						[
							81u8, 14u8, 133u8, 219u8, 43u8, 84u8, 163u8, 208u8, 21u8, 185u8, 75u8,
							117u8, 126u8, 33u8, 210u8, 106u8, 122u8, 210u8, 35u8, 207u8, 104u8,
							206u8, 41u8, 117u8, 247u8, 108u8, 56u8, 23u8, 123u8, 169u8, 169u8,
							61u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_fee`]."]
				pub fn set_fee(
					&self,
					index: types::set_fee::Index,
					fee: types::set_fee::Fee,
				) -> ::subxt::tx::Payload<types::SetFee> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_fee",
						types::SetFee { index, fee },
						[
							131u8, 20u8, 17u8, 127u8, 180u8, 65u8, 225u8, 144u8, 193u8, 60u8,
							131u8, 241u8, 30u8, 149u8, 8u8, 76u8, 29u8, 52u8, 102u8, 108u8, 127u8,
							130u8, 70u8, 18u8, 94u8, 145u8, 179u8, 109u8, 252u8, 219u8, 58u8,
							163u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_account_id`]."]
				pub fn set_account_id(
					&self,
					index: types::set_account_id::Index,
					new: types::set_account_id::New,
				) -> ::subxt::tx::Payload<types::SetAccountId> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_account_id",
						types::SetAccountId { index, new },
						[
							40u8, 151u8, 216u8, 253u8, 241u8, 117u8, 210u8, 208u8, 98u8, 94u8,
							228u8, 208u8, 122u8, 100u8, 86u8, 237u8, 240u8, 89u8, 90u8, 109u8,
							23u8, 255u8, 121u8, 176u8, 146u8, 10u8, 190u8, 175u8, 148u8, 228u8,
							176u8, 43u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_fields`]."]
				pub fn set_fields(
					&self,
					index: types::set_fields::Index,
					fields: types::set_fields::Fields,
				) -> ::subxt::tx::Payload<types::SetFields> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_fields",
						types::SetFields { index, fields },
						[
							25u8, 129u8, 119u8, 232u8, 18u8, 32u8, 77u8, 23u8, 185u8, 56u8, 32u8,
							199u8, 74u8, 174u8, 104u8, 203u8, 171u8, 253u8, 19u8, 225u8, 101u8,
							239u8, 14u8, 242u8, 157u8, 51u8, 203u8, 74u8, 1u8, 65u8, 165u8, 205u8,
						],
					)
				}
				#[doc = "See [`Pallet::provide_judgement`]."]
				pub fn provide_judgement(
					&self,
					reg_index: types::provide_judgement::RegIndex,
					target: types::provide_judgement::Target,
					judgement: types::provide_judgement::Judgement,
					identity: types::provide_judgement::Identity,
				) -> ::subxt::tx::Payload<types::ProvideJudgement> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"provide_judgement",
						types::ProvideJudgement { reg_index, target, judgement, identity },
						[
							224u8, 108u8, 183u8, 113u8, 45u8, 239u8, 165u8, 94u8, 110u8, 181u8,
							66u8, 213u8, 45u8, 9u8, 132u8, 203u8, 55u8, 96u8, 19u8, 129u8, 0u8,
							240u8, 138u8, 193u8, 191u8, 188u8, 150u8, 5u8, 64u8, 188u8, 163u8,
							231u8,
						],
					)
				}
				#[doc = "See [`Pallet::kill_identity`]."]
				pub fn kill_identity(
					&self,
					target: types::kill_identity::Target,
				) -> ::subxt::tx::Payload<types::KillIdentity> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"kill_identity",
						types::KillIdentity { target },
						[
							41u8, 147u8, 161u8, 132u8, 99u8, 63u8, 42u8, 219u8, 109u8, 209u8, 19u8,
							243u8, 61u8, 122u8, 16u8, 248u8, 110u8, 85u8, 71u8, 170u8, 38u8, 4u8,
							91u8, 173u8, 212u8, 55u8, 227u8, 51u8, 100u8, 5u8, 211u8, 177u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_sub`]."]
				pub fn add_sub(
					&self,
					sub: types::add_sub::Sub,
					data: types::add_sub::Data,
				) -> ::subxt::tx::Payload<types::AddSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"add_sub",
						types::AddSub { sub, data },
						[
							92u8, 68u8, 199u8, 2u8, 215u8, 177u8, 19u8, 216u8, 8u8, 79u8, 165u8,
							233u8, 254u8, 85u8, 115u8, 41u8, 103u8, 67u8, 61u8, 93u8, 204u8, 245u8,
							197u8, 120u8, 88u8, 70u8, 37u8, 22u8, 221u8, 5u8, 100u8, 78u8,
						],
					)
				}
				#[doc = "See [`Pallet::rename_sub`]."]
				pub fn rename_sub(
					&self,
					sub: types::rename_sub::Sub,
					data: types::rename_sub::Data,
				) -> ::subxt::tx::Payload<types::RenameSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"rename_sub",
						types::RenameSub { sub, data },
						[
							54u8, 76u8, 163u8, 56u8, 90u8, 60u8, 49u8, 218u8, 100u8, 249u8, 177u8,
							33u8, 174u8, 122u8, 237u8, 205u8, 107u8, 232u8, 168u8, 155u8, 240u8,
							22u8, 97u8, 197u8, 174u8, 250u8, 8u8, 227u8, 10u8, 205u8, 188u8, 30u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_sub`]."]
				pub fn remove_sub(
					&self,
					sub: types::remove_sub::Sub,
				) -> ::subxt::tx::Payload<types::RemoveSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"remove_sub",
						types::RemoveSub { sub },
						[
							80u8, 67u8, 217u8, 201u8, 139u8, 178u8, 58u8, 253u8, 137u8, 193u8,
							133u8, 239u8, 21u8, 226u8, 14u8, 160u8, 110u8, 20u8, 35u8, 168u8,
							139u8, 199u8, 92u8, 125u8, 13u8, 52u8, 248u8, 63u8, 54u8, 166u8, 55u8,
							225u8,
						],
					)
				}
				#[doc = "See [`Pallet::quit_sub`]."]
				pub fn quit_sub(&self) -> ::subxt::tx::Payload<types::QuitSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"quit_sub",
						types::QuitSub {},
						[
							147u8, 131u8, 175u8, 171u8, 187u8, 201u8, 240u8, 26u8, 146u8, 224u8,
							74u8, 166u8, 242u8, 193u8, 204u8, 247u8, 168u8, 93u8, 18u8, 32u8, 27u8,
							208u8, 149u8, 146u8, 179u8, 172u8, 75u8, 112u8, 84u8, 141u8, 233u8,
							223u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_identity::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A name was set or reset (which will remove all judgements)."]
			pub struct IdentitySet {
				pub who: identity_set::Who,
			}
			pub mod identity_set {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for IdentitySet {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentitySet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A name was cleared, and the given balance returned."]
			pub struct IdentityCleared {
				pub who: identity_cleared::Who,
				pub deposit: identity_cleared::Deposit,
			}
			pub mod identity_cleared {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for IdentityCleared {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityCleared";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A name was removed and the given balance slashed."]
			pub struct IdentityKilled {
				pub who: identity_killed::Who,
				pub deposit: identity_killed::Deposit,
			}
			pub mod identity_killed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for IdentityKilled {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityKilled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A judgement was asked from a registrar."]
			pub struct JudgementRequested {
				pub who: judgement_requested::Who,
				pub registrar_index: judgement_requested::RegistrarIndex,
			}
			pub mod judgement_requested {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type RegistrarIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for JudgementRequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementRequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A judgement request was retracted."]
			pub struct JudgementUnrequested {
				pub who: judgement_unrequested::Who,
				pub registrar_index: judgement_unrequested::RegistrarIndex,
			}
			pub mod judgement_unrequested {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type RegistrarIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for JudgementUnrequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementUnrequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A judgement was given by a registrar."]
			pub struct JudgementGiven {
				pub target: judgement_given::Target,
				pub registrar_index: judgement_given::RegistrarIndex,
			}
			pub mod judgement_given {
				use super::runtime_types;
				pub type Target = ::subxt::utils::AccountId32;
				pub type RegistrarIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for JudgementGiven {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementGiven";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A registrar was added."]
			pub struct RegistrarAdded {
				pub registrar_index: registrar_added::RegistrarIndex,
			}
			pub mod registrar_added {
				use super::runtime_types;
				pub type RegistrarIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for RegistrarAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "RegistrarAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A sub-identity was added to an identity and the deposit paid."]
			pub struct SubIdentityAdded {
				pub sub: sub_identity_added::Sub,
				pub main: sub_identity_added::Main,
				pub deposit: sub_identity_added::Deposit,
			}
			pub mod sub_identity_added {
				use super::runtime_types;
				pub type Sub = ::subxt::utils::AccountId32;
				pub type Main = ::subxt::utils::AccountId32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SubIdentityAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A sub-identity was removed from an identity and the deposit freed."]
			pub struct SubIdentityRemoved {
				pub sub: sub_identity_removed::Sub,
				pub main: sub_identity_removed::Main,
				pub deposit: sub_identity_removed::Deposit,
			}
			pub mod sub_identity_removed {
				use super::runtime_types;
				pub type Sub = ::subxt::utils::AccountId32;
				pub type Main = ::subxt::utils::AccountId32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SubIdentityRemoved {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
			#[doc = "main identity account to the sub-identity account."]
			pub struct SubIdentityRevoked {
				pub sub: sub_identity_revoked::Sub,
				pub main: sub_identity_revoked::Main,
				pub deposit: sub_identity_revoked::Deposit,
			}
			pub mod sub_identity_revoked {
				use super::runtime_types;
				pub type Sub = ::subxt::utils::AccountId32;
				pub type Main = ::subxt::utils::AccountId32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SubIdentityRevoked {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRevoked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod identity_of {
					use super::runtime_types;
					pub type IdentityOf = runtime_types::pallet_identity::types::Registration<
						::core::primitive::u128,
						runtime_types::pallet_identity::simple::IdentityInfo,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod super_of {
					use super::runtime_types;
					pub type SuperOf =
						(::subxt::utils::AccountId32, runtime_types::pallet_identity::types::Data);
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod subs_of {
					use super::runtime_types;
					pub type SubsOf = (
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					);
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod registrars {
					use super::runtime_types;
					pub type Registrars =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::option::Option<
								runtime_types::pallet_identity::types::RegistrarInfo<
									::core::primitive::u128,
									::subxt::utils::AccountId32,
									runtime_types::pallet_identity::simple::IdentityField,
								>,
							>,
						>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Information that is pertinent to identify the entity behind an account."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn identity_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::identity_of::IdentityOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"IdentityOf",
						vec![],
						[
							112u8, 2u8, 209u8, 123u8, 138u8, 171u8, 80u8, 243u8, 226u8, 88u8, 81u8,
							49u8, 59u8, 172u8, 88u8, 180u8, 255u8, 119u8, 57u8, 16u8, 169u8, 149u8,
							77u8, 239u8, 73u8, 182u8, 28u8, 112u8, 150u8, 110u8, 65u8, 139u8,
						],
					)
				}
				#[doc = " Information that is pertinent to identify the entity behind an account."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn identity_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::identity_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::identity_of::IdentityOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"IdentityOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							112u8, 2u8, 209u8, 123u8, 138u8, 171u8, 80u8, 243u8, 226u8, 88u8, 81u8,
							49u8, 59u8, 172u8, 88u8, 180u8, 255u8, 119u8, 57u8, 16u8, 169u8, 149u8,
							77u8, 239u8, 73u8, 182u8, 28u8, 112u8, 150u8, 110u8, 65u8, 139u8,
						],
					)
				}
				#[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
				#[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
				pub fn super_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::super_of::SuperOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SuperOf",
						vec![],
						[
							84u8, 72u8, 64u8, 14u8, 56u8, 9u8, 143u8, 100u8, 141u8, 163u8, 36u8,
							55u8, 38u8, 254u8, 164u8, 17u8, 3u8, 110u8, 88u8, 175u8, 161u8, 65u8,
							159u8, 40u8, 46u8, 8u8, 177u8, 81u8, 130u8, 38u8, 193u8, 28u8,
						],
					)
				}
				#[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
				#[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
				pub fn super_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::super_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::super_of::SuperOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SuperOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							84u8, 72u8, 64u8, 14u8, 56u8, 9u8, 143u8, 100u8, 141u8, 163u8, 36u8,
							55u8, 38u8, 254u8, 164u8, 17u8, 3u8, 110u8, 88u8, 175u8, 161u8, 65u8,
							159u8, 40u8, 46u8, 8u8, 177u8, 81u8, 130u8, 38u8, 193u8, 28u8,
						],
					)
				}
				#[doc = " Alternative \"sub\" identities of this account."]
				#[doc = ""]
				#[doc = " The first item is the deposit, the second is a vector of the accounts."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn subs_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::subs_of::SubsOf,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SubsOf",
						vec![],
						[
							164u8, 140u8, 52u8, 123u8, 220u8, 118u8, 147u8, 3u8, 67u8, 22u8, 191u8,
							18u8, 186u8, 21u8, 154u8, 8u8, 205u8, 224u8, 163u8, 173u8, 174u8,
							107u8, 144u8, 215u8, 116u8, 64u8, 159u8, 115u8, 159u8, 205u8, 91u8,
							28u8,
						],
					)
				}
				#[doc = " Alternative \"sub\" identities of this account."]
				#[doc = ""]
				#[doc = " The first item is the deposit, the second is a vector of the accounts."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn subs_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::subs_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::subs_of::SubsOf,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SubsOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							164u8, 140u8, 52u8, 123u8, 220u8, 118u8, 147u8, 3u8, 67u8, 22u8, 191u8,
							18u8, 186u8, 21u8, 154u8, 8u8, 205u8, 224u8, 163u8, 173u8, 174u8,
							107u8, 144u8, 215u8, 116u8, 64u8, 159u8, 115u8, 159u8, 205u8, 91u8,
							28u8,
						],
					)
				}
				#[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
				#[doc = " special origin (likely a council motion)."]
				#[doc = ""]
				#[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
				pub fn registrars(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::registrars::Registrars,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"Registrars",
						vec![],
						[
							207u8, 253u8, 229u8, 237u8, 228u8, 85u8, 173u8, 74u8, 164u8, 67u8,
							144u8, 144u8, 5u8, 242u8, 84u8, 187u8, 110u8, 181u8, 2u8, 162u8, 239u8,
							212u8, 72u8, 233u8, 160u8, 196u8, 121u8, 218u8, 100u8, 0u8, 219u8,
							181u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The amount held on deposit for a registered identity"]
				pub fn basic_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Identity",
						"BasicDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount held on deposit per additional field for a registered identity."]
				pub fn field_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Identity",
						"FieldDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
				#[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
				#[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
				pub fn sub_account_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Identity",
						"SubAccountDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of sub-accounts allowed per identified account."]
				pub fn max_sub_accounts(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Identity",
						"MaxSubAccounts",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
				#[doc = " required to access an identity, but can be pretty high."]
				pub fn max_additional_fields(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Identity",
						"MaxAdditionalFields",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
				#[doc = " of, e.g., updating judgements."]
				pub fn max_registrars(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Identity",
						"MaxRegistrars",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod treasury {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "Error for the treasury pallet."]
		pub type Error = runtime_types::pallet_treasury::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_treasury::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::propose_spend`]."]
				pub struct ProposeSpend {
					#[codec(compact)]
					pub value: propose_spend::Value,
					pub beneficiary: propose_spend::Beneficiary,
				}
				pub mod propose_spend {
					use super::runtime_types;
					pub type Value = ::core::primitive::u128;
					pub type Beneficiary = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ProposeSpend {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "propose_spend";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reject_proposal`]."]
				pub struct RejectProposal {
					#[codec(compact)]
					pub proposal_id: reject_proposal::ProposalId,
				}
				pub mod reject_proposal {
					use super::runtime_types;
					pub type ProposalId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RejectProposal {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "reject_proposal";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::approve_proposal`]."]
				pub struct ApproveProposal {
					#[codec(compact)]
					pub proposal_id: approve_proposal::ProposalId,
				}
				pub mod approve_proposal {
					use super::runtime_types;
					pub type ProposalId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ApproveProposal {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "approve_proposal";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::spend_local`]."]
				pub struct SpendLocal {
					#[codec(compact)]
					pub amount: spend_local::Amount,
					pub beneficiary: spend_local::Beneficiary,
				}
				pub mod spend_local {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
					pub type Beneficiary = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SpendLocal {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "spend_local";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_approval`]."]
				pub struct RemoveApproval {
					#[codec(compact)]
					pub proposal_id: remove_approval::ProposalId,
				}
				pub mod remove_approval {
					use super::runtime_types;
					pub type ProposalId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveApproval {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "remove_approval";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::spend`]."]
				pub struct Spend {
					pub asset_kind: ::std::boxed::Box<spend::AssetKind>,
					#[codec(compact)]
					pub amount: spend::Amount,
					pub beneficiary: ::std::boxed::Box<spend::Beneficiary>,
					pub valid_from: spend::ValidFrom,
				}
				pub mod spend {
					use super::runtime_types;
					pub type AssetKind = ();
					pub type Amount = ::core::primitive::u128;
					pub type Beneficiary = ::subxt::utils::AccountId32;
					pub type ValidFrom = ::core::option::Option<::core::primitive::u32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Spend {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "spend";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::payout`]."]
				pub struct Payout {
					pub index: payout::Index,
				}
				pub mod payout {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Payout {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "payout";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::check_status`]."]
				pub struct CheckStatus {
					pub index: check_status::Index,
				}
				pub mod check_status {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CheckStatus {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "check_status";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::void_spend`]."]
				pub struct VoidSpend {
					pub index: void_spend::Index,
				}
				pub mod void_spend {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for VoidSpend {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "void_spend";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::propose_spend`]."]
				pub fn propose_spend(
					&self,
					value: types::propose_spend::Value,
					beneficiary: types::propose_spend::Beneficiary,
				) -> ::subxt::tx::Payload<types::ProposeSpend> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"propose_spend",
						types::ProposeSpend { value, beneficiary },
						[
							82u8, 0u8, 77u8, 68u8, 172u8, 126u8, 179u8, 217u8, 173u8, 214u8, 69u8,
							227u8, 243u8, 252u8, 100u8, 30u8, 205u8, 80u8, 99u8, 57u8, 63u8, 59u8,
							142u8, 81u8, 38u8, 22u8, 243u8, 165u8, 131u8, 193u8, 135u8, 171u8,
						],
					)
				}
				#[doc = "See [`Pallet::reject_proposal`]."]
				pub fn reject_proposal(
					&self,
					proposal_id: types::reject_proposal::ProposalId,
				) -> ::subxt::tx::Payload<types::RejectProposal> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"reject_proposal",
						types::RejectProposal { proposal_id },
						[
							18u8, 166u8, 80u8, 141u8, 222u8, 230u8, 4u8, 36u8, 7u8, 76u8, 12u8,
							40u8, 145u8, 114u8, 12u8, 43u8, 223u8, 78u8, 189u8, 222u8, 120u8, 80u8,
							225u8, 215u8, 119u8, 68u8, 200u8, 15u8, 25u8, 172u8, 192u8, 173u8,
						],
					)
				}
				#[doc = "See [`Pallet::approve_proposal`]."]
				pub fn approve_proposal(
					&self,
					proposal_id: types::approve_proposal::ProposalId,
				) -> ::subxt::tx::Payload<types::ApproveProposal> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"approve_proposal",
						types::ApproveProposal { proposal_id },
						[
							154u8, 176u8, 152u8, 97u8, 167u8, 177u8, 78u8, 9u8, 235u8, 229u8,
							199u8, 193u8, 214u8, 3u8, 16u8, 30u8, 4u8, 104u8, 27u8, 184u8, 100u8,
							65u8, 179u8, 13u8, 91u8, 62u8, 115u8, 5u8, 219u8, 211u8, 251u8, 153u8,
						],
					)
				}
				#[doc = "See [`Pallet::spend_local`]."]
				pub fn spend_local(
					&self,
					amount: types::spend_local::Amount,
					beneficiary: types::spend_local::Beneficiary,
				) -> ::subxt::tx::Payload<types::SpendLocal> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"spend_local",
						types::SpendLocal { amount, beneficiary },
						[
							81u8, 1u8, 208u8, 59u8, 56u8, 65u8, 91u8, 139u8, 14u8, 209u8, 31u8,
							42u8, 52u8, 9u8, 2u8, 90u8, 114u8, 133u8, 68u8, 243u8, 169u8, 60u8,
							172u8, 4u8, 58u8, 167u8, 52u8, 93u8, 45u8, 38u8, 248u8, 15u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_approval`]."]
				pub fn remove_approval(
					&self,
					proposal_id: types::remove_approval::ProposalId,
				) -> ::subxt::tx::Payload<types::RemoveApproval> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"remove_approval",
						types::RemoveApproval { proposal_id },
						[
							180u8, 20u8, 39u8, 227u8, 29u8, 228u8, 234u8, 36u8, 155u8, 114u8,
							197u8, 135u8, 185u8, 31u8, 56u8, 247u8, 224u8, 168u8, 254u8, 233u8,
							250u8, 134u8, 186u8, 155u8, 108u8, 84u8, 94u8, 226u8, 207u8, 130u8,
							196u8, 100u8,
						],
					)
				}
				#[doc = "See [`Pallet::spend`]."]
				pub fn spend(
					&self,
					asset_kind: types::spend::AssetKind,
					amount: types::spend::Amount,
					beneficiary: types::spend::Beneficiary,
					valid_from: types::spend::ValidFrom,
				) -> ::subxt::tx::Payload<types::Spend> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"spend",
						types::Spend {
							asset_kind: ::std::boxed::Box::new(asset_kind),
							amount,
							beneficiary: ::std::boxed::Box::new(beneficiary),
							valid_from,
						},
						[
							242u8, 22u8, 60u8, 46u8, 79u8, 233u8, 36u8, 234u8, 85u8, 150u8, 16u8,
							244u8, 155u8, 191u8, 19u8, 245u8, 44u8, 254u8, 188u8, 37u8, 61u8, 18u8,
							111u8, 199u8, 149u8, 144u8, 55u8, 216u8, 33u8, 153u8, 133u8, 129u8,
						],
					)
				}
				#[doc = "See [`Pallet::payout`]."]
				pub fn payout(
					&self,
					index: types::payout::Index,
				) -> ::subxt::tx::Payload<types::Payout> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"payout",
						types::Payout { index },
						[
							179u8, 254u8, 82u8, 94u8, 248u8, 26u8, 6u8, 34u8, 93u8, 244u8, 186u8,
							199u8, 163u8, 32u8, 110u8, 220u8, 78u8, 11u8, 168u8, 182u8, 169u8,
							56u8, 53u8, 194u8, 168u8, 218u8, 131u8, 38u8, 46u8, 156u8, 93u8, 234u8,
						],
					)
				}
				#[doc = "See [`Pallet::check_status`]."]
				pub fn check_status(
					&self,
					index: types::check_status::Index,
				) -> ::subxt::tx::Payload<types::CheckStatus> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"check_status",
						types::CheckStatus { index },
						[
							164u8, 111u8, 10u8, 11u8, 104u8, 237u8, 112u8, 240u8, 104u8, 130u8,
							179u8, 221u8, 54u8, 18u8, 8u8, 172u8, 148u8, 245u8, 110u8, 174u8, 75u8,
							38u8, 46u8, 143u8, 101u8, 232u8, 65u8, 252u8, 36u8, 152u8, 29u8, 209u8,
						],
					)
				}
				#[doc = "See [`Pallet::void_spend`]."]
				pub fn void_spend(
					&self,
					index: types::void_spend::Index,
				) -> ::subxt::tx::Payload<types::VoidSpend> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"void_spend",
						types::VoidSpend { index },
						[
							9u8, 212u8, 174u8, 92u8, 43u8, 102u8, 224u8, 124u8, 247u8, 239u8,
							196u8, 68u8, 132u8, 171u8, 116u8, 206u8, 52u8, 23u8, 92u8, 31u8, 156u8,
							160u8, 25u8, 16u8, 125u8, 60u8, 9u8, 109u8, 145u8, 139u8, 102u8, 224u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_treasury::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "New proposal."]
			pub struct Proposed {
				pub proposal_index: proposed::ProposalIndex,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "We have ended a spend period and will now allocate funds."]
			pub struct Spending {
				pub budget_remaining: spending::BudgetRemaining,
			}
			pub mod spending {
				use super::runtime_types;
				pub type BudgetRemaining = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Spending {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Spending";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some funds have been allocated."]
			pub struct Awarded {
				pub proposal_index: awarded::ProposalIndex,
				pub award: awarded::Award,
				pub account: awarded::Account,
			}
			pub mod awarded {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Award = ::core::primitive::u128;
				pub type Account = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for Awarded {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Awarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal was rejected; funds were slashed."]
			pub struct Rejected {
				pub proposal_index: rejected::ProposalIndex,
				pub slashed: rejected::Slashed,
			}
			pub mod rejected {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Slashed = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Rejected {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some of our funds have been burnt."]
			pub struct Burnt {
				pub burnt_funds: burnt::BurntFunds,
			}
			pub mod burnt {
				use super::runtime_types;
				pub type BurntFunds = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Burnt {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Burnt";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
			pub struct Rollover {
				pub rollover_balance: rollover::RolloverBalance,
			}
			pub mod rollover {
				use super::runtime_types;
				pub type RolloverBalance = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Rollover {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rollover";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some funds have been deposited."]
			pub struct Deposit {
				pub value: deposit::Value,
			}
			pub mod deposit {
				use super::runtime_types;
				pub type Value = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A new spend proposal has been approved."]
			pub struct SpendApproved {
				pub proposal_index: spend_approved::ProposalIndex,
				pub amount: spend_approved::Amount,
				pub beneficiary: spend_approved::Beneficiary,
			}
			pub mod spend_approved {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Amount = ::core::primitive::u128;
				pub type Beneficiary = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for SpendApproved {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "SpendApproved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The inactive funds of the pallet have been updated."]
			pub struct UpdatedInactive {
				pub reactivated: updated_inactive::Reactivated,
				pub deactivated: updated_inactive::Deactivated,
			}
			pub mod updated_inactive {
				use super::runtime_types;
				pub type Reactivated = ::core::primitive::u128;
				pub type Deactivated = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for UpdatedInactive {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "UpdatedInactive";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A new asset spend proposal has been approved."]
			pub struct AssetSpendApproved {
				pub index: asset_spend_approved::Index,
				pub asset_kind: asset_spend_approved::AssetKind,
				pub amount: asset_spend_approved::Amount,
				pub beneficiary: asset_spend_approved::Beneficiary,
				pub valid_from: asset_spend_approved::ValidFrom,
				pub expire_at: asset_spend_approved::ExpireAt,
			}
			pub mod asset_spend_approved {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type AssetKind = ();
				pub type Amount = ::core::primitive::u128;
				pub type Beneficiary = ::subxt::utils::AccountId32;
				pub type ValidFrom = ::core::primitive::u32;
				pub type ExpireAt = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for AssetSpendApproved {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "AssetSpendApproved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An approved spend was voided."]
			pub struct AssetSpendVoided {
				pub index: asset_spend_voided::Index,
			}
			pub mod asset_spend_voided {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for AssetSpendVoided {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "AssetSpendVoided";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A payment happened."]
			pub struct Paid {
				pub index: paid::Index,
				pub payment_id: paid::PaymentId,
			}
			pub mod paid {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type PaymentId = ();
			}
			impl ::subxt::events::StaticEvent for Paid {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Paid";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A payment failed and can be retried."]
			pub struct PaymentFailed {
				pub index: payment_failed::Index,
				pub payment_id: payment_failed::PaymentId,
			}
			pub mod payment_failed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type PaymentId = ();
			}
			impl ::subxt::events::StaticEvent for PaymentFailed {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "PaymentFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A spend was processed and removed from the storage. It might have been successfully"]
			#[doc = "paid or it may have expired."]
			pub struct SpendProcessed {
				pub index: spend_processed::Index,
			}
			pub mod spend_processed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for SpendProcessed {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "SpendProcessed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proposal_count {
					use super::runtime_types;
					pub type ProposalCount = ::core::primitive::u32;
				}
				pub mod proposals {
					use super::runtime_types;
					pub type Proposals = runtime_types::pallet_treasury::Proposal<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod deactivated {
					use super::runtime_types;
					pub type Deactivated = ::core::primitive::u128;
				}
				pub mod approvals {
					use super::runtime_types;
					pub type Approvals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>;
				}
				pub mod spend_count {
					use super::runtime_types;
					pub type SpendCount = ::core::primitive::u32;
				}
				pub mod spends {
					use super::runtime_types;
					pub type Spends = runtime_types::pallet_treasury::SpendStatus<
						(),
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
						(),
					>;
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of proposals that have been made."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposal_count::ProposalCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"ProposalCount",
						vec![],
						[
							91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
							216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
							29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
						],
					)
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposals::Proposals,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Proposals",
						vec![],
						[
							207u8, 135u8, 145u8, 146u8, 48u8, 10u8, 252u8, 40u8, 20u8, 115u8,
							205u8, 41u8, 173u8, 83u8, 115u8, 46u8, 106u8, 40u8, 130u8, 157u8,
							213u8, 87u8, 45u8, 23u8, 14u8, 167u8, 99u8, 208u8, 153u8, 163u8, 141u8,
							55u8,
						],
					)
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals(
					&self,
					_0: impl ::std::borrow::Borrow<types::proposals::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::proposals::Proposals,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Proposals",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							207u8, 135u8, 145u8, 146u8, 48u8, 10u8, 252u8, 40u8, 20u8, 115u8,
							205u8, 41u8, 173u8, 83u8, 115u8, 46u8, 106u8, 40u8, 130u8, 157u8,
							213u8, 87u8, 45u8, 23u8, 14u8, 167u8, 99u8, 208u8, 153u8, 163u8, 141u8,
							55u8,
						],
					)
				}
				#[doc = " The amount which has been reported as inactive to Currency."]
				pub fn deactivated(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::deactivated::Deactivated,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Deactivated",
						vec![],
						[
							120u8, 221u8, 159u8, 56u8, 161u8, 44u8, 54u8, 233u8, 47u8, 114u8,
							170u8, 150u8, 52u8, 24u8, 137u8, 212u8, 122u8, 247u8, 40u8, 17u8,
							208u8, 130u8, 42u8, 154u8, 33u8, 222u8, 59u8, 116u8, 0u8, 15u8, 79u8,
							123u8,
						],
					)
				}
				#[doc = " Proposal indices that have been approved but not yet awarded."]
				pub fn approvals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::approvals::Approvals,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Approvals",
						vec![],
						[
							78u8, 147u8, 186u8, 235u8, 17u8, 40u8, 247u8, 235u8, 67u8, 222u8, 3u8,
							14u8, 248u8, 17u8, 67u8, 180u8, 93u8, 161u8, 64u8, 35u8, 119u8, 194u8,
							187u8, 226u8, 135u8, 162u8, 147u8, 174u8, 139u8, 72u8, 99u8, 212u8,
						],
					)
				}
				#[doc = " The count of spends that have been made."]
				pub fn spend_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::spend_count::SpendCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"SpendCount",
						vec![],
						[
							220u8, 74u8, 248u8, 52u8, 243u8, 209u8, 42u8, 236u8, 27u8, 98u8, 76u8,
							153u8, 129u8, 176u8, 34u8, 177u8, 33u8, 132u8, 21u8, 71u8, 206u8,
							146u8, 222u8, 44u8, 232u8, 246u8, 205u8, 92u8, 240u8, 136u8, 182u8,
							30u8,
						],
					)
				}
				#[doc = " Spends that have been approved and being processed."]
				pub fn spends_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::spends::Spends,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Spends",
						vec![],
						[
							178u8, 32u8, 33u8, 25u8, 212u8, 19u8, 196u8, 119u8, 35u8, 197u8, 152u8,
							148u8, 103u8, 54u8, 132u8, 33u8, 112u8, 145u8, 154u8, 22u8, 235u8,
							199u8, 121u8, 219u8, 217u8, 3u8, 127u8, 228u8, 88u8, 127u8, 31u8, 21u8,
						],
					)
				}
				#[doc = " Spends that have been approved and being processed."]
				pub fn spends(
					&self,
					_0: impl ::std::borrow::Borrow<types::spends::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::spends::Spends,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Spends",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							178u8, 32u8, 33u8, 25u8, 212u8, 19u8, 196u8, 119u8, 35u8, 197u8, 152u8,
							148u8, 103u8, 54u8, 132u8, 33u8, 112u8, 145u8, 154u8, 22u8, 235u8,
							199u8, 121u8, 219u8, 217u8, 3u8, 127u8, 228u8, 88u8, 127u8, 31u8, 21u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
				#[doc = " An accepted proposal gets these back. A rejected proposal does not."]
				pub fn proposal_bond(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
				{
					::subxt::constants::Address::new_static(
						"Treasury",
						"ProposalBond",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_minimum(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"ProposalBondMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_maximum(
					&self,
				) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"ProposalBondMaximum",
						[
							198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
							199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
							215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
							147u8,
						],
					)
				}
				#[doc = " Period between successive spends."]
				pub fn spend_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"SpendPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
				pub fn burn(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
				{
					::subxt::constants::Address::new_static(
						"Treasury",
						"Burn",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				#[doc = " The maximum number of approvals that can wait in the spending queue."]
				#[doc = ""]
				#[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
				pub fn max_approvals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"MaxApprovals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The period during which an approved treasury spend has to be claimed."]
				pub fn payout_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"PayoutPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod bounties {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_bounties::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_bounties::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::propose_bounty`]."]
				pub struct ProposeBounty {
					#[codec(compact)]
					pub value: propose_bounty::Value,
					pub description: propose_bounty::Description,
				}
				pub mod propose_bounty {
					use super::runtime_types;
					pub type Value = ::core::primitive::u128;
					pub type Description = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ProposeBounty {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "propose_bounty";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::approve_bounty`]."]
				pub struct ApproveBounty {
					#[codec(compact)]
					pub bounty_id: approve_bounty::BountyId,
				}
				pub mod approve_bounty {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ApproveBounty {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "approve_bounty";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::propose_curator`]."]
				pub struct ProposeCurator {
					#[codec(compact)]
					pub bounty_id: propose_curator::BountyId,
					pub curator: propose_curator::Curator,
					#[codec(compact)]
					pub fee: propose_curator::Fee,
				}
				pub mod propose_curator {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
					pub type Curator = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Fee = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ProposeCurator {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "propose_curator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unassign_curator`]."]
				pub struct UnassignCurator {
					#[codec(compact)]
					pub bounty_id: unassign_curator::BountyId,
				}
				pub mod unassign_curator {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for UnassignCurator {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "unassign_curator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::accept_curator`]."]
				pub struct AcceptCurator {
					#[codec(compact)]
					pub bounty_id: accept_curator::BountyId,
				}
				pub mod accept_curator {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AcceptCurator {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "accept_curator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::award_bounty`]."]
				pub struct AwardBounty {
					#[codec(compact)]
					pub bounty_id: award_bounty::BountyId,
					pub beneficiary: award_bounty::Beneficiary,
				}
				pub mod award_bounty {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
					pub type Beneficiary = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for AwardBounty {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "award_bounty";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::claim_bounty`]."]
				pub struct ClaimBounty {
					#[codec(compact)]
					pub bounty_id: claim_bounty::BountyId,
				}
				pub mod claim_bounty {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ClaimBounty {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "claim_bounty";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::close_bounty`]."]
				pub struct CloseBounty {
					#[codec(compact)]
					pub bounty_id: close_bounty::BountyId,
				}
				pub mod close_bounty {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CloseBounty {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "close_bounty";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::extend_bounty_expiry`]."]
				pub struct ExtendBountyExpiry {
					#[codec(compact)]
					pub bounty_id: extend_bounty_expiry::BountyId,
					pub remark: extend_bounty_expiry::Remark,
				}
				pub mod extend_bounty_expiry {
					use super::runtime_types;
					pub type BountyId = ::core::primitive::u32;
					pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ExtendBountyExpiry {
					const PALLET: &'static str = "Bounties";
					const CALL: &'static str = "extend_bounty_expiry";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::propose_bounty`]."]
				pub fn propose_bounty(
					&self,
					value: types::propose_bounty::Value,
					description: types::propose_bounty::Description,
				) -> ::subxt::tx::Payload<types::ProposeBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"propose_bounty",
						types::ProposeBounty { value, description },
						[
							131u8, 169u8, 55u8, 102u8, 212u8, 139u8, 9u8, 65u8, 75u8, 112u8, 6u8,
							180u8, 92u8, 124u8, 43u8, 42u8, 38u8, 40u8, 226u8, 24u8, 28u8, 34u8,
							169u8, 220u8, 184u8, 206u8, 109u8, 227u8, 53u8, 228u8, 88u8, 25u8,
						],
					)
				}
				#[doc = "See [`Pallet::approve_bounty`]."]
				pub fn approve_bounty(
					&self,
					bounty_id: types::approve_bounty::BountyId,
				) -> ::subxt::tx::Payload<types::ApproveBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"approve_bounty",
						types::ApproveBounty { bounty_id },
						[
							85u8, 12u8, 177u8, 91u8, 183u8, 124u8, 175u8, 148u8, 188u8, 200u8,
							237u8, 144u8, 6u8, 67u8, 159u8, 48u8, 177u8, 222u8, 183u8, 137u8,
							173u8, 131u8, 128u8, 219u8, 255u8, 243u8, 80u8, 224u8, 126u8, 136u8,
							90u8, 47u8,
						],
					)
				}
				#[doc = "See [`Pallet::propose_curator`]."]
				pub fn propose_curator(
					&self,
					bounty_id: types::propose_curator::BountyId,
					curator: types::propose_curator::Curator,
					fee: types::propose_curator::Fee,
				) -> ::subxt::tx::Payload<types::ProposeCurator> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"propose_curator",
						types::ProposeCurator { bounty_id, curator, fee },
						[
							137u8, 37u8, 180u8, 149u8, 223u8, 16u8, 83u8, 160u8, 153u8, 149u8,
							137u8, 167u8, 231u8, 100u8, 142u8, 13u8, 43u8, 161u8, 108u8, 121u8,
							202u8, 196u8, 35u8, 176u8, 203u8, 87u8, 23u8, 226u8, 89u8, 222u8, 47u8,
							112u8,
						],
					)
				}
				#[doc = "See [`Pallet::unassign_curator`]."]
				pub fn unassign_curator(
					&self,
					bounty_id: types::unassign_curator::BountyId,
				) -> ::subxt::tx::Payload<types::UnassignCurator> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"unassign_curator",
						types::UnassignCurator { bounty_id },
						[
							98u8, 94u8, 107u8, 111u8, 151u8, 182u8, 71u8, 239u8, 214u8, 88u8,
							108u8, 11u8, 51u8, 163u8, 102u8, 162u8, 245u8, 247u8, 244u8, 159u8,
							197u8, 23u8, 171u8, 6u8, 60u8, 146u8, 144u8, 101u8, 68u8, 133u8, 245u8,
							74u8,
						],
					)
				}
				#[doc = "See [`Pallet::accept_curator`]."]
				pub fn accept_curator(
					&self,
					bounty_id: types::accept_curator::BountyId,
				) -> ::subxt::tx::Payload<types::AcceptCurator> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"accept_curator",
						types::AcceptCurator { bounty_id },
						[
							178u8, 142u8, 138u8, 15u8, 243u8, 10u8, 222u8, 169u8, 150u8, 200u8,
							85u8, 185u8, 39u8, 167u8, 134u8, 3u8, 186u8, 84u8, 43u8, 140u8, 11u8,
							70u8, 56u8, 197u8, 39u8, 84u8, 138u8, 139u8, 198u8, 104u8, 41u8, 238u8,
						],
					)
				}
				#[doc = "See [`Pallet::award_bounty`]."]
				pub fn award_bounty(
					&self,
					bounty_id: types::award_bounty::BountyId,
					beneficiary: types::award_bounty::Beneficiary,
				) -> ::subxt::tx::Payload<types::AwardBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"award_bounty",
						types::AwardBounty { bounty_id, beneficiary },
						[
							130u8, 148u8, 63u8, 19u8, 102u8, 114u8, 81u8, 70u8, 249u8, 32u8, 175u8,
							81u8, 140u8, 195u8, 98u8, 221u8, 153u8, 148u8, 196u8, 104u8, 15u8,
							91u8, 153u8, 51u8, 2u8, 179u8, 35u8, 136u8, 12u8, 219u8, 27u8, 100u8,
						],
					)
				}
				#[doc = "See [`Pallet::claim_bounty`]."]
				pub fn claim_bounty(
					&self,
					bounty_id: types::claim_bounty::BountyId,
				) -> ::subxt::tx::Payload<types::ClaimBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"claim_bounty",
						types::ClaimBounty { bounty_id },
						[
							211u8, 143u8, 123u8, 205u8, 140u8, 43u8, 176u8, 103u8, 110u8, 125u8,
							158u8, 131u8, 103u8, 62u8, 69u8, 215u8, 220u8, 110u8, 11u8, 3u8, 30u8,
							193u8, 235u8, 177u8, 96u8, 241u8, 140u8, 53u8, 62u8, 133u8, 170u8,
							25u8,
						],
					)
				}
				#[doc = "See [`Pallet::close_bounty`]."]
				pub fn close_bounty(
					&self,
					bounty_id: types::close_bounty::BountyId,
				) -> ::subxt::tx::Payload<types::CloseBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"close_bounty",
						types::CloseBounty { bounty_id },
						[
							144u8, 234u8, 109u8, 39u8, 227u8, 231u8, 104u8, 48u8, 45u8, 196u8,
							217u8, 220u8, 241u8, 197u8, 157u8, 227u8, 154u8, 156u8, 181u8, 69u8,
							146u8, 77u8, 203u8, 167u8, 79u8, 102u8, 15u8, 253u8, 135u8, 53u8, 96u8,
							60u8,
						],
					)
				}
				#[doc = "See [`Pallet::extend_bounty_expiry`]."]
				pub fn extend_bounty_expiry(
					&self,
					bounty_id: types::extend_bounty_expiry::BountyId,
					remark: types::extend_bounty_expiry::Remark,
				) -> ::subxt::tx::Payload<types::ExtendBountyExpiry> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"extend_bounty_expiry",
						types::ExtendBountyExpiry { bounty_id, remark },
						[
							102u8, 118u8, 89u8, 189u8, 138u8, 157u8, 216u8, 10u8, 239u8, 3u8,
							200u8, 217u8, 219u8, 19u8, 195u8, 182u8, 105u8, 220u8, 11u8, 146u8,
							222u8, 79u8, 95u8, 136u8, 188u8, 230u8, 248u8, 119u8, 30u8, 6u8, 242u8,
							194u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_bounties::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "New bounty proposal."]
			pub struct BountyProposed {
				pub index: bounty_proposed::Index,
			}
			pub mod bounty_proposed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for BountyProposed {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyProposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty proposal was rejected; funds were slashed."]
			pub struct BountyRejected {
				pub index: bounty_rejected::Index,
				pub bond: bounty_rejected::Bond,
			}
			pub mod bounty_rejected {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Bond = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BountyRejected {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyRejected";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty proposal is funded and became active."]
			pub struct BountyBecameActive {
				pub index: bounty_became_active::Index,
			}
			pub mod bounty_became_active {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for BountyBecameActive {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyBecameActive";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty is awarded to a beneficiary."]
			pub struct BountyAwarded {
				pub index: bounty_awarded::Index,
				pub beneficiary: bounty_awarded::Beneficiary,
			}
			pub mod bounty_awarded {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Beneficiary = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for BountyAwarded {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyAwarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty is claimed by beneficiary."]
			pub struct BountyClaimed {
				pub index: bounty_claimed::Index,
				pub payout: bounty_claimed::Payout,
				pub beneficiary: bounty_claimed::Beneficiary,
			}
			pub mod bounty_claimed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Payout = ::core::primitive::u128;
				pub type Beneficiary = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for BountyClaimed {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyClaimed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty is cancelled."]
			pub struct BountyCanceled {
				pub index: bounty_canceled::Index,
			}
			pub mod bounty_canceled {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for BountyCanceled {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyCanceled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty expiry is extended."]
			pub struct BountyExtended {
				pub index: bounty_extended::Index,
			}
			pub mod bounty_extended {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for BountyExtended {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyExtended";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty is approved."]
			pub struct BountyApproved {
				pub index: bounty_approved::Index,
			}
			pub mod bounty_approved {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for BountyApproved {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyApproved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty curator is proposed."]
			pub struct CuratorProposed {
				pub bounty_id: curator_proposed::BountyId,
				pub curator: curator_proposed::Curator,
			}
			pub mod curator_proposed {
				use super::runtime_types;
				pub type BountyId = ::core::primitive::u32;
				pub type Curator = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CuratorProposed {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "CuratorProposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty curator is unassigned."]
			pub struct CuratorUnassigned {
				pub bounty_id: curator_unassigned::BountyId,
			}
			pub mod curator_unassigned {
				use super::runtime_types;
				pub type BountyId = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for CuratorUnassigned {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "CuratorUnassigned";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bounty curator is accepted."]
			pub struct CuratorAccepted {
				pub bounty_id: curator_accepted::BountyId,
				pub curator: curator_accepted::Curator,
			}
			pub mod curator_accepted {
				use super::runtime_types;
				pub type BountyId = ::core::primitive::u32;
				pub type Curator = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CuratorAccepted {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "CuratorAccepted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod bounty_count {
					use super::runtime_types;
					pub type BountyCount = ::core::primitive::u32;
				}
				pub mod bounties {
					use super::runtime_types;
					pub type Bounties = runtime_types::pallet_bounties::Bounty<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
					>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod bounty_descriptions {
					use super::runtime_types;
					pub type BountyDescriptions =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod bounty_approvals {
					use super::runtime_types;
					pub type BountyApprovals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of bounty proposals that have been made."]
				pub fn bounty_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bounty_count::BountyCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyCount",
						vec![],
						[
							120u8, 204u8, 26u8, 150u8, 37u8, 81u8, 43u8, 223u8, 180u8, 252u8,
							142u8, 144u8, 109u8, 5u8, 184u8, 72u8, 223u8, 230u8, 66u8, 196u8, 14u8,
							14u8, 164u8, 190u8, 246u8, 168u8, 190u8, 56u8, 212u8, 73u8, 175u8,
							26u8,
						],
					)
				}
				#[doc = " Bounties that have been made."]
				pub fn bounties_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bounties::Bounties,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"Bounties",
						vec![],
						[
							183u8, 96u8, 172u8, 86u8, 167u8, 129u8, 51u8, 179u8, 238u8, 155u8,
							196u8, 77u8, 158u8, 102u8, 188u8, 19u8, 79u8, 178u8, 145u8, 189u8,
							44u8, 117u8, 47u8, 97u8, 30u8, 149u8, 239u8, 212u8, 167u8, 127u8,
							108u8, 55u8,
						],
					)
				}
				#[doc = " Bounties that have been made."]
				pub fn bounties(
					&self,
					_0: impl ::std::borrow::Borrow<types::bounties::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bounties::Bounties,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"Bounties",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							183u8, 96u8, 172u8, 86u8, 167u8, 129u8, 51u8, 179u8, 238u8, 155u8,
							196u8, 77u8, 158u8, 102u8, 188u8, 19u8, 79u8, 178u8, 145u8, 189u8,
							44u8, 117u8, 47u8, 97u8, 30u8, 149u8, 239u8, 212u8, 167u8, 127u8,
							108u8, 55u8,
						],
					)
				}
				#[doc = " The description of each bounty."]
				pub fn bounty_descriptions_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bounty_descriptions::BountyDescriptions,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyDescriptions",
						vec![],
						[
							71u8, 40u8, 133u8, 84u8, 55u8, 207u8, 169u8, 189u8, 160u8, 51u8, 202u8,
							144u8, 15u8, 226u8, 97u8, 114u8, 54u8, 247u8, 53u8, 26u8, 36u8, 54u8,
							186u8, 163u8, 198u8, 100u8, 191u8, 121u8, 186u8, 160u8, 85u8, 97u8,
						],
					)
				}
				#[doc = " The description of each bounty."]
				pub fn bounty_descriptions(
					&self,
					_0: impl ::std::borrow::Borrow<types::bounty_descriptions::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bounty_descriptions::BountyDescriptions,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyDescriptions",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							71u8, 40u8, 133u8, 84u8, 55u8, 207u8, 169u8, 189u8, 160u8, 51u8, 202u8,
							144u8, 15u8, 226u8, 97u8, 114u8, 54u8, 247u8, 53u8, 26u8, 36u8, 54u8,
							186u8, 163u8, 198u8, 100u8, 191u8, 121u8, 186u8, 160u8, 85u8, 97u8,
						],
					)
				}
				#[doc = " Bounty indices that have been approved but not yet funded."]
				pub fn bounty_approvals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bounty_approvals::BountyApprovals,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyApprovals",
						vec![],
						[
							182u8, 228u8, 0u8, 46u8, 176u8, 25u8, 222u8, 180u8, 51u8, 57u8, 14u8,
							0u8, 69u8, 160u8, 64u8, 27u8, 88u8, 29u8, 227u8, 146u8, 2u8, 121u8,
							27u8, 85u8, 45u8, 110u8, 244u8, 62u8, 134u8, 77u8, 175u8, 188u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The amount held on deposit for placing a bounty proposal."]
				pub fn bounty_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The delay period for which a bounty beneficiary need to wait before claim the payout."]
				pub fn bounty_deposit_payout_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyDepositPayoutDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Bounty duration in blocks."]
				pub fn bounty_update_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyUpdatePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The curator deposit is calculated as a percentage of the curator fee."]
				#[doc = ""]
				#[doc = " This deposit has optional upper and lower bounds with `CuratorDepositMax` and"]
				#[doc = " `CuratorDepositMin`."]
				pub fn curator_deposit_multiplier(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
				{
					::subxt::constants::Address::new_static(
						"Bounties",
						"CuratorDepositMultiplier",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn curator_deposit_max(
					&self,
				) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"CuratorDepositMax",
						[
							198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
							199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
							215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
							147u8,
						],
					)
				}
				#[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn curator_deposit_min(
					&self,
				) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"CuratorDepositMin",
						[
							198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
							199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
							215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
							147u8,
						],
					)
				}
				#[doc = " Minimum value for a bounty."]
				pub fn bounty_value_minimum(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyValueMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
				pub fn data_deposit_per_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"DataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum acceptable reason length."]
				#[doc = ""]
				#[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
				pub fn maximum_reason_length(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"MaximumReasonLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod tips {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_tips::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_tips::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::report_awesome`]."]
				pub struct ReportAwesome {
					pub reason: report_awesome::Reason,
					pub who: report_awesome::Who,
				}
				pub mod report_awesome {
					use super::runtime_types;
					pub type Reason = ::std::vec::Vec<::core::primitive::u8>;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ReportAwesome {
					const PALLET: &'static str = "Tips";
					const CALL: &'static str = "report_awesome";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::retract_tip`]."]
				pub struct RetractTip {
					pub hash: retract_tip::Hash,
				}
				pub mod retract_tip {
					use super::runtime_types;
					pub type Hash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for RetractTip {
					const PALLET: &'static str = "Tips";
					const CALL: &'static str = "retract_tip";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::tip_new`]."]
				pub struct TipNew {
					pub reason: tip_new::Reason,
					pub who: tip_new::Who,
					#[codec(compact)]
					pub tip_value: tip_new::TipValue,
				}
				pub mod tip_new {
					use super::runtime_types;
					pub type Reason = ::std::vec::Vec<::core::primitive::u8>;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type TipValue = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for TipNew {
					const PALLET: &'static str = "Tips";
					const CALL: &'static str = "tip_new";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::tip`]."]
				pub struct Tip {
					pub hash: tip::Hash,
					#[codec(compact)]
					pub tip_value: tip::TipValue,
				}
				pub mod tip {
					use super::runtime_types;
					pub type Hash = ::subxt::utils::H256;
					pub type TipValue = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Tip {
					const PALLET: &'static str = "Tips";
					const CALL: &'static str = "tip";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::close_tip`]."]
				pub struct CloseTip {
					pub hash: close_tip::Hash,
				}
				pub mod close_tip {
					use super::runtime_types;
					pub type Hash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for CloseTip {
					const PALLET: &'static str = "Tips";
					const CALL: &'static str = "close_tip";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::slash_tip`]."]
				pub struct SlashTip {
					pub hash: slash_tip::Hash,
				}
				pub mod slash_tip {
					use super::runtime_types;
					pub type Hash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for SlashTip {
					const PALLET: &'static str = "Tips";
					const CALL: &'static str = "slash_tip";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::report_awesome`]."]
				pub fn report_awesome(
					&self,
					reason: types::report_awesome::Reason,
					who: types::report_awesome::Who,
				) -> ::subxt::tx::Payload<types::ReportAwesome> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"report_awesome",
						types::ReportAwesome { reason, who },
						[
							179u8, 206u8, 30u8, 167u8, 50u8, 227u8, 206u8, 81u8, 3u8, 149u8, 196u8,
							178u8, 144u8, 181u8, 100u8, 1u8, 150u8, 213u8, 53u8, 190u8, 10u8, 46u8,
							164u8, 90u8, 92u8, 168u8, 177u8, 114u8, 8u8, 10u8, 87u8, 161u8,
						],
					)
				}
				#[doc = "See [`Pallet::retract_tip`]."]
				pub fn retract_tip(
					&self,
					hash: types::retract_tip::Hash,
				) -> ::subxt::tx::Payload<types::RetractTip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"retract_tip",
						types::RetractTip { hash },
						[
							127u8, 232u8, 112u8, 136u8, 48u8, 227u8, 202u8, 51u8, 78u8, 191u8,
							248u8, 44u8, 159u8, 76u8, 101u8, 107u8, 212u8, 55u8, 85u8, 250u8,
							222u8, 181u8, 58u8, 130u8, 53u8, 103u8, 190u8, 31u8, 113u8, 195u8,
							186u8, 44u8,
						],
					)
				}
				#[doc = "See [`Pallet::tip_new`]."]
				pub fn tip_new(
					&self,
					reason: types::tip_new::Reason,
					who: types::tip_new::Who,
					tip_value: types::tip_new::TipValue,
				) -> ::subxt::tx::Payload<types::TipNew> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"tip_new",
						types::TipNew { reason, who, tip_value },
						[
							123u8, 206u8, 77u8, 163u8, 106u8, 193u8, 145u8, 239u8, 161u8, 60u8,
							29u8, 198u8, 49u8, 41u8, 174u8, 91u8, 100u8, 10u8, 80u8, 124u8, 17u8,
							222u8, 54u8, 237u8, 47u8, 213u8, 234u8, 7u8, 62u8, 77u8, 69u8, 23u8,
						],
					)
				}
				#[doc = "See [`Pallet::tip`]."]
				pub fn tip(
					&self,
					hash: types::tip::Hash,
					tip_value: types::tip::TipValue,
				) -> ::subxt::tx::Payload<types::Tip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"tip",
						types::Tip { hash, tip_value },
						[
							241u8, 5u8, 164u8, 248u8, 140u8, 60u8, 29u8, 9u8, 63u8, 208u8, 249u8,
							210u8, 221u8, 173u8, 70u8, 240u8, 50u8, 131u8, 80u8, 236u8, 131u8,
							101u8, 191u8, 49u8, 94u8, 216u8, 74u8, 234u8, 184u8, 167u8, 159u8,
							176u8,
						],
					)
				}
				#[doc = "See [`Pallet::close_tip`]."]
				pub fn close_tip(
					&self,
					hash: types::close_tip::Hash,
				) -> ::subxt::tx::Payload<types::CloseTip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"close_tip",
						types::CloseTip { hash },
						[
							85u8, 213u8, 248u8, 146u8, 90u8, 110u8, 217u8, 109u8, 78u8, 6u8, 104u8,
							71u8, 184u8, 209u8, 148u8, 81u8, 145u8, 71u8, 151u8, 174u8, 25u8,
							238u8, 48u8, 0u8, 51u8, 102u8, 155u8, 143u8, 130u8, 157u8, 100u8,
							246u8,
						],
					)
				}
				#[doc = "See [`Pallet::slash_tip`]."]
				pub fn slash_tip(
					&self,
					hash: types::slash_tip::Hash,
				) -> ::subxt::tx::Payload<types::SlashTip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"slash_tip",
						types::SlashTip { hash },
						[
							127u8, 21u8, 252u8, 189u8, 121u8, 103u8, 54u8, 155u8, 71u8, 81u8,
							109u8, 0u8, 159u8, 151u8, 62u8, 81u8, 104u8, 31u8, 2u8, 83u8, 248u8,
							141u8, 252u8, 162u8, 173u8, 189u8, 252u8, 249u8, 54u8, 142u8, 108u8,
							19u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_tips::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A new tip suggestion has been opened."]
			pub struct NewTip {
				pub tip_hash: new_tip::TipHash,
			}
			pub mod new_tip {
				use super::runtime_types;
				pub type TipHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for NewTip {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "NewTip";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A tip suggestion has reached threshold and is closing."]
			pub struct TipClosing {
				pub tip_hash: tip_closing::TipHash,
			}
			pub mod tip_closing {
				use super::runtime_types;
				pub type TipHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for TipClosing {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipClosing";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A tip suggestion has been closed."]
			pub struct TipClosed {
				pub tip_hash: tip_closed::TipHash,
				pub who: tip_closed::Who,
				pub payout: tip_closed::Payout,
			}
			pub mod tip_closed {
				use super::runtime_types;
				pub type TipHash = ::subxt::utils::H256;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Payout = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TipClosed {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipClosed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A tip suggestion has been retracted."]
			pub struct TipRetracted {
				pub tip_hash: tip_retracted::TipHash,
			}
			pub mod tip_retracted {
				use super::runtime_types;
				pub type TipHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for TipRetracted {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipRetracted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A tip suggestion has been slashed."]
			pub struct TipSlashed {
				pub tip_hash: tip_slashed::TipHash,
				pub finder: tip_slashed::Finder,
				pub deposit: tip_slashed::Deposit,
			}
			pub mod tip_slashed {
				use super::runtime_types;
				pub type TipHash = ::subxt::utils::H256;
				pub type Finder = ::subxt::utils::AccountId32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TipSlashed {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipSlashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod tips {
					use super::runtime_types;
					pub type Tips = runtime_types::pallet_tips::OpenTip<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
						::subxt::utils::H256,
					>;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod reasons {
					use super::runtime_types;
					pub type Reasons = ::std::vec::Vec<::core::primitive::u8>;
					pub type Param0 = ::subxt::utils::H256;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."]
				#[doc = " This has the insecure enumerable hash function since the key itself is already"]
				#[doc = " guaranteed to be a secure hash."]
				pub fn tips_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::tips::Tips,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Tips",
						vec![],
						[
							25u8, 31u8, 187u8, 85u8, 122u8, 104u8, 176u8, 120u8, 135u8, 32u8,
							135u8, 148u8, 193u8, 43u8, 143u8, 235u8, 82u8, 96u8, 162u8, 200u8,
							125u8, 117u8, 170u8, 70u8, 47u8, 248u8, 153u8, 70u8, 22u8, 194u8, 31u8,
							150u8,
						],
					)
				}
				#[doc = " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."]
				#[doc = " This has the insecure enumerable hash function since the key itself is already"]
				#[doc = " guaranteed to be a secure hash."]
				pub fn tips(
					&self,
					_0: impl ::std::borrow::Borrow<types::tips::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::tips::Tips,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Tips",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							25u8, 31u8, 187u8, 85u8, 122u8, 104u8, 176u8, 120u8, 135u8, 32u8,
							135u8, 148u8, 193u8, 43u8, 143u8, 235u8, 82u8, 96u8, 162u8, 200u8,
							125u8, 117u8, 170u8, 70u8, 47u8, 248u8, 153u8, 70u8, 22u8, 194u8, 31u8,
							150u8,
						],
					)
				}
				#[doc = " Simple preimage lookup from the reason's hash to the original data. Again, has an"]
				#[doc = " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]
				pub fn reasons_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reasons::Reasons,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Reasons",
						vec![],
						[
							99u8, 184u8, 64u8, 230u8, 54u8, 162u8, 73u8, 188u8, 49u8, 219u8, 170u8,
							2u8, 72u8, 75u8, 239u8, 136u8, 114u8, 93u8, 94u8, 195u8, 229u8, 55u8,
							188u8, 121u8, 214u8, 250u8, 115u8, 61u8, 221u8, 173u8, 14u8, 68u8,
						],
					)
				}
				#[doc = " Simple preimage lookup from the reason's hash to the original data. Again, has an"]
				#[doc = " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]
				pub fn reasons(
					&self,
					_0: impl ::std::borrow::Borrow<types::reasons::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reasons::Reasons,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Reasons",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							99u8, 184u8, 64u8, 230u8, 54u8, 162u8, 73u8, 188u8, 49u8, 219u8, 170u8,
							2u8, 72u8, 75u8, 239u8, 136u8, 114u8, 93u8, 94u8, 195u8, 229u8, 55u8,
							188u8, 121u8, 214u8, 250u8, 115u8, 61u8, 221u8, 173u8, 14u8, 68u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Maximum acceptable reason length."]
				#[doc = ""]
				#[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
				pub fn maximum_reason_length(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Tips",
						"MaximumReasonLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
				pub fn data_deposit_per_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Tips",
						"DataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The period for which a tip remains open after is has achieved threshold tippers."]
				pub fn tip_countdown(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Tips",
						"TipCountdown",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The percent of the final tip which goes to the original reporter of the tip."]
				pub fn tip_finders_fee(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Percent>
				{
					::subxt::constants::Address::new_static(
						"Tips",
						"TipFindersFee",
						[
							40u8, 171u8, 69u8, 196u8, 34u8, 184u8, 50u8, 128u8, 139u8, 192u8, 63u8,
							231u8, 249u8, 200u8, 252u8, 73u8, 244u8, 170u8, 51u8, 177u8, 106u8,
							47u8, 114u8, 234u8, 84u8, 104u8, 62u8, 118u8, 227u8, 50u8, 225u8,
							122u8,
						],
					)
				}
				#[doc = " The amount held on deposit for placing a tip report."]
				pub fn tip_report_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Tips",
						"TipReportDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount for a single tip."]
				pub fn max_tip_amount(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Tips",
						"MaxTipAmount",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod preimage {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_preimage::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_preimage::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::note_preimage`]."]
				pub struct NotePreimage {
					pub bytes: note_preimage::Bytes,
				}
				pub mod note_preimage {
					use super::runtime_types;
					pub type Bytes = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for NotePreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "note_preimage";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unnote_preimage`]."]
				pub struct UnnotePreimage {
					pub hash: unnote_preimage::Hash,
				}
				pub mod unnote_preimage {
					use super::runtime_types;
					pub type Hash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for UnnotePreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "unnote_preimage";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::request_preimage`]."]
				pub struct RequestPreimage {
					pub hash: request_preimage::Hash,
				}
				pub mod request_preimage {
					use super::runtime_types;
					pub type Hash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for RequestPreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "request_preimage";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unrequest_preimage`]."]
				pub struct UnrequestPreimage {
					pub hash: unrequest_preimage::Hash,
				}
				pub mod unrequest_preimage {
					use super::runtime_types;
					pub type Hash = ::subxt::utils::H256;
				}
				impl ::subxt::blocks::StaticExtrinsic for UnrequestPreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "unrequest_preimage";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::ensure_updated`]."]
				pub struct EnsureUpdated {
					pub hashes: ensure_updated::Hashes,
				}
				pub mod ensure_updated {
					use super::runtime_types;
					pub type Hashes = ::std::vec::Vec<::subxt::utils::H256>;
				}
				impl ::subxt::blocks::StaticExtrinsic for EnsureUpdated {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "ensure_updated";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::note_preimage`]."]
				pub fn note_preimage(
					&self,
					bytes: types::note_preimage::Bytes,
				) -> ::subxt::tx::Payload<types::NotePreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"note_preimage",
						types::NotePreimage { bytes },
						[
							121u8, 88u8, 18u8, 92u8, 176u8, 15u8, 192u8, 198u8, 146u8, 198u8, 38u8,
							242u8, 213u8, 83u8, 7u8, 230u8, 14u8, 110u8, 235u8, 32u8, 215u8, 26u8,
							192u8, 217u8, 113u8, 224u8, 206u8, 96u8, 177u8, 198u8, 246u8, 33u8,
						],
					)
				}
				#[doc = "See [`Pallet::unnote_preimage`]."]
				pub fn unnote_preimage(
					&self,
					hash: types::unnote_preimage::Hash,
				) -> ::subxt::tx::Payload<types::UnnotePreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"unnote_preimage",
						types::UnnotePreimage { hash },
						[
							188u8, 116u8, 222u8, 22u8, 127u8, 215u8, 2u8, 133u8, 96u8, 202u8,
							190u8, 123u8, 203u8, 43u8, 200u8, 161u8, 226u8, 24u8, 49u8, 36u8,
							221u8, 160u8, 130u8, 119u8, 30u8, 138u8, 144u8, 85u8, 5u8, 164u8,
							252u8, 222u8,
						],
					)
				}
				#[doc = "See [`Pallet::request_preimage`]."]
				pub fn request_preimage(
					&self,
					hash: types::request_preimage::Hash,
				) -> ::subxt::tx::Payload<types::RequestPreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"request_preimage",
						types::RequestPreimage { hash },
						[
							87u8, 0u8, 204u8, 111u8, 43u8, 115u8, 64u8, 209u8, 133u8, 13u8, 83u8,
							45u8, 164u8, 166u8, 233u8, 105u8, 242u8, 238u8, 235u8, 208u8, 113u8,
							134u8, 93u8, 242u8, 86u8, 32u8, 7u8, 152u8, 107u8, 208u8, 79u8, 59u8,
						],
					)
				}
				#[doc = "See [`Pallet::unrequest_preimage`]."]
				pub fn unrequest_preimage(
					&self,
					hash: types::unrequest_preimage::Hash,
				) -> ::subxt::tx::Payload<types::UnrequestPreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"unrequest_preimage",
						types::UnrequestPreimage { hash },
						[
							55u8, 37u8, 224u8, 149u8, 142u8, 120u8, 8u8, 68u8, 183u8, 225u8, 255u8,
							240u8, 254u8, 111u8, 58u8, 200u8, 113u8, 217u8, 177u8, 203u8, 107u8,
							104u8, 233u8, 87u8, 252u8, 53u8, 33u8, 112u8, 116u8, 254u8, 117u8,
							134u8,
						],
					)
				}
				#[doc = "See [`Pallet::ensure_updated`]."]
				pub fn ensure_updated(
					&self,
					hashes: types::ensure_updated::Hashes,
				) -> ::subxt::tx::Payload<types::EnsureUpdated> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"ensure_updated",
						types::EnsureUpdated { hashes },
						[
							254u8, 228u8, 88u8, 44u8, 126u8, 235u8, 188u8, 153u8, 61u8, 27u8,
							103u8, 253u8, 163u8, 161u8, 113u8, 243u8, 87u8, 136u8, 2u8, 231u8,
							209u8, 188u8, 215u8, 106u8, 192u8, 225u8, 75u8, 125u8, 224u8, 96u8,
							221u8, 90u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_preimage::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A preimage has been noted."]
			pub struct Noted {
				pub hash: noted::Hash,
			}
			pub mod noted {
				use super::runtime_types;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Noted {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Noted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A preimage has been requested."]
			pub struct Requested {
				pub hash: requested::Hash,
			}
			pub mod requested {
				use super::runtime_types;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Requested {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Requested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A preimage has ben cleared."]
			pub struct Cleared {
				pub hash: cleared::Hash,
			}
			pub mod cleared {
				use super::runtime_types;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Cleared {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Cleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod status_for {
					use super::runtime_types;
					pub type StatusFor = runtime_types::pallet_preimage::OldRequestStatus<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod request_status_for {
					use super::runtime_types;
					pub type RequestStatusFor = runtime_types::pallet_preimage::RequestStatus<
						::subxt::utils::AccountId32,
						runtime_types::frame_support::traits::tokens::fungible::HoldConsideration,
					>;
					pub type Param0 = ::subxt::utils::H256;
				}
				pub mod preimage_for {
					use super::runtime_types;
					pub type PreimageFor =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>;
					pub type Param0 = ::subxt::utils::H256;
					pub type Param1 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The request status of a given hash."]
				pub fn status_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::status_for::StatusFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"StatusFor",
						vec![],
						[
							187u8, 100u8, 54u8, 112u8, 96u8, 129u8, 36u8, 149u8, 127u8, 226u8,
							126u8, 171u8, 72u8, 189u8, 59u8, 126u8, 204u8, 125u8, 67u8, 204u8,
							231u8, 6u8, 212u8, 135u8, 166u8, 252u8, 5u8, 46u8, 111u8, 120u8, 54u8,
							209u8,
						],
					)
				}
				#[doc = " The request status of a given hash."]
				pub fn status_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::status_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::status_for::StatusFor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"StatusFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							187u8, 100u8, 54u8, 112u8, 96u8, 129u8, 36u8, 149u8, 127u8, 226u8,
							126u8, 171u8, 72u8, 189u8, 59u8, 126u8, 204u8, 125u8, 67u8, 204u8,
							231u8, 6u8, 212u8, 135u8, 166u8, 252u8, 5u8, 46u8, 111u8, 120u8, 54u8,
							209u8,
						],
					)
				}
				#[doc = " The request status of a given hash."]
				pub fn request_status_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::request_status_for::RequestStatusFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"RequestStatusFor",
						vec![],
						[
							72u8, 59u8, 254u8, 211u8, 96u8, 223u8, 10u8, 64u8, 6u8, 139u8, 213u8,
							85u8, 14u8, 29u8, 166u8, 37u8, 140u8, 124u8, 186u8, 156u8, 172u8,
							157u8, 73u8, 5u8, 121u8, 117u8, 51u8, 6u8, 249u8, 203u8, 75u8, 190u8,
						],
					)
				}
				#[doc = " The request status of a given hash."]
				pub fn request_status_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::request_status_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::request_status_for::RequestStatusFor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"RequestStatusFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							72u8, 59u8, 254u8, 211u8, 96u8, 223u8, 10u8, 64u8, 6u8, 139u8, 213u8,
							85u8, 14u8, 29u8, 166u8, 37u8, 140u8, 124u8, 186u8, 156u8, 172u8,
							157u8, 73u8, 5u8, 121u8, 117u8, 51u8, 6u8, 249u8, 203u8, 75u8, 190u8,
						],
					)
				}
				pub fn preimage_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::preimage_for::PreimageFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"PreimageFor",
						vec![],
						[
							106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
							141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
							208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
							139u8,
						],
					)
				}
				pub fn preimage_for_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::preimage_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::preimage_for::PreimageFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"PreimageFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
							141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
							208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
							139u8,
						],
					)
				}
				pub fn preimage_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::preimage_for::Param0>,
					_1: impl ::std::borrow::Borrow<types::preimage_for::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::preimage_for::PreimageFor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"PreimageFor",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
							141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
							208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
							139u8,
						],
					)
				}
			}
		}
	}
	pub mod x_tokens {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::orml_xtokens::module::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::orml_xtokens::module::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer`]."]
				pub struct Transfer {
					pub currency_id: transfer::CurrencyId,
					pub amount: transfer::Amount,
					pub dest: ::std::boxed::Box<transfer::Dest>,
					pub dest_weight_limit: transfer::DestWeightLimit,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_multiasset`]."]
				pub struct TransferMultiasset {
					pub asset: ::std::boxed::Box<transfer_multiasset::Asset>,
					pub dest: ::std::boxed::Box<transfer_multiasset::Dest>,
					pub dest_weight_limit: transfer_multiasset::DestWeightLimit,
				}
				pub mod transfer_multiasset {
					use super::runtime_types;
					pub type Asset = runtime_types::xcm::VersionedMultiAsset;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferMultiasset {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multiasset";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_with_fee`]."]
				pub struct TransferWithFee {
					pub currency_id: transfer_with_fee::CurrencyId,
					pub amount: transfer_with_fee::Amount,
					pub fee: transfer_with_fee::Fee,
					pub dest: ::std::boxed::Box<transfer_with_fee::Dest>,
					pub dest_weight_limit: transfer_with_fee::DestWeightLimit,
				}
				pub mod transfer_with_fee {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
					pub type Fee = ::core::primitive::u128;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferWithFee {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_with_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_multiasset_with_fee`]."]
				pub struct TransferMultiassetWithFee {
					pub asset: ::std::boxed::Box<transfer_multiasset_with_fee::Asset>,
					pub fee: ::std::boxed::Box<transfer_multiasset_with_fee::Fee>,
					pub dest: ::std::boxed::Box<transfer_multiasset_with_fee::Dest>,
					pub dest_weight_limit: transfer_multiasset_with_fee::DestWeightLimit,
				}
				pub mod transfer_multiasset_with_fee {
					use super::runtime_types;
					pub type Asset = runtime_types::xcm::VersionedMultiAsset;
					pub type Fee = runtime_types::xcm::VersionedMultiAsset;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferMultiassetWithFee {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multiasset_with_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_multicurrencies`]."]
				pub struct TransferMulticurrencies {
					pub currencies: transfer_multicurrencies::Currencies,
					pub fee_item: transfer_multicurrencies::FeeItem,
					pub dest: ::std::boxed::Box<transfer_multicurrencies::Dest>,
					pub dest_weight_limit: transfer_multicurrencies::DestWeightLimit,
				}
				pub mod transfer_multicurrencies {
					use super::runtime_types;
					pub type Currencies = ::std::vec::Vec<(
						runtime_types::tangle_primitives::currency::CurrencyId,
						::core::primitive::u128,
					)>;
					pub type FeeItem = ::core::primitive::u32;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferMulticurrencies {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multicurrencies";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_multiassets`]."]
				pub struct TransferMultiassets {
					pub assets: ::std::boxed::Box<transfer_multiassets::Assets>,
					pub fee_item: transfer_multiassets::FeeItem,
					pub dest: ::std::boxed::Box<transfer_multiassets::Dest>,
					pub dest_weight_limit: transfer_multiassets::DestWeightLimit,
				}
				pub mod transfer_multiassets {
					use super::runtime_types;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeItem = ::core::primitive::u32;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferMultiassets {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multiassets";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::transfer`]."]
				pub fn transfer(
					&self,
					currency_id: types::transfer::CurrencyId,
					amount: types::transfer::Amount,
					dest: types::transfer::Dest,
					dest_weight_limit: types::transfer::DestWeightLimit,
				) -> ::subxt::tx::Payload<types::Transfer> {
					::subxt::tx::Payload::new_static(
						"XTokens",
						"transfer",
						types::Transfer {
							currency_id,
							amount,
							dest: ::std::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							223u8, 233u8, 147u8, 174u8, 237u8, 156u8, 160u8, 212u8, 81u8, 94u8,
							16u8, 169u8, 83u8, 127u8, 104u8, 36u8, 180u8, 117u8, 110u8, 166u8,
							159u8, 131u8, 239u8, 48u8, 137u8, 51u8, 52u8, 157u8, 132u8, 11u8,
							236u8, 23u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_multiasset`]."]
				pub fn transfer_multiasset(
					&self,
					asset: types::transfer_multiasset::Asset,
					dest: types::transfer_multiasset::Dest,
					dest_weight_limit: types::transfer_multiasset::DestWeightLimit,
				) -> ::subxt::tx::Payload<types::TransferMultiasset> {
					::subxt::tx::Payload::new_static(
						"XTokens",
						"transfer_multiasset",
						types::TransferMultiasset {
							asset: ::std::boxed::Box::new(asset),
							dest: ::std::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							41u8, 136u8, 12u8, 95u8, 87u8, 89u8, 79u8, 94u8, 22u8, 194u8, 186u8,
							131u8, 93u8, 130u8, 219u8, 51u8, 45u8, 231u8, 203u8, 58u8, 230u8, 43u8,
							165u8, 117u8, 141u8, 64u8, 99u8, 128u8, 62u8, 30u8, 122u8, 27u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_with_fee`]."]
				pub fn transfer_with_fee(
					&self,
					currency_id: types::transfer_with_fee::CurrencyId,
					amount: types::transfer_with_fee::Amount,
					fee: types::transfer_with_fee::Fee,
					dest: types::transfer_with_fee::Dest,
					dest_weight_limit: types::transfer_with_fee::DestWeightLimit,
				) -> ::subxt::tx::Payload<types::TransferWithFee> {
					::subxt::tx::Payload::new_static(
						"XTokens",
						"transfer_with_fee",
						types::TransferWithFee {
							currency_id,
							amount,
							fee,
							dest: ::std::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							114u8, 174u8, 168u8, 136u8, 228u8, 143u8, 216u8, 201u8, 90u8, 72u8,
							89u8, 155u8, 220u8, 102u8, 174u8, 107u8, 35u8, 27u8, 237u8, 187u8,
							113u8, 68u8, 68u8, 51u8, 24u8, 150u8, 73u8, 69u8, 184u8, 13u8, 45u8,
							14u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_multiasset_with_fee`]."]
				pub fn transfer_multiasset_with_fee(
					&self,
					asset: types::transfer_multiasset_with_fee::Asset,
					fee: types::transfer_multiasset_with_fee::Fee,
					dest: types::transfer_multiasset_with_fee::Dest,
					dest_weight_limit: types::transfer_multiasset_with_fee::DestWeightLimit,
				) -> ::subxt::tx::Payload<types::TransferMultiassetWithFee> {
					::subxt::tx::Payload::new_static(
						"XTokens",
						"transfer_multiasset_with_fee",
						types::TransferMultiassetWithFee {
							asset: ::std::boxed::Box::new(asset),
							fee: ::std::boxed::Box::new(fee),
							dest: ::std::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							255u8, 67u8, 191u8, 126u8, 174u8, 56u8, 54u8, 112u8, 9u8, 247u8, 225u8,
							96u8, 118u8, 107u8, 27u8, 185u8, 42u8, 217u8, 21u8, 26u8, 139u8, 78u8,
							82u8, 179u8, 143u8, 209u8, 122u8, 145u8, 157u8, 209u8, 219u8, 211u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_multicurrencies`]."]
				pub fn transfer_multicurrencies(
					&self,
					currencies: types::transfer_multicurrencies::Currencies,
					fee_item: types::transfer_multicurrencies::FeeItem,
					dest: types::transfer_multicurrencies::Dest,
					dest_weight_limit: types::transfer_multicurrencies::DestWeightLimit,
				) -> ::subxt::tx::Payload<types::TransferMulticurrencies> {
					::subxt::tx::Payload::new_static(
						"XTokens",
						"transfer_multicurrencies",
						types::TransferMulticurrencies {
							currencies,
							fee_item,
							dest: ::std::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							216u8, 139u8, 58u8, 113u8, 253u8, 247u8, 158u8, 50u8, 87u8, 204u8,
							85u8, 94u8, 50u8, 147u8, 153u8, 123u8, 220u8, 15u8, 161u8, 118u8,
							121u8, 31u8, 16u8, 0u8, 130u8, 32u8, 221u8, 0u8, 14u8, 250u8, 177u8,
							196u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_multiassets`]."]
				pub fn transfer_multiassets(
					&self,
					assets: types::transfer_multiassets::Assets,
					fee_item: types::transfer_multiassets::FeeItem,
					dest: types::transfer_multiassets::Dest,
					dest_weight_limit: types::transfer_multiassets::DestWeightLimit,
				) -> ::subxt::tx::Payload<types::TransferMultiassets> {
					::subxt::tx::Payload::new_static(
						"XTokens",
						"transfer_multiassets",
						types::TransferMultiassets {
							assets: ::std::boxed::Box::new(assets),
							fee_item,
							dest: ::std::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							62u8, 97u8, 148u8, 111u8, 216u8, 123u8, 216u8, 191u8, 196u8, 99u8,
							227u8, 31u8, 20u8, 178u8, 202u8, 25u8, 48u8, 132u8, 186u8, 196u8,
							150u8, 69u8, 51u8, 252u8, 250u8, 237u8, 177u8, 214u8, 246u8, 85u8,
							239u8, 137u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::orml_xtokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Transferred `MultiAsset` with fee."]
			pub struct TransferredMultiAssets {
				pub sender: transferred_multi_assets::Sender,
				pub assets: transferred_multi_assets::Assets,
				pub fee: transferred_multi_assets::Fee,
				pub dest: transferred_multi_assets::Dest,
			}
			pub mod transferred_multi_assets {
				use super::runtime_types;
				pub type Sender = ::subxt::utils::AccountId32;
				pub type Assets = runtime_types::xcm::v3::multiasset::MultiAssets;
				pub type Fee = runtime_types::xcm::v3::multiasset::MultiAsset;
				pub type Dest = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for TransferredMultiAssets {
				const PALLET: &'static str = "XTokens";
				const EVENT: &'static str = "TransferredMultiAssets";
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Self chain location."]
				pub fn self_location(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				> {
					::subxt::constants::Address::new_static(
						"XTokens",
						"SelfLocation",
						[
							111u8, 216u8, 110u8, 49u8, 228u8, 60u8, 105u8, 227u8, 141u8, 11u8,
							125u8, 36u8, 252u8, 184u8, 156u8, 242u8, 146u8, 64u8, 244u8, 7u8, 70u8,
							186u8, 11u8, 235u8, 13u8, 254u8, 132u8, 2u8, 154u8, 117u8, 85u8, 154u8,
						],
					)
				}
				#[doc = " Base XCM weight."]
				#[doc = ""]
				#[doc = " The actually weight for an XCM message is `T::BaseXcmWeight +"]
				#[doc = " T::Weigher::weight(&msg)`."]
				pub fn base_xcm_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"XTokens",
						"BaseXcmWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
			}
		}
	}
	pub mod tokens {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::orml_tokens::module::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::orml_tokens::module::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer`]."]
				pub struct Transfer {
					pub dest: transfer::Dest,
					pub currency_id: transfer::CurrencyId,
					#[codec(compact)]
					pub amount: transfer::Amount,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_all`]."]
				pub struct TransferAll {
					pub dest: transfer_all::Dest,
					pub currency_id: transfer_all::CurrencyId,
					pub keep_alive: transfer_all::KeepAlive,
				}
				pub mod transfer_all {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferAll {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "transfer_all";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_keep_alive`]."]
				pub struct TransferKeepAlive {
					pub dest: transfer_keep_alive::Dest,
					pub currency_id: transfer_keep_alive::CurrencyId,
					#[codec(compact)]
					pub amount: transfer_keep_alive::Amount,
				}
				pub mod transfer_keep_alive {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "transfer_keep_alive";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_transfer`]."]
				pub struct ForceTransfer {
					pub source: force_transfer::Source,
					pub dest: force_transfer::Dest,
					pub currency_id: force_transfer::CurrencyId,
					#[codec(compact)]
					pub amount: force_transfer::Amount,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type Source = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_balance`]."]
				pub struct SetBalance {
					pub who: set_balance::Who,
					pub currency_id: set_balance::CurrencyId,
					#[codec(compact)]
					pub new_free: set_balance::NewFree,
					#[codec(compact)]
					pub new_reserved: set_balance::NewReserved,
				}
				pub mod set_balance {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type NewFree = ::core::primitive::u128;
					pub type NewReserved = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetBalance {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "set_balance";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::transfer`]."]
				pub fn transfer(
					&self,
					dest: types::transfer::Dest,
					currency_id: types::transfer::CurrencyId,
					amount: types::transfer::Amount,
				) -> ::subxt::tx::Payload<types::Transfer> {
					::subxt::tx::Payload::new_static(
						"Tokens",
						"transfer",
						types::Transfer { dest, currency_id, amount },
						[
							87u8, 217u8, 113u8, 183u8, 138u8, 103u8, 31u8, 96u8, 9u8, 134u8, 118u8,
							141u8, 149u8, 26u8, 105u8, 55u8, 123u8, 218u8, 208u8, 31u8, 202u8,
							53u8, 185u8, 208u8, 228u8, 189u8, 163u8, 188u8, 113u8, 200u8, 183u8,
							236u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_all`]."]
				pub fn transfer_all(
					&self,
					dest: types::transfer_all::Dest,
					currency_id: types::transfer_all::CurrencyId,
					keep_alive: types::transfer_all::KeepAlive,
				) -> ::subxt::tx::Payload<types::TransferAll> {
					::subxt::tx::Payload::new_static(
						"Tokens",
						"transfer_all",
						types::TransferAll { dest, currency_id, keep_alive },
						[
							149u8, 76u8, 121u8, 215u8, 196u8, 255u8, 247u8, 12u8, 233u8, 57u8,
							189u8, 220u8, 47u8, 122u8, 49u8, 56u8, 154u8, 180u8, 49u8, 153u8,
							227u8, 84u8, 129u8, 47u8, 106u8, 12u8, 22u8, 4u8, 220u8, 105u8, 57u8,
							197u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_keep_alive`]."]
				pub fn transfer_keep_alive(
					&self,
					dest: types::transfer_keep_alive::Dest,
					currency_id: types::transfer_keep_alive::CurrencyId,
					amount: types::transfer_keep_alive::Amount,
				) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
					::subxt::tx::Payload::new_static(
						"Tokens",
						"transfer_keep_alive",
						types::TransferKeepAlive { dest, currency_id, amount },
						[
							43u8, 58u8, 198u8, 117u8, 209u8, 21u8, 48u8, 8u8, 213u8, 125u8, 227u8,
							207u8, 39u8, 104u8, 236u8, 98u8, 124u8, 102u8, 65u8, 32u8, 31u8, 116u8,
							70u8, 95u8, 64u8, 211u8, 98u8, 233u8, 1u8, 36u8, 164u8, 103u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_transfer`]."]
				pub fn force_transfer(
					&self,
					source: types::force_transfer::Source,
					dest: types::force_transfer::Dest,
					currency_id: types::force_transfer::CurrencyId,
					amount: types::force_transfer::Amount,
				) -> ::subxt::tx::Payload<types::ForceTransfer> {
					::subxt::tx::Payload::new_static(
						"Tokens",
						"force_transfer",
						types::ForceTransfer { source, dest, currency_id, amount },
						[
							76u8, 7u8, 144u8, 255u8, 11u8, 247u8, 15u8, 208u8, 133u8, 94u8, 131u8,
							228u8, 88u8, 234u8, 223u8, 71u8, 130u8, 31u8, 92u8, 163u8, 238u8,
							193u8, 54u8, 14u8, 147u8, 242u8, 158u8, 181u8, 22u8, 83u8, 135u8, 5u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_balance`]."]
				pub fn set_balance(
					&self,
					who: types::set_balance::Who,
					currency_id: types::set_balance::CurrencyId,
					new_free: types::set_balance::NewFree,
					new_reserved: types::set_balance::NewReserved,
				) -> ::subxt::tx::Payload<types::SetBalance> {
					::subxt::tx::Payload::new_static(
						"Tokens",
						"set_balance",
						types::SetBalance { who, currency_id, new_free, new_reserved },
						[
							71u8, 176u8, 112u8, 157u8, 195u8, 235u8, 133u8, 77u8, 208u8, 112u8,
							73u8, 44u8, 228u8, 1u8, 81u8, 250u8, 208u8, 195u8, 156u8, 140u8, 145u8,
							162u8, 130u8, 208u8, 158u8, 206u8, 56u8, 181u8, 126u8, 204u8, 11u8,
							171u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::orml_tokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub currency_id: endowed::CurrencyId,
				pub who: endowed::Who,
				pub amount: endowed::Amount,
			}
			pub mod endowed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Endowed {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "An account was removed whose balance was non-zero but below"]
			#[doc = "ExistentialDeposit, resulting in an outright loss."]
			pub struct DustLost {
				pub currency_id: dust_lost::CurrencyId,
				pub who: dust_lost::Who,
				pub amount: dust_lost::Amount,
			}
			pub mod dust_lost {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DustLost {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub currency_id: transfer::CurrencyId,
				pub from: transfer::From,
				pub to: transfer::To,
				pub amount: transfer::Amount,
			}
			pub mod transfer {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type From = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Transfer {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub currency_id: reserved::CurrencyId,
				pub who: reserved::Who,
				pub amount: reserved::Amount,
			}
			pub mod reserved {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub currency_id: unreserved::CurrencyId,
				pub who: unreserved::Who,
				pub amount: unreserved::Amount,
			}
			pub mod unreserved {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some reserved balance was repatriated (moved from reserved to"]
			#[doc = "another account)."]
			pub struct ReserveRepatriated {
				pub currency_id: reserve_repatriated::CurrencyId,
				pub from: reserve_repatriated::From,
				pub to: reserve_repatriated::To,
				pub amount: reserve_repatriated::Amount,
				pub status: reserve_repatriated::Status,
			}
			pub mod reserve_repatriated {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type From = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type Status = runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
			}
			impl ::subxt::events::StaticEvent for ReserveRepatriated {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub currency_id: balance_set::CurrencyId,
				pub who: balance_set::Who,
				pub free: balance_set::Free,
				pub reserved: balance_set::Reserved,
			}
			pub mod balance_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Free = ::core::primitive::u128;
				pub type Reserved = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BalanceSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The total issuance of an currency has been set"]
			pub struct TotalIssuanceSet {
				pub currency_id: total_issuance_set::CurrencyId,
				pub amount: total_issuance_set::Amount,
			}
			pub mod total_issuance_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TotalIssuanceSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "TotalIssuanceSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
			pub struct Withdrawn {
				pub currency_id: withdrawn::CurrencyId,
				pub who: withdrawn::Who,
				pub amount: withdrawn::Amount,
			}
			pub mod withdrawn {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
			pub struct Slashed {
				pub currency_id: slashed::CurrencyId,
				pub who: slashed::Who,
				pub free_amount: slashed::FreeAmount,
				pub reserved_amount: slashed::ReservedAmount,
			}
			pub mod slashed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type FreeAmount = ::core::primitive::u128;
				pub type ReservedAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Deposited some balance into an account"]
			pub struct Deposited {
				pub currency_id: deposited::CurrencyId,
				pub who: deposited::Who,
				pub amount: deposited::Amount,
			}
			pub mod deposited {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Deposited {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Deposited";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some funds are locked"]
			pub struct LockSet {
				pub lock_id: lock_set::LockId,
				pub currency_id: lock_set::CurrencyId,
				pub who: lock_set::Who,
				pub amount: lock_set::Amount,
			}
			pub mod lock_set {
				use super::runtime_types;
				pub type LockId = [::core::primitive::u8; 8usize];
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for LockSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "LockSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some locked funds were unlocked"]
			pub struct LockRemoved {
				pub lock_id: lock_removed::LockId,
				pub currency_id: lock_removed::CurrencyId,
				pub who: lock_removed::Who,
			}
			pub mod lock_removed {
				use super::runtime_types;
				pub type LockId = [::core::primitive::u8; 8usize];
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for LockRemoved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "LockRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some free balance was locked."]
			pub struct Locked {
				pub currency_id: locked::CurrencyId,
				pub who: locked::Who,
				pub amount: locked::Amount,
			}
			pub mod locked {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Locked {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Locked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some locked balance was freed."]
			pub struct Unlocked {
				pub currency_id: unlocked::CurrencyId,
				pub who: unlocked::Who,
				pub amount: unlocked::Amount,
			}
			pub mod unlocked {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Unlocked {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Unlocked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Issued {
				pub currency_id: issued::CurrencyId,
				pub amount: issued::Amount,
			}
			pub mod issued {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Issued {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Rescinded {
				pub currency_id: rescinded::CurrencyId,
				pub amount: rescinded::Amount,
			}
			pub mod rescinded {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Rescinded {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Rescinded";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod total_issuance {
					use super::runtime_types;
					pub type TotalIssuance = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod locks {
					use super::runtime_types;
					pub type Locks = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod accounts {
					use super::runtime_types;
					pub type Accounts =
						runtime_types::orml_tokens::AccountData<::core::primitive::u128>;
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod reserves {
					use super::runtime_types;
					pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::orml_tokens::ReserveData<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The total issuance of a token type."]
				pub fn total_issuance_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::total_issuance::TotalIssuance,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"TotalIssuance",
						vec![],
						[
							142u8, 199u8, 251u8, 56u8, 121u8, 202u8, 36u8, 170u8, 253u8, 94u8,
							175u8, 252u8, 9u8, 83u8, 148u8, 154u8, 250u8, 39u8, 12u8, 198u8, 205u8,
							79u8, 95u8, 136u8, 57u8, 7u8, 47u8, 28u8, 130u8, 201u8, 237u8, 38u8,
						],
					)
				}
				#[doc = " The total issuance of a token type."]
				pub fn total_issuance(
					&self,
					_0: impl ::std::borrow::Borrow<types::total_issuance::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::total_issuance::TotalIssuance,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"TotalIssuance",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							142u8, 199u8, 251u8, 56u8, 121u8, 202u8, 36u8, 170u8, 253u8, 94u8,
							175u8, 252u8, 9u8, 83u8, 148u8, 154u8, 250u8, 39u8, 12u8, 198u8, 205u8,
							79u8, 95u8, 136u8, 57u8, 7u8, 47u8, 28u8, 130u8, 201u8, 237u8, 38u8,
						],
					)
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::locks::Locks,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Locks",
						vec![],
						[
							193u8, 20u8, 47u8, 240u8, 53u8, 28u8, 154u8, 64u8, 68u8, 38u8, 203u8,
							153u8, 84u8, 238u8, 238u8, 230u8, 144u8, 40u8, 75u8, 234u8, 122u8,
							44u8, 154u8, 158u8, 214u8, 241u8, 171u8, 81u8, 37u8, 212u8, 0u8, 157u8,
						],
					)
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::locks::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::locks::Locks,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Locks",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							193u8, 20u8, 47u8, 240u8, 53u8, 28u8, 154u8, 64u8, 68u8, 38u8, 203u8,
							153u8, 84u8, 238u8, 238u8, 230u8, 144u8, 40u8, 75u8, 234u8, 122u8,
							44u8, 154u8, 158u8, 214u8, 241u8, 171u8, 81u8, 37u8, 212u8, 0u8, 157u8,
						],
					)
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: impl ::std::borrow::Borrow<types::locks::Param0>,
					_1: impl ::std::borrow::Borrow<types::locks::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::locks::Locks,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Locks",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							193u8, 20u8, 47u8, 240u8, 53u8, 28u8, 154u8, 64u8, 68u8, 38u8, 203u8,
							153u8, 84u8, 238u8, 238u8, 230u8, 144u8, 40u8, 75u8, 234u8, 122u8,
							44u8, 154u8, 158u8, 214u8, 241u8, 171u8, 81u8, 37u8, 212u8, 0u8, 157u8,
						],
					)
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::accounts::Accounts,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Accounts",
						vec![],
						[
							176u8, 38u8, 58u8, 114u8, 66u8, 231u8, 97u8, 68u8, 216u8, 106u8, 50u8,
							157u8, 249u8, 146u8, 40u8, 89u8, 132u8, 21u8, 247u8, 236u8, 13u8, 86u8,
							46u8, 221u8, 39u8, 195u8, 100u8, 222u8, 120u8, 104u8, 30u8, 161u8,
						],
					)
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::accounts::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::accounts::Accounts,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Accounts",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							176u8, 38u8, 58u8, 114u8, 66u8, 231u8, 97u8, 68u8, 216u8, 106u8, 50u8,
							157u8, 249u8, 146u8, 40u8, 89u8, 132u8, 21u8, 247u8, 236u8, 13u8, 86u8,
							46u8, 221u8, 39u8, 195u8, 100u8, 222u8, 120u8, 104u8, 30u8, 161u8,
						],
					)
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts(
					&self,
					_0: impl ::std::borrow::Borrow<types::accounts::Param0>,
					_1: impl ::std::borrow::Borrow<types::accounts::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::accounts::Accounts,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Accounts",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							176u8, 38u8, 58u8, 114u8, 66u8, 231u8, 97u8, 68u8, 216u8, 106u8, 50u8,
							157u8, 249u8, 146u8, 40u8, 89u8, 132u8, 21u8, 247u8, 236u8, 13u8, 86u8,
							46u8, 221u8, 39u8, 195u8, 100u8, 222u8, 120u8, 104u8, 30u8, 161u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reserves::Reserves,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Reserves",
						vec![],
						[
							133u8, 207u8, 47u8, 210u8, 91u8, 149u8, 92u8, 0u8, 245u8, 64u8, 40u8,
							29u8, 210u8, 0u8, 134u8, 193u8, 105u8, 94u8, 101u8, 126u8, 146u8, 68u8,
							14u8, 212u8, 51u8, 83u8, 135u8, 140u8, 72u8, 152u8, 250u8, 44u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::reserves::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reserves::Reserves,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Reserves",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							133u8, 207u8, 47u8, 210u8, 91u8, 149u8, 92u8, 0u8, 245u8, 64u8, 40u8,
							29u8, 210u8, 0u8, 134u8, 193u8, 105u8, 94u8, 101u8, 126u8, 146u8, 68u8,
							14u8, 212u8, 51u8, 83u8, 135u8, 140u8, 72u8, 152u8, 250u8, 44u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: impl ::std::borrow::Borrow<types::reserves::Param0>,
					_1: impl ::std::borrow::Borrow<types::reserves::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::reserves::Reserves,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Tokens",
						"Reserves",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							133u8, 207u8, 47u8, 210u8, 91u8, 149u8, 92u8, 0u8, 245u8, 64u8, 40u8,
							29u8, 210u8, 0u8, 134u8, 193u8, 105u8, 94u8, 101u8, 126u8, 146u8, 68u8,
							14u8, 212u8, 51u8, 83u8, 135u8, 140u8, 72u8, 152u8, 250u8, 44u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Tokens",
						"MaxLocks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Tokens",
						"MaxReserves",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod currencies {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_currencies::module::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_currencies::module::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer`]."]
				pub struct Transfer {
					pub dest: transfer::Dest,
					pub currency_id: transfer::CurrencyId,
					#[codec(compact)]
					pub amount: transfer::Amount,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Currencies";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_native_currency`]."]
				pub struct TransferNativeCurrency {
					pub dest: transfer_native_currency::Dest,
					#[codec(compact)]
					pub amount: transfer_native_currency::Amount,
				}
				pub mod transfer_native_currency {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferNativeCurrency {
					const PALLET: &'static str = "Currencies";
					const CALL: &'static str = "transfer_native_currency";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_balance`]."]
				pub struct UpdateBalance {
					pub who: update_balance::Who,
					pub currency_id: update_balance::CurrencyId,
					pub amount: update_balance::Amount,
				}
				pub mod update_balance {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::i128;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateBalance {
					const PALLET: &'static str = "Currencies";
					const CALL: &'static str = "update_balance";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::transfer`]."]
				pub fn transfer(
					&self,
					dest: types::transfer::Dest,
					currency_id: types::transfer::CurrencyId,
					amount: types::transfer::Amount,
				) -> ::subxt::tx::Payload<types::Transfer> {
					::subxt::tx::Payload::new_static(
						"Currencies",
						"transfer",
						types::Transfer { dest, currency_id, amount },
						[
							87u8, 217u8, 113u8, 183u8, 138u8, 103u8, 31u8, 96u8, 9u8, 134u8, 118u8,
							141u8, 149u8, 26u8, 105u8, 55u8, 123u8, 218u8, 208u8, 31u8, 202u8,
							53u8, 185u8, 208u8, 228u8, 189u8, 163u8, 188u8, 113u8, 200u8, 183u8,
							236u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_native_currency`]."]
				pub fn transfer_native_currency(
					&self,
					dest: types::transfer_native_currency::Dest,
					amount: types::transfer_native_currency::Amount,
				) -> ::subxt::tx::Payload<types::TransferNativeCurrency> {
					::subxt::tx::Payload::new_static(
						"Currencies",
						"transfer_native_currency",
						types::TransferNativeCurrency { dest, amount },
						[
							250u8, 143u8, 128u8, 147u8, 172u8, 107u8, 239u8, 203u8, 66u8, 157u8,
							200u8, 132u8, 18u8, 189u8, 153u8, 91u8, 15u8, 86u8, 87u8, 84u8, 7u8,
							148u8, 17u8, 186u8, 30u8, 131u8, 140u8, 220u8, 29u8, 145u8, 94u8, 73u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_balance`]."]
				pub fn update_balance(
					&self,
					who: types::update_balance::Who,
					currency_id: types::update_balance::CurrencyId,
					amount: types::update_balance::Amount,
				) -> ::subxt::tx::Payload<types::UpdateBalance> {
					::subxt::tx::Payload::new_static(
						"Currencies",
						"update_balance",
						types::UpdateBalance { who, currency_id, amount },
						[
							76u8, 149u8, 33u8, 168u8, 17u8, 51u8, 27u8, 226u8, 86u8, 159u8, 110u8,
							238u8, 141u8, 191u8, 32u8, 72u8, 204u8, 103u8, 210u8, 177u8, 162u8,
							183u8, 61u8, 173u8, 35u8, 119u8, 108u8, 37u8, 133u8, 117u8, 231u8,
							224u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn get_native_currency_id(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::tangle_primitives::currency::CurrencyId,
				> {
					::subxt::constants::Address::new_static(
						"Currencies",
						"GetNativeCurrencyId",
						[
							0u8, 142u8, 146u8, 232u8, 120u8, 214u8, 141u8, 122u8, 106u8, 238u8,
							244u8, 172u8, 42u8, 28u8, 151u8, 105u8, 14u8, 234u8, 196u8, 156u8,
							103u8, 83u8, 72u8, 226u8, 166u8, 84u8, 244u8, 226u8, 248u8, 176u8,
							92u8, 22u8,
						],
					)
				}
			}
		}
	}
	pub mod unknown_tokens {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::orml_unknown_tokens::module::Error;
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::orml_unknown_tokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Deposit success."]
			pub struct Deposited {
				pub asset: deposited::Asset,
				pub who: deposited::Who,
			}
			pub mod deposited {
				use super::runtime_types;
				pub type Asset = runtime_types::xcm::v3::multiasset::MultiAsset;
				pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for Deposited {
				const PALLET: &'static str = "UnknownTokens";
				const EVENT: &'static str = "Deposited";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Withdraw success."]
			pub struct Withdrawn {
				pub asset: withdrawn::Asset,
				pub who: withdrawn::Who,
			}
			pub mod withdrawn {
				use super::runtime_types;
				pub type Asset = runtime_types::xcm::v3::multiasset::MultiAsset;
				pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "UnknownTokens";
				const EVENT: &'static str = "Withdrawn";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod concrete_fungible_balances {
					use super::runtime_types;
					pub type ConcreteFungibleBalances = ::core::primitive::u128;
					pub type Param0 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Param1 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				pub mod abstract_fungible_balances {
					use super::runtime_types;
					pub type AbstractFungibleBalances = ::core::primitive::u128;
					pub type Param0 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Param1 = [::core::primitive::u8];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::concrete_fungible_balances::ConcreteFungibleBalances,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"UnknownTokens",
						"ConcreteFungibleBalances",
						vec![],
						[
							228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
							4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
							93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
						],
					)
				}
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::concrete_fungible_balances::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::concrete_fungible_balances::ConcreteFungibleBalances,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"UnknownTokens",
						"ConcreteFungibleBalances",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
							4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
							93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
						],
					)
				}
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances(
					&self,
					_0: impl ::std::borrow::Borrow<types::concrete_fungible_balances::Param0>,
					_1: impl ::std::borrow::Borrow<types::concrete_fungible_balances::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::concrete_fungible_balances::ConcreteFungibleBalances,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"UnknownTokens",
						"ConcreteFungibleBalances",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
							4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
							93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
						],
					)
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::abstract_fungible_balances::AbstractFungibleBalances,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"UnknownTokens",
						"AbstractFungibleBalances",
						vec![],
						[
							222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
							127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
							186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
						],
					)
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::abstract_fungible_balances::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::abstract_fungible_balances::AbstractFungibleBalances,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"UnknownTokens",
						"AbstractFungibleBalances",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
							127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
							186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
						],
					)
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances(
					&self,
					_0: impl ::std::borrow::Borrow<types::abstract_fungible_balances::Param0>,
					_1: impl ::std::borrow::Borrow<types::abstract_fungible_balances::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::abstract_fungible_balances::AbstractFungibleBalances,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"UnknownTokens",
						"AbstractFungibleBalances",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
							127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
							186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
						],
					)
				}
			}
		}
	}
	pub mod orml_xcm {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::orml_xcm::module::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::orml_xcm::module::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::send_as_sovereign`]."]
				pub struct SendAsSovereign {
					pub dest: ::std::boxed::Box<send_as_sovereign::Dest>,
					pub message: ::std::boxed::Box<send_as_sovereign::Message>,
				}
				pub mod send_as_sovereign {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Message = runtime_types::xcm::VersionedXcm;
				}
				impl ::subxt::blocks::StaticExtrinsic for SendAsSovereign {
					const PALLET: &'static str = "OrmlXcm";
					const CALL: &'static str = "send_as_sovereign";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::send_as_sovereign`]."]
				pub fn send_as_sovereign(
					&self,
					dest: types::send_as_sovereign::Dest,
					message: types::send_as_sovereign::Message,
				) -> ::subxt::tx::Payload<types::SendAsSovereign> {
					::subxt::tx::Payload::new_static(
						"OrmlXcm",
						"send_as_sovereign",
						types::SendAsSovereign {
							dest: ::std::boxed::Box::new(dest),
							message: ::std::boxed::Box::new(message),
						},
						[
							154u8, 33u8, 85u8, 132u8, 145u8, 31u8, 98u8, 18u8, 176u8, 178u8, 100u8,
							161u8, 47u8, 170u8, 246u8, 210u8, 28u8, 37u8, 142u8, 157u8, 59u8,
							234u8, 145u8, 116u8, 1u8, 12u8, 5u8, 170u8, 221u8, 184u8, 36u8, 172u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::orml_xcm::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "XCM message sent. \\[to, message\\]"]
			pub struct Sent {
				pub to: sent::To,
				pub message: sent::Message,
			}
			pub mod sent {
				use super::runtime_types;
				pub type To = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Message = runtime_types::xcm::v3::Xcm;
			}
			impl ::subxt::events::StaticEvent for Sent {
				const PALLET: &'static str = "OrmlXcm";
				const EVENT: &'static str = "Sent";
			}
		}
	}
	pub mod zenlink_protocol {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::zenlink_protocol::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::zenlink_protocol::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_fee_receiver`]."]
				pub struct SetFeeReceiver {
					pub send_to: set_fee_receiver::SendTo,
				}
				pub mod set_fee_receiver {
					use super::runtime_types;
					pub type SendTo = ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetFeeReceiver {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "set_fee_receiver";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_fee_point`]."]
				pub struct SetFeePoint {
					pub fee_point: set_fee_point::FeePoint,
				}
				pub mod set_fee_point {
					use super::runtime_types;
					pub type FeePoint = ::core::primitive::u8;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetFeePoint {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "set_fee_point";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer`]."]
				pub struct Transfer {
					pub asset_id: transfer::AssetId,
					pub recipient: transfer::Recipient,
					#[codec(compact)]
					pub amount: transfer::Amount,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type AssetId = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Recipient = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::create_pair`]."]
				pub struct CreatePair {
					pub asset_0: create_pair::Asset0,
					pub asset_1: create_pair::Asset1,
				}
				pub mod create_pair {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				impl ::subxt::blocks::StaticExtrinsic for CreatePair {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "create_pair";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_liquidity`]."]
				pub struct AddLiquidity {
					pub asset_0: add_liquidity::Asset0,
					pub asset_1: add_liquidity::Asset1,
					#[codec(compact)]
					pub amount_0_desired: add_liquidity::Amount0Desired,
					#[codec(compact)]
					pub amount_1_desired: add_liquidity::Amount1Desired,
					#[codec(compact)]
					pub amount_0_min: add_liquidity::Amount0Min,
					#[codec(compact)]
					pub amount_1_min: add_liquidity::Amount1Min,
					#[codec(compact)]
					pub deadline: add_liquidity::Deadline,
				}
				pub mod add_liquidity {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Amount0Desired = ::core::primitive::u128;
					pub type Amount1Desired = ::core::primitive::u128;
					pub type Amount0Min = ::core::primitive::u128;
					pub type Amount1Min = ::core::primitive::u128;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddLiquidity {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "add_liquidity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_liquidity`]."]
				pub struct RemoveLiquidity {
					pub asset_0: remove_liquidity::Asset0,
					pub asset_1: remove_liquidity::Asset1,
					#[codec(compact)]
					pub liquidity: remove_liquidity::Liquidity,
					#[codec(compact)]
					pub amount_0_min: remove_liquidity::Amount0Min,
					#[codec(compact)]
					pub amount_1_min: remove_liquidity::Amount1Min,
					pub recipient: remove_liquidity::Recipient,
					#[codec(compact)]
					pub deadline: remove_liquidity::Deadline,
				}
				pub mod remove_liquidity {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Liquidity = ::core::primitive::u128;
					pub type Amount0Min = ::core::primitive::u128;
					pub type Amount1Min = ::core::primitive::u128;
					pub type Recipient = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveLiquidity {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "remove_liquidity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::swap_exact_assets_for_assets`]."]
				pub struct SwapExactAssetsForAssets {
					#[codec(compact)]
					pub amount_in: swap_exact_assets_for_assets::AmountIn,
					#[codec(compact)]
					pub amount_out_min: swap_exact_assets_for_assets::AmountOutMin,
					pub path: swap_exact_assets_for_assets::Path,
					pub recipient: swap_exact_assets_for_assets::Recipient,
					#[codec(compact)]
					pub deadline: swap_exact_assets_for_assets::Deadline,
				}
				pub mod swap_exact_assets_for_assets {
					use super::runtime_types;
					pub type AmountIn = ::core::primitive::u128;
					pub type AmountOutMin = ::core::primitive::u128;
					pub type Path =
						::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
					pub type Recipient = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapExactAssetsForAssets {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "swap_exact_assets_for_assets";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::swap_assets_for_exact_assets`]."]
				pub struct SwapAssetsForExactAssets {
					#[codec(compact)]
					pub amount_out: swap_assets_for_exact_assets::AmountOut,
					#[codec(compact)]
					pub amount_in_max: swap_assets_for_exact_assets::AmountInMax,
					pub path: swap_assets_for_exact_assets::Path,
					pub recipient: swap_assets_for_exact_assets::Recipient,
					#[codec(compact)]
					pub deadline: swap_assets_for_exact_assets::Deadline,
				}
				pub mod swap_assets_for_exact_assets {
					use super::runtime_types;
					pub type AmountOut = ::core::primitive::u128;
					pub type AmountInMax = ::core::primitive::u128;
					pub type Path =
						::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
					pub type Recipient = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapAssetsForExactAssets {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "swap_assets_for_exact_assets";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_create`]."]
				pub struct BootstrapCreate {
					pub asset_0: bootstrap_create::Asset0,
					pub asset_1: bootstrap_create::Asset1,
					#[codec(compact)]
					pub target_supply_0: bootstrap_create::TargetSupply0,
					#[codec(compact)]
					pub target_supply_1: bootstrap_create::TargetSupply1,
					#[codec(compact)]
					pub capacity_supply_0: bootstrap_create::CapacitySupply0,
					#[codec(compact)]
					pub capacity_supply_1: bootstrap_create::CapacitySupply1,
					#[codec(compact)]
					pub end: bootstrap_create::End,
					pub rewards: bootstrap_create::Rewards,
					pub limits: bootstrap_create::Limits,
				}
				pub mod bootstrap_create {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type TargetSupply0 = ::core::primitive::u128;
					pub type TargetSupply1 = ::core::primitive::u128;
					pub type CapacitySupply0 = ::core::primitive::u128;
					pub type CapacitySupply1 = ::core::primitive::u128;
					pub type End = ::core::primitive::u32;
					pub type Rewards =
						::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
					pub type Limits = ::std::vec::Vec<(
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapCreate {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_create";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_contribute`]."]
				pub struct BootstrapContribute {
					pub asset_0: bootstrap_contribute::Asset0,
					pub asset_1: bootstrap_contribute::Asset1,
					#[codec(compact)]
					pub amount_0_contribute: bootstrap_contribute::Amount0Contribute,
					#[codec(compact)]
					pub amount_1_contribute: bootstrap_contribute::Amount1Contribute,
					#[codec(compact)]
					pub deadline: bootstrap_contribute::Deadline,
				}
				pub mod bootstrap_contribute {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Amount0Contribute = ::core::primitive::u128;
					pub type Amount1Contribute = ::core::primitive::u128;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapContribute {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_contribute";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_claim`]."]
				pub struct BootstrapClaim {
					pub recipient: bootstrap_claim::Recipient,
					pub asset_0: bootstrap_claim::Asset0,
					pub asset_1: bootstrap_claim::Asset1,
					#[codec(compact)]
					pub deadline: bootstrap_claim::Deadline,
				}
				pub mod bootstrap_claim {
					use super::runtime_types;
					pub type Recipient = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapClaim {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_claim";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_end`]."]
				pub struct BootstrapEnd {
					pub asset_0: bootstrap_end::Asset0,
					pub asset_1: bootstrap_end::Asset1,
				}
				pub mod bootstrap_end {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapEnd {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_end";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_update`]."]
				pub struct BootstrapUpdate {
					pub asset_0: bootstrap_update::Asset0,
					pub asset_1: bootstrap_update::Asset1,
					#[codec(compact)]
					pub target_supply_0: bootstrap_update::TargetSupply0,
					#[codec(compact)]
					pub target_supply_1: bootstrap_update::TargetSupply1,
					#[codec(compact)]
					pub capacity_supply_0: bootstrap_update::CapacitySupply0,
					#[codec(compact)]
					pub capacity_supply_1: bootstrap_update::CapacitySupply1,
					#[codec(compact)]
					pub end: bootstrap_update::End,
					pub rewards: bootstrap_update::Rewards,
					pub limits: bootstrap_update::Limits,
				}
				pub mod bootstrap_update {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type TargetSupply0 = ::core::primitive::u128;
					pub type TargetSupply1 = ::core::primitive::u128;
					pub type CapacitySupply0 = ::core::primitive::u128;
					pub type CapacitySupply1 = ::core::primitive::u128;
					pub type End = ::core::primitive::u32;
					pub type Rewards =
						::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
					pub type Limits = ::std::vec::Vec<(
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapUpdate {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_update";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_refund`]."]
				pub struct BootstrapRefund {
					pub asset_0: bootstrap_refund::Asset0,
					pub asset_1: bootstrap_refund::Asset1,
				}
				pub mod bootstrap_refund {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapRefund {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_refund";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_charge_reward`]."]
				pub struct BootstrapChargeReward {
					pub asset_0: bootstrap_charge_reward::Asset0,
					pub asset_1: bootstrap_charge_reward::Asset1,
					pub charge_rewards: bootstrap_charge_reward::ChargeRewards,
				}
				pub mod bootstrap_charge_reward {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type ChargeRewards = ::std::vec::Vec<(
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapChargeReward {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_charge_reward";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bootstrap_withdraw_reward`]."]
				pub struct BootstrapWithdrawReward {
					pub asset_0: bootstrap_withdraw_reward::Asset0,
					pub asset_1: bootstrap_withdraw_reward::Asset1,
					pub recipient: bootstrap_withdraw_reward::Recipient,
				}
				pub mod bootstrap_withdraw_reward {
					use super::runtime_types;
					pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Recipient = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for BootstrapWithdrawReward {
					const PALLET: &'static str = "ZenlinkProtocol";
					const CALL: &'static str = "bootstrap_withdraw_reward";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set_fee_receiver`]."]
				pub fn set_fee_receiver(
					&self,
					send_to: types::set_fee_receiver::SendTo,
				) -> ::subxt::tx::Payload<types::SetFeeReceiver> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"set_fee_receiver",
						types::SetFeeReceiver { send_to },
						[
							75u8, 162u8, 14u8, 33u8, 8u8, 108u8, 78u8, 111u8, 25u8, 59u8, 90u8,
							103u8, 175u8, 180u8, 22u8, 0u8, 75u8, 227u8, 219u8, 170u8, 242u8,
							152u8, 245u8, 252u8, 120u8, 98u8, 231u8, 195u8, 45u8, 188u8, 210u8,
							128u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_fee_point`]."]
				pub fn set_fee_point(
					&self,
					fee_point: types::set_fee_point::FeePoint,
				) -> ::subxt::tx::Payload<types::SetFeePoint> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"set_fee_point",
						types::SetFeePoint { fee_point },
						[
							247u8, 195u8, 149u8, 11u8, 152u8, 102u8, 40u8, 110u8, 7u8, 45u8, 67u8,
							136u8, 136u8, 110u8, 98u8, 163u8, 91u8, 82u8, 7u8, 171u8, 206u8, 105u8,
							113u8, 132u8, 159u8, 174u8, 156u8, 194u8, 77u8, 18u8, 207u8, 180u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer`]."]
				pub fn transfer(
					&self,
					asset_id: types::transfer::AssetId,
					recipient: types::transfer::Recipient,
					amount: types::transfer::Amount,
				) -> ::subxt::tx::Payload<types::Transfer> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"transfer",
						types::Transfer { asset_id, recipient, amount },
						[
							241u8, 44u8, 229u8, 151u8, 74u8, 228u8, 239u8, 102u8, 15u8, 145u8,
							46u8, 142u8, 151u8, 243u8, 181u8, 224u8, 2u8, 190u8, 188u8, 72u8, 26u8,
							42u8, 220u8, 122u8, 81u8, 24u8, 25u8, 250u8, 63u8, 231u8, 89u8, 176u8,
						],
					)
				}
				#[doc = "See [`Pallet::create_pair`]."]
				pub fn create_pair(
					&self,
					asset_0: types::create_pair::Asset0,
					asset_1: types::create_pair::Asset1,
				) -> ::subxt::tx::Payload<types::CreatePair> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"create_pair",
						types::CreatePair { asset_0, asset_1 },
						[
							11u8, 183u8, 244u8, 237u8, 38u8, 250u8, 20u8, 132u8, 89u8, 218u8,
							130u8, 131u8, 150u8, 94u8, 31u8, 40u8, 242u8, 21u8, 126u8, 212u8,
							198u8, 180u8, 221u8, 39u8, 148u8, 95u8, 74u8, 62u8, 76u8, 191u8, 100u8,
							37u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_liquidity`]."]
				pub fn add_liquidity(
					&self,
					asset_0: types::add_liquidity::Asset0,
					asset_1: types::add_liquidity::Asset1,
					amount_0_desired: types::add_liquidity::Amount0Desired,
					amount_1_desired: types::add_liquidity::Amount1Desired,
					amount_0_min: types::add_liquidity::Amount0Min,
					amount_1_min: types::add_liquidity::Amount1Min,
					deadline: types::add_liquidity::Deadline,
				) -> ::subxt::tx::Payload<types::AddLiquidity> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"add_liquidity",
						types::AddLiquidity {
							asset_0,
							asset_1,
							amount_0_desired,
							amount_1_desired,
							amount_0_min,
							amount_1_min,
							deadline,
						},
						[
							44u8, 6u8, 29u8, 158u8, 24u8, 59u8, 64u8, 56u8, 25u8, 214u8, 213u8,
							43u8, 30u8, 166u8, 249u8, 210u8, 38u8, 90u8, 181u8, 99u8, 45u8, 26u8,
							180u8, 99u8, 83u8, 117u8, 94u8, 1u8, 121u8, 239u8, 146u8, 151u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_liquidity`]."]
				pub fn remove_liquidity(
					&self,
					asset_0: types::remove_liquidity::Asset0,
					asset_1: types::remove_liquidity::Asset1,
					liquidity: types::remove_liquidity::Liquidity,
					amount_0_min: types::remove_liquidity::Amount0Min,
					amount_1_min: types::remove_liquidity::Amount1Min,
					recipient: types::remove_liquidity::Recipient,
					deadline: types::remove_liquidity::Deadline,
				) -> ::subxt::tx::Payload<types::RemoveLiquidity> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"remove_liquidity",
						types::RemoveLiquidity {
							asset_0,
							asset_1,
							liquidity,
							amount_0_min,
							amount_1_min,
							recipient,
							deadline,
						},
						[
							243u8, 85u8, 26u8, 153u8, 55u8, 200u8, 55u8, 222u8, 101u8, 159u8, 51u8,
							178u8, 214u8, 117u8, 155u8, 90u8, 13u8, 153u8, 87u8, 237u8, 193u8,
							192u8, 73u8, 224u8, 82u8, 238u8, 136u8, 168u8, 25u8, 80u8, 253u8, 6u8,
						],
					)
				}
				#[doc = "See [`Pallet::swap_exact_assets_for_assets`]."]
				pub fn swap_exact_assets_for_assets(
					&self,
					amount_in: types::swap_exact_assets_for_assets::AmountIn,
					amount_out_min: types::swap_exact_assets_for_assets::AmountOutMin,
					path: types::swap_exact_assets_for_assets::Path,
					recipient: types::swap_exact_assets_for_assets::Recipient,
					deadline: types::swap_exact_assets_for_assets::Deadline,
				) -> ::subxt::tx::Payload<types::SwapExactAssetsForAssets> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"swap_exact_assets_for_assets",
						types::SwapExactAssetsForAssets {
							amount_in,
							amount_out_min,
							path,
							recipient,
							deadline,
						},
						[
							2u8, 215u8, 86u8, 203u8, 46u8, 171u8, 17u8, 172u8, 70u8, 16u8, 199u8,
							213u8, 91u8, 87u8, 107u8, 61u8, 80u8, 204u8, 158u8, 230u8, 232u8,
							167u8, 228u8, 13u8, 132u8, 141u8, 197u8, 165u8, 175u8, 83u8, 28u8,
							25u8,
						],
					)
				}
				#[doc = "See [`Pallet::swap_assets_for_exact_assets`]."]
				pub fn swap_assets_for_exact_assets(
					&self,
					amount_out: types::swap_assets_for_exact_assets::AmountOut,
					amount_in_max: types::swap_assets_for_exact_assets::AmountInMax,
					path: types::swap_assets_for_exact_assets::Path,
					recipient: types::swap_assets_for_exact_assets::Recipient,
					deadline: types::swap_assets_for_exact_assets::Deadline,
				) -> ::subxt::tx::Payload<types::SwapAssetsForExactAssets> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"swap_assets_for_exact_assets",
						types::SwapAssetsForExactAssets {
							amount_out,
							amount_in_max,
							path,
							recipient,
							deadline,
						},
						[
							43u8, 156u8, 53u8, 162u8, 44u8, 152u8, 13u8, 35u8, 177u8, 135u8, 89u8,
							158u8, 35u8, 151u8, 170u8, 207u8, 140u8, 253u8, 141u8, 124u8, 82u8,
							193u8, 124u8, 187u8, 205u8, 132u8, 37u8, 165u8, 169u8, 234u8, 3u8,
							177u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_create`]."]
				pub fn bootstrap_create(
					&self,
					asset_0: types::bootstrap_create::Asset0,
					asset_1: types::bootstrap_create::Asset1,
					target_supply_0: types::bootstrap_create::TargetSupply0,
					target_supply_1: types::bootstrap_create::TargetSupply1,
					capacity_supply_0: types::bootstrap_create::CapacitySupply0,
					capacity_supply_1: types::bootstrap_create::CapacitySupply1,
					end: types::bootstrap_create::End,
					rewards: types::bootstrap_create::Rewards,
					limits: types::bootstrap_create::Limits,
				) -> ::subxt::tx::Payload<types::BootstrapCreate> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_create",
						types::BootstrapCreate {
							asset_0,
							asset_1,
							target_supply_0,
							target_supply_1,
							capacity_supply_0,
							capacity_supply_1,
							end,
							rewards,
							limits,
						},
						[
							144u8, 61u8, 97u8, 130u8, 36u8, 191u8, 250u8, 151u8, 72u8, 221u8,
							213u8, 72u8, 57u8, 119u8, 196u8, 105u8, 21u8, 101u8, 24u8, 32u8, 58u8,
							187u8, 36u8, 18u8, 24u8, 253u8, 16u8, 173u8, 167u8, 243u8, 118u8, 8u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_contribute`]."]
				pub fn bootstrap_contribute(
					&self,
					asset_0: types::bootstrap_contribute::Asset0,
					asset_1: types::bootstrap_contribute::Asset1,
					amount_0_contribute: types::bootstrap_contribute::Amount0Contribute,
					amount_1_contribute: types::bootstrap_contribute::Amount1Contribute,
					deadline: types::bootstrap_contribute::Deadline,
				) -> ::subxt::tx::Payload<types::BootstrapContribute> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_contribute",
						types::BootstrapContribute {
							asset_0,
							asset_1,
							amount_0_contribute,
							amount_1_contribute,
							deadline,
						},
						[
							233u8, 26u8, 52u8, 125u8, 192u8, 247u8, 156u8, 64u8, 153u8, 67u8,
							180u8, 120u8, 141u8, 154u8, 192u8, 143u8, 39u8, 120u8, 59u8, 90u8,
							18u8, 199u8, 110u8, 59u8, 220u8, 244u8, 36u8, 213u8, 194u8, 20u8,
							240u8, 142u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_claim`]."]
				pub fn bootstrap_claim(
					&self,
					recipient: types::bootstrap_claim::Recipient,
					asset_0: types::bootstrap_claim::Asset0,
					asset_1: types::bootstrap_claim::Asset1,
					deadline: types::bootstrap_claim::Deadline,
				) -> ::subxt::tx::Payload<types::BootstrapClaim> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_claim",
						types::BootstrapClaim { recipient, asset_0, asset_1, deadline },
						[
							80u8, 19u8, 252u8, 149u8, 28u8, 92u8, 99u8, 113u8, 20u8, 199u8, 8u8,
							117u8, 136u8, 222u8, 157u8, 145u8, 204u8, 181u8, 74u8, 31u8, 220u8,
							122u8, 101u8, 183u8, 159u8, 194u8, 50u8, 87u8, 229u8, 44u8, 2u8, 180u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_end`]."]
				pub fn bootstrap_end(
					&self,
					asset_0: types::bootstrap_end::Asset0,
					asset_1: types::bootstrap_end::Asset1,
				) -> ::subxt::tx::Payload<types::BootstrapEnd> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_end",
						types::BootstrapEnd { asset_0, asset_1 },
						[
							247u8, 52u8, 65u8, 250u8, 3u8, 136u8, 198u8, 8u8, 26u8, 5u8, 175u8,
							100u8, 63u8, 83u8, 28u8, 201u8, 122u8, 66u8, 143u8, 198u8, 117u8, 0u8,
							10u8, 72u8, 77u8, 6u8, 72u8, 179u8, 63u8, 159u8, 204u8, 220u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_update`]."]
				pub fn bootstrap_update(
					&self,
					asset_0: types::bootstrap_update::Asset0,
					asset_1: types::bootstrap_update::Asset1,
					target_supply_0: types::bootstrap_update::TargetSupply0,
					target_supply_1: types::bootstrap_update::TargetSupply1,
					capacity_supply_0: types::bootstrap_update::CapacitySupply0,
					capacity_supply_1: types::bootstrap_update::CapacitySupply1,
					end: types::bootstrap_update::End,
					rewards: types::bootstrap_update::Rewards,
					limits: types::bootstrap_update::Limits,
				) -> ::subxt::tx::Payload<types::BootstrapUpdate> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_update",
						types::BootstrapUpdate {
							asset_0,
							asset_1,
							target_supply_0,
							target_supply_1,
							capacity_supply_0,
							capacity_supply_1,
							end,
							rewards,
							limits,
						},
						[
							3u8, 21u8, 57u8, 45u8, 203u8, 47u8, 137u8, 177u8, 153u8, 255u8, 81u8,
							227u8, 120u8, 123u8, 195u8, 2u8, 200u8, 77u8, 215u8, 168u8, 116u8,
							69u8, 56u8, 57u8, 92u8, 35u8, 146u8, 1u8, 130u8, 206u8, 157u8, 196u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_refund`]."]
				pub fn bootstrap_refund(
					&self,
					asset_0: types::bootstrap_refund::Asset0,
					asset_1: types::bootstrap_refund::Asset1,
				) -> ::subxt::tx::Payload<types::BootstrapRefund> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_refund",
						types::BootstrapRefund { asset_0, asset_1 },
						[
							147u8, 236u8, 131u8, 152u8, 127u8, 253u8, 145u8, 74u8, 186u8, 101u8,
							118u8, 123u8, 175u8, 1u8, 158u8, 27u8, 103u8, 183u8, 156u8, 122u8, 6u8,
							67u8, 211u8, 8u8, 6u8, 176u8, 176u8, 37u8, 244u8, 26u8, 221u8, 39u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_charge_reward`]."]
				pub fn bootstrap_charge_reward(
					&self,
					asset_0: types::bootstrap_charge_reward::Asset0,
					asset_1: types::bootstrap_charge_reward::Asset1,
					charge_rewards: types::bootstrap_charge_reward::ChargeRewards,
				) -> ::subxt::tx::Payload<types::BootstrapChargeReward> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_charge_reward",
						types::BootstrapChargeReward { asset_0, asset_1, charge_rewards },
						[
							25u8, 159u8, 127u8, 103u8, 37u8, 144u8, 10u8, 69u8, 99u8, 246u8, 221u8,
							215u8, 89u8, 239u8, 2u8, 179u8, 92u8, 179u8, 199u8, 57u8, 190u8, 106u8,
							68u8, 157u8, 214u8, 158u8, 150u8, 10u8, 205u8, 113u8, 154u8, 137u8,
						],
					)
				}
				#[doc = "See [`Pallet::bootstrap_withdraw_reward`]."]
				pub fn bootstrap_withdraw_reward(
					&self,
					asset_0: types::bootstrap_withdraw_reward::Asset0,
					asset_1: types::bootstrap_withdraw_reward::Asset1,
					recipient: types::bootstrap_withdraw_reward::Recipient,
				) -> ::subxt::tx::Payload<types::BootstrapWithdrawReward> {
					::subxt::tx::Payload::new_static(
						"ZenlinkProtocol",
						"bootstrap_withdraw_reward",
						types::BootstrapWithdrawReward { asset_0, asset_1, recipient },
						[
							158u8, 223u8, 88u8, 160u8, 116u8, 118u8, 34u8, 157u8, 61u8, 200u8,
							201u8, 169u8, 109u8, 192u8, 218u8, 234u8, 185u8, 231u8, 220u8, 240u8,
							180u8, 135u8, 95u8, 64u8, 140u8, 110u8, 132u8, 30u8, 112u8, 179u8,
							51u8, 129u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::zenlink_protocol::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Foreign Asset"]
			#[doc = "Some assets were transferred. \\[asset_id, owner, target, amount\\]"]
			pub struct Transferred(
				pub transferred::Field0,
				pub transferred::Field1,
				pub transferred::Field2,
				pub transferred::Field3,
			);
			pub mod transferred {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = ::subxt::utils::AccountId32;
				pub type Field3 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Transferred {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "Transferred";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some assets were burned. \\[asset_id, owner, amount\\]"]
			pub struct Burned(pub burned::Field0, pub burned::Field1, pub burned::Field2);
			pub mod burned {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Burned {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "Burned";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Some assets were minted. \\[asset_id, owner, amount\\]"]
			pub struct Minted(pub minted::Field0, pub minted::Field1, pub minted::Field2);
			pub mod minted {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Minted {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "Minted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Swap"]
			#[doc = "Create a trading pair. \\[asset_0, asset_1\\]"]
			pub struct PairCreated(pub pair_created::Field0, pub pair_created::Field1);
			pub mod pair_created {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
			}
			impl ::subxt::events::StaticEvent for PairCreated {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "PairCreated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Add liquidity. \\[owner, asset_0, asset_1, add_balance_0, add_balance_1,"]
			#[doc = "mint_balance_lp\\]"]
			pub struct LiquidityAdded(
				pub liquidity_added::Field0,
				pub liquidity_added::Field1,
				pub liquidity_added::Field2,
				pub liquidity_added::Field3,
				pub liquidity_added::Field4,
				pub liquidity_added::Field5,
			);
			pub mod liquidity_added {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field3 = ::core::primitive::u128;
				pub type Field4 = ::core::primitive::u128;
				pub type Field5 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for LiquidityAdded {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "LiquidityAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Remove liquidity. \\[owner, recipient, asset_0, asset_1, rm_balance_0, rm_balance_1,"]
			#[doc = "burn_balance_lp\\]"]
			pub struct LiquidityRemoved(
				pub liquidity_removed::Field0,
				pub liquidity_removed::Field1,
				pub liquidity_removed::Field2,
				pub liquidity_removed::Field3,
				pub liquidity_removed::Field4,
				pub liquidity_removed::Field5,
				pub liquidity_removed::Field6,
			);
			pub mod liquidity_removed {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field4 = ::core::primitive::u128;
				pub type Field5 = ::core::primitive::u128;
				pub type Field6 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for LiquidityRemoved {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "LiquidityRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Transact in trading \\[owner, recipient, swap_path, balances\\]"]
			pub struct AssetSwap(
				pub asset_swap::Field0,
				pub asset_swap::Field1,
				pub asset_swap::Field2,
				pub asset_swap::Field3,
			);
			pub mod asset_swap {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 =
					::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
				pub type Field3 = ::std::vec::Vec<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for AssetSwap {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "AssetSwap";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Transfer by xcm"]
			#[doc = "Transferred to parachain. \\[asset_id, src, para_id, dest, amount, used_weight\\]"]
			pub struct TransferredToParachain(
				pub transferred_to_parachain::Field0,
				pub transferred_to_parachain::Field1,
				pub transferred_to_parachain::Field2,
				pub transferred_to_parachain::Field3,
				pub transferred_to_parachain::Field4,
				pub transferred_to_parachain::Field5,
			);
			pub mod transferred_to_parachain {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = runtime_types::polkadot_parachain_primitives::primitives::Id;
				pub type Field3 = ::subxt::utils::AccountId32;
				pub type Field4 = ::core::primitive::u128;
				pub type Field5 = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for TransferredToParachain {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "TransferredToParachain";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Contribute to bootstrap pair. \\[who, asset_0, asset_0_contribute, asset_1_contribute\\]"]
			pub struct BootstrapContribute(
				pub bootstrap_contribute::Field0,
				pub bootstrap_contribute::Field1,
				pub bootstrap_contribute::Field2,
				pub bootstrap_contribute::Field3,
				pub bootstrap_contribute::Field4,
			);
			pub mod bootstrap_contribute {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = ::core::primitive::u128;
				pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field4 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BootstrapContribute {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "BootstrapContribute";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A bootstrap pair end. \\[asset_0, asset_1, asset_0_amount, asset_1_amount,"]
			#[doc = "total_lp_supply]"]
			pub struct BootstrapEnd(
				pub bootstrap_end::Field0,
				pub bootstrap_end::Field1,
				pub bootstrap_end::Field2,
				pub bootstrap_end::Field3,
				pub bootstrap_end::Field4,
			);
			pub mod bootstrap_end {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = ::core::primitive::u128;
				pub type Field3 = ::core::primitive::u128;
				pub type Field4 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BootstrapEnd {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "BootstrapEnd";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Create a bootstrap pair. \\[bootstrap_pair_account, asset_0, asset_1,"]
			#[doc = "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1, end\\]"]
			pub struct BootstrapCreated(
				pub bootstrap_created::Field0,
				pub bootstrap_created::Field1,
				pub bootstrap_created::Field2,
				pub bootstrap_created::Field3,
				pub bootstrap_created::Field4,
				pub bootstrap_created::Field5,
				pub bootstrap_created::Field6,
				pub bootstrap_created::Field7,
			);
			pub mod bootstrap_created {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field3 = ::core::primitive::u128;
				pub type Field4 = ::core::primitive::u128;
				pub type Field5 = ::core::primitive::u128;
				pub type Field6 = ::core::primitive::u128;
				pub type Field7 = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for BootstrapCreated {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "BootstrapCreated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Claim a bootstrap pair. \\[bootstrap_pair_account, claimer, receiver, asset_0, asset_1,"]
			#[doc = "asset_0_refund, asset_1_refund, lp_amount\\]"]
			pub struct BootstrapClaim(
				pub bootstrap_claim::Field0,
				pub bootstrap_claim::Field1,
				pub bootstrap_claim::Field2,
				pub bootstrap_claim::Field3,
				pub bootstrap_claim::Field4,
				pub bootstrap_claim::Field5,
				pub bootstrap_claim::Field6,
				pub bootstrap_claim::Field7,
			);
			pub mod bootstrap_claim {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = ::subxt::utils::AccountId32;
				pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field4 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field5 = ::core::primitive::u128;
				pub type Field6 = ::core::primitive::u128;
				pub type Field7 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BootstrapClaim {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "BootstrapClaim";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Update a bootstrap pair. \\[caller, asset_0, asset_1,"]
			#[doc = "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1\\]"]
			pub struct BootstrapUpdate(
				pub bootstrap_update::Field0,
				pub bootstrap_update::Field1,
				pub bootstrap_update::Field2,
				pub bootstrap_update::Field3,
				pub bootstrap_update::Field4,
				pub bootstrap_update::Field5,
				pub bootstrap_update::Field6,
				pub bootstrap_update::Field7,
			);
			pub mod bootstrap_update {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field3 = ::core::primitive::u128;
				pub type Field4 = ::core::primitive::u128;
				pub type Field5 = ::core::primitive::u128;
				pub type Field6 = ::core::primitive::u128;
				pub type Field7 = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for BootstrapUpdate {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "BootstrapUpdate";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Refund from disable bootstrap pair. \\[bootstrap_pair_account, caller, asset_0, asset_1,"]
			#[doc = "asset_0_refund, asset_1_refund\\]"]
			pub struct BootstrapRefund(
				pub bootstrap_refund::Field0,
				pub bootstrap_refund::Field1,
				pub bootstrap_refund::Field2,
				pub bootstrap_refund::Field3,
				pub bootstrap_refund::Field4,
				pub bootstrap_refund::Field5,
			);
			pub mod bootstrap_refund {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field4 = ::core::primitive::u128;
				pub type Field5 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BootstrapRefund {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "BootstrapRefund";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Bootstrap distribute some rewards to contributors."]
			pub struct DistributeReward(
				pub distribute_reward::Field0,
				pub distribute_reward::Field1,
				pub distribute_reward::Field2,
				pub distribute_reward::Field3,
			);
			pub mod distribute_reward {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = ::subxt::utils::AccountId32;
				pub type Field3 = ::std::vec::Vec<(
					runtime_types::zenlink_protocol::primitives::AssetId,
					::core::primitive::u128,
				)>;
			}
			impl ::subxt::events::StaticEvent for DistributeReward {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "DistributeReward";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Charge reward into a bootstrap."]
			pub struct ChargeReward(
				pub charge_reward::Field0,
				pub charge_reward::Field1,
				pub charge_reward::Field2,
				pub charge_reward::Field3,
			);
			pub mod charge_reward {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = ::subxt::utils::AccountId32;
				pub type Field3 = ::std::vec::Vec<(
					runtime_types::zenlink_protocol::primitives::AssetId,
					::core::primitive::u128,
				)>;
			}
			impl ::subxt::events::StaticEvent for ChargeReward {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "ChargeReward";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Withdraw all reward from a bootstrap."]
			pub struct WithdrawReward(
				pub withdraw_reward::Field0,
				pub withdraw_reward::Field1,
				pub withdraw_reward::Field2,
			);
			pub mod withdraw_reward {
				use super::runtime_types;
				pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
				pub type Field2 = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for WithdrawReward {
				const PALLET: &'static str = "ZenlinkProtocol";
				const EVENT: &'static str = "WithdrawReward";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod foreign_ledger {
					use super::runtime_types;
					pub type ForeignLedger = ::core::primitive::u128;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Param1 = ::subxt::utils::AccountId32;
				}
				pub mod foreign_meta {
					use super::runtime_types;
					pub type ForeignMeta = ::core::primitive::u128;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				pub mod foreign_list {
					use super::runtime_types;
					pub type ForeignList =
						::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
				}
				pub mod k_last {
					use super::runtime_types;
					pub type KLast = runtime_types::primitive_types::U256;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				pub mod fee_meta {
					use super::runtime_types;
					pub type FeeMeta = (
						::core::option::Option<::subxt::utils::AccountId32>,
						::core::primitive::u8,
					);
				}
				pub mod liquidity_pairs {
					use super::runtime_types;
					pub type LiquidityPairs = ::core::option::Option<
						runtime_types::zenlink_protocol::primitives::AssetId,
					>;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				pub mod pair_statuses {
					use super::runtime_types;
					pub type PairStatuses = runtime_types::zenlink_protocol::primitives::PairStatus<
						::core::primitive::u128,
						::core::primitive::u32,
						::subxt::utils::AccountId32,
					>;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				pub mod bootstrap_personal_supply {
					use super::runtime_types;
					pub type BootstrapPersonalSupply =
						(::core::primitive::u128, ::core::primitive::u128);
					pub type Param0 = (
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
					);
					pub type Param1 = ::subxt::utils::AccountId32;
				}
				pub mod bootstrap_end_status {
					use super::runtime_types;
					pub type BootstrapEndStatus =
						runtime_types::zenlink_protocol::primitives::PairStatus<
							::core::primitive::u128,
							::core::primitive::u32,
							::subxt::utils::AccountId32,
						>;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				pub mod bootstrap_rewards {
					use super::runtime_types;
					pub type BootstrapRewards = ::subxt::utils::KeyedVec<
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
					>;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
				pub mod bootstrap_limits {
					use super::runtime_types;
					pub type BootstrapLimits = ::subxt::utils::KeyedVec<
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
					>;
					pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
					pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Foreign foreign storage"]
				#[doc = " The number of units of assets held by any given account."]
				pub fn foreign_ledger_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_ledger::ForeignLedger,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"ForeignLedger",
						vec![],
						[
							190u8, 60u8, 102u8, 215u8, 244u8, 227u8, 87u8, 65u8, 196u8, 88u8,
							188u8, 94u8, 176u8, 189u8, 255u8, 141u8, 5u8, 101u8, 115u8, 71u8,
							176u8, 5u8, 236u8, 162u8, 189u8, 164u8, 14u8, 246u8, 183u8, 159u8,
							177u8, 251u8,
						],
					)
				}
				#[doc = " Foreign foreign storage"]
				#[doc = " The number of units of assets held by any given account."]
				pub fn foreign_ledger_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::foreign_ledger::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_ledger::ForeignLedger,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"ForeignLedger",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							190u8, 60u8, 102u8, 215u8, 244u8, 227u8, 87u8, 65u8, 196u8, 88u8,
							188u8, 94u8, 176u8, 189u8, 255u8, 141u8, 5u8, 101u8, 115u8, 71u8,
							176u8, 5u8, 236u8, 162u8, 189u8, 164u8, 14u8, 246u8, 183u8, 159u8,
							177u8, 251u8,
						],
					)
				}
				#[doc = " Foreign foreign storage"]
				#[doc = " The number of units of assets held by any given account."]
				pub fn foreign_ledger(
					&self,
					_0: impl ::std::borrow::Borrow<types::foreign_ledger::Param0>,
					_1: impl ::std::borrow::Borrow<types::foreign_ledger::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_ledger::ForeignLedger,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"ForeignLedger",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							190u8, 60u8, 102u8, 215u8, 244u8, 227u8, 87u8, 65u8, 196u8, 88u8,
							188u8, 94u8, 176u8, 189u8, 255u8, 141u8, 5u8, 101u8, 115u8, 71u8,
							176u8, 5u8, 236u8, 162u8, 189u8, 164u8, 14u8, 246u8, 183u8, 159u8,
							177u8, 251u8,
						],
					)
				}
				#[doc = " TWOX-NOTE: `AssetId` is trusted, so this is safe."]
				pub fn foreign_meta_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_meta::ForeignMeta,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"ForeignMeta",
						vec![],
						[
							173u8, 150u8, 46u8, 46u8, 101u8, 18u8, 132u8, 191u8, 234u8, 6u8, 42u8,
							131u8, 54u8, 88u8, 125u8, 231u8, 170u8, 235u8, 125u8, 171u8, 144u8,
							247u8, 103u8, 195u8, 110u8, 88u8, 93u8, 253u8, 54u8, 239u8, 30u8,
							200u8,
						],
					)
				}
				#[doc = " TWOX-NOTE: `AssetId` is trusted, so this is safe."]
				pub fn foreign_meta(
					&self,
					_0: impl ::std::borrow::Borrow<types::foreign_meta::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_meta::ForeignMeta,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"ForeignMeta",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							173u8, 150u8, 46u8, 46u8, 101u8, 18u8, 132u8, 191u8, 234u8, 6u8, 42u8,
							131u8, 54u8, 88u8, 125u8, 231u8, 170u8, 235u8, 125u8, 171u8, 144u8,
							247u8, 103u8, 195u8, 110u8, 88u8, 93u8, 253u8, 54u8, 239u8, 30u8,
							200u8,
						],
					)
				}
				pub fn foreign_list(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_list::ForeignList,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"ForeignList",
						vec![],
						[
							150u8, 118u8, 147u8, 51u8, 220u8, 128u8, 90u8, 50u8, 70u8, 209u8, 93u8,
							150u8, 226u8, 110u8, 48u8, 117u8, 99u8, 140u8, 57u8, 207u8, 176u8,
							119u8, 34u8, 184u8, 17u8, 108u8, 3u8, 162u8, 179u8, 106u8, 119u8, 39u8,
						],
					)
				}
				#[doc = " Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88"]
				#[doc = " Last unliquidated protocol fee;"]
				pub fn k_last_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::k_last::KLast,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"KLast",
						vec![],
						[
							85u8, 169u8, 252u8, 216u8, 188u8, 217u8, 63u8, 117u8, 56u8, 35u8,
							215u8, 23u8, 174u8, 160u8, 21u8, 101u8, 206u8, 63u8, 83u8, 50u8, 251u8,
							204u8, 166u8, 60u8, 133u8, 223u8, 179u8, 29u8, 2u8, 198u8, 47u8, 171u8,
						],
					)
				}
				#[doc = " Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88"]
				#[doc = " Last unliquidated protocol fee;"]
				pub fn k_last_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::k_last::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::k_last::KLast,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"KLast",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							85u8, 169u8, 252u8, 216u8, 188u8, 217u8, 63u8, 117u8, 56u8, 35u8,
							215u8, 23u8, 174u8, 160u8, 21u8, 101u8, 206u8, 63u8, 83u8, 50u8, 251u8,
							204u8, 166u8, 60u8, 133u8, 223u8, 179u8, 29u8, 2u8, 198u8, 47u8, 171u8,
						],
					)
				}
				#[doc = " Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88"]
				#[doc = " Last unliquidated protocol fee;"]
				pub fn k_last(
					&self,
					_0: impl ::std::borrow::Borrow<types::k_last::Param0>,
					_1: impl ::std::borrow::Borrow<types::k_last::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::k_last::KLast,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"KLast",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							85u8, 169u8, 252u8, 216u8, 188u8, 217u8, 63u8, 117u8, 56u8, 35u8,
							215u8, 23u8, 174u8, 160u8, 21u8, 101u8, 206u8, 63u8, 83u8, 50u8, 251u8,
							204u8, 166u8, 60u8, 133u8, 223u8, 179u8, 29u8, 2u8, 198u8, 47u8, 171u8,
						],
					)
				}
				#[doc = " (Option<fee_receiver>, fee_point)"]
				pub fn fee_meta(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::fee_meta::FeeMeta,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"FeeMeta",
						vec![],
						[
							250u8, 151u8, 188u8, 44u8, 82u8, 45u8, 214u8, 208u8, 92u8, 212u8,
							169u8, 188u8, 14u8, 215u8, 16u8, 76u8, 47u8, 114u8, 22u8, 11u8, 113u8,
							50u8, 228u8, 175u8, 186u8, 67u8, 90u8, 243u8, 158u8, 63u8, 133u8, 94u8,
						],
					)
				}
				pub fn liquidity_pairs_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::liquidity_pairs::LiquidityPairs,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"LiquidityPairs",
						vec![],
						[
							22u8, 124u8, 30u8, 156u8, 195u8, 153u8, 166u8, 183u8, 197u8, 188u8,
							236u8, 25u8, 197u8, 16u8, 120u8, 87u8, 57u8, 192u8, 214u8, 196u8, 49u8,
							101u8, 247u8, 67u8, 104u8, 30u8, 187u8, 242u8, 97u8, 234u8, 176u8,
							223u8,
						],
					)
				}
				pub fn liquidity_pairs_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::liquidity_pairs::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::liquidity_pairs::LiquidityPairs,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"LiquidityPairs",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							22u8, 124u8, 30u8, 156u8, 195u8, 153u8, 166u8, 183u8, 197u8, 188u8,
							236u8, 25u8, 197u8, 16u8, 120u8, 87u8, 57u8, 192u8, 214u8, 196u8, 49u8,
							101u8, 247u8, 67u8, 104u8, 30u8, 187u8, 242u8, 97u8, 234u8, 176u8,
							223u8,
						],
					)
				}
				pub fn liquidity_pairs(
					&self,
					_0: impl ::std::borrow::Borrow<types::liquidity_pairs::Param0>,
					_1: impl ::std::borrow::Borrow<types::liquidity_pairs::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::liquidity_pairs::LiquidityPairs,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"LiquidityPairs",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							22u8, 124u8, 30u8, 156u8, 195u8, 153u8, 166u8, 183u8, 197u8, 188u8,
							236u8, 25u8, 197u8, 16u8, 120u8, 87u8, 57u8, 192u8, 214u8, 196u8, 49u8,
							101u8, 247u8, 67u8, 104u8, 30u8, 187u8, 242u8, 97u8, 234u8, 176u8,
							223u8,
						],
					)
				}
				#[doc = " (T::AssetId, T::AssetId) -> PairStatus"]
				pub fn pair_statuses_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pair_statuses::PairStatuses,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"PairStatuses",
						vec![],
						[
							235u8, 9u8, 156u8, 201u8, 202u8, 250u8, 89u8, 150u8, 112u8, 238u8,
							95u8, 37u8, 13u8, 78u8, 133u8, 63u8, 10u8, 226u8, 241u8, 1u8, 91u8,
							55u8, 169u8, 77u8, 143u8, 100u8, 72u8, 26u8, 128u8, 84u8, 108u8, 3u8,
						],
					)
				}
				#[doc = " (T::AssetId, T::AssetId) -> PairStatus"]
				pub fn pair_statuses_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::pair_statuses::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pair_statuses::PairStatuses,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"PairStatuses",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							235u8, 9u8, 156u8, 201u8, 202u8, 250u8, 89u8, 150u8, 112u8, 238u8,
							95u8, 37u8, 13u8, 78u8, 133u8, 63u8, 10u8, 226u8, 241u8, 1u8, 91u8,
							55u8, 169u8, 77u8, 143u8, 100u8, 72u8, 26u8, 128u8, 84u8, 108u8, 3u8,
						],
					)
				}
				#[doc = " (T::AssetId, T::AssetId) -> PairStatus"]
				pub fn pair_statuses(
					&self,
					_0: impl ::std::borrow::Borrow<types::pair_statuses::Param0>,
					_1: impl ::std::borrow::Borrow<types::pair_statuses::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pair_statuses::PairStatuses,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"PairStatuses",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							235u8, 9u8, 156u8, 201u8, 202u8, 250u8, 89u8, 150u8, 112u8, 238u8,
							95u8, 37u8, 13u8, 78u8, 133u8, 63u8, 10u8, 226u8, 241u8, 1u8, 91u8,
							55u8, 169u8, 77u8, 143u8, 100u8, 72u8, 26u8, 128u8, 84u8, 108u8, 3u8,
						],
					)
				}
				pub fn bootstrap_personal_supply_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_personal_supply::BootstrapPersonalSupply,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapPersonalSupply",
						vec![],
						[
							118u8, 179u8, 242u8, 51u8, 31u8, 75u8, 116u8, 79u8, 153u8, 171u8,
							254u8, 230u8, 190u8, 52u8, 125u8, 219u8, 135u8, 27u8, 253u8, 11u8,
							226u8, 130u8, 112u8, 193u8, 37u8, 22u8, 25u8, 233u8, 200u8, 190u8,
							13u8, 16u8,
						],
					)
				}
				pub fn bootstrap_personal_supply_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_personal_supply::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_personal_supply::BootstrapPersonalSupply,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapPersonalSupply",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							118u8, 179u8, 242u8, 51u8, 31u8, 75u8, 116u8, 79u8, 153u8, 171u8,
							254u8, 230u8, 190u8, 52u8, 125u8, 219u8, 135u8, 27u8, 253u8, 11u8,
							226u8, 130u8, 112u8, 193u8, 37u8, 22u8, 25u8, 233u8, 200u8, 190u8,
							13u8, 16u8,
						],
					)
				}
				pub fn bootstrap_personal_supply(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_personal_supply::Param0>,
					_1: impl ::std::borrow::Borrow<types::bootstrap_personal_supply::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_personal_supply::BootstrapPersonalSupply,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapPersonalSupply",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							118u8, 179u8, 242u8, 51u8, 31u8, 75u8, 116u8, 79u8, 153u8, 171u8,
							254u8, 230u8, 190u8, 52u8, 125u8, 219u8, 135u8, 27u8, 253u8, 11u8,
							226u8, 130u8, 112u8, 193u8, 37u8, 22u8, 25u8, 233u8, 200u8, 190u8,
							13u8, 16u8,
						],
					)
				}
				#[doc = " End status of bootstrap"]
				#[doc = ""]
				#[doc = " BootstrapEndStatus: map bootstrap pair => pairStatus"]
				pub fn bootstrap_end_status_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_end_status::BootstrapEndStatus,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapEndStatus",
						vec![],
						[
							243u8, 177u8, 63u8, 219u8, 118u8, 15u8, 220u8, 226u8, 245u8, 173u8,
							251u8, 106u8, 156u8, 20u8, 46u8, 23u8, 57u8, 247u8, 220u8, 54u8, 97u8,
							136u8, 84u8, 107u8, 13u8, 170u8, 29u8, 160u8, 252u8, 68u8, 148u8,
							219u8,
						],
					)
				}
				#[doc = " End status of bootstrap"]
				#[doc = ""]
				#[doc = " BootstrapEndStatus: map bootstrap pair => pairStatus"]
				pub fn bootstrap_end_status_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_end_status::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_end_status::BootstrapEndStatus,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapEndStatus",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							243u8, 177u8, 63u8, 219u8, 118u8, 15u8, 220u8, 226u8, 245u8, 173u8,
							251u8, 106u8, 156u8, 20u8, 46u8, 23u8, 57u8, 247u8, 220u8, 54u8, 97u8,
							136u8, 84u8, 107u8, 13u8, 170u8, 29u8, 160u8, 252u8, 68u8, 148u8,
							219u8,
						],
					)
				}
				#[doc = " End status of bootstrap"]
				#[doc = ""]
				#[doc = " BootstrapEndStatus: map bootstrap pair => pairStatus"]
				pub fn bootstrap_end_status(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_end_status::Param0>,
					_1: impl ::std::borrow::Borrow<types::bootstrap_end_status::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_end_status::BootstrapEndStatus,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapEndStatus",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							243u8, 177u8, 63u8, 219u8, 118u8, 15u8, 220u8, 226u8, 245u8, 173u8,
							251u8, 106u8, 156u8, 20u8, 46u8, 23u8, 57u8, 247u8, 220u8, 54u8, 97u8,
							136u8, 84u8, 107u8, 13u8, 170u8, 29u8, 160u8, 252u8, 68u8, 148u8,
							219u8,
						],
					)
				}
				pub fn bootstrap_rewards_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_rewards::BootstrapRewards,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapRewards",
						vec![],
						[
							81u8, 230u8, 182u8, 237u8, 40u8, 190u8, 45u8, 170u8, 121u8, 81u8, 7u8,
							185u8, 46u8, 121u8, 3u8, 55u8, 37u8, 187u8, 145u8, 120u8, 94u8, 253u8,
							50u8, 222u8, 167u8, 76u8, 160u8, 132u8, 25u8, 220u8, 229u8, 199u8,
						],
					)
				}
				pub fn bootstrap_rewards_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_rewards::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_rewards::BootstrapRewards,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapRewards",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							81u8, 230u8, 182u8, 237u8, 40u8, 190u8, 45u8, 170u8, 121u8, 81u8, 7u8,
							185u8, 46u8, 121u8, 3u8, 55u8, 37u8, 187u8, 145u8, 120u8, 94u8, 253u8,
							50u8, 222u8, 167u8, 76u8, 160u8, 132u8, 25u8, 220u8, 229u8, 199u8,
						],
					)
				}
				pub fn bootstrap_rewards(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_rewards::Param0>,
					_1: impl ::std::borrow::Borrow<types::bootstrap_rewards::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_rewards::BootstrapRewards,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapRewards",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							81u8, 230u8, 182u8, 237u8, 40u8, 190u8, 45u8, 170u8, 121u8, 81u8, 7u8,
							185u8, 46u8, 121u8, 3u8, 55u8, 37u8, 187u8, 145u8, 120u8, 94u8, 253u8,
							50u8, 222u8, 167u8, 76u8, 160u8, 132u8, 25u8, 220u8, 229u8, 199u8,
						],
					)
				}
				pub fn bootstrap_limits_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_limits::BootstrapLimits,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapLimits",
						vec![],
						[
							138u8, 139u8, 161u8, 79u8, 212u8, 230u8, 121u8, 226u8, 143u8, 135u8,
							215u8, 151u8, 32u8, 166u8, 109u8, 200u8, 112u8, 160u8, 19u8, 209u8,
							160u8, 142u8, 197u8, 151u8, 249u8, 15u8, 58u8, 164u8, 171u8, 247u8,
							183u8, 82u8,
						],
					)
				}
				pub fn bootstrap_limits_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_limits::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_limits::BootstrapLimits,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapLimits",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							138u8, 139u8, 161u8, 79u8, 212u8, 230u8, 121u8, 226u8, 143u8, 135u8,
							215u8, 151u8, 32u8, 166u8, 109u8, 200u8, 112u8, 160u8, 19u8, 209u8,
							160u8, 142u8, 197u8, 151u8, 249u8, 15u8, 58u8, 164u8, 171u8, 247u8,
							183u8, 82u8,
						],
					)
				}
				pub fn bootstrap_limits(
					&self,
					_0: impl ::std::borrow::Borrow<types::bootstrap_limits::Param0>,
					_1: impl ::std::borrow::Borrow<types::bootstrap_limits::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::bootstrap_limits::BootstrapLimits,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkProtocol",
						"BootstrapLimits",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							138u8, 139u8, 161u8, 79u8, 212u8, 230u8, 121u8, 226u8, 143u8, 135u8,
							215u8, 151u8, 32u8, 166u8, 109u8, 200u8, 112u8, 160u8, 19u8, 209u8,
							160u8, 142u8, 197u8, 151u8, 249u8, 15u8, 58u8, 164u8, 171u8, 247u8,
							183u8, 82u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " This pallet id."]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"ZenlinkProtocol",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
			}
		}
	}
	pub mod merkle_distributor {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::merkle_distributor::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::merkle_distributor::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_to_create_whitelist`]."]
				pub struct AddToCreateWhitelist {
					pub account: add_to_create_whitelist::Account,
				}
				pub mod add_to_create_whitelist {
					use super::runtime_types;
					pub type Account = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddToCreateWhitelist {
					const PALLET: &'static str = "MerkleDistributor";
					const CALL: &'static str = "add_to_create_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_from_create_whitelist`]."]
				pub struct RemoveFromCreateWhitelist {
					pub account: remove_from_create_whitelist::Account,
				}
				pub mod remove_from_create_whitelist {
					use super::runtime_types;
					pub type Account = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveFromCreateWhitelist {
					const PALLET: &'static str = "MerkleDistributor";
					const CALL: &'static str = "remove_from_create_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::create_merkle_distributor`]."]
				pub struct CreateMerkleDistributor {
					pub merkle_root: create_merkle_distributor::MerkleRoot,
					pub description: create_merkle_distributor::Description,
					pub distribute_currency: create_merkle_distributor::DistributeCurrency,
					pub distribute_amount: create_merkle_distributor::DistributeAmount,
				}
				pub mod create_merkle_distributor {
					use super::runtime_types;
					pub type MerkleRoot = ::subxt::utils::H256;
					pub type Description = ::std::vec::Vec<::core::primitive::u8>;
					pub type DistributeCurrency =
						runtime_types::tangle_primitives::currency::CurrencyId;
					pub type DistributeAmount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for CreateMerkleDistributor {
					const PALLET: &'static str = "MerkleDistributor";
					const CALL: &'static str = "create_merkle_distributor";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::claim`]."]
				pub struct Claim {
					pub merkle_distributor_id: claim::MerkleDistributorId,
					pub index: claim::Index,
					pub account: claim::Account,
					pub amount: claim::Amount,
					pub merkle_proof: claim::MerkleProof,
				}
				pub mod claim {
					use super::runtime_types;
					pub type MerkleDistributorId = ::core::primitive::u32;
					pub type Index = ::core::primitive::u32;
					pub type Account = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
					pub type MerkleProof = ::std::vec::Vec<::subxt::utils::H256>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Claim {
					const PALLET: &'static str = "MerkleDistributor";
					const CALL: &'static str = "claim";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::charge`]."]
				pub struct Charge {
					pub merkle_distributor_id: charge::MerkleDistributorId,
				}
				pub mod charge {
					use super::runtime_types;
					pub type MerkleDistributorId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Charge {
					const PALLET: &'static str = "MerkleDistributor";
					const CALL: &'static str = "charge";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::emergency_withdraw`]."]
				pub struct EmergencyWithdraw {
					pub merkle_distributor_id: emergency_withdraw::MerkleDistributorId,
					pub recipient: emergency_withdraw::Recipient,
					pub amount: emergency_withdraw::Amount,
				}
				pub mod emergency_withdraw {
					use super::runtime_types;
					pub type MerkleDistributorId = ::core::primitive::u32;
					pub type Recipient = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for EmergencyWithdraw {
					const PALLET: &'static str = "MerkleDistributor";
					const CALL: &'static str = "emergency_withdraw";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::add_to_create_whitelist`]."]
				pub fn add_to_create_whitelist(
					&self,
					account: types::add_to_create_whitelist::Account,
				) -> ::subxt::tx::Payload<types::AddToCreateWhitelist> {
					::subxt::tx::Payload::new_static(
						"MerkleDistributor",
						"add_to_create_whitelist",
						types::AddToCreateWhitelist { account },
						[
							189u8, 164u8, 21u8, 130u8, 45u8, 97u8, 62u8, 84u8, 218u8, 190u8, 192u8,
							93u8, 15u8, 37u8, 58u8, 213u8, 170u8, 179u8, 206u8, 156u8, 144u8,
							216u8, 34u8, 29u8, 0u8, 15u8, 97u8, 20u8, 1u8, 174u8, 27u8, 65u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_from_create_whitelist`]."]
				pub fn remove_from_create_whitelist(
					&self,
					account: types::remove_from_create_whitelist::Account,
				) -> ::subxt::tx::Payload<types::RemoveFromCreateWhitelist> {
					::subxt::tx::Payload::new_static(
						"MerkleDistributor",
						"remove_from_create_whitelist",
						types::RemoveFromCreateWhitelist { account },
						[
							100u8, 33u8, 143u8, 57u8, 48u8, 86u8, 202u8, 237u8, 8u8, 167u8, 238u8,
							8u8, 239u8, 126u8, 128u8, 246u8, 216u8, 10u8, 70u8, 120u8, 3u8, 191u8,
							100u8, 7u8, 198u8, 68u8, 202u8, 16u8, 22u8, 132u8, 228u8, 196u8,
						],
					)
				}
				#[doc = "See [`Pallet::create_merkle_distributor`]."]
				pub fn create_merkle_distributor(
					&self,
					merkle_root: types::create_merkle_distributor::MerkleRoot,
					description: types::create_merkle_distributor::Description,
					distribute_currency: types::create_merkle_distributor::DistributeCurrency,
					distribute_amount: types::create_merkle_distributor::DistributeAmount,
				) -> ::subxt::tx::Payload<types::CreateMerkleDistributor> {
					::subxt::tx::Payload::new_static(
						"MerkleDistributor",
						"create_merkle_distributor",
						types::CreateMerkleDistributor {
							merkle_root,
							description,
							distribute_currency,
							distribute_amount,
						},
						[
							82u8, 106u8, 248u8, 25u8, 76u8, 96u8, 241u8, 93u8, 87u8, 97u8, 255u8,
							196u8, 10u8, 54u8, 84u8, 32u8, 196u8, 52u8, 251u8, 78u8, 139u8, 137u8,
							153u8, 127u8, 188u8, 17u8, 18u8, 55u8, 187u8, 230u8, 94u8, 6u8,
						],
					)
				}
				#[doc = "See [`Pallet::claim`]."]
				pub fn claim(
					&self,
					merkle_distributor_id: types::claim::MerkleDistributorId,
					index: types::claim::Index,
					account: types::claim::Account,
					amount: types::claim::Amount,
					merkle_proof: types::claim::MerkleProof,
				) -> ::subxt::tx::Payload<types::Claim> {
					::subxt::tx::Payload::new_static(
						"MerkleDistributor",
						"claim",
						types::Claim {
							merkle_distributor_id,
							index,
							account,
							amount,
							merkle_proof,
						},
						[
							2u8, 172u8, 94u8, 232u8, 122u8, 18u8, 223u8, 139u8, 18u8, 68u8, 191u8,
							198u8, 175u8, 137u8, 93u8, 228u8, 201u8, 216u8, 229u8, 179u8, 160u8,
							107u8, 137u8, 22u8, 107u8, 195u8, 202u8, 37u8, 177u8, 129u8, 90u8,
							169u8,
						],
					)
				}
				#[doc = "See [`Pallet::charge`]."]
				pub fn charge(
					&self,
					merkle_distributor_id: types::charge::MerkleDistributorId,
				) -> ::subxt::tx::Payload<types::Charge> {
					::subxt::tx::Payload::new_static(
						"MerkleDistributor",
						"charge",
						types::Charge { merkle_distributor_id },
						[
							82u8, 142u8, 77u8, 38u8, 150u8, 79u8, 224u8, 185u8, 114u8, 188u8, 95u8,
							158u8, 51u8, 82u8, 134u8, 227u8, 16u8, 103u8, 251u8, 207u8, 135u8,
							113u8, 236u8, 139u8, 199u8, 102u8, 99u8, 122u8, 77u8, 122u8, 75u8,
							217u8,
						],
					)
				}
				#[doc = "See [`Pallet::emergency_withdraw`]."]
				pub fn emergency_withdraw(
					&self,
					merkle_distributor_id: types::emergency_withdraw::MerkleDistributorId,
					recipient: types::emergency_withdraw::Recipient,
					amount: types::emergency_withdraw::Amount,
				) -> ::subxt::tx::Payload<types::EmergencyWithdraw> {
					::subxt::tx::Payload::new_static(
						"MerkleDistributor",
						"emergency_withdraw",
						types::EmergencyWithdraw { merkle_distributor_id, recipient, amount },
						[
							43u8, 4u8, 98u8, 190u8, 64u8, 110u8, 77u8, 132u8, 141u8, 27u8, 107u8,
							172u8, 229u8, 40u8, 95u8, 225u8, 136u8, 158u8, 251u8, 116u8, 18u8,
							88u8, 218u8, 103u8, 172u8, 73u8, 216u8, 147u8, 38u8, 30u8, 76u8, 13u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::merkle_distributor::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "create a merkle distributor. \\ [merkle distributor id, merkle tree root, total reward"]
			#[doc = "balance]"]
			pub struct Create(pub create::Field0, pub create::Field1, pub create::Field2);
			pub mod create {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u32;
				pub type Field1 = ::subxt::utils::H256;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Create {
				const PALLET: &'static str = "MerkleDistributor";
				const EVENT: &'static str = "Create";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "claim reward. \\[merkle distributor id, account, balance]"]
			pub struct Claim(pub claim::Field0, pub claim::Field1, pub claim::Field2);
			pub mod claim {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u32;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Claim {
				const PALLET: &'static str = "MerkleDistributor";
				const EVENT: &'static str = "Claim";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "withdraw reward. \\ [merkle distributor id, account, balance]"]
			pub struct Withdraw(pub withdraw::Field0, pub withdraw::Field1, pub withdraw::Field2);
			pub mod withdraw {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u32;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Withdraw {
				const PALLET: &'static str = "MerkleDistributor";
				const EVENT: &'static str = "Withdraw";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "add account who can create merkle distributor. \\ [account]"]
			pub struct AddToWhiteList(pub add_to_white_list::Field0);
			pub mod add_to_white_list {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for AddToWhiteList {
				const PALLET: &'static str = "MerkleDistributor";
				const EVENT: &'static str = "AddToWhiteList";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "remove account from the set who can create merkle distributor. \\ [account]"]
			pub struct RemoveFromWhiteList(pub remove_from_white_list::Field0);
			pub mod remove_from_white_list {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for RemoveFromWhiteList {
				const PALLET: &'static str = "MerkleDistributor";
				const EVENT: &'static str = "RemoveFromWhiteList";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod merkle_distributor_metadata {
					use super::runtime_types;
					pub type MerkleDistributorMetadata =
						runtime_types::merkle_distributor::MerkleMetadata<
							::core::primitive::u128,
							runtime_types::tangle_primitives::currency::CurrencyId,
							::subxt::utils::AccountId32,
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod next_merkle_distributor_id {
					use super::runtime_types;
					pub type NextMerkleDistributorId = ::core::primitive::u32;
				}
				pub mod claimed_bit_map {
					use super::runtime_types;
					pub type ClaimedBitMap = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod create_white_set {
					use super::runtime_types;
					pub type CreateWhiteSet = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn merkle_distributor_metadata_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::merkle_distributor_metadata::MerkleDistributorMetadata,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"MerkleDistributor",
						"MerkleDistributorMetadata",
						vec![],
						[
							170u8, 81u8, 40u8, 60u8, 150u8, 193u8, 219u8, 70u8, 6u8, 182u8, 137u8,
							35u8, 58u8, 123u8, 165u8, 184u8, 75u8, 33u8, 77u8, 51u8, 29u8, 27u8,
							113u8, 102u8, 151u8, 167u8, 117u8, 248u8, 241u8, 212u8, 54u8, 200u8,
						],
					)
				}
				pub fn merkle_distributor_metadata(
					&self,
					_0: impl ::std::borrow::Borrow<types::merkle_distributor_metadata::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::merkle_distributor_metadata::MerkleDistributorMetadata,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"MerkleDistributor",
						"MerkleDistributorMetadata",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							170u8, 81u8, 40u8, 60u8, 150u8, 193u8, 219u8, 70u8, 6u8, 182u8, 137u8,
							35u8, 58u8, 123u8, 165u8, 184u8, 75u8, 33u8, 77u8, 51u8, 29u8, 27u8,
							113u8, 102u8, 151u8, 167u8, 117u8, 248u8, 241u8, 212u8, 54u8, 200u8,
						],
					)
				}
				pub fn next_merkle_distributor_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_merkle_distributor_id::NextMerkleDistributorId,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"MerkleDistributor",
						"NextMerkleDistributorId",
						vec![],
						[
							26u8, 4u8, 12u8, 163u8, 51u8, 203u8, 251u8, 22u8, 43u8, 56u8, 90u8,
							133u8, 49u8, 204u8, 200u8, 201u8, 53u8, 18u8, 75u8, 151u8, 222u8, 91u8,
							68u8, 174u8, 153u8, 0u8, 213u8, 157u8, 171u8, 76u8, 211u8, 254u8,
						],
					)
				}
				pub fn claimed_bit_map_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::claimed_bit_map::ClaimedBitMap,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"MerkleDistributor",
						"ClaimedBitMap",
						vec![],
						[
							220u8, 75u8, 73u8, 35u8, 197u8, 174u8, 182u8, 53u8, 58u8, 224u8, 72u8,
							92u8, 14u8, 165u8, 79u8, 148u8, 246u8, 198u8, 95u8, 203u8, 179u8,
							222u8, 42u8, 193u8, 240u8, 158u8, 190u8, 196u8, 126u8, 146u8, 121u8,
							221u8,
						],
					)
				}
				pub fn claimed_bit_map_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::claimed_bit_map::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::claimed_bit_map::ClaimedBitMap,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"MerkleDistributor",
						"ClaimedBitMap",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							220u8, 75u8, 73u8, 35u8, 197u8, 174u8, 182u8, 53u8, 58u8, 224u8, 72u8,
							92u8, 14u8, 165u8, 79u8, 148u8, 246u8, 198u8, 95u8, 203u8, 179u8,
							222u8, 42u8, 193u8, 240u8, 158u8, 190u8, 196u8, 126u8, 146u8, 121u8,
							221u8,
						],
					)
				}
				pub fn claimed_bit_map(
					&self,
					_0: impl ::std::borrow::Borrow<types::claimed_bit_map::Param0>,
					_1: impl ::std::borrow::Borrow<types::claimed_bit_map::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::claimed_bit_map::ClaimedBitMap,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"MerkleDistributor",
						"ClaimedBitMap",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							220u8, 75u8, 73u8, 35u8, 197u8, 174u8, 182u8, 53u8, 58u8, 224u8, 72u8,
							92u8, 14u8, 165u8, 79u8, 148u8, 246u8, 198u8, 95u8, 203u8, 179u8,
							222u8, 42u8, 193u8, 240u8, 158u8, 190u8, 196u8, 126u8, 146u8, 121u8,
							221u8,
						],
					)
				}
				#[doc = " Accounts in the whitelist can create merkle distributor."]
				pub fn create_white_set(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::create_white_set::CreateWhiteSet,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"MerkleDistributor",
						"CreateWhiteSet",
						vec![],
						[
							173u8, 177u8, 180u8, 48u8, 167u8, 30u8, 48u8, 120u8, 202u8, 97u8, 13u8,
							8u8, 61u8, 74u8, 122u8, 76u8, 154u8, 26u8, 16u8, 220u8, 112u8, 76u8,
							46u8, 167u8, 142u8, 253u8, 106u8, 40u8, 91u8, 108u8, 200u8, 91u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"MerkleDistributor",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				#[doc = " The maximum length of a merkel description stored on-chain."]
				pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"MerkleDistributor",
						"StringLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod zenlink_stable_amm {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::zenlink_stable_amm::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::zenlink_stable_amm::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::create_base_pool`."]
				pub struct CreateBasePool {
					pub currency_ids: create_base_pool::CurrencyIds,
					pub currency_decimals: create_base_pool::CurrencyDecimals,
					pub a: create_base_pool::A,
					pub fee: create_base_pool::Fee,
					pub admin_fee: create_base_pool::AdminFee,
					pub admin_fee_receiver: create_base_pool::AdminFeeReceiver,
					pub lp_currency_symbol: create_base_pool::LpCurrencySymbol,
				}
				pub mod create_base_pool {
					use super::runtime_types;
					pub type CurrencyIds =
						::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>;
					pub type CurrencyDecimals = ::std::vec::Vec<::core::primitive::u32>;
					pub type A = ::core::primitive::u128;
					pub type Fee = ::core::primitive::u128;
					pub type AdminFee = ::core::primitive::u128;
					pub type AdminFeeReceiver = ::subxt::utils::AccountId32;
					pub type LpCurrencySymbol = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for CreateBasePool {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "create_base_pool";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::create_meta_pool`."]
				pub struct CreateMetaPool {
					pub currency_ids: create_meta_pool::CurrencyIds,
					pub currency_decimals: create_meta_pool::CurrencyDecimals,
					pub a: create_meta_pool::A,
					pub fee: create_meta_pool::Fee,
					pub admin_fee: create_meta_pool::AdminFee,
					pub admin_fee_receiver: create_meta_pool::AdminFeeReceiver,
					pub lp_currency_symbol: create_meta_pool::LpCurrencySymbol,
				}
				pub mod create_meta_pool {
					use super::runtime_types;
					pub type CurrencyIds =
						::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>;
					pub type CurrencyDecimals = ::std::vec::Vec<::core::primitive::u32>;
					pub type A = ::core::primitive::u128;
					pub type Fee = ::core::primitive::u128;
					pub type AdminFee = ::core::primitive::u128;
					pub type AdminFeeReceiver = ::subxt::utils::AccountId32;
					pub type LpCurrencySymbol = ::std::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::blocks::StaticExtrinsic for CreateMetaPool {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "create_meta_pool";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::add_liquidity`."]
				pub struct AddLiquidity {
					pub pool_id: add_liquidity::PoolId,
					pub amounts: add_liquidity::Amounts,
					pub min_mint_amount: add_liquidity::MinMintAmount,
					pub to: add_liquidity::To,
					pub deadline: add_liquidity::Deadline,
				}
				pub mod add_liquidity {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type Amounts = ::std::vec::Vec<::core::primitive::u128>;
					pub type MinMintAmount = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddLiquidity {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "add_liquidity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::swap`."]
				pub struct Swap {
					pub poo_id: swap::PooId,
					pub from_index: swap::FromIndex,
					pub to_index: swap::ToIndex,
					pub in_amount: swap::InAmount,
					pub min_out_amount: swap::MinOutAmount,
					pub to: swap::To,
					pub deadline: swap::Deadline,
				}
				pub mod swap {
					use super::runtime_types;
					pub type PooId = ::core::primitive::u32;
					pub type FromIndex = ::core::primitive::u32;
					pub type ToIndex = ::core::primitive::u32;
					pub type InAmount = ::core::primitive::u128;
					pub type MinOutAmount = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Swap {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "swap";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::remove_liquidity`."]
				pub struct RemoveLiquidity {
					pub poo_id: remove_liquidity::PooId,
					pub lp_amount: remove_liquidity::LpAmount,
					pub min_amounts: remove_liquidity::MinAmounts,
					pub to: remove_liquidity::To,
					pub deadline: remove_liquidity::Deadline,
				}
				pub mod remove_liquidity {
					use super::runtime_types;
					pub type PooId = ::core::primitive::u32;
					pub type LpAmount = ::core::primitive::u128;
					pub type MinAmounts = ::std::vec::Vec<::core::primitive::u128>;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveLiquidity {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "remove_liquidity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::remove_liquidity_one_currency`."]
				pub struct RemoveLiquidityOneCurrency {
					pub poo_id: remove_liquidity_one_currency::PooId,
					pub lp_amount: remove_liquidity_one_currency::LpAmount,
					pub index: remove_liquidity_one_currency::Index,
					pub min_amount: remove_liquidity_one_currency::MinAmount,
					pub to: remove_liquidity_one_currency::To,
					pub deadline: remove_liquidity_one_currency::Deadline,
				}
				pub mod remove_liquidity_one_currency {
					use super::runtime_types;
					pub type PooId = ::core::primitive::u32;
					pub type LpAmount = ::core::primitive::u128;
					pub type Index = ::core::primitive::u32;
					pub type MinAmount = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveLiquidityOneCurrency {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "remove_liquidity_one_currency";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::remove_liquidity_imbalance`."]
				pub struct RemoveLiquidityImbalance {
					pub pool_id: remove_liquidity_imbalance::PoolId,
					pub amounts: remove_liquidity_imbalance::Amounts,
					pub max_burn_amount: remove_liquidity_imbalance::MaxBurnAmount,
					pub to: remove_liquidity_imbalance::To,
					pub deadline: remove_liquidity_imbalance::Deadline,
				}
				pub mod remove_liquidity_imbalance {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type Amounts = ::std::vec::Vec<::core::primitive::u128>;
					pub type MaxBurnAmount = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveLiquidityImbalance {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "remove_liquidity_imbalance";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::add_pool_and_base_pool_liquidity`."]
				pub struct AddPoolAndBasePoolLiquidity {
					pub pool_id: add_pool_and_base_pool_liquidity::PoolId,
					pub base_pool_id: add_pool_and_base_pool_liquidity::BasePoolId,
					pub meta_amounts: add_pool_and_base_pool_liquidity::MetaAmounts,
					pub base_amounts: add_pool_and_base_pool_liquidity::BaseAmounts,
					pub min_to_mint: add_pool_and_base_pool_liquidity::MinToMint,
					pub to: add_pool_and_base_pool_liquidity::To,
					pub deadline: add_pool_and_base_pool_liquidity::Deadline,
				}
				pub mod add_pool_and_base_pool_liquidity {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type BasePoolId = ::core::primitive::u32;
					pub type MetaAmounts = ::std::vec::Vec<::core::primitive::u128>;
					pub type BaseAmounts = ::std::vec::Vec<::core::primitive::u128>;
					pub type MinToMint = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddPoolAndBasePoolLiquidity {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "add_pool_and_base_pool_liquidity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::remove_pool_and_base_pool_liquidity`."]
				pub struct RemovePoolAndBasePoolLiquidity {
					pub pool_id: remove_pool_and_base_pool_liquidity::PoolId,
					pub base_pool_id: remove_pool_and_base_pool_liquidity::BasePoolId,
					pub amount: remove_pool_and_base_pool_liquidity::Amount,
					pub min_amounts_meta: remove_pool_and_base_pool_liquidity::MinAmountsMeta,
					pub min_amounts_base: remove_pool_and_base_pool_liquidity::MinAmountsBase,
					pub to: remove_pool_and_base_pool_liquidity::To,
					pub deadline: remove_pool_and_base_pool_liquidity::Deadline,
				}
				pub mod remove_pool_and_base_pool_liquidity {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type BasePoolId = ::core::primitive::u32;
					pub type Amount = ::core::primitive::u128;
					pub type MinAmountsMeta = ::std::vec::Vec<::core::primitive::u128>;
					pub type MinAmountsBase = ::std::vec::Vec<::core::primitive::u128>;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemovePoolAndBasePoolLiquidity {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "remove_pool_and_base_pool_liquidity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::remove_pool_and_base_pool_liquidity_one_currency`."]
				pub struct RemovePoolAndBasePoolLiquidityOneCurrency {
					pub pool_id: remove_pool_and_base_pool_liquidity_one_currency::PoolId,
					pub base_pool_id: remove_pool_and_base_pool_liquidity_one_currency::BasePoolId,
					pub amount: remove_pool_and_base_pool_liquidity_one_currency::Amount,
					pub i: remove_pool_and_base_pool_liquidity_one_currency::I,
					pub min_amount: remove_pool_and_base_pool_liquidity_one_currency::MinAmount,
					pub to: remove_pool_and_base_pool_liquidity_one_currency::To,
					pub deadline: remove_pool_and_base_pool_liquidity_one_currency::Deadline,
				}
				pub mod remove_pool_and_base_pool_liquidity_one_currency {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type BasePoolId = ::core::primitive::u32;
					pub type Amount = ::core::primitive::u128;
					pub type I = ::core::primitive::u32;
					pub type MinAmount = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemovePoolAndBasePoolLiquidityOneCurrency {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "remove_pool_and_base_pool_liquidity_one_currency";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::swap_pool_from_base`."]
				pub struct SwapPoolFromBase {
					pub pool_id: swap_pool_from_base::PoolId,
					pub base_pool_id: swap_pool_from_base::BasePoolId,
					pub in_index: swap_pool_from_base::InIndex,
					pub out_index: swap_pool_from_base::OutIndex,
					pub dx: swap_pool_from_base::Dx,
					pub min_dy: swap_pool_from_base::MinDy,
					pub to: swap_pool_from_base::To,
					pub deadline: swap_pool_from_base::Deadline,
				}
				pub mod swap_pool_from_base {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type BasePoolId = ::core::primitive::u32;
					pub type InIndex = ::core::primitive::u32;
					pub type OutIndex = ::core::primitive::u32;
					pub type Dx = ::core::primitive::u128;
					pub type MinDy = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapPoolFromBase {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "swap_pool_from_base";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::swap_pool_to_base`."]
				pub struct SwapPoolToBase {
					pub pool_id: swap_pool_to_base::PoolId,
					pub base_pool_id: swap_pool_to_base::BasePoolId,
					pub in_index: swap_pool_to_base::InIndex,
					pub out_index: swap_pool_to_base::OutIndex,
					pub dx: swap_pool_to_base::Dx,
					pub min_dy: swap_pool_to_base::MinDy,
					pub to: swap_pool_to_base::To,
					pub deadline: swap_pool_to_base::Deadline,
				}
				pub mod swap_pool_to_base {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type BasePoolId = ::core::primitive::u32;
					pub type InIndex = ::core::primitive::u32;
					pub type OutIndex = ::core::primitive::u32;
					pub type Dx = ::core::primitive::u128;
					pub type MinDy = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapPoolToBase {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "swap_pool_to_base";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::swap_meta_pool_underlying`."]
				pub struct SwapMetaPoolUnderlying {
					pub pool_id: swap_meta_pool_underlying::PoolId,
					pub in_index: swap_meta_pool_underlying::InIndex,
					pub out_index: swap_meta_pool_underlying::OutIndex,
					pub dx: swap_meta_pool_underlying::Dx,
					pub min_dy: swap_meta_pool_underlying::MinDy,
					pub to: swap_meta_pool_underlying::To,
					pub deadline: swap_meta_pool_underlying::Deadline,
				}
				pub mod swap_meta_pool_underlying {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type InIndex = ::core::primitive::u32;
					pub type OutIndex = ::core::primitive::u32;
					pub type Dx = ::core::primitive::u128;
					pub type MinDy = ::core::primitive::u128;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapMetaPoolUnderlying {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "swap_meta_pool_underlying";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::update_fee_receiver`."]
				pub struct UpdateFeeReceiver {
					pub pool_id: update_fee_receiver::PoolId,
					pub fee_receiver: update_fee_receiver::FeeReceiver,
				}
				pub mod update_fee_receiver {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type FeeReceiver = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateFeeReceiver {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "update_fee_receiver";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::set_swap_fee`."]
				pub struct SetSwapFee {
					pub pool_id: set_swap_fee::PoolId,
					pub new_swap_fee: set_swap_fee::NewSwapFee,
				}
				pub mod set_swap_fee {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type NewSwapFee = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetSwapFee {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "set_swap_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::set_admin_fee`."]
				pub struct SetAdminFee {
					pub pool_id: set_admin_fee::PoolId,
					pub new_admin_fee: set_admin_fee::NewAdminFee,
				}
				pub mod set_admin_fee {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type NewAdminFee = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetAdminFee {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "set_admin_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::ramp_a`."]
				pub struct RampA {
					pub pool_id: ramp_a::PoolId,
					pub future_a: ramp_a::FutureA,
					pub future_a_time: ramp_a::FutureATime,
				}
				pub mod ramp_a {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type FutureA = ::core::primitive::u128;
					pub type FutureATime = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for RampA {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "ramp_a";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::stop_ramp_a`."]
				pub struct StopRampA {
					pub pool_id: stop_ramp_a::PoolId,
				}
				pub mod stop_ramp_a {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for StopRampA {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "stop_ramp_a";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See `Pallet::withdraw_admin_fee`."]
				pub struct WithdrawAdminFee {
					pub pool_id: withdraw_admin_fee::PoolId,
				}
				pub mod withdraw_admin_fee {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for WithdrawAdminFee {
					const PALLET: &'static str = "ZenlinkStableAMM";
					const CALL: &'static str = "withdraw_admin_fee";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See `Pallet::create_base_pool`."]
				pub fn create_base_pool(
					&self,
					currency_ids: types::create_base_pool::CurrencyIds,
					currency_decimals: types::create_base_pool::CurrencyDecimals,
					a: types::create_base_pool::A,
					fee: types::create_base_pool::Fee,
					admin_fee: types::create_base_pool::AdminFee,
					admin_fee_receiver: types::create_base_pool::AdminFeeReceiver,
					lp_currency_symbol: types::create_base_pool::LpCurrencySymbol,
				) -> ::subxt::tx::Payload<types::CreateBasePool> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"create_base_pool",
						types::CreateBasePool {
							currency_ids,
							currency_decimals,
							a,
							fee,
							admin_fee,
							admin_fee_receiver,
							lp_currency_symbol,
						},
						[
							215u8, 64u8, 224u8, 4u8, 240u8, 104u8, 194u8, 63u8, 93u8, 217u8, 250u8,
							244u8, 204u8, 161u8, 240u8, 134u8, 52u8, 214u8, 76u8, 231u8, 162u8,
							2u8, 9u8, 47u8, 78u8, 29u8, 222u8, 90u8, 39u8, 146u8, 179u8, 236u8,
						],
					)
				}
				#[doc = "See `Pallet::create_meta_pool`."]
				pub fn create_meta_pool(
					&self,
					currency_ids: types::create_meta_pool::CurrencyIds,
					currency_decimals: types::create_meta_pool::CurrencyDecimals,
					a: types::create_meta_pool::A,
					fee: types::create_meta_pool::Fee,
					admin_fee: types::create_meta_pool::AdminFee,
					admin_fee_receiver: types::create_meta_pool::AdminFeeReceiver,
					lp_currency_symbol: types::create_meta_pool::LpCurrencySymbol,
				) -> ::subxt::tx::Payload<types::CreateMetaPool> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"create_meta_pool",
						types::CreateMetaPool {
							currency_ids,
							currency_decimals,
							a,
							fee,
							admin_fee,
							admin_fee_receiver,
							lp_currency_symbol,
						},
						[
							183u8, 158u8, 62u8, 50u8, 251u8, 71u8, 133u8, 27u8, 109u8, 48u8, 171u8,
							71u8, 210u8, 235u8, 173u8, 146u8, 124u8, 67u8, 42u8, 129u8, 78u8, 86u8,
							114u8, 53u8, 114u8, 95u8, 118u8, 139u8, 89u8, 185u8, 155u8, 221u8,
						],
					)
				}
				#[doc = "See `Pallet::add_liquidity`."]
				pub fn add_liquidity(
					&self,
					pool_id: types::add_liquidity::PoolId,
					amounts: types::add_liquidity::Amounts,
					min_mint_amount: types::add_liquidity::MinMintAmount,
					to: types::add_liquidity::To,
					deadline: types::add_liquidity::Deadline,
				) -> ::subxt::tx::Payload<types::AddLiquidity> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"add_liquidity",
						types::AddLiquidity { pool_id, amounts, min_mint_amount, to, deadline },
						[
							25u8, 73u8, 75u8, 71u8, 222u8, 165u8, 89u8, 247u8, 69u8, 184u8, 14u8,
							206u8, 129u8, 232u8, 194u8, 124u8, 187u8, 153u8, 83u8, 68u8, 141u8,
							98u8, 7u8, 28u8, 190u8, 175u8, 38u8, 150u8, 104u8, 90u8, 137u8, 77u8,
						],
					)
				}
				#[doc = "See `Pallet::swap`."]
				pub fn swap(
					&self,
					poo_id: types::swap::PooId,
					from_index: types::swap::FromIndex,
					to_index: types::swap::ToIndex,
					in_amount: types::swap::InAmount,
					min_out_amount: types::swap::MinOutAmount,
					to: types::swap::To,
					deadline: types::swap::Deadline,
				) -> ::subxt::tx::Payload<types::Swap> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"swap",
						types::Swap {
							poo_id,
							from_index,
							to_index,
							in_amount,
							min_out_amount,
							to,
							deadline,
						},
						[
							173u8, 255u8, 159u8, 58u8, 178u8, 243u8, 38u8, 73u8, 120u8, 78u8, 5u8,
							192u8, 255u8, 149u8, 198u8, 170u8, 110u8, 129u8, 246u8, 221u8, 0u8,
							234u8, 140u8, 246u8, 221u8, 247u8, 238u8, 29u8, 24u8, 241u8, 212u8,
							48u8,
						],
					)
				}
				#[doc = "See `Pallet::remove_liquidity`."]
				pub fn remove_liquidity(
					&self,
					poo_id: types::remove_liquidity::PooId,
					lp_amount: types::remove_liquidity::LpAmount,
					min_amounts: types::remove_liquidity::MinAmounts,
					to: types::remove_liquidity::To,
					deadline: types::remove_liquidity::Deadline,
				) -> ::subxt::tx::Payload<types::RemoveLiquidity> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"remove_liquidity",
						types::RemoveLiquidity { poo_id, lp_amount, min_amounts, to, deadline },
						[
							157u8, 13u8, 58u8, 236u8, 151u8, 243u8, 78u8, 148u8, 120u8, 249u8,
							204u8, 254u8, 110u8, 31u8, 105u8, 83u8, 75u8, 51u8, 52u8, 5u8, 56u8,
							152u8, 154u8, 230u8, 227u8, 93u8, 107u8, 144u8, 132u8, 88u8, 26u8,
							237u8,
						],
					)
				}
				#[doc = "See `Pallet::remove_liquidity_one_currency`."]
				pub fn remove_liquidity_one_currency(
					&self,
					poo_id: types::remove_liquidity_one_currency::PooId,
					lp_amount: types::remove_liquidity_one_currency::LpAmount,
					index: types::remove_liquidity_one_currency::Index,
					min_amount: types::remove_liquidity_one_currency::MinAmount,
					to: types::remove_liquidity_one_currency::To,
					deadline: types::remove_liquidity_one_currency::Deadline,
				) -> ::subxt::tx::Payload<types::RemoveLiquidityOneCurrency> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"remove_liquidity_one_currency",
						types::RemoveLiquidityOneCurrency {
							poo_id,
							lp_amount,
							index,
							min_amount,
							to,
							deadline,
						},
						[
							14u8, 49u8, 170u8, 122u8, 254u8, 179u8, 161u8, 128u8, 169u8, 221u8,
							252u8, 14u8, 140u8, 145u8, 252u8, 20u8, 202u8, 144u8, 65u8, 184u8,
							196u8, 199u8, 122u8, 110u8, 5u8, 220u8, 16u8, 7u8, 247u8, 179u8, 221u8,
							123u8,
						],
					)
				}
				#[doc = "See `Pallet::remove_liquidity_imbalance`."]
				pub fn remove_liquidity_imbalance(
					&self,
					pool_id: types::remove_liquidity_imbalance::PoolId,
					amounts: types::remove_liquidity_imbalance::Amounts,
					max_burn_amount: types::remove_liquidity_imbalance::MaxBurnAmount,
					to: types::remove_liquidity_imbalance::To,
					deadline: types::remove_liquidity_imbalance::Deadline,
				) -> ::subxt::tx::Payload<types::RemoveLiquidityImbalance> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"remove_liquidity_imbalance",
						types::RemoveLiquidityImbalance {
							pool_id,
							amounts,
							max_burn_amount,
							to,
							deadline,
						},
						[
							107u8, 100u8, 144u8, 87u8, 11u8, 235u8, 41u8, 134u8, 146u8, 22u8,
							173u8, 69u8, 55u8, 67u8, 50u8, 254u8, 188u8, 203u8, 38u8, 73u8, 53u8,
							93u8, 58u8, 115u8, 232u8, 59u8, 4u8, 91u8, 183u8, 129u8, 92u8, 12u8,
						],
					)
				}
				#[doc = "See `Pallet::add_pool_and_base_pool_liquidity`."]
				pub fn add_pool_and_base_pool_liquidity(
					&self,
					pool_id: types::add_pool_and_base_pool_liquidity::PoolId,
					base_pool_id: types::add_pool_and_base_pool_liquidity::BasePoolId,
					meta_amounts: types::add_pool_and_base_pool_liquidity::MetaAmounts,
					base_amounts: types::add_pool_and_base_pool_liquidity::BaseAmounts,
					min_to_mint: types::add_pool_and_base_pool_liquidity::MinToMint,
					to: types::add_pool_and_base_pool_liquidity::To,
					deadline: types::add_pool_and_base_pool_liquidity::Deadline,
				) -> ::subxt::tx::Payload<types::AddPoolAndBasePoolLiquidity> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"add_pool_and_base_pool_liquidity",
						types::AddPoolAndBasePoolLiquidity {
							pool_id,
							base_pool_id,
							meta_amounts,
							base_amounts,
							min_to_mint,
							to,
							deadline,
						},
						[
							55u8, 12u8, 49u8, 147u8, 118u8, 48u8, 91u8, 93u8, 249u8, 50u8, 187u8,
							243u8, 211u8, 20u8, 190u8, 101u8, 130u8, 253u8, 84u8, 119u8, 54u8,
							251u8, 148u8, 211u8, 165u8, 205u8, 82u8, 101u8, 192u8, 172u8, 203u8,
							62u8,
						],
					)
				}
				#[doc = "See `Pallet::remove_pool_and_base_pool_liquidity`."]
				pub fn remove_pool_and_base_pool_liquidity(
					&self,
					pool_id: types::remove_pool_and_base_pool_liquidity::PoolId,
					base_pool_id: types::remove_pool_and_base_pool_liquidity::BasePoolId,
					amount: types::remove_pool_and_base_pool_liquidity::Amount,
					min_amounts_meta: types::remove_pool_and_base_pool_liquidity::MinAmountsMeta,
					min_amounts_base: types::remove_pool_and_base_pool_liquidity::MinAmountsBase,
					to: types::remove_pool_and_base_pool_liquidity::To,
					deadline: types::remove_pool_and_base_pool_liquidity::Deadline,
				) -> ::subxt::tx::Payload<types::RemovePoolAndBasePoolLiquidity> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"remove_pool_and_base_pool_liquidity",
						types::RemovePoolAndBasePoolLiquidity {
							pool_id,
							base_pool_id,
							amount,
							min_amounts_meta,
							min_amounts_base,
							to,
							deadline,
						},
						[
							232u8, 219u8, 71u8, 189u8, 6u8, 61u8, 202u8, 213u8, 137u8, 254u8, 36u8,
							119u8, 169u8, 214u8, 159u8, 22u8, 241u8, 160u8, 24u8, 71u8, 55u8,
							157u8, 186u8, 93u8, 142u8, 83u8, 165u8, 77u8, 206u8, 58u8, 223u8,
							214u8,
						],
					)
				}
				#[doc = "See `Pallet::remove_pool_and_base_pool_liquidity_one_currency`."]
				pub fn remove_pool_and_base_pool_liquidity_one_currency(
					&self,
					pool_id: types::remove_pool_and_base_pool_liquidity_one_currency::PoolId,
					base_pool_id : types :: remove_pool_and_base_pool_liquidity_one_currency :: BasePoolId,
					amount: types::remove_pool_and_base_pool_liquidity_one_currency::Amount,
					i: types::remove_pool_and_base_pool_liquidity_one_currency::I,
					min_amount: types::remove_pool_and_base_pool_liquidity_one_currency::MinAmount,
					to: types::remove_pool_and_base_pool_liquidity_one_currency::To,
					deadline: types::remove_pool_and_base_pool_liquidity_one_currency::Deadline,
				) -> ::subxt::tx::Payload<types::RemovePoolAndBasePoolLiquidityOneCurrency> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"remove_pool_and_base_pool_liquidity_one_currency",
						types::RemovePoolAndBasePoolLiquidityOneCurrency {
							pool_id,
							base_pool_id,
							amount,
							i,
							min_amount,
							to,
							deadline,
						},
						[
							120u8, 159u8, 68u8, 49u8, 11u8, 37u8, 116u8, 62u8, 21u8, 85u8, 50u8,
							184u8, 159u8, 216u8, 22u8, 43u8, 51u8, 91u8, 133u8, 40u8, 118u8, 242u8,
							43u8, 205u8, 72u8, 189u8, 12u8, 124u8, 95u8, 90u8, 112u8, 36u8,
						],
					)
				}
				#[doc = "See `Pallet::swap_pool_from_base`."]
				pub fn swap_pool_from_base(
					&self,
					pool_id: types::swap_pool_from_base::PoolId,
					base_pool_id: types::swap_pool_from_base::BasePoolId,
					in_index: types::swap_pool_from_base::InIndex,
					out_index: types::swap_pool_from_base::OutIndex,
					dx: types::swap_pool_from_base::Dx,
					min_dy: types::swap_pool_from_base::MinDy,
					to: types::swap_pool_from_base::To,
					deadline: types::swap_pool_from_base::Deadline,
				) -> ::subxt::tx::Payload<types::SwapPoolFromBase> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"swap_pool_from_base",
						types::SwapPoolFromBase {
							pool_id,
							base_pool_id,
							in_index,
							out_index,
							dx,
							min_dy,
							to,
							deadline,
						},
						[
							1u8, 124u8, 123u8, 228u8, 10u8, 212u8, 24u8, 240u8, 187u8, 238u8, 32u8,
							76u8, 51u8, 10u8, 122u8, 189u8, 205u8, 67u8, 12u8, 114u8, 69u8, 123u8,
							231u8, 181u8, 181u8, 31u8, 224u8, 182u8, 77u8, 114u8, 25u8, 165u8,
						],
					)
				}
				#[doc = "See `Pallet::swap_pool_to_base`."]
				pub fn swap_pool_to_base(
					&self,
					pool_id: types::swap_pool_to_base::PoolId,
					base_pool_id: types::swap_pool_to_base::BasePoolId,
					in_index: types::swap_pool_to_base::InIndex,
					out_index: types::swap_pool_to_base::OutIndex,
					dx: types::swap_pool_to_base::Dx,
					min_dy: types::swap_pool_to_base::MinDy,
					to: types::swap_pool_to_base::To,
					deadline: types::swap_pool_to_base::Deadline,
				) -> ::subxt::tx::Payload<types::SwapPoolToBase> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"swap_pool_to_base",
						types::SwapPoolToBase {
							pool_id,
							base_pool_id,
							in_index,
							out_index,
							dx,
							min_dy,
							to,
							deadline,
						},
						[
							163u8, 181u8, 31u8, 156u8, 154u8, 22u8, 253u8, 76u8, 89u8, 66u8, 145u8,
							189u8, 40u8, 173u8, 22u8, 224u8, 163u8, 49u8, 179u8, 124u8, 109u8,
							180u8, 152u8, 78u8, 108u8, 153u8, 70u8, 76u8, 117u8, 197u8, 38u8,
							158u8,
						],
					)
				}
				#[doc = "See `Pallet::swap_meta_pool_underlying`."]
				pub fn swap_meta_pool_underlying(
					&self,
					pool_id: types::swap_meta_pool_underlying::PoolId,
					in_index: types::swap_meta_pool_underlying::InIndex,
					out_index: types::swap_meta_pool_underlying::OutIndex,
					dx: types::swap_meta_pool_underlying::Dx,
					min_dy: types::swap_meta_pool_underlying::MinDy,
					to: types::swap_meta_pool_underlying::To,
					deadline: types::swap_meta_pool_underlying::Deadline,
				) -> ::subxt::tx::Payload<types::SwapMetaPoolUnderlying> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"swap_meta_pool_underlying",
						types::SwapMetaPoolUnderlying {
							pool_id,
							in_index,
							out_index,
							dx,
							min_dy,
							to,
							deadline,
						},
						[
							191u8, 19u8, 255u8, 186u8, 0u8, 133u8, 144u8, 156u8, 123u8, 112u8,
							36u8, 192u8, 195u8, 100u8, 131u8, 44u8, 219u8, 33u8, 133u8, 130u8,
							194u8, 239u8, 164u8, 51u8, 244u8, 60u8, 59u8, 108u8, 223u8, 1u8, 31u8,
							117u8,
						],
					)
				}
				#[doc = "See `Pallet::update_fee_receiver`."]
				pub fn update_fee_receiver(
					&self,
					pool_id: types::update_fee_receiver::PoolId,
					fee_receiver: types::update_fee_receiver::FeeReceiver,
				) -> ::subxt::tx::Payload<types::UpdateFeeReceiver> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"update_fee_receiver",
						types::UpdateFeeReceiver { pool_id, fee_receiver },
						[
							219u8, 180u8, 29u8, 111u8, 226u8, 235u8, 150u8, 87u8, 71u8, 214u8,
							160u8, 150u8, 240u8, 30u8, 164u8, 109u8, 117u8, 213u8, 41u8, 46u8,
							155u8, 238u8, 198u8, 246u8, 145u8, 117u8, 54u8, 96u8, 207u8, 65u8,
							212u8, 26u8,
						],
					)
				}
				#[doc = "See `Pallet::set_swap_fee`."]
				pub fn set_swap_fee(
					&self,
					pool_id: types::set_swap_fee::PoolId,
					new_swap_fee: types::set_swap_fee::NewSwapFee,
				) -> ::subxt::tx::Payload<types::SetSwapFee> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"set_swap_fee",
						types::SetSwapFee { pool_id, new_swap_fee },
						[
							67u8, 18u8, 230u8, 51u8, 138u8, 61u8, 26u8, 177u8, 224u8, 4u8, 199u8,
							187u8, 161u8, 126u8, 229u8, 221u8, 67u8, 203u8, 249u8, 165u8, 234u8,
							59u8, 215u8, 127u8, 91u8, 140u8, 166u8, 161u8, 62u8, 230u8, 151u8, 5u8,
						],
					)
				}
				#[doc = "See `Pallet::set_admin_fee`."]
				pub fn set_admin_fee(
					&self,
					pool_id: types::set_admin_fee::PoolId,
					new_admin_fee: types::set_admin_fee::NewAdminFee,
				) -> ::subxt::tx::Payload<types::SetAdminFee> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"set_admin_fee",
						types::SetAdminFee { pool_id, new_admin_fee },
						[
							67u8, 72u8, 177u8, 227u8, 43u8, 111u8, 198u8, 148u8, 205u8, 129u8,
							35u8, 25u8, 122u8, 236u8, 79u8, 174u8, 238u8, 41u8, 12u8, 55u8, 79u8,
							15u8, 118u8, 65u8, 30u8, 23u8, 66u8, 165u8, 23u8, 206u8, 209u8, 98u8,
						],
					)
				}
				#[doc = "See `Pallet::ramp_a`."]
				pub fn ramp_a(
					&self,
					pool_id: types::ramp_a::PoolId,
					future_a: types::ramp_a::FutureA,
					future_a_time: types::ramp_a::FutureATime,
				) -> ::subxt::tx::Payload<types::RampA> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"ramp_a",
						types::RampA { pool_id, future_a, future_a_time },
						[
							126u8, 174u8, 7u8, 77u8, 116u8, 201u8, 101u8, 210u8, 120u8, 69u8,
							164u8, 238u8, 42u8, 35u8, 85u8, 120u8, 104u8, 250u8, 222u8, 89u8, 19u8,
							140u8, 250u8, 224u8, 109u8, 155u8, 209u8, 151u8, 247u8, 25u8, 70u8,
							106u8,
						],
					)
				}
				#[doc = "See `Pallet::stop_ramp_a`."]
				pub fn stop_ramp_a(
					&self,
					pool_id: types::stop_ramp_a::PoolId,
				) -> ::subxt::tx::Payload<types::StopRampA> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"stop_ramp_a",
						types::StopRampA { pool_id },
						[
							198u8, 51u8, 54u8, 7u8, 11u8, 121u8, 193u8, 77u8, 59u8, 79u8, 166u8,
							226u8, 90u8, 176u8, 115u8, 57u8, 206u8, 108u8, 144u8, 112u8, 230u8,
							198u8, 248u8, 58u8, 111u8, 231u8, 78u8, 177u8, 38u8, 208u8, 156u8,
							245u8,
						],
					)
				}
				#[doc = "See `Pallet::withdraw_admin_fee`."]
				pub fn withdraw_admin_fee(
					&self,
					pool_id: types::withdraw_admin_fee::PoolId,
				) -> ::subxt::tx::Payload<types::WithdrawAdminFee> {
					::subxt::tx::Payload::new_static(
						"ZenlinkStableAMM",
						"withdraw_admin_fee",
						types::WithdrawAdminFee { pool_id },
						[
							32u8, 109u8, 75u8, 224u8, 151u8, 220u8, 103u8, 159u8, 29u8, 202u8, 9u8,
							226u8, 59u8, 48u8, 58u8, 54u8, 182u8, 236u8, 187u8, 134u8, 4u8, 187u8,
							54u8, 103u8, 243u8, 53u8, 139u8, 181u8, 97u8, 215u8, 184u8, 48u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::zenlink_stable_amm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pool was created."]
			pub struct CreatePool {
				pub pool_id: create_pool::PoolId,
				pub currency_ids: create_pool::CurrencyIds,
				pub lp_currency_id: create_pool::LpCurrencyId,
				pub a: create_pool::A,
				pub account: create_pool::Account,
				pub admin_fee_receiver: create_pool::AdminFeeReceiver,
			}
			pub mod create_pool {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type CurrencyIds =
					::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>;
				pub type LpCurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type A = ::core::primitive::u128;
				pub type Account = ::subxt::utils::AccountId32;
				pub type AdminFeeReceiver = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CreatePool {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "CreatePool";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pool's admin_fee_receiver was updated."]
			pub struct UpdateAdminFeeReceiver {
				pub pool_id: update_admin_fee_receiver::PoolId,
				pub admin_fee_receiver: update_admin_fee_receiver::AdminFeeReceiver,
			}
			pub mod update_admin_fee_receiver {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type AdminFeeReceiver = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for UpdateAdminFeeReceiver {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "UpdateAdminFeeReceiver";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Supply some liquidity to a pool."]
			pub struct AddLiquidity {
				pub pool_id: add_liquidity::PoolId,
				pub who: add_liquidity::Who,
				pub to: add_liquidity::To,
				pub supply_amounts: add_liquidity::SupplyAmounts,
				pub fees: add_liquidity::Fees,
				pub new_d: add_liquidity::NewD,
				pub mint_amount: add_liquidity::MintAmount,
			}
			pub mod add_liquidity {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type SupplyAmounts = ::std::vec::Vec<::core::primitive::u128>;
				pub type Fees = ::std::vec::Vec<::core::primitive::u128>;
				pub type NewD = ::core::primitive::u128;
				pub type MintAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for AddLiquidity {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "AddLiquidity";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Swap a amounts of currency to get other."]
			pub struct CurrencyExchange {
				pub pool_id: currency_exchange::PoolId,
				pub who: currency_exchange::Who,
				pub to: currency_exchange::To,
				pub in_index: currency_exchange::InIndex,
				pub in_amount: currency_exchange::InAmount,
				pub out_index: currency_exchange::OutIndex,
				pub out_amount: currency_exchange::OutAmount,
			}
			pub mod currency_exchange {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type InIndex = ::core::primitive::u32;
				pub type InAmount = ::core::primitive::u128;
				pub type OutIndex = ::core::primitive::u32;
				pub type OutAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for CurrencyExchange {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "CurrencyExchange";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Remove some liquidity from a pool."]
			pub struct RemoveLiquidity {
				pub pool_id: remove_liquidity::PoolId,
				pub who: remove_liquidity::Who,
				pub to: remove_liquidity::To,
				pub amounts: remove_liquidity::Amounts,
				pub fees: remove_liquidity::Fees,
				pub new_total_supply: remove_liquidity::NewTotalSupply,
			}
			pub mod remove_liquidity {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type Amounts = ::std::vec::Vec<::core::primitive::u128>;
				pub type Fees = ::std::vec::Vec<::core::primitive::u128>;
				pub type NewTotalSupply = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for RemoveLiquidity {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "RemoveLiquidity";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Remove some liquidity from a pool to get only one currency."]
			pub struct RemoveLiquidityOneCurrency {
				pub pool_id: remove_liquidity_one_currency::PoolId,
				pub who: remove_liquidity_one_currency::Who,
				pub to: remove_liquidity_one_currency::To,
				pub out_index: remove_liquidity_one_currency::OutIndex,
				pub burn_amount: remove_liquidity_one_currency::BurnAmount,
				pub out_amount: remove_liquidity_one_currency::OutAmount,
			}
			pub mod remove_liquidity_one_currency {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type OutIndex = ::core::primitive::u32;
				pub type BurnAmount = ::core::primitive::u128;
				pub type OutAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for RemoveLiquidityOneCurrency {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "RemoveLiquidityOneCurrency";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Remove liquidity from a pool with specify the amounts of currencies to be obtained."]
			pub struct RemoveLiquidityImbalance {
				pub pool_id: remove_liquidity_imbalance::PoolId,
				pub who: remove_liquidity_imbalance::Who,
				pub to: remove_liquidity_imbalance::To,
				pub amounts: remove_liquidity_imbalance::Amounts,
				pub fees: remove_liquidity_imbalance::Fees,
				pub new_d: remove_liquidity_imbalance::NewD,
				pub new_total_supply: remove_liquidity_imbalance::NewTotalSupply,
			}
			pub mod remove_liquidity_imbalance {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type To = ::subxt::utils::AccountId32;
				pub type Amounts = ::std::vec::Vec<::core::primitive::u128>;
				pub type Fees = ::std::vec::Vec<::core::primitive::u128>;
				pub type NewD = ::core::primitive::u128;
				pub type NewTotalSupply = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for RemoveLiquidityImbalance {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "RemoveLiquidityImbalance";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pool's swap fee parameters was updated"]
			pub struct NewSwapFee {
				pub pool_id: new_swap_fee::PoolId,
				pub new_swap_fee: new_swap_fee::NewSwapFee,
			}
			pub mod new_swap_fee {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type NewSwapFee = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for NewSwapFee {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "NewSwapFee";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pool's admin fee parameters was updated"]
			pub struct NewAdminFee {
				pub pool_id: new_admin_fee::PoolId,
				pub new_admin_fee: new_admin_fee::NewAdminFee,
			}
			pub mod new_admin_fee {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type NewAdminFee = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for NewAdminFee {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "NewAdminFee";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pool's 'A' was ramped."]
			pub struct RampA {
				pub pool_id: ramp_a::PoolId,
				pub initial_a_precise: ramp_a::InitialAPrecise,
				pub future_a_precise: ramp_a::FutureAPrecise,
				pub now: ramp_a::Now,
				pub future_a_time: ramp_a::FutureATime,
			}
			pub mod ramp_a {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type InitialAPrecise = ::core::primitive::u128;
				pub type FutureAPrecise = ::core::primitive::u128;
				pub type Now = ::core::primitive::u128;
				pub type FutureATime = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for RampA {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "RampA";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pool's ramping A was stopped."]
			pub struct StopRampA {
				pub pool_id: stop_ramp_a::PoolId,
				pub current_a: stop_ramp_a::CurrentA,
				pub now: stop_ramp_a::Now,
			}
			pub mod stop_ramp_a {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type CurrentA = ::core::primitive::u128;
				pub type Now = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for StopRampA {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "StopRampA";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A pool's admin fee was collected."]
			pub struct CollectProtocolFee {
				pub pool_id: collect_protocol_fee::PoolId,
				pub currency_id: collect_protocol_fee::CurrencyId,
				pub fee_amount: collect_protocol_fee::FeeAmount,
			}
			pub mod collect_protocol_fee {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type FeeAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for CollectProtocolFee {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "CollectProtocolFee";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CurrencyExchangeUnderlying {
				pub pool_id: currency_exchange_underlying::PoolId,
				pub account: currency_exchange_underlying::Account,
				pub in_amount: currency_exchange_underlying::InAmount,
				pub out_amount: currency_exchange_underlying::OutAmount,
				pub currency_index_from: currency_exchange_underlying::CurrencyIndexFrom,
				pub currency_index_to: currency_exchange_underlying::CurrencyIndexTo,
				pub to: currency_exchange_underlying::To,
			}
			pub mod currency_exchange_underlying {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type Account = ::subxt::utils::AccountId32;
				pub type InAmount = ::core::primitive::u128;
				pub type OutAmount = ::core::primitive::u128;
				pub type CurrencyIndexFrom = ::core::primitive::u32;
				pub type CurrencyIndexTo = ::core::primitive::u32;
				pub type To = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CurrencyExchangeUnderlying {
				const PALLET: &'static str = "ZenlinkStableAMM";
				const EVENT: &'static str = "CurrencyExchangeUnderlying";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod next_pool_id {
					use super::runtime_types;
					pub type NextPoolId = ::core::primitive::u32;
				}
				pub mod pools {
					use super::runtime_types;
					pub type Pools = runtime_types::zenlink_stable_amm::primitives::Pool<
						::core::primitive::u32,
						runtime_types::tangle_primitives::currency::CurrencyId,
						::subxt::utils::AccountId32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod lp_currencies {
					use super::runtime_types;
					pub type LpCurrencies = ::core::primitive::u32;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The id of next pool"]
				pub fn next_pool_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_pool_id::NextPoolId,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkStableAMM",
						"NextPoolId",
						vec![],
						[
							30u8, 97u8, 209u8, 99u8, 136u8, 248u8, 152u8, 111u8, 140u8, 167u8,
							187u8, 87u8, 94u8, 45u8, 50u8, 249u8, 211u8, 136u8, 37u8, 7u8, 116u8,
							225u8, 30u8, 16u8, 254u8, 133u8, 111u8, 15u8, 99u8, 45u8, 161u8, 137u8,
						],
					)
				}
				#[doc = " Info of a pool."]
				pub fn pools_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pools::Pools,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkStableAMM",
						"Pools",
						vec![],
						[
							20u8, 116u8, 30u8, 8u8, 44u8, 121u8, 235u8, 248u8, 167u8, 209u8, 160u8,
							78u8, 188u8, 33u8, 193u8, 21u8, 94u8, 76u8, 202u8, 145u8, 2u8, 194u8,
							14u8, 212u8, 205u8, 142u8, 239u8, 166u8, 93u8, 30u8, 5u8, 216u8,
						],
					)
				}
				#[doc = " Info of a pool."]
				pub fn pools(
					&self,
					_0: impl ::std::borrow::Borrow<types::pools::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pools::Pools,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkStableAMM",
						"Pools",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							20u8, 116u8, 30u8, 8u8, 44u8, 121u8, 235u8, 248u8, 167u8, 209u8, 160u8,
							78u8, 188u8, 33u8, 193u8, 21u8, 94u8, 76u8, 202u8, 145u8, 2u8, 194u8,
							14u8, 212u8, 205u8, 142u8, 239u8, 166u8, 93u8, 30u8, 5u8, 216u8,
						],
					)
				}
				#[doc = " The pool id corresponding to lp currency"]
				pub fn lp_currencies_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::lp_currencies::LpCurrencies,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkStableAMM",
						"LpCurrencies",
						vec![],
						[
							213u8, 48u8, 9u8, 231u8, 178u8, 143u8, 47u8, 103u8, 23u8, 237u8, 116u8,
							0u8, 56u8, 48u8, 51u8, 22u8, 63u8, 133u8, 111u8, 140u8, 51u8, 52u8,
							244u8, 27u8, 57u8, 85u8, 146u8, 94u8, 238u8, 39u8, 143u8, 42u8,
						],
					)
				}
				#[doc = " The pool id corresponding to lp currency"]
				pub fn lp_currencies(
					&self,
					_0: impl ::std::borrow::Borrow<types::lp_currencies::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::lp_currencies::LpCurrencies,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ZenlinkStableAMM",
						"LpCurrencies",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							213u8, 48u8, 9u8, 231u8, 178u8, 143u8, 47u8, 103u8, 23u8, 237u8, 116u8,
							0u8, 56u8, 48u8, 51u8, 22u8, 63u8, 133u8, 111u8, 140u8, 51u8, 52u8,
							244u8, 27u8, 57u8, 85u8, 146u8, 94u8, 238u8, 39u8, 143u8, 42u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn pool_currency_symbol_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ZenlinkStableAMM",
						"PoolCurrencySymbolLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " This pallet ID."]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"ZenlinkStableAMM",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
			}
		}
	}
	pub mod zenlink_swap_router {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::zenlink_swap_router::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::zenlink_swap_router::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::swap_exact_token_for_tokens_through_stable_pool`]."]
				pub struct SwapExactTokenForTokensThroughStablePool {
					pub amount_in: swap_exact_token_for_tokens_through_stable_pool::AmountIn,
					pub amount_out_min:
						swap_exact_token_for_tokens_through_stable_pool::AmountOutMin,
					pub routes: swap_exact_token_for_tokens_through_stable_pool::Routes,
					pub to: swap_exact_token_for_tokens_through_stable_pool::To,
					pub deadline: swap_exact_token_for_tokens_through_stable_pool::Deadline,
				}
				pub mod swap_exact_token_for_tokens_through_stable_pool {
					use super::runtime_types;
					pub type AmountIn = ::core::primitive::u128;
					pub type AmountOutMin = ::core::primitive::u128;
					pub type Routes = ::std::vec::Vec<
						runtime_types::zenlink_swap_router::Route<
							::core::primitive::u32,
							runtime_types::tangle_primitives::currency::CurrencyId,
							runtime_types::zenlink_protocol::primitives::AssetId,
						>,
					>;
					pub type To = ::subxt::utils::AccountId32;
					pub type Deadline = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapExactTokenForTokensThroughStablePool {
					const PALLET: &'static str = "ZenlinkSwapRouter";
					const CALL: &'static str = "swap_exact_token_for_tokens_through_stable_pool";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::swap_exact_token_for_tokens_through_stable_pool`]."]
				pub fn swap_exact_token_for_tokens_through_stable_pool(
					&self,
					amount_in: types::swap_exact_token_for_tokens_through_stable_pool::AmountIn,
					amount_out_min : types :: swap_exact_token_for_tokens_through_stable_pool :: AmountOutMin,
					routes: types::swap_exact_token_for_tokens_through_stable_pool::Routes,
					to: types::swap_exact_token_for_tokens_through_stable_pool::To,
					deadline: types::swap_exact_token_for_tokens_through_stable_pool::Deadline,
				) -> ::subxt::tx::Payload<types::SwapExactTokenForTokensThroughStablePool> {
					::subxt::tx::Payload::new_static(
						"ZenlinkSwapRouter",
						"swap_exact_token_for_tokens_through_stable_pool",
						types::SwapExactTokenForTokensThroughStablePool {
							amount_in,
							amount_out_min,
							routes,
							to,
							deadline,
						},
						[
							240u8, 174u8, 10u8, 195u8, 194u8, 84u8, 203u8, 195u8, 120u8, 36u8,
							31u8, 175u8, 253u8, 148u8, 17u8, 155u8, 89u8, 87u8, 50u8, 43u8, 110u8,
							193u8, 223u8, 167u8, 249u8, 201u8, 44u8, 73u8, 255u8, 116u8, 134u8,
							217u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::zenlink_swap_router::pallet::Event;
		pub mod events {
			use super::runtime_types;
		}
	}
	pub mod token_issuer {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_token_issuer::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_token_issuer::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_to_issue_whitelist`]."]
				pub struct AddToIssueWhitelist {
					pub currency_id: add_to_issue_whitelist::CurrencyId,
					pub account: add_to_issue_whitelist::Account,
				}
				pub mod add_to_issue_whitelist {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Account = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddToIssueWhitelist {
					const PALLET: &'static str = "TokenIssuer";
					const CALL: &'static str = "add_to_issue_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_from_issue_whitelist`]."]
				pub struct RemoveFromIssueWhitelist {
					pub currency_id: remove_from_issue_whitelist::CurrencyId,
					pub account: remove_from_issue_whitelist::Account,
				}
				pub mod remove_from_issue_whitelist {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Account = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveFromIssueWhitelist {
					const PALLET: &'static str = "TokenIssuer";
					const CALL: &'static str = "remove_from_issue_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_to_transfer_whitelist`]."]
				pub struct AddToTransferWhitelist {
					pub currency_id: add_to_transfer_whitelist::CurrencyId,
					pub account: add_to_transfer_whitelist::Account,
				}
				pub mod add_to_transfer_whitelist {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Account = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddToTransferWhitelist {
					const PALLET: &'static str = "TokenIssuer";
					const CALL: &'static str = "add_to_transfer_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_from_transfer_whitelist`]."]
				pub struct RemoveFromTransferWhitelist {
					pub currency_id: remove_from_transfer_whitelist::CurrencyId,
					pub account: remove_from_transfer_whitelist::Account,
				}
				pub mod remove_from_transfer_whitelist {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Account = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveFromTransferWhitelist {
					const PALLET: &'static str = "TokenIssuer";
					const CALL: &'static str = "remove_from_transfer_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::issue`]."]
				pub struct Issue {
					pub dest: issue::Dest,
					pub currency_id: issue::CurrencyId,
					#[codec(compact)]
					pub amount: issue::Amount,
				}
				pub mod issue {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::AccountId32;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Issue {
					const PALLET: &'static str = "TokenIssuer";
					const CALL: &'static str = "issue";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer`]."]
				pub struct Transfer {
					pub dest: transfer::Dest,
					pub currency_id: transfer::CurrencyId,
					#[codec(compact)]
					pub amount: transfer::Amount,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Dest = ::subxt::utils::AccountId32;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "TokenIssuer";
					const CALL: &'static str = "transfer";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::add_to_issue_whitelist`]."]
				pub fn add_to_issue_whitelist(
					&self,
					currency_id: types::add_to_issue_whitelist::CurrencyId,
					account: types::add_to_issue_whitelist::Account,
				) -> ::subxt::tx::Payload<types::AddToIssueWhitelist> {
					::subxt::tx::Payload::new_static(
						"TokenIssuer",
						"add_to_issue_whitelist",
						types::AddToIssueWhitelist { currency_id, account },
						[
							53u8, 143u8, 65u8, 34u8, 188u8, 15u8, 103u8, 229u8, 66u8, 161u8, 227u8,
							107u8, 7u8, 82u8, 254u8, 106u8, 241u8, 49u8, 3u8, 226u8, 191u8, 82u8,
							200u8, 54u8, 248u8, 182u8, 251u8, 173u8, 69u8, 16u8, 149u8, 91u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_from_issue_whitelist`]."]
				pub fn remove_from_issue_whitelist(
					&self,
					currency_id: types::remove_from_issue_whitelist::CurrencyId,
					account: types::remove_from_issue_whitelist::Account,
				) -> ::subxt::tx::Payload<types::RemoveFromIssueWhitelist> {
					::subxt::tx::Payload::new_static(
						"TokenIssuer",
						"remove_from_issue_whitelist",
						types::RemoveFromIssueWhitelist { currency_id, account },
						[
							191u8, 139u8, 241u8, 144u8, 142u8, 91u8, 103u8, 255u8, 28u8, 64u8,
							157u8, 63u8, 91u8, 236u8, 14u8, 59u8, 55u8, 225u8, 209u8, 84u8, 190u8,
							126u8, 106u8, 177u8, 19u8, 50u8, 247u8, 21u8, 208u8, 21u8, 200u8, 32u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_to_transfer_whitelist`]."]
				pub fn add_to_transfer_whitelist(
					&self,
					currency_id: types::add_to_transfer_whitelist::CurrencyId,
					account: types::add_to_transfer_whitelist::Account,
				) -> ::subxt::tx::Payload<types::AddToTransferWhitelist> {
					::subxt::tx::Payload::new_static(
						"TokenIssuer",
						"add_to_transfer_whitelist",
						types::AddToTransferWhitelist { currency_id, account },
						[
							25u8, 253u8, 104u8, 84u8, 0u8, 104u8, 139u8, 35u8, 194u8, 187u8, 239u8,
							102u8, 74u8, 86u8, 178u8, 36u8, 243u8, 87u8, 120u8, 23u8, 208u8, 246u8,
							1u8, 73u8, 223u8, 192u8, 52u8, 122u8, 64u8, 105u8, 236u8, 179u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_from_transfer_whitelist`]."]
				pub fn remove_from_transfer_whitelist(
					&self,
					currency_id: types::remove_from_transfer_whitelist::CurrencyId,
					account: types::remove_from_transfer_whitelist::Account,
				) -> ::subxt::tx::Payload<types::RemoveFromTransferWhitelist> {
					::subxt::tx::Payload::new_static(
						"TokenIssuer",
						"remove_from_transfer_whitelist",
						types::RemoveFromTransferWhitelist { currency_id, account },
						[
							161u8, 62u8, 21u8, 98u8, 84u8, 42u8, 103u8, 181u8, 86u8, 91u8, 204u8,
							87u8, 225u8, 240u8, 85u8, 72u8, 95u8, 194u8, 174u8, 134u8, 240u8, 59u8,
							254u8, 92u8, 127u8, 139u8, 249u8, 149u8, 188u8, 5u8, 65u8, 255u8,
						],
					)
				}
				#[doc = "See [`Pallet::issue`]."]
				pub fn issue(
					&self,
					dest: types::issue::Dest,
					currency_id: types::issue::CurrencyId,
					amount: types::issue::Amount,
				) -> ::subxt::tx::Payload<types::Issue> {
					::subxt::tx::Payload::new_static(
						"TokenIssuer",
						"issue",
						types::Issue { dest, currency_id, amount },
						[
							44u8, 223u8, 185u8, 54u8, 146u8, 138u8, 16u8, 48u8, 153u8, 190u8, 33u8,
							254u8, 252u8, 229u8, 106u8, 211u8, 85u8, 24u8, 225u8, 135u8, 130u8,
							26u8, 127u8, 54u8, 14u8, 63u8, 175u8, 20u8, 78u8, 180u8, 221u8, 202u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer`]."]
				pub fn transfer(
					&self,
					dest: types::transfer::Dest,
					currency_id: types::transfer::CurrencyId,
					amount: types::transfer::Amount,
				) -> ::subxt::tx::Payload<types::Transfer> {
					::subxt::tx::Payload::new_static(
						"TokenIssuer",
						"transfer",
						types::Transfer { dest, currency_id, amount },
						[
							217u8, 233u8, 250u8, 238u8, 26u8, 107u8, 216u8, 207u8, 38u8, 141u8,
							21u8, 148u8, 68u8, 220u8, 164u8, 169u8, 4u8, 157u8, 207u8, 40u8, 28u8,
							252u8, 3u8, 180u8, 164u8, 99u8, 95u8, 14u8, 220u8, 250u8, 18u8, 20u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_token_issuer::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Successful added a new account to the issue whitelist. \\[account, currency_id]\\"]
			pub struct AddedToIssueList(
				pub added_to_issue_list::Field0,
				pub added_to_issue_list::Field1,
			);
			pub mod added_to_issue_list {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for AddedToIssueList {
				const PALLET: &'static str = "TokenIssuer";
				const EVENT: &'static str = "AddedToIssueList";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Successful remove an account from the issue whitelist. \\[account, currency_id]\\"]
			pub struct RemovedFromIssueList(
				pub removed_from_issue_list::Field0,
				pub removed_from_issue_list::Field1,
			);
			pub mod removed_from_issue_list {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for RemovedFromIssueList {
				const PALLET: &'static str = "TokenIssuer";
				const EVENT: &'static str = "RemovedFromIssueList";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Successful added a new account to the transfer whitelist. \\[account, currency_id]\\"]
			pub struct AddedToTransferList(
				pub added_to_transfer_list::Field0,
				pub added_to_transfer_list::Field1,
			);
			pub mod added_to_transfer_list {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for AddedToTransferList {
				const PALLET: &'static str = "TokenIssuer";
				const EVENT: &'static str = "AddedToTransferList";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Successful remove an account from the transfer whitelist. \\[account, currency_id]\\"]
			pub struct RemovedFromTransferList(
				pub removed_from_transfer_list::Field0,
				pub removed_from_transfer_list::Field1,
			);
			pub mod removed_from_transfer_list {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for RemovedFromTransferList {
				const PALLET: &'static str = "TokenIssuer";
				const EVENT: &'static str = "RemovedFromTransferList";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Token issue success, \\[currency_id, dest, amount\\]"]
			pub struct Issued(pub issued::Field0, pub issued::Field1, pub issued::Field2);
			pub mod issued {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Issued {
				const PALLET: &'static str = "TokenIssuer";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Token transferred success, \\[origin, dest, currency_id, amount\\]"]
			pub struct Transferred(
				pub transferred::Field0,
				pub transferred::Field1,
				pub transferred::Field2,
				pub transferred::Field3,
			);
			pub mod transferred {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = ::subxt::utils::AccountId32;
				pub type Field2 = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Field3 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Transferred {
				const PALLET: &'static str = "TokenIssuer";
				const EVENT: &'static str = "Transferred";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod issue_white_list {
					use super::runtime_types;
					pub type IssueWhiteList =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod transfer_white_list {
					use super::runtime_types;
					pub type TransferWhiteList =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Accounts in the whitelist can issue the corresponding Currency."]
				pub fn issue_white_list_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::issue_white_list::IssueWhiteList,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TokenIssuer",
						"IssueWhiteList",
						vec![],
						[
							0u8, 47u8, 229u8, 176u8, 251u8, 136u8, 227u8, 41u8, 55u8, 192u8, 22u8,
							57u8, 194u8, 208u8, 85u8, 182u8, 224u8, 53u8, 241u8, 177u8, 190u8,
							46u8, 50u8, 162u8, 114u8, 36u8, 89u8, 26u8, 214u8, 112u8, 147u8, 188u8,
						],
					)
				}
				#[doc = " Accounts in the whitelist can issue the corresponding Currency."]
				pub fn issue_white_list(
					&self,
					_0: impl ::std::borrow::Borrow<types::issue_white_list::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::issue_white_list::IssueWhiteList,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TokenIssuer",
						"IssueWhiteList",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							0u8, 47u8, 229u8, 176u8, 251u8, 136u8, 227u8, 41u8, 55u8, 192u8, 22u8,
							57u8, 194u8, 208u8, 85u8, 182u8, 224u8, 53u8, 241u8, 177u8, 190u8,
							46u8, 50u8, 162u8, 114u8, 36u8, 89u8, 26u8, 214u8, 112u8, 147u8, 188u8,
						],
					)
				}
				#[doc = " Accounts in the whitelist can transfer the corresponding Currency."]
				pub fn transfer_white_list_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::transfer_white_list::TransferWhiteList,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TokenIssuer",
						"TransferWhiteList",
						vec![],
						[
							110u8, 230u8, 214u8, 53u8, 146u8, 71u8, 94u8, 166u8, 26u8, 86u8, 153u8,
							203u8, 80u8, 35u8, 102u8, 229u8, 104u8, 38u8, 60u8, 42u8, 218u8, 165u8,
							147u8, 41u8, 105u8, 90u8, 137u8, 39u8, 217u8, 44u8, 208u8, 11u8,
						],
					)
				}
				#[doc = " Accounts in the whitelist can transfer the corresponding Currency."]
				pub fn transfer_white_list(
					&self,
					_0: impl ::std::borrow::Borrow<types::transfer_white_list::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::transfer_white_list::TransferWhiteList,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TokenIssuer",
						"TransferWhiteList",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							110u8, 230u8, 214u8, 53u8, 146u8, 71u8, 94u8, 166u8, 26u8, 86u8, 153u8,
							203u8, 80u8, 35u8, 102u8, 229u8, 104u8, 38u8, 60u8, 42u8, 218u8, 165u8,
							147u8, 41u8, 105u8, 90u8, 137u8, 39u8, 217u8, 44u8, 208u8, 11u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn max_length_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"TokenIssuer",
						"MaxLengthLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod asset_registry {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_asset_registry::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_asset_registry::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::register_native_asset`]."]
				pub struct RegisterNativeAsset {
					pub currency_id: register_native_asset::CurrencyId,
					pub location: ::std::boxed::Box<register_native_asset::Location>,
					pub metadata: ::std::boxed::Box<register_native_asset::Metadata>,
				}
				pub mod register_native_asset {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
					pub type Metadata = runtime_types::tangle_asset_registry::pallet::AssetMetadata<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RegisterNativeAsset {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "register_native_asset";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_native_asset`]."]
				pub struct UpdateNativeAsset {
					pub currency_id: update_native_asset::CurrencyId,
					pub location: ::std::boxed::Box<update_native_asset::Location>,
					pub metadata: ::std::boxed::Box<update_native_asset::Metadata>,
				}
				pub mod update_native_asset {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
					pub type Metadata = runtime_types::tangle_asset_registry::pallet::AssetMetadata<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateNativeAsset {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "update_native_asset";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::register_token_metadata`]."]
				pub struct RegisterTokenMetadata {
					pub metadata: ::std::boxed::Box<register_token_metadata::Metadata>,
				}
				pub mod register_token_metadata {
					use super::runtime_types;
					pub type Metadata = runtime_types::tangle_asset_registry::pallet::AssetMetadata<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RegisterTokenMetadata {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "register_token_metadata";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::register_lst_metadata`]."]
				pub struct RegisterLstMetadata {
					pub token_id: register_lst_metadata::TokenId,
				}
				pub mod register_lst_metadata {
					use super::runtime_types;
					pub type TokenId = ::core::primitive::u8;
				}
				impl ::subxt::blocks::StaticExtrinsic for RegisterLstMetadata {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "register_lst_metadata";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::register_vstoken_metadata`]."]
				pub struct RegisterVstokenMetadata {
					pub token_id: register_vstoken_metadata::TokenId,
				}
				pub mod register_vstoken_metadata {
					use super::runtime_types;
					pub type TokenId = ::core::primitive::u8;
				}
				impl ::subxt::blocks::StaticExtrinsic for RegisterVstokenMetadata {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "register_vstoken_metadata";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::register_vsbond_metadata`]."]
				pub struct RegisterVsbondMetadata {
					pub token_id: register_vsbond_metadata::TokenId,
					pub para_id: register_vsbond_metadata::ParaId,
					pub first_slot: register_vsbond_metadata::FirstSlot,
					pub last_slot: register_vsbond_metadata::LastSlot,
				}
				pub mod register_vsbond_metadata {
					use super::runtime_types;
					pub type TokenId = ::core::primitive::u8;
					pub type ParaId = ::core::primitive::u32;
					pub type FirstSlot = ::core::primitive::u32;
					pub type LastSlot = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RegisterVsbondMetadata {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "register_vsbond_metadata";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::register_multilocation`]."]
				pub struct RegisterMultilocation {
					pub currency_id: register_multilocation::CurrencyId,
					pub location: ::std::boxed::Box<register_multilocation::Location>,
					pub weight: register_multilocation::Weight,
				}
				pub mod register_multilocation {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
					pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for RegisterMultilocation {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "register_multilocation";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_set_multilocation`]."]
				pub struct ForceSetMultilocation {
					pub currency_id: force_set_multilocation::CurrencyId,
					pub location: ::std::boxed::Box<force_set_multilocation::Location>,
					pub weight: force_set_multilocation::Weight,
				}
				pub mod force_set_multilocation {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
					pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceSetMultilocation {
					const PALLET: &'static str = "AssetRegistry";
					const CALL: &'static str = "force_set_multilocation";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::register_native_asset`]."]
				pub fn register_native_asset(
					&self,
					currency_id: types::register_native_asset::CurrencyId,
					location: types::register_native_asset::Location,
					metadata: types::register_native_asset::Metadata,
				) -> ::subxt::tx::Payload<types::RegisterNativeAsset> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"register_native_asset",
						types::RegisterNativeAsset {
							currency_id,
							location: ::std::boxed::Box::new(location),
							metadata: ::std::boxed::Box::new(metadata),
						},
						[
							196u8, 191u8, 71u8, 121u8, 105u8, 53u8, 116u8, 59u8, 104u8, 175u8,
							190u8, 209u8, 0u8, 117u8, 246u8, 77u8, 220u8, 78u8, 109u8, 239u8, 38u8,
							218u8, 126u8, 94u8, 208u8, 73u8, 108u8, 96u8, 140u8, 140u8, 100u8,
							211u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_native_asset`]."]
				pub fn update_native_asset(
					&self,
					currency_id: types::update_native_asset::CurrencyId,
					location: types::update_native_asset::Location,
					metadata: types::update_native_asset::Metadata,
				) -> ::subxt::tx::Payload<types::UpdateNativeAsset> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"update_native_asset",
						types::UpdateNativeAsset {
							currency_id,
							location: ::std::boxed::Box::new(location),
							metadata: ::std::boxed::Box::new(metadata),
						},
						[
							57u8, 154u8, 177u8, 126u8, 52u8, 188u8, 199u8, 239u8, 197u8, 17u8,
							97u8, 253u8, 31u8, 251u8, 182u8, 169u8, 138u8, 218u8, 118u8, 96u8,
							123u8, 71u8, 135u8, 159u8, 227u8, 87u8, 102u8, 168u8, 15u8, 18u8,
							188u8, 147u8,
						],
					)
				}
				#[doc = "See [`Pallet::register_token_metadata`]."]
				pub fn register_token_metadata(
					&self,
					metadata: types::register_token_metadata::Metadata,
				) -> ::subxt::tx::Payload<types::RegisterTokenMetadata> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"register_token_metadata",
						types::RegisterTokenMetadata { metadata: ::std::boxed::Box::new(metadata) },
						[
							185u8, 4u8, 154u8, 5u8, 15u8, 140u8, 44u8, 226u8, 250u8, 232u8, 233u8,
							85u8, 122u8, 150u8, 92u8, 199u8, 8u8, 111u8, 130u8, 118u8, 142u8,
							134u8, 32u8, 183u8, 85u8, 20u8, 49u8, 0u8, 252u8, 112u8, 151u8, 87u8,
						],
					)
				}
				#[doc = "See [`Pallet::register_lst_metadata`]."]
				pub fn register_lst_metadata(
					&self,
					token_id: types::register_lst_metadata::TokenId,
				) -> ::subxt::tx::Payload<types::RegisterLstMetadata> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"register_lst_metadata",
						types::RegisterLstMetadata { token_id },
						[
							141u8, 212u8, 116u8, 239u8, 147u8, 80u8, 23u8, 172u8, 49u8, 84u8,
							165u8, 189u8, 242u8, 250u8, 83u8, 211u8, 212u8, 33u8, 23u8, 255u8,
							64u8, 169u8, 151u8, 245u8, 51u8, 146u8, 194u8, 162u8, 26u8, 60u8, 95u8,
							158u8,
						],
					)
				}
				#[doc = "See [`Pallet::register_vstoken_metadata`]."]
				pub fn register_vstoken_metadata(
					&self,
					token_id: types::register_vstoken_metadata::TokenId,
				) -> ::subxt::tx::Payload<types::RegisterVstokenMetadata> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"register_vstoken_metadata",
						types::RegisterVstokenMetadata { token_id },
						[
							84u8, 191u8, 176u8, 250u8, 156u8, 137u8, 85u8, 32u8, 20u8, 84u8, 198u8,
							97u8, 110u8, 223u8, 96u8, 96u8, 130u8, 77u8, 185u8, 42u8, 44u8, 252u8,
							137u8, 151u8, 7u8, 226u8, 58u8, 143u8, 14u8, 30u8, 103u8, 103u8,
						],
					)
				}
				#[doc = "See [`Pallet::register_vsbond_metadata`]."]
				pub fn register_vsbond_metadata(
					&self,
					token_id: types::register_vsbond_metadata::TokenId,
					para_id: types::register_vsbond_metadata::ParaId,
					first_slot: types::register_vsbond_metadata::FirstSlot,
					last_slot: types::register_vsbond_metadata::LastSlot,
				) -> ::subxt::tx::Payload<types::RegisterVsbondMetadata> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"register_vsbond_metadata",
						types::RegisterVsbondMetadata { token_id, para_id, first_slot, last_slot },
						[
							184u8, 98u8, 227u8, 240u8, 212u8, 73u8, 30u8, 191u8, 221u8, 251u8,
							104u8, 234u8, 191u8, 2u8, 76u8, 198u8, 87u8, 76u8, 170u8, 134u8, 170u8,
							132u8, 105u8, 186u8, 254u8, 226u8, 73u8, 157u8, 137u8, 65u8, 26u8,
							172u8,
						],
					)
				}
				#[doc = "See [`Pallet::register_multilocation`]."]
				pub fn register_multilocation(
					&self,
					currency_id: types::register_multilocation::CurrencyId,
					location: types::register_multilocation::Location,
					weight: types::register_multilocation::Weight,
				) -> ::subxt::tx::Payload<types::RegisterMultilocation> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"register_multilocation",
						types::RegisterMultilocation {
							currency_id,
							location: ::std::boxed::Box::new(location),
							weight,
						},
						[
							144u8, 66u8, 89u8, 238u8, 89u8, 18u8, 138u8, 149u8, 235u8, 168u8, 55u8,
							83u8, 150u8, 76u8, 40u8, 248u8, 116u8, 166u8, 104u8, 203u8, 9u8, 153u8,
							229u8, 255u8, 53u8, 196u8, 229u8, 199u8, 18u8, 197u8, 196u8, 198u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_set_multilocation`]."]
				pub fn force_set_multilocation(
					&self,
					currency_id: types::force_set_multilocation::CurrencyId,
					location: types::force_set_multilocation::Location,
					weight: types::force_set_multilocation::Weight,
				) -> ::subxt::tx::Payload<types::ForceSetMultilocation> {
					::subxt::tx::Payload::new_static(
						"AssetRegistry",
						"force_set_multilocation",
						types::ForceSetMultilocation {
							currency_id,
							location: ::std::boxed::Box::new(location),
							weight,
						},
						[
							36u8, 94u8, 159u8, 141u8, 3u8, 17u8, 186u8, 25u8, 244u8, 112u8, 139u8,
							7u8, 152u8, 51u8, 10u8, 161u8, 14u8, 19u8, 86u8, 197u8, 215u8, 59u8,
							198u8, 169u8, 92u8, 153u8, 84u8, 36u8, 85u8, 107u8, 123u8, 2u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_asset_registry::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The asset registered."]
			pub struct AssetRegistered {
				pub asset_id: asset_registered::AssetId,
				pub metadata: asset_registered::Metadata,
			}
			pub mod asset_registered {
				use super::runtime_types;
				pub type AssetId = runtime_types::tangle_primitives::currency::AssetIds;
				pub type Metadata = runtime_types::tangle_asset_registry::pallet::AssetMetadata<
					::core::primitive::u128,
				>;
			}
			impl ::subxt::events::StaticEvent for AssetRegistered {
				const PALLET: &'static str = "AssetRegistry";
				const EVENT: &'static str = "AssetRegistered";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The asset updated."]
			pub struct AssetUpdated {
				pub asset_id: asset_updated::AssetId,
				pub metadata: asset_updated::Metadata,
			}
			pub mod asset_updated {
				use super::runtime_types;
				pub type AssetId = runtime_types::tangle_primitives::currency::AssetIds;
				pub type Metadata = runtime_types::tangle_asset_registry::pallet::AssetMetadata<
					::core::primitive::u128,
				>;
			}
			impl ::subxt::events::StaticEvent for AssetUpdated {
				const PALLET: &'static str = "AssetRegistry";
				const EVENT: &'static str = "AssetUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The CurrencyId registered."]
			pub struct CurrencyIdRegistered {
				pub currency_id: currency_id_registered::CurrencyId,
				pub metadata: currency_id_registered::Metadata,
			}
			pub mod currency_id_registered {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Metadata = runtime_types::tangle_asset_registry::pallet::AssetMetadata<
					::core::primitive::u128,
				>;
			}
			impl ::subxt::events::StaticEvent for CurrencyIdRegistered {
				const PALLET: &'static str = "AssetRegistry";
				const EVENT: &'static str = "CurrencyIdRegistered";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "MultiLocation Force set."]
			pub struct MultiLocationSet {
				pub currency_id: multi_location_set::CurrencyId,
				pub location: multi_location_set::Location,
				pub weight: multi_location_set::Weight,
			}
			pub mod multi_location_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Location = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::events::StaticEvent for MultiLocationSet {
				const PALLET: &'static str = "AssetRegistry";
				const EVENT: &'static str = "MultiLocationSet";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod next_foreign_asset_id {
					use super::runtime_types;
					pub type NextForeignAssetId = ::core::primitive::u32;
				}
				pub mod next_token_id {
					use super::runtime_types;
					pub type NextTokenId = ::core::primitive::u8;
				}
				pub mod currency_id_to_locations {
					use super::runtime_types;
					pub type CurrencyIdToLocations =
						runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod location_to_currency_ids {
					use super::runtime_types;
					pub type LocationToCurrencyIds =
						runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param0 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				pub mod currency_id_to_weights {
					use super::runtime_types;
					pub type CurrencyIdToWeights = runtime_types::sp_weights::weight_v2::Weight;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod asset_metadatas {
					use super::runtime_types;
					pub type AssetMetadatas =
						runtime_types::tangle_asset_registry::pallet::AssetMetadata<
							::core::primitive::u128,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::AssetIds;
				}
				pub mod currency_metadatas {
					use super::runtime_types;
					pub type CurrencyMetadatas =
						runtime_types::tangle_asset_registry::pallet::AssetMetadata<
							::core::primitive::u128,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Next available Foreign AssetId ID."]
				#[doc = ""]
				#[doc = " NextForeignAssetId: ForeignAssetId"]
				pub fn next_foreign_asset_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_foreign_asset_id::NextForeignAssetId,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"NextForeignAssetId",
						vec![],
						[
							245u8, 220u8, 107u8, 205u8, 157u8, 59u8, 182u8, 222u8, 119u8, 244u8,
							49u8, 232u8, 21u8, 199u8, 39u8, 221u8, 196u8, 233u8, 2u8, 126u8, 88u8,
							112u8, 103u8, 77u8, 62u8, 185u8, 59u8, 194u8, 44u8, 210u8, 71u8, 117u8,
						],
					)
				}
				#[doc = " Next available TokenId ID."]
				#[doc = ""]
				#[doc = " NextTokenId: TokenId"]
				pub fn next_token_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::next_token_id::NextTokenId,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"NextTokenId",
						vec![],
						[
							184u8, 159u8, 100u8, 213u8, 71u8, 21u8, 163u8, 7u8, 255u8, 195u8,
							176u8, 211u8, 16u8, 76u8, 28u8, 82u8, 196u8, 154u8, 66u8, 56u8, 164u8,
							162u8, 127u8, 206u8, 26u8, 252u8, 249u8, 49u8, 176u8, 146u8, 190u8,
							210u8,
						],
					)
				}
				#[doc = " The storages for MultiLocations."]
				#[doc = ""]
				#[doc = " CurrencyIdToLocations: map CurrencyId => Option<MultiLocation>"]
				pub fn currency_id_to_locations_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_id_to_locations::CurrencyIdToLocations,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"CurrencyIdToLocations",
						vec![],
						[
							207u8, 69u8, 220u8, 136u8, 252u8, 225u8, 226u8, 119u8, 214u8, 72u8,
							113u8, 180u8, 254u8, 99u8, 147u8, 29u8, 38u8, 100u8, 98u8, 41u8, 119u8,
							28u8, 232u8, 219u8, 27u8, 116u8, 134u8, 92u8, 136u8, 204u8, 250u8,
							54u8,
						],
					)
				}
				#[doc = " The storages for MultiLocations."]
				#[doc = ""]
				#[doc = " CurrencyIdToLocations: map CurrencyId => Option<MultiLocation>"]
				pub fn currency_id_to_locations(
					&self,
					_0: impl ::std::borrow::Borrow<types::currency_id_to_locations::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_id_to_locations::CurrencyIdToLocations,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"CurrencyIdToLocations",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							207u8, 69u8, 220u8, 136u8, 252u8, 225u8, 226u8, 119u8, 214u8, 72u8,
							113u8, 180u8, 254u8, 99u8, 147u8, 29u8, 38u8, 100u8, 98u8, 41u8, 119u8,
							28u8, 232u8, 219u8, 27u8, 116u8, 134u8, 92u8, 136u8, 204u8, 250u8,
							54u8,
						],
					)
				}
				#[doc = " The storages for CurrencyIds."]
				#[doc = ""]
				#[doc = " LocationToCurrencyIds: map MultiLocation => Option<CurrencyId>"]
				pub fn location_to_currency_ids_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::location_to_currency_ids::LocationToCurrencyIds,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"LocationToCurrencyIds",
						vec![],
						[
							228u8, 80u8, 231u8, 8u8, 51u8, 91u8, 34u8, 35u8, 213u8, 160u8, 249u8,
							180u8, 141u8, 83u8, 157u8, 89u8, 107u8, 199u8, 109u8, 241u8, 160u8,
							132u8, 154u8, 169u8, 109u8, 14u8, 54u8, 197u8, 209u8, 176u8, 219u8,
							145u8,
						],
					)
				}
				#[doc = " The storages for CurrencyIds."]
				#[doc = ""]
				#[doc = " LocationToCurrencyIds: map MultiLocation => Option<CurrencyId>"]
				pub fn location_to_currency_ids(
					&self,
					_0: impl ::std::borrow::Borrow<types::location_to_currency_ids::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::location_to_currency_ids::LocationToCurrencyIds,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"LocationToCurrencyIds",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							228u8, 80u8, 231u8, 8u8, 51u8, 91u8, 34u8, 35u8, 213u8, 160u8, 249u8,
							180u8, 141u8, 83u8, 157u8, 89u8, 107u8, 199u8, 109u8, 241u8, 160u8,
							132u8, 154u8, 169u8, 109u8, 14u8, 54u8, 197u8, 209u8, 176u8, 219u8,
							145u8,
						],
					)
				}
				pub fn currency_id_to_weights_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_id_to_weights::CurrencyIdToWeights,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"CurrencyIdToWeights",
						vec![],
						[
							71u8, 71u8, 196u8, 199u8, 86u8, 78u8, 223u8, 151u8, 4u8, 107u8, 180u8,
							196u8, 178u8, 229u8, 25u8, 246u8, 137u8, 182u8, 203u8, 153u8, 47u8,
							225u8, 35u8, 124u8, 126u8, 162u8, 9u8, 175u8, 18u8, 248u8, 103u8, 0u8,
						],
					)
				}
				pub fn currency_id_to_weights(
					&self,
					_0: impl ::std::borrow::Borrow<types::currency_id_to_weights::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_id_to_weights::CurrencyIdToWeights,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"CurrencyIdToWeights",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							71u8, 71u8, 196u8, 199u8, 86u8, 78u8, 223u8, 151u8, 4u8, 107u8, 180u8,
							196u8, 178u8, 229u8, 25u8, 246u8, 137u8, 182u8, 203u8, 153u8, 47u8,
							225u8, 35u8, 124u8, 126u8, 162u8, 9u8, 175u8, 18u8, 248u8, 103u8, 0u8,
						],
					)
				}
				#[doc = " The storages for AssetMetadatas."]
				#[doc = ""]
				#[doc = " AssetMetadatas: map AssetIds => Option<AssetMetadata>"]
				pub fn asset_metadatas_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::asset_metadatas::AssetMetadatas,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"AssetMetadatas",
						vec![],
						[
							218u8, 15u8, 54u8, 224u8, 30u8, 91u8, 64u8, 32u8, 4u8, 249u8, 234u8,
							61u8, 34u8, 43u8, 193u8, 104u8, 148u8, 159u8, 114u8, 102u8, 88u8,
							184u8, 70u8, 119u8, 180u8, 99u8, 197u8, 124u8, 31u8, 147u8, 3u8, 68u8,
						],
					)
				}
				#[doc = " The storages for AssetMetadatas."]
				#[doc = ""]
				#[doc = " AssetMetadatas: map AssetIds => Option<AssetMetadata>"]
				pub fn asset_metadatas(
					&self,
					_0: impl ::std::borrow::Borrow<types::asset_metadatas::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::asset_metadatas::AssetMetadatas,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"AssetMetadatas",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							218u8, 15u8, 54u8, 224u8, 30u8, 91u8, 64u8, 32u8, 4u8, 249u8, 234u8,
							61u8, 34u8, 43u8, 193u8, 104u8, 148u8, 159u8, 114u8, 102u8, 88u8,
							184u8, 70u8, 119u8, 180u8, 99u8, 197u8, 124u8, 31u8, 147u8, 3u8, 68u8,
						],
					)
				}
				#[doc = " The storages for AssetMetadata."]
				#[doc = ""]
				#[doc = " CurrencyMetadatas: map CurrencyId => Option<AssetMetadata>"]
				pub fn currency_metadatas_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_metadatas::CurrencyMetadatas,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"CurrencyMetadatas",
						vec![],
						[
							82u8, 253u8, 175u8, 128u8, 35u8, 82u8, 61u8, 163u8, 123u8, 167u8,
							129u8, 241u8, 177u8, 176u8, 97u8, 188u8, 73u8, 244u8, 67u8, 138u8,
							167u8, 90u8, 144u8, 52u8, 0u8, 242u8, 172u8, 143u8, 75u8, 131u8, 122u8,
							199u8,
						],
					)
				}
				#[doc = " The storages for AssetMetadata."]
				#[doc = ""]
				#[doc = " CurrencyMetadatas: map CurrencyId => Option<AssetMetadata>"]
				pub fn currency_metadatas(
					&self,
					_0: impl ::std::borrow::Borrow<types::currency_metadatas::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_metadatas::CurrencyMetadatas,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AssetRegistry",
						"CurrencyMetadatas",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							82u8, 253u8, 175u8, 128u8, 35u8, 82u8, 61u8, 163u8, 123u8, 167u8,
							129u8, 241u8, 177u8, 176u8, 97u8, 188u8, 73u8, 244u8, 67u8, 138u8,
							167u8, 90u8, 144u8, 52u8, 0u8, 242u8, 172u8, 143u8, 75u8, 131u8, 122u8,
							199u8,
						],
					)
				}
			}
		}
	}
	pub mod Lst_minting {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_Lst_minting::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_Lst_minting::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::mint`]."]
				pub struct Mint {
					pub token_id: mint::TokenId,
					pub token_amount: mint::TokenAmount,
					pub remark: mint::Remark,
					pub channel_id: mint::ChannelId,
				}
				pub mod mint {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TokenAmount = ::core::primitive::u128;
					pub type Remark = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>;
					pub type ChannelId = ::core::option::Option<::core::primitive::u32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Mint {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "mint";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::redeem`]."]
				pub struct Redeem {
					pub Lst_id: redeem::LstId,
					pub Lst_amount: redeem::LstAmount,
				}
				pub mod redeem {
					use super::runtime_types;
					pub type LstId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type LstAmount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Redeem {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "redeem";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::rebond`]."]
				pub struct Rebond {
					pub token_id: rebond::TokenId,
					pub token_amount: rebond::TokenAmount,
				}
				pub mod rebond {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TokenAmount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Rebond {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "rebond";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::rebond_by_unlock_id`]."]
				pub struct RebondByUnlockId {
					pub token_id: rebond_by_unlock_id::TokenId,
					pub unlock_id: rebond_by_unlock_id::UnlockId,
				}
				pub mod rebond_by_unlock_id {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type UnlockId = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RebondByUnlockId {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "rebond_by_unlock_id";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_unlock_duration`]."]
				pub struct SetUnlockDuration {
					pub token_id: set_unlock_duration::TokenId,
					pub unlock_duration: set_unlock_duration::UnlockDuration,
				}
				pub mod set_unlock_duration {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type UnlockDuration = runtime_types::tangle_primitives::TimeUnit;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetUnlockDuration {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "set_unlock_duration";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_minimum_mint`]."]
				pub struct SetMinimumMint {
					pub token_id: set_minimum_mint::TokenId,
					pub amount: set_minimum_mint::Amount,
				}
				pub mod set_minimum_mint {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMinimumMint {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "set_minimum_mint";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_minimum_redeem`]."]
				pub struct SetMinimumRedeem {
					pub token_id: set_minimum_redeem::TokenId,
					pub amount: set_minimum_redeem::Amount,
				}
				pub mod set_minimum_redeem {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMinimumRedeem {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "set_minimum_redeem";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_support_rebond_token`]."]
				pub struct AddSupportRebondToken {
					pub token_id: add_support_rebond_token::TokenId,
				}
				pub mod add_support_rebond_token {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddSupportRebondToken {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "add_support_rebond_token";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_support_rebond_token`]."]
				pub struct RemoveSupportRebondToken {
					pub token_id: remove_support_rebond_token::TokenId,
				}
				pub mod remove_support_rebond_token {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveSupportRebondToken {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "remove_support_rebond_token";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_fees`]."]
				pub struct SetFees {
					pub mint_fee: set_fees::MintFee,
					pub redeem_fee: set_fees::RedeemFee,
				}
				pub mod set_fees {
					use super::runtime_types;
					pub type MintFee = runtime_types::sp_arithmetic::per_things::Permill;
					pub type RedeemFee = runtime_types::sp_arithmetic::per_things::Permill;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetFees {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "set_fees";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_hook_iteration_limit`]."]
				pub struct SetHookIterationLimit {
					pub limit: set_hook_iteration_limit::Limit,
				}
				pub mod set_hook_iteration_limit {
					use super::runtime_types;
					pub type Limit = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetHookIterationLimit {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "set_hook_iteration_limit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_unlocking_total`]."]
				pub struct SetUnlockingTotal {
					pub token_id: set_unlocking_total::TokenId,
					pub amount: set_unlocking_total::Amount,
				}
				pub mod set_unlocking_total {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetUnlockingTotal {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "set_unlocking_total";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_min_time_unit`]."]
				pub struct SetMinTimeUnit {
					pub token_id: set_min_time_unit::TokenId,
					pub time_unit: set_min_time_unit::TimeUnit,
				}
				pub mod set_min_time_unit {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TimeUnit = runtime_types::tangle_primitives::TimeUnit;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMinTimeUnit {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "set_min_time_unit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::recreate_currency_ongoing_time_unit`]."]
				pub struct RecreateCurrencyOngoingTimeUnit {
					pub token_id: recreate_currency_ongoing_time_unit::TokenId,
					pub time_unit: recreate_currency_ongoing_time_unit::TimeUnit,
				}
				pub mod recreate_currency_ongoing_time_unit {
					use super::runtime_types;
					pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TimeUnit = runtime_types::tangle_primitives::TimeUnit;
				}
				impl ::subxt::blocks::StaticExtrinsic for RecreateCurrencyOngoingTimeUnit {
					const PALLET: &'static str = "LstMinting";
					const CALL: &'static str = "recreate_currency_ongoing_time_unit";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::mint`]."]
				pub fn mint(
					&self,
					token_id: types::mint::TokenId,
					token_amount: types::mint::TokenAmount,
					remark: types::mint::Remark,
					channel_id: types::mint::ChannelId,
				) -> ::subxt::tx::Payload<types::Mint> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"mint",
						types::Mint { token_id, token_amount, remark, channel_id },
						[
							99u8, 167u8, 96u8, 33u8, 191u8, 214u8, 126u8, 13u8, 251u8, 160u8,
							193u8, 35u8, 222u8, 226u8, 52u8, 73u8, 123u8, 112u8, 238u8, 178u8,
							81u8, 107u8, 109u8, 22u8, 193u8, 56u8, 50u8, 173u8, 254u8, 225u8,
							140u8, 21u8,
						],
					)
				}
				#[doc = "See [`Pallet::redeem`]."]
				pub fn redeem(
					&self,
					Lst_id: types::redeem::LstId,
					Lst_amount: types::redeem::LstAmount,
				) -> ::subxt::tx::Payload<types::Redeem> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"redeem",
						types::Redeem { Lst_id, Lst_amount },
						[
							143u8, 79u8, 145u8, 38u8, 124u8, 243u8, 8u8, 235u8, 106u8, 38u8, 38u8,
							82u8, 248u8, 168u8, 30u8, 139u8, 84u8, 44u8, 251u8, 7u8, 37u8, 254u8,
							22u8, 154u8, 214u8, 92u8, 137u8, 243u8, 43u8, 74u8, 18u8, 50u8,
						],
					)
				}
				#[doc = "See [`Pallet::rebond`]."]
				pub fn rebond(
					&self,
					token_id: types::rebond::TokenId,
					token_amount: types::rebond::TokenAmount,
				) -> ::subxt::tx::Payload<types::Rebond> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"rebond",
						types::Rebond { token_id, token_amount },
						[
							117u8, 137u8, 50u8, 72u8, 50u8, 206u8, 60u8, 236u8, 150u8, 202u8, 54u8,
							53u8, 130u8, 12u8, 163u8, 24u8, 14u8, 55u8, 17u8, 185u8, 64u8, 116u8,
							15u8, 164u8, 185u8, 3u8, 225u8, 41u8, 246u8, 190u8, 19u8, 117u8,
						],
					)
				}
				#[doc = "See [`Pallet::rebond_by_unlock_id`]."]
				pub fn rebond_by_unlock_id(
					&self,
					token_id: types::rebond_by_unlock_id::TokenId,
					unlock_id: types::rebond_by_unlock_id::UnlockId,
				) -> ::subxt::tx::Payload<types::RebondByUnlockId> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"rebond_by_unlock_id",
						types::RebondByUnlockId { token_id, unlock_id },
						[
							127u8, 182u8, 134u8, 32u8, 98u8, 145u8, 112u8, 222u8, 31u8, 224u8,
							117u8, 129u8, 232u8, 61u8, 81u8, 151u8, 125u8, 114u8, 20u8, 196u8,
							235u8, 116u8, 22u8, 14u8, 242u8, 247u8, 205u8, 8u8, 13u8, 128u8, 186u8,
							21u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_unlock_duration`]."]
				pub fn set_unlock_duration(
					&self,
					token_id: types::set_unlock_duration::TokenId,
					unlock_duration: types::set_unlock_duration::UnlockDuration,
				) -> ::subxt::tx::Payload<types::SetUnlockDuration> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"set_unlock_duration",
						types::SetUnlockDuration { token_id, unlock_duration },
						[
							70u8, 150u8, 13u8, 124u8, 131u8, 79u8, 206u8, 78u8, 74u8, 106u8, 180u8,
							217u8, 60u8, 7u8, 81u8, 71u8, 33u8, 146u8, 221u8, 249u8, 65u8, 188u8,
							237u8, 13u8, 153u8, 80u8, 86u8, 77u8, 88u8, 226u8, 129u8, 81u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_minimum_mint`]."]
				pub fn set_minimum_mint(
					&self,
					token_id: types::set_minimum_mint::TokenId,
					amount: types::set_minimum_mint::Amount,
				) -> ::subxt::tx::Payload<types::SetMinimumMint> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"set_minimum_mint",
						types::SetMinimumMint { token_id, amount },
						[
							40u8, 133u8, 194u8, 230u8, 157u8, 118u8, 35u8, 169u8, 219u8, 106u8,
							183u8, 254u8, 219u8, 92u8, 201u8, 104u8, 231u8, 80u8, 150u8, 151u8,
							104u8, 123u8, 231u8, 116u8, 228u8, 179u8, 64u8, 217u8, 98u8, 63u8,
							183u8, 43u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_minimum_redeem`]."]
				pub fn set_minimum_redeem(
					&self,
					token_id: types::set_minimum_redeem::TokenId,
					amount: types::set_minimum_redeem::Amount,
				) -> ::subxt::tx::Payload<types::SetMinimumRedeem> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"set_minimum_redeem",
						types::SetMinimumRedeem { token_id, amount },
						[
							97u8, 245u8, 39u8, 5u8, 79u8, 221u8, 241u8, 43u8, 246u8, 186u8, 140u8,
							86u8, 185u8, 154u8, 24u8, 22u8, 230u8, 81u8, 142u8, 165u8, 42u8, 128u8,
							10u8, 90u8, 61u8, 60u8, 228u8, 181u8, 31u8, 248u8, 33u8, 162u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_support_rebond_token`]."]
				pub fn add_support_rebond_token(
					&self,
					token_id: types::add_support_rebond_token::TokenId,
				) -> ::subxt::tx::Payload<types::AddSupportRebondToken> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"add_support_rebond_token",
						types::AddSupportRebondToken { token_id },
						[
							80u8, 70u8, 206u8, 75u8, 40u8, 172u8, 50u8, 206u8, 160u8, 140u8, 76u8,
							200u8, 194u8, 120u8, 77u8, 156u8, 30u8, 5u8, 49u8, 90u8, 78u8, 136u8,
							151u8, 100u8, 3u8, 107u8, 248u8, 114u8, 194u8, 114u8, 219u8, 166u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_support_rebond_token`]."]
				pub fn remove_support_rebond_token(
					&self,
					token_id: types::remove_support_rebond_token::TokenId,
				) -> ::subxt::tx::Payload<types::RemoveSupportRebondToken> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"remove_support_rebond_token",
						types::RemoveSupportRebondToken { token_id },
						[
							41u8, 215u8, 70u8, 187u8, 165u8, 77u8, 107u8, 207u8, 20u8, 250u8,
							112u8, 200u8, 239u8, 230u8, 82u8, 129u8, 53u8, 131u8, 156u8, 162u8,
							148u8, 40u8, 56u8, 112u8, 165u8, 48u8, 21u8, 238u8, 33u8, 65u8, 243u8,
							48u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_fees`]."]
				pub fn set_fees(
					&self,
					mint_fee: types::set_fees::MintFee,
					redeem_fee: types::set_fees::RedeemFee,
				) -> ::subxt::tx::Payload<types::SetFees> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"set_fees",
						types::SetFees { mint_fee, redeem_fee },
						[
							247u8, 249u8, 232u8, 190u8, 135u8, 101u8, 62u8, 248u8, 92u8, 129u8,
							41u8, 148u8, 89u8, 211u8, 46u8, 142u8, 234u8, 172u8, 83u8, 115u8,
							220u8, 56u8, 196u8, 186u8, 45u8, 116u8, 190u8, 204u8, 242u8, 200u8,
							150u8, 129u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_hook_iteration_limit`]."]
				pub fn set_hook_iteration_limit(
					&self,
					limit: types::set_hook_iteration_limit::Limit,
				) -> ::subxt::tx::Payload<types::SetHookIterationLimit> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"set_hook_iteration_limit",
						types::SetHookIterationLimit { limit },
						[
							74u8, 246u8, 18u8, 211u8, 13u8, 26u8, 77u8, 79u8, 49u8, 184u8, 184u8,
							156u8, 69u8, 206u8, 43u8, 153u8, 198u8, 175u8, 1u8, 201u8, 167u8, 94u8,
							22u8, 168u8, 98u8, 1u8, 239u8, 249u8, 122u8, 113u8, 30u8, 221u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_unlocking_total`]."]
				pub fn set_unlocking_total(
					&self,
					token_id: types::set_unlocking_total::TokenId,
					amount: types::set_unlocking_total::Amount,
				) -> ::subxt::tx::Payload<types::SetUnlockingTotal> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"set_unlocking_total",
						types::SetUnlockingTotal { token_id, amount },
						[
							84u8, 217u8, 9u8, 144u8, 37u8, 19u8, 15u8, 10u8, 121u8, 157u8, 31u8,
							122u8, 225u8, 60u8, 235u8, 219u8, 181u8, 28u8, 148u8, 204u8, 26u8,
							76u8, 124u8, 216u8, 163u8, 88u8, 24u8, 24u8, 10u8, 67u8, 6u8, 235u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_min_time_unit`]."]
				pub fn set_min_time_unit(
					&self,
					token_id: types::set_min_time_unit::TokenId,
					time_unit: types::set_min_time_unit::TimeUnit,
				) -> ::subxt::tx::Payload<types::SetMinTimeUnit> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"set_min_time_unit",
						types::SetMinTimeUnit { token_id, time_unit },
						[
							2u8, 11u8, 131u8, 22u8, 213u8, 121u8, 167u8, 100u8, 241u8, 225u8,
							142u8, 237u8, 181u8, 76u8, 250u8, 47u8, 231u8, 221u8, 175u8, 170u8,
							10u8, 47u8, 134u8, 248u8, 152u8, 226u8, 123u8, 114u8, 143u8, 246u8,
							46u8, 137u8,
						],
					)
				}
				#[doc = "See [`Pallet::recreate_currency_ongoing_time_unit`]."]
				pub fn recreate_currency_ongoing_time_unit(
					&self,
					token_id: types::recreate_currency_ongoing_time_unit::TokenId,
					time_unit: types::recreate_currency_ongoing_time_unit::TimeUnit,
				) -> ::subxt::tx::Payload<types::RecreateCurrencyOngoingTimeUnit> {
					::subxt::tx::Payload::new_static(
						"LstMinting",
						"recreate_currency_ongoing_time_unit",
						types::RecreateCurrencyOngoingTimeUnit { token_id, time_unit },
						[
							78u8, 30u8, 217u8, 248u8, 40u8, 34u8, 11u8, 110u8, 114u8, 57u8, 146u8,
							213u8, 125u8, 30u8, 148u8, 148u8, 105u8, 117u8, 61u8, 167u8, 1u8, 46u8,
							235u8, 194u8, 18u8, 4u8, 66u8, 38u8, 34u8, 110u8, 27u8, 248u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_Lst_minting::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Minted {
				pub address: minted::Address,
				pub token_id: minted::TokenId,
				pub token_amount: minted::TokenAmount,
				pub Lst_amount: minted::LstAmount,
				pub fee: minted::Fee,
				pub remark: minted::Remark,
			}
			pub mod minted {
				use super::runtime_types;
				pub type Address = ::subxt::utils::AccountId32;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TokenAmount = ::core::primitive::u128;
				pub type LstAmount = ::core::primitive::u128;
				pub type Fee = ::core::primitive::u128;
				pub type Remark = runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>;
			}
			impl ::subxt::events::StaticEvent for Minted {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "Minted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Redeemed {
				pub address: redeemed::Address,
				pub token_id: redeemed::TokenId,
				pub token_amount: redeemed::TokenAmount,
				pub Lst_amount: redeemed::LstAmount,
				pub fee: redeemed::Fee,
				pub unlock_id: redeemed::UnlockId,
			}
			pub mod redeemed {
				use super::runtime_types;
				pub type Address = ::subxt::utils::AccountId32;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TokenAmount = ::core::primitive::u128;
				pub type LstAmount = ::core::primitive::u128;
				pub type Fee = ::core::primitive::u128;
				pub type UnlockId = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Redeemed {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "Redeemed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RedeemSuccess {
				pub unlock_id: redeem_success::UnlockId,
				pub token_id: redeem_success::TokenId,
				pub to: redeem_success::To,
				pub token_amount: redeem_success::TokenAmount,
			}
			pub mod redeem_success {
				use super::runtime_types;
				pub type UnlockId = ::core::primitive::u32;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type To = ::subxt::utils::AccountId32;
				pub type TokenAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for RedeemSuccess {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "RedeemSuccess";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Rebonded {
				pub address: rebonded::Address,
				pub token_id: rebonded::TokenId,
				pub token_amount: rebonded::TokenAmount,
				pub Lst_amount: rebonded::LstAmount,
				pub fee: rebonded::Fee,
			}
			pub mod rebonded {
				use super::runtime_types;
				pub type Address = ::subxt::utils::AccountId32;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TokenAmount = ::core::primitive::u128;
				pub type LstAmount = ::core::primitive::u128;
				pub type Fee = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Rebonded {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "Rebonded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RebondedByUnlockId {
				pub address: rebonded_by_unlock_id::Address,
				pub token_id: rebonded_by_unlock_id::TokenId,
				pub token_amount: rebonded_by_unlock_id::TokenAmount,
				pub Lst_amount: rebonded_by_unlock_id::LstAmount,
				pub fee: rebonded_by_unlock_id::Fee,
				pub unlock_id: rebonded_by_unlock_id::UnlockId,
			}
			pub mod rebonded_by_unlock_id {
				use super::runtime_types;
				pub type Address = ::subxt::utils::AccountId32;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TokenAmount = ::core::primitive::u128;
				pub type LstAmount = ::core::primitive::u128;
				pub type Fee = ::core::primitive::u128;
				pub type UnlockId = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for RebondedByUnlockId {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "RebondedByUnlockId";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnlockDurationSet {
				pub token_id: unlock_duration_set::TokenId,
				pub unlock_duration: unlock_duration_set::UnlockDuration,
			}
			pub mod unlock_duration_set {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type UnlockDuration = runtime_types::tangle_primitives::TimeUnit;
			}
			impl ::subxt::events::StaticEvent for UnlockDurationSet {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "UnlockDurationSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MinimumMintSet {
				pub token_id: minimum_mint_set::TokenId,
				pub amount: minimum_mint_set::Amount,
			}
			pub mod minimum_mint_set {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for MinimumMintSet {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "MinimumMintSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MinimumRedeemSet {
				pub token_id: minimum_redeem_set::TokenId,
				pub amount: minimum_redeem_set::Amount,
			}
			pub mod minimum_redeem_set {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for MinimumRedeemSet {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "MinimumRedeemSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SupportRebondTokenAdded {
				pub token_id: support_rebond_token_added::TokenId,
			}
			pub mod support_rebond_token_added {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for SupportRebondTokenAdded {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "SupportRebondTokenAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SupportRebondTokenRemoved {
				pub token_id: support_rebond_token_removed::TokenId,
			}
			pub mod support_rebond_token_removed {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for SupportRebondTokenRemoved {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "SupportRebondTokenRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Several fees has been set."]
			pub struct FeeSet {
				pub mint_fee: fee_set::MintFee,
				pub redeem_fee: fee_set::RedeemFee,
			}
			pub mod fee_set {
				use super::runtime_types;
				pub type MintFee = runtime_types::sp_arithmetic::per_things::Permill;
				pub type RedeemFee = runtime_types::sp_arithmetic::per_things::Permill;
			}
			impl ::subxt::events::StaticEvent for FeeSet {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "FeeSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct HookIterationLimitSet {
				pub limit: hook_iteration_limit_set::Limit,
			}
			pub mod hook_iteration_limit_set {
				use super::runtime_types;
				pub type Limit = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for HookIterationLimitSet {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "HookIterationLimitSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnlockingTotalSet {
				pub token_id: unlocking_total_set::TokenId,
				pub amount: unlocking_total_set::Amount,
			}
			pub mod unlocking_total_set {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for UnlockingTotalSet {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "UnlockingTotalSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MinTimeUnitSet {
				pub token_id: min_time_unit_set::TokenId,
				pub time_unit: min_time_unit_set::TimeUnit,
			}
			pub mod min_time_unit_set {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TimeUnit = runtime_types::tangle_primitives::TimeUnit;
			}
			impl ::subxt::events::StaticEvent for MinTimeUnitSet {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "MinTimeUnitSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FastRedeemFailed {
				pub err: fast_redeem_failed::Err,
			}
			pub mod fast_redeem_failed {
				use super::runtime_types;
				pub type Err = runtime_types::sp_runtime::DispatchError;
			}
			impl ::subxt::events::StaticEvent for FastRedeemFailed {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "FastRedeemFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CurrencyTimeUnitRecreated {
				pub token_id: currency_time_unit_recreated::TokenId,
				pub time_unit: currency_time_unit_recreated::TimeUnit,
			}
			pub mod currency_time_unit_recreated {
				use super::runtime_types;
				pub type TokenId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TimeUnit = runtime_types::tangle_primitives::TimeUnit;
			}
			impl ::subxt::events::StaticEvent for CurrencyTimeUnitRecreated {
				const PALLET: &'static str = "LstMinting";
				const EVENT: &'static str = "CurrencyTimeUnitRecreated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod fees {
					use super::runtime_types;
					pub type Fees = (
						runtime_types::sp_arithmetic::per_things::Permill,
						runtime_types::sp_arithmetic::per_things::Permill,
					);
				}
				pub mod token_pool {
					use super::runtime_types;
					pub type TokenPool = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod unlock_duration {
					use super::runtime_types;
					pub type UnlockDuration = runtime_types::tangle_primitives::TimeUnit;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod ongoing_time_unit {
					use super::runtime_types;
					pub type OngoingTimeUnit = runtime_types::tangle_primitives::TimeUnit;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod minimum_mint {
					use super::runtime_types;
					pub type MinimumMint = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod minimum_redeem {
					use super::runtime_types;
					pub type MinimumRedeem = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod token_unlock_next_id {
					use super::runtime_types;
					pub type TokenUnlockNextId = ::core::primitive::u32;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod token_unlock_ledger {
					use super::runtime_types;
					pub type TokenUnlockLedger = (
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						runtime_types::tangle_primitives::TimeUnit,
						runtime_types::tangle_primitives::RedeemType<::subxt::utils::AccountId32>,
					);
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod user_unlock_ledger {
					use super::runtime_types;
					pub type UserUnlockLedger = (
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>,
					);
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod time_unit_unlock_ledger {
					use super::runtime_types;
					pub type TimeUnitUnlockLedger = (
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>,
						runtime_types::tangle_primitives::currency::CurrencyId,
					);
					pub type Param0 = runtime_types::tangle_primitives::TimeUnit;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod token_to_rebond {
					use super::runtime_types;
					pub type TokenToRebond = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod min_time_unit {
					use super::runtime_types;
					pub type MinTimeUnit = runtime_types::tangle_primitives::TimeUnit;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod unlocking_total {
					use super::runtime_types;
					pub type UnlockingTotal = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod hook_iteration_limit {
					use super::runtime_types;
					pub type HookIterationLimit = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn fees(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::fees::Fees,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"Fees",
						vec![],
						[
							150u8, 107u8, 197u8, 53u8, 66u8, 249u8, 18u8, 194u8, 25u8, 64u8, 221u8,
							29u8, 222u8, 27u8, 110u8, 250u8, 122u8, 51u8, 247u8, 179u8, 155u8,
							186u8, 125u8, 207u8, 211u8, 42u8, 44u8, 182u8, 124u8, 11u8, 222u8, 3u8,
						],
					)
				}
				pub fn token_pool_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_pool::TokenPool,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenPool",
						vec![],
						[
							76u8, 253u8, 214u8, 97u8, 204u8, 102u8, 2u8, 138u8, 116u8, 142u8, 82u8,
							61u8, 232u8, 101u8, 53u8, 41u8, 94u8, 83u8, 224u8, 74u8, 250u8, 146u8,
							185u8, 232u8, 208u8, 238u8, 196u8, 249u8, 222u8, 61u8, 115u8, 100u8,
						],
					)
				}
				pub fn token_pool(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_pool::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_pool::TokenPool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenPool",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							76u8, 253u8, 214u8, 97u8, 204u8, 102u8, 2u8, 138u8, 116u8, 142u8, 82u8,
							61u8, 232u8, 101u8, 53u8, 41u8, 94u8, 83u8, 224u8, 74u8, 250u8, 146u8,
							185u8, 232u8, 208u8, 238u8, 196u8, 249u8, 222u8, 61u8, 115u8, 100u8,
						],
					)
				}
				pub fn unlock_duration_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::unlock_duration::UnlockDuration,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"UnlockDuration",
						vec![],
						[
							225u8, 220u8, 130u8, 32u8, 229u8, 19u8, 209u8, 138u8, 156u8, 135u8,
							71u8, 19u8, 134u8, 141u8, 108u8, 225u8, 106u8, 183u8, 235u8, 222u8,
							226u8, 76u8, 189u8, 28u8, 17u8, 52u8, 82u8, 234u8, 148u8, 232u8, 28u8,
							76u8,
						],
					)
				}
				pub fn unlock_duration(
					&self,
					_0: impl ::std::borrow::Borrow<types::unlock_duration::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::unlock_duration::UnlockDuration,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"UnlockDuration",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							225u8, 220u8, 130u8, 32u8, 229u8, 19u8, 209u8, 138u8, 156u8, 135u8,
							71u8, 19u8, 134u8, 141u8, 108u8, 225u8, 106u8, 183u8, 235u8, 222u8,
							226u8, 76u8, 189u8, 28u8, 17u8, 52u8, 82u8, 234u8, 148u8, 232u8, 28u8,
							76u8,
						],
					)
				}
				pub fn ongoing_time_unit_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::ongoing_time_unit::OngoingTimeUnit,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"OngoingTimeUnit",
						vec![],
						[
							31u8, 55u8, 102u8, 146u8, 56u8, 70u8, 183u8, 27u8, 60u8, 6u8, 165u8,
							44u8, 197u8, 8u8, 51u8, 139u8, 50u8, 71u8, 153u8, 186u8, 190u8, 142u8,
							47u8, 78u8, 3u8, 55u8, 141u8, 204u8, 146u8, 53u8, 154u8, 163u8,
						],
					)
				}
				pub fn ongoing_time_unit(
					&self,
					_0: impl ::std::borrow::Borrow<types::ongoing_time_unit::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::ongoing_time_unit::OngoingTimeUnit,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"OngoingTimeUnit",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							31u8, 55u8, 102u8, 146u8, 56u8, 70u8, 183u8, 27u8, 60u8, 6u8, 165u8,
							44u8, 197u8, 8u8, 51u8, 139u8, 50u8, 71u8, 153u8, 186u8, 190u8, 142u8,
							47u8, 78u8, 3u8, 55u8, 141u8, 204u8, 146u8, 53u8, 154u8, 163u8,
						],
					)
				}
				pub fn minimum_mint_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::minimum_mint::MinimumMint,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"MinimumMint",
						vec![],
						[
							176u8, 176u8, 131u8, 128u8, 161u8, 219u8, 15u8, 99u8, 49u8, 82u8,
							125u8, 186u8, 77u8, 201u8, 55u8, 143u8, 139u8, 76u8, 81u8, 199u8, 26u8,
							121u8, 40u8, 129u8, 69u8, 4u8, 228u8, 165u8, 214u8, 183u8, 69u8, 239u8,
						],
					)
				}
				pub fn minimum_mint(
					&self,
					_0: impl ::std::borrow::Borrow<types::minimum_mint::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::minimum_mint::MinimumMint,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"MinimumMint",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							176u8, 176u8, 131u8, 128u8, 161u8, 219u8, 15u8, 99u8, 49u8, 82u8,
							125u8, 186u8, 77u8, 201u8, 55u8, 143u8, 139u8, 76u8, 81u8, 199u8, 26u8,
							121u8, 40u8, 129u8, 69u8, 4u8, 228u8, 165u8, 214u8, 183u8, 69u8, 239u8,
						],
					)
				}
				pub fn minimum_redeem_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::minimum_redeem::MinimumRedeem,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"MinimumRedeem",
						vec![],
						[
							160u8, 103u8, 166u8, 126u8, 98u8, 1u8, 62u8, 238u8, 125u8, 223u8, 98u8,
							60u8, 51u8, 125u8, 49u8, 147u8, 61u8, 252u8, 197u8, 198u8, 188u8, 22u8,
							2u8, 8u8, 82u8, 143u8, 253u8, 168u8, 238u8, 77u8, 209u8, 239u8,
						],
					)
				}
				pub fn minimum_redeem(
					&self,
					_0: impl ::std::borrow::Borrow<types::minimum_redeem::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::minimum_redeem::MinimumRedeem,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"MinimumRedeem",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							160u8, 103u8, 166u8, 126u8, 98u8, 1u8, 62u8, 238u8, 125u8, 223u8, 98u8,
							60u8, 51u8, 125u8, 49u8, 147u8, 61u8, 252u8, 197u8, 198u8, 188u8, 22u8,
							2u8, 8u8, 82u8, 143u8, 253u8, 168u8, 238u8, 77u8, 209u8, 239u8,
						],
					)
				}
				pub fn token_unlock_next_id_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_unlock_next_id::TokenUnlockNextId,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenUnlockNextId",
						vec![],
						[
							66u8, 113u8, 195u8, 185u8, 116u8, 92u8, 95u8, 2u8, 132u8, 195u8, 174u8,
							92u8, 207u8, 83u8, 200u8, 180u8, 101u8, 143u8, 213u8, 38u8, 144u8,
							128u8, 195u8, 54u8, 46u8, 251u8, 69u8, 95u8, 150u8, 158u8, 250u8, 69u8,
						],
					)
				}
				pub fn token_unlock_next_id(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_unlock_next_id::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_unlock_next_id::TokenUnlockNextId,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenUnlockNextId",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							66u8, 113u8, 195u8, 185u8, 116u8, 92u8, 95u8, 2u8, 132u8, 195u8, 174u8,
							92u8, 207u8, 83u8, 200u8, 180u8, 101u8, 143u8, 213u8, 38u8, 144u8,
							128u8, 195u8, 54u8, 46u8, 251u8, 69u8, 95u8, 150u8, 158u8, 250u8, 69u8,
						],
					)
				}
				pub fn token_unlock_ledger_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_unlock_ledger::TokenUnlockLedger,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenUnlockLedger",
						vec![],
						[
							201u8, 191u8, 80u8, 6u8, 62u8, 32u8, 250u8, 249u8, 121u8, 103u8, 156u8,
							48u8, 139u8, 172u8, 218u8, 10u8, 56u8, 47u8, 145u8, 117u8, 46u8, 94u8,
							40u8, 27u8, 221u8, 89u8, 43u8, 56u8, 184u8, 231u8, 21u8, 193u8,
						],
					)
				}
				pub fn token_unlock_ledger_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_unlock_ledger::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_unlock_ledger::TokenUnlockLedger,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenUnlockLedger",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							201u8, 191u8, 80u8, 6u8, 62u8, 32u8, 250u8, 249u8, 121u8, 103u8, 156u8,
							48u8, 139u8, 172u8, 218u8, 10u8, 56u8, 47u8, 145u8, 117u8, 46u8, 94u8,
							40u8, 27u8, 221u8, 89u8, 43u8, 56u8, 184u8, 231u8, 21u8, 193u8,
						],
					)
				}
				pub fn token_unlock_ledger(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_unlock_ledger::Param0>,
					_1: impl ::std::borrow::Borrow<types::token_unlock_ledger::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_unlock_ledger::TokenUnlockLedger,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenUnlockLedger",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							201u8, 191u8, 80u8, 6u8, 62u8, 32u8, 250u8, 249u8, 121u8, 103u8, 156u8,
							48u8, 139u8, 172u8, 218u8, 10u8, 56u8, 47u8, 145u8, 117u8, 46u8, 94u8,
							40u8, 27u8, 221u8, 89u8, 43u8, 56u8, 184u8, 231u8, 21u8, 193u8,
						],
					)
				}
				pub fn user_unlock_ledger_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::user_unlock_ledger::UserUnlockLedger,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"UserUnlockLedger",
						vec![],
						[
							196u8, 180u8, 22u8, 30u8, 234u8, 31u8, 236u8, 20u8, 80u8, 215u8, 123u8,
							37u8, 198u8, 128u8, 255u8, 169u8, 149u8, 172u8, 78u8, 106u8, 197u8,
							121u8, 220u8, 183u8, 19u8, 181u8, 126u8, 187u8, 76u8, 42u8, 73u8,
							114u8,
						],
					)
				}
				pub fn user_unlock_ledger_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::user_unlock_ledger::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::user_unlock_ledger::UserUnlockLedger,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"UserUnlockLedger",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							196u8, 180u8, 22u8, 30u8, 234u8, 31u8, 236u8, 20u8, 80u8, 215u8, 123u8,
							37u8, 198u8, 128u8, 255u8, 169u8, 149u8, 172u8, 78u8, 106u8, 197u8,
							121u8, 220u8, 183u8, 19u8, 181u8, 126u8, 187u8, 76u8, 42u8, 73u8,
							114u8,
						],
					)
				}
				pub fn user_unlock_ledger(
					&self,
					_0: impl ::std::borrow::Borrow<types::user_unlock_ledger::Param0>,
					_1: impl ::std::borrow::Borrow<types::user_unlock_ledger::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::user_unlock_ledger::UserUnlockLedger,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"UserUnlockLedger",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							196u8, 180u8, 22u8, 30u8, 234u8, 31u8, 236u8, 20u8, 80u8, 215u8, 123u8,
							37u8, 198u8, 128u8, 255u8, 169u8, 149u8, 172u8, 78u8, 106u8, 197u8,
							121u8, 220u8, 183u8, 19u8, 181u8, 126u8, 187u8, 76u8, 42u8, 73u8,
							114u8,
						],
					)
				}
				pub fn time_unit_unlock_ledger_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::time_unit_unlock_ledger::TimeUnitUnlockLedger,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TimeUnitUnlockLedger",
						vec![],
						[
							178u8, 14u8, 193u8, 46u8, 236u8, 41u8, 153u8, 33u8, 129u8, 11u8, 90u8,
							17u8, 2u8, 171u8, 82u8, 165u8, 10u8, 159u8, 216u8, 128u8, 53u8, 64u8,
							239u8, 228u8, 60u8, 27u8, 27u8, 86u8, 139u8, 107u8, 207u8, 45u8,
						],
					)
				}
				pub fn time_unit_unlock_ledger_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::time_unit_unlock_ledger::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::time_unit_unlock_ledger::TimeUnitUnlockLedger,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TimeUnitUnlockLedger",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							178u8, 14u8, 193u8, 46u8, 236u8, 41u8, 153u8, 33u8, 129u8, 11u8, 90u8,
							17u8, 2u8, 171u8, 82u8, 165u8, 10u8, 159u8, 216u8, 128u8, 53u8, 64u8,
							239u8, 228u8, 60u8, 27u8, 27u8, 86u8, 139u8, 107u8, 207u8, 45u8,
						],
					)
				}
				pub fn time_unit_unlock_ledger(
					&self,
					_0: impl ::std::borrow::Borrow<types::time_unit_unlock_ledger::Param0>,
					_1: impl ::std::borrow::Borrow<types::time_unit_unlock_ledger::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::time_unit_unlock_ledger::TimeUnitUnlockLedger,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TimeUnitUnlockLedger",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							178u8, 14u8, 193u8, 46u8, 236u8, 41u8, 153u8, 33u8, 129u8, 11u8, 90u8,
							17u8, 2u8, 171u8, 82u8, 165u8, 10u8, 159u8, 216u8, 128u8, 53u8, 64u8,
							239u8, 228u8, 60u8, 27u8, 27u8, 86u8, 139u8, 107u8, 207u8, 45u8,
						],
					)
				}
				pub fn token_to_rebond_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_to_rebond::TokenToRebond,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenToRebond",
						vec![],
						[
							78u8, 16u8, 101u8, 82u8, 255u8, 159u8, 196u8, 126u8, 58u8, 127u8,
							201u8, 245u8, 48u8, 197u8, 205u8, 212u8, 82u8, 166u8, 136u8, 107u8,
							233u8, 225u8, 121u8, 163u8, 205u8, 14u8, 184u8, 64u8, 128u8, 206u8,
							17u8, 231u8,
						],
					)
				}
				pub fn token_to_rebond(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_to_rebond::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_to_rebond::TokenToRebond,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"TokenToRebond",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							78u8, 16u8, 101u8, 82u8, 255u8, 159u8, 196u8, 126u8, 58u8, 127u8,
							201u8, 245u8, 48u8, 197u8, 205u8, 212u8, 82u8, 166u8, 136u8, 107u8,
							233u8, 225u8, 121u8, 163u8, 205u8, 14u8, 184u8, 64u8, 128u8, 206u8,
							17u8, 231u8,
						],
					)
				}
				pub fn min_time_unit_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::min_time_unit::MinTimeUnit,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"MinTimeUnit",
						vec![],
						[
							222u8, 99u8, 118u8, 227u8, 11u8, 255u8, 234u8, 137u8, 180u8, 222u8,
							188u8, 180u8, 149u8, 250u8, 29u8, 157u8, 17u8, 153u8, 56u8, 119u8,
							231u8, 51u8, 55u8, 46u8, 132u8, 128u8, 150u8, 203u8, 127u8, 209u8,
							109u8, 3u8,
						],
					)
				}
				pub fn min_time_unit(
					&self,
					_0: impl ::std::borrow::Borrow<types::min_time_unit::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::min_time_unit::MinTimeUnit,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"MinTimeUnit",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							222u8, 99u8, 118u8, 227u8, 11u8, 255u8, 234u8, 137u8, 180u8, 222u8,
							188u8, 180u8, 149u8, 250u8, 29u8, 157u8, 17u8, 153u8, 56u8, 119u8,
							231u8, 51u8, 55u8, 46u8, 132u8, 128u8, 150u8, 203u8, 127u8, 209u8,
							109u8, 3u8,
						],
					)
				}
				pub fn unlocking_total_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::unlocking_total::UnlockingTotal,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"UnlockingTotal",
						vec![],
						[
							129u8, 32u8, 101u8, 147u8, 85u8, 46u8, 183u8, 21u8, 106u8, 106u8, 94u8,
							5u8, 36u8, 152u8, 133u8, 96u8, 89u8, 205u8, 96u8, 155u8, 144u8, 1u8,
							171u8, 217u8, 197u8, 31u8, 63u8, 209u8, 102u8, 21u8, 66u8, 24u8,
						],
					)
				}
				pub fn unlocking_total(
					&self,
					_0: impl ::std::borrow::Borrow<types::unlocking_total::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::unlocking_total::UnlockingTotal,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"UnlockingTotal",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							129u8, 32u8, 101u8, 147u8, 85u8, 46u8, 183u8, 21u8, 106u8, 106u8, 94u8,
							5u8, 36u8, 152u8, 133u8, 96u8, 89u8, 205u8, 96u8, 155u8, 144u8, 1u8,
							171u8, 217u8, 197u8, 31u8, 63u8, 209u8, 102u8, 21u8, 66u8, 24u8,
						],
					)
				}
				pub fn hook_iteration_limit(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::hook_iteration_limit::HookIterationLimit,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstMinting",
						"HookIterationLimit",
						vec![],
						[
							230u8, 140u8, 203u8, 143u8, 227u8, 18u8, 117u8, 178u8, 171u8, 246u8,
							132u8, 88u8, 82u8, 254u8, 52u8, 120u8, 234u8, 115u8, 194u8, 25u8,
							143u8, 233u8, 11u8, 241u8, 101u8, 44u8, 81u8, 151u8, 27u8, 62u8, 184u8,
							32u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The amount of mint"]
				pub fn maximum_unlock_id_of_user(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"MaximumUnlockIdOfUser",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn maximum_unlock_id_of_time_unit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"MaximumUnlockIdOfTimeUnit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn entrance_account(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"EntranceAccount",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				pub fn exit_account(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"ExitAccount",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				pub fn fee_account(
					&self,
				) -> ::subxt::constants::Address<::subxt::utils::AccountId32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"FeeAccount",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
				pub fn relay_chain_token(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::tangle_primitives::currency::CurrencyId,
				> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"RelayChainToken",
						[
							0u8, 142u8, 146u8, 232u8, 120u8, 214u8, 141u8, 122u8, 106u8, 238u8,
							244u8, 172u8, 42u8, 28u8, 151u8, 105u8, 14u8, 234u8, 196u8, 156u8,
							103u8, 83u8, 72u8, 226u8, 166u8, 84u8, 244u8, 226u8, 248u8, 176u8,
							92u8, 22u8,
						],
					)
				}
				pub fn astar_parachain_id(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"AstarParachainId",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn moonbeam_parachain_id(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"MoonbeamParachainId",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn hydradx_parachain_id(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"HydradxParachainId",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn interlay_parachain_id(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"InterlayParachainId",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn manta_parachain_id(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstMinting",
						"MantaParachainId",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod slp {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_slp::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_slp::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::initialize_delegator`]."]
				pub struct InitializeDelegator {
					pub currency_id: initialize_delegator::CurrencyId,
					pub delegator_location:
						::std::boxed::Box<initialize_delegator::DelegatorLocation>,
				}
				pub mod initialize_delegator {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type DelegatorLocation = ::core::option::Option<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for InitializeDelegator {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "initialize_delegator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bond`]."]
				pub struct Bond {
					pub currency_id: bond::CurrencyId,
					pub who: ::std::boxed::Box<bond::Who>,
					#[codec(compact)]
					pub amount: bond::Amount,
					pub validator: bond::Validator,
					pub weight_and_fee: bond::WeightAndFee,
				}
				pub mod bond {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Amount = ::core::primitive::u128;
					pub type Validator = ::core::option::Option<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Bond {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "bond";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::bond_extra`]."]
				pub struct BondExtra {
					pub currency_id: bond_extra::CurrencyId,
					pub who: ::std::boxed::Box<bond_extra::Who>,
					pub validator: bond_extra::Validator,
					#[codec(compact)]
					pub amount: bond_extra::Amount,
					pub weight_and_fee: bond_extra::WeightAndFee,
				}
				pub mod bond_extra {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Validator = ::core::option::Option<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
					pub type Amount = ::core::primitive::u128;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for BondExtra {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "bond_extra";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unbond`]."]
				pub struct Unbond {
					pub currency_id: unbond::CurrencyId,
					pub who: ::std::boxed::Box<unbond::Who>,
					pub validator: unbond::Validator,
					#[codec(compact)]
					pub amount: unbond::Amount,
					pub weight_and_fee: unbond::WeightAndFee,
				}
				pub mod unbond {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Validator = ::core::option::Option<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
					pub type Amount = ::core::primitive::u128;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Unbond {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "unbond";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unbond_all`]."]
				pub struct UnbondAll {
					pub currency_id: unbond_all::CurrencyId,
					pub who: ::std::boxed::Box<unbond_all::Who>,
					pub weight_and_fee: unbond_all::WeightAndFee,
				}
				pub mod unbond_all {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for UnbondAll {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "unbond_all";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::rebond`]."]
				pub struct Rebond {
					pub currency_id: rebond::CurrencyId,
					pub who: ::std::boxed::Box<rebond::Who>,
					pub validator: rebond::Validator,
					pub amount: rebond::Amount,
					pub weight_and_fee: rebond::WeightAndFee,
				}
				pub mod rebond {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Validator = ::core::option::Option<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
					pub type Amount = ::core::option::Option<::core::primitive::u128>;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Rebond {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "rebond";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::delegate`]."]
				pub struct Delegate {
					pub currency_id: delegate::CurrencyId,
					pub who: ::std::boxed::Box<delegate::Who>,
					pub targets: delegate::Targets,
					pub weight_and_fee: delegate::WeightAndFee,
				}
				pub mod delegate {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Targets = ::std::vec::Vec<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Delegate {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "delegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::undelegate`]."]
				pub struct Undelegate {
					pub currency_id: undelegate::CurrencyId,
					pub who: ::std::boxed::Box<undelegate::Who>,
					pub targets: undelegate::Targets,
					pub weight_and_fee: undelegate::WeightAndFee,
				}
				pub mod undelegate {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Targets = ::std::vec::Vec<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Undelegate {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "undelegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::redelegate`]."]
				pub struct Redelegate {
					pub currency_id: redelegate::CurrencyId,
					pub who: ::std::boxed::Box<redelegate::Who>,
					pub targets: redelegate::Targets,
					pub weight_and_fee: redelegate::WeightAndFee,
				}
				pub mod redelegate {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Targets = ::core::option::Option<
						::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					>;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Redelegate {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "redelegate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::payout`]."]
				pub struct Payout {
					pub currency_id: payout::CurrencyId,
					pub who: ::std::boxed::Box<payout::Who>,
					pub validator: ::std::boxed::Box<payout::Validator>,
					pub when: payout::When,
					pub weight_and_fee: payout::WeightAndFee,
				}
				pub mod payout {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Validator =
						runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type When =
						::core::option::Option<runtime_types::tangle_primitives::TimeUnit>;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Payout {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "payout";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::liquidize`]."]
				pub struct Liquidize {
					pub currency_id: liquidize::CurrencyId,
					pub who: ::std::boxed::Box<liquidize::Who>,
					pub when: liquidize::When,
					pub validator: liquidize::Validator,
					pub amount: liquidize::Amount,
					pub weight_and_fee: liquidize::WeightAndFee,
				}
				pub mod liquidize {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type When =
						::core::option::Option<runtime_types::tangle_primitives::TimeUnit>;
					pub type Validator = ::core::option::Option<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
					pub type Amount = ::core::option::Option<::core::primitive::u128>;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Liquidize {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "liquidize";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::chill`]."]
				pub struct Chill {
					pub currency_id: chill::CurrencyId,
					pub who: ::std::boxed::Box<chill::Who>,
					pub weight_and_fee: chill::WeightAndFee,
				}
				pub mod chill {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Chill {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "chill";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_back`]."]
				pub struct TransferBack {
					pub currency_id: transfer_back::CurrencyId,
					pub from: ::std::boxed::Box<transfer_back::From>,
					pub to: ::std::boxed::Box<transfer_back::To>,
					#[codec(compact)]
					pub amount: transfer_back::Amount,
					pub weight_and_fee: transfer_back::WeightAndFee,
				}
				pub mod transfer_back {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type From = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type To = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Amount = ::core::primitive::u128;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferBack {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "transfer_back";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_to`]."]
				pub struct TransferTo {
					pub currency_id: transfer_to::CurrencyId,
					pub from: ::std::boxed::Box<transfer_to::From>,
					pub to: ::std::boxed::Box<transfer_to::To>,
					#[codec(compact)]
					pub amount: transfer_to::Amount,
				}
				pub mod transfer_to {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type From = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type To = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferTo {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "transfer_to";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::convert_asset`]."]
				pub struct ConvertAsset {
					pub currency_id: convert_asset::CurrencyId,
					pub who: ::std::boxed::Box<convert_asset::Who>,
					#[codec(compact)]
					pub amount: convert_asset::Amount,
					pub if_from_currency: convert_asset::IfFromCurrency,
					pub weight_and_fee: convert_asset::WeightAndFee,
				}
				pub mod convert_asset {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Amount = ::core::primitive::u128;
					pub type IfFromCurrency = ::core::primitive::bool;
					pub type WeightAndFee = ::core::option::Option<(
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ConvertAsset {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "convert_asset";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::increase_token_pool`]."]
				pub struct IncreaseTokenPool {
					pub currency_id: increase_token_pool::CurrencyId,
					#[codec(compact)]
					pub amount: increase_token_pool::Amount,
				}
				pub mod increase_token_pool {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for IncreaseTokenPool {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "increase_token_pool";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::decrease_token_pool`]."]
				pub struct DecreaseTokenPool {
					pub currency_id: decrease_token_pool::CurrencyId,
					#[codec(compact)]
					pub amount: decrease_token_pool::Amount,
				}
				pub mod decrease_token_pool {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for DecreaseTokenPool {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "decrease_token_pool";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_ongoing_time_unit`]."]
				pub struct UpdateOngoingTimeUnit {
					pub currency_id: update_ongoing_time_unit::CurrencyId,
					pub time_unit: update_ongoing_time_unit::TimeUnit,
				}
				pub mod update_ongoing_time_unit {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TimeUnit = runtime_types::tangle_primitives::TimeUnit;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateOngoingTimeUnit {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "update_ongoing_time_unit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::refund_currency_due_unbond`]."]
				pub struct RefundCurrencyDueUnbond {
					pub currency_id: refund_currency_due_unbond::CurrencyId,
				}
				pub mod refund_currency_due_unbond {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				impl ::subxt::blocks::StaticExtrinsic for RefundCurrencyDueUnbond {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "refund_currency_due_unbond";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::supplement_fee_reserve`]."]
				pub struct SupplementFeeReserve {
					pub currency_id: supplement_fee_reserve::CurrencyId,
					pub dest: ::std::boxed::Box<supplement_fee_reserve::Dest>,
				}
				pub mod supplement_fee_reserve {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Dest = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for SupplementFeeReserve {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "supplement_fee_reserve";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::charge_host_fee_and_tune_Lst_exchange_rate`]."]
				pub struct ChargeHostFeeAndTuneLstExchangeRate {
					pub currency_id: charge_host_fee_and_tune_Lst_exchange_rate::CurrencyId,
					#[codec(compact)]
					pub value: charge_host_fee_and_tune_Lst_exchange_rate::Value,
					pub who: charge_host_fee_and_tune_Lst_exchange_rate::Who,
				}
				pub mod charge_host_fee_and_tune_Lst_exchange_rate {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Value = ::core::primitive::u128;
					pub type Who = ::core::option::Option<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ChargeHostFeeAndTuneLstExchangeRate {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "charge_host_fee_and_tune_Lst_exchange_rate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_operate_origin`]."]
				pub struct SetOperateOrigin {
					pub currency_id: set_operate_origin::CurrencyId,
					pub who: set_operate_origin::Who,
				}
				pub mod set_operate_origin {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = ::core::option::Option<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetOperateOrigin {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_operate_origin";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_fee_source`]."]
				pub struct SetFeeSource {
					pub currency_id: set_fee_source::CurrencyId,
					pub who_and_fee: set_fee_source::WhoAndFee,
				}
				pub mod set_fee_source {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type WhoAndFee = ::core::option::Option<(
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetFeeSource {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_fee_source";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_delegator`]."]
				pub struct AddDelegator {
					pub currency_id: add_delegator::CurrencyId,
					#[codec(compact)]
					pub index: add_delegator::Index,
					pub who: ::std::boxed::Box<add_delegator::Who>,
				}
				pub mod add_delegator {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Index = ::core::primitive::u16;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddDelegator {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "add_delegator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_delegator`]."]
				pub struct RemoveDelegator {
					pub currency_id: remove_delegator::CurrencyId,
					pub who: ::std::boxed::Box<remove_delegator::Who>,
				}
				pub mod remove_delegator {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveDelegator {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "remove_delegator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_validator`]."]
				pub struct AddValidator {
					pub currency_id: add_validator::CurrencyId,
					pub who: ::std::boxed::Box<add_validator::Who>,
				}
				pub mod add_validator {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddValidator {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "add_validator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_validator`]."]
				pub struct RemoveValidator {
					pub currency_id: remove_validator::CurrencyId,
					pub who: ::std::boxed::Box<remove_validator::Who>,
				}
				pub mod remove_validator {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveValidator {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "remove_validator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_validators_by_delegator`]."]
				pub struct SetValidatorsByDelegator {
					pub currency_id: set_validators_by_delegator::CurrencyId,
					pub who: ::std::boxed::Box<set_validators_by_delegator::Who>,
					pub validators: set_validators_by_delegator::Validators,
				}
				pub mod set_validators_by_delegator {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Validators = ::std::vec::Vec<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetValidatorsByDelegator {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_validators_by_delegator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_delegator_ledger`]."]
				pub struct SetDelegatorLedger {
					pub currency_id: set_delegator_ledger::CurrencyId,
					pub who: ::std::boxed::Box<set_delegator_ledger::Who>,
					pub ledger: ::std::boxed::Box<set_delegator_ledger::Ledger>,
				}
				pub mod set_delegator_ledger {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Ledger = ::core::option::Option<
						runtime_types::tangle_slp::primitives::Ledger<::core::primitive::u128>,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetDelegatorLedger {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_delegator_ledger";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_minimums_and_maximums`]."]
				pub struct SetMinimumsAndMaximums {
					pub currency_id: set_minimums_and_maximums::CurrencyId,
					pub constraints: set_minimums_and_maximums::Constraints,
				}
				pub mod set_minimums_and_maximums {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Constraints = ::core::option::Option<
						runtime_types::tangle_slp::primitives::MinimumsMaximums<
							::core::primitive::u128,
						>,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMinimumsAndMaximums {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_minimums_and_maximums";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_currency_delays`]."]
				pub struct SetCurrencyDelays {
					pub currency_id: set_currency_delays::CurrencyId,
					pub maybe_delays: set_currency_delays::MaybeDelays,
				}
				pub mod set_currency_delays {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type MaybeDelays =
						::core::option::Option<runtime_types::tangle_slp::primitives::Delays>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetCurrencyDelays {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_currency_delays";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_hosting_fees`]."]
				pub struct SetHostingFees {
					pub currency_id: set_hosting_fees::CurrencyId,
					pub maybe_fee_set: set_hosting_fees::MaybeFeeSet,
				}
				pub mod set_hosting_fees {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type MaybeFeeSet = ::core::option::Option<(
						runtime_types::sp_arithmetic::per_things::Permill,
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetHostingFees {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_hosting_fees";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_currency_tune_exchange_rate_limit`]."]
				pub struct SetCurrencyTuneExchangeRateLimit {
					pub currency_id: set_currency_tune_exchange_rate_limit::CurrencyId,
					pub maybe_tune_exchange_rate_limit:
						set_currency_tune_exchange_rate_limit::MaybeTuneExchangeRateLimit,
				}
				pub mod set_currency_tune_exchange_rate_limit {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type MaybeTuneExchangeRateLimit = ::core::option::Option<(
						::core::primitive::u32,
						runtime_types::sp_arithmetic::per_things::Permill,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetCurrencyTuneExchangeRateLimit {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_currency_tune_exchange_rate_limit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_ongoing_time_unit_update_interval`]."]
				pub struct SetOngoingTimeUnitUpdateInterval {
					pub currency_id: set_ongoing_time_unit_update_interval::CurrencyId,
					pub maybe_interval: set_ongoing_time_unit_update_interval::MaybeInterval,
				}
				pub mod set_ongoing_time_unit_update_interval {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type MaybeInterval = ::core::option::Option<::core::primitive::u32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetOngoingTimeUnitUpdateInterval {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_ongoing_time_unit_update_interval";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_supplement_fee_account_to_whitelist`]."]
				pub struct AddSupplementFeeAccountToWhitelist {
					pub currency_id: add_supplement_fee_account_to_whitelist::CurrencyId,
					pub who: ::std::boxed::Box<add_supplement_fee_account_to_whitelist::Who>,
				}
				pub mod add_supplement_fee_account_to_whitelist {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddSupplementFeeAccountToWhitelist {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "add_supplement_fee_account_to_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_supplement_fee_account_from_whitelist`]."]
				pub struct RemoveSupplementFeeAccountFromWhitelist {
					pub currency_id: remove_supplement_fee_account_from_whitelist::CurrencyId,
					pub who: ::std::boxed::Box<remove_supplement_fee_account_from_whitelist::Who>,
				}
				pub mod remove_supplement_fee_account_from_whitelist {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveSupplementFeeAccountFromWhitelist {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "remove_supplement_fee_account_from_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::confirm_delegator_ledger_query_response`]."]
				pub struct ConfirmDelegatorLedgerQueryResponse {
					pub currency_id: confirm_delegator_ledger_query_response::CurrencyId,
					#[codec(compact)]
					pub query_id: confirm_delegator_ledger_query_response::QueryId,
				}
				pub mod confirm_delegator_ledger_query_response {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type QueryId = ::core::primitive::u64;
				}
				impl ::subxt::blocks::StaticExtrinsic for ConfirmDelegatorLedgerQueryResponse {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "confirm_delegator_ledger_query_response";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::fail_delegator_ledger_query_response`]."]
				pub struct FailDelegatorLedgerQueryResponse {
					pub currency_id: fail_delegator_ledger_query_response::CurrencyId,
					#[codec(compact)]
					pub query_id: fail_delegator_ledger_query_response::QueryId,
				}
				pub mod fail_delegator_ledger_query_response {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type QueryId = ::core::primitive::u64;
				}
				impl ::subxt::blocks::StaticExtrinsic for FailDelegatorLedgerQueryResponse {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "fail_delegator_ledger_query_response";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::confirm_validators_by_delegator_query_response`]."]
				pub struct ConfirmValidatorsByDelegatorQueryResponse {
					pub currency_id: confirm_validators_by_delegator_query_response::CurrencyId,
					#[codec(compact)]
					pub query_id: confirm_validators_by_delegator_query_response::QueryId,
				}
				pub mod confirm_validators_by_delegator_query_response {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type QueryId = ::core::primitive::u64;
				}
				impl ::subxt::blocks::StaticExtrinsic for ConfirmValidatorsByDelegatorQueryResponse {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "confirm_validators_by_delegator_query_response";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::fail_validators_by_delegator_query_response`]."]
				pub struct FailValidatorsByDelegatorQueryResponse {
					pub currency_id: fail_validators_by_delegator_query_response::CurrencyId,
					#[codec(compact)]
					pub query_id: fail_validators_by_delegator_query_response::QueryId,
				}
				pub mod fail_validators_by_delegator_query_response {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type QueryId = ::core::primitive::u64;
				}
				impl ::subxt::blocks::StaticExtrinsic for FailValidatorsByDelegatorQueryResponse {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "fail_validators_by_delegator_query_response";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::confirm_delegator_ledger`]."]
				pub struct ConfirmDelegatorLedger {
					pub query_id: confirm_delegator_ledger::QueryId,
					pub response: confirm_delegator_ledger::Response,
				}
				pub mod confirm_delegator_ledger {
					use super::runtime_types;
					pub type QueryId = ::core::primitive::u64;
					pub type Response = runtime_types::xcm::v3::Response;
				}
				impl ::subxt::blocks::StaticExtrinsic for ConfirmDelegatorLedger {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "confirm_delegator_ledger";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::confirm_validators_by_delegator`]."]
				pub struct ConfirmValidatorsByDelegator {
					pub query_id: confirm_validators_by_delegator::QueryId,
					pub response: confirm_validators_by_delegator::Response,
				}
				pub mod confirm_validators_by_delegator {
					use super::runtime_types;
					pub type QueryId = ::core::primitive::u64;
					pub type Response = runtime_types::xcm::v3::Response;
				}
				impl ::subxt::blocks::StaticExtrinsic for ConfirmValidatorsByDelegator {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "confirm_validators_by_delegator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reset_validators`]."]
				pub struct ResetValidators {
					pub currency_id: reset_validators::CurrencyId,
					pub validator_list: reset_validators::ValidatorList,
				}
				pub mod reset_validators {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type ValidatorList = ::std::vec::Vec<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ResetValidators {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "reset_validators";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_validator_boost_list`]."]
				pub struct SetValidatorBoostList {
					pub currency_id: set_validator_boost_list::CurrencyId,
					pub validator_list: set_validator_boost_list::ValidatorList,
				}
				pub mod set_validator_boost_list {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type ValidatorList = ::std::vec::Vec<
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetValidatorBoostList {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "set_validator_boost_list";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_to_validator_boost_list`]."]
				pub struct AddToValidatorBoostList {
					pub currency_id: add_to_validator_boost_list::CurrencyId,
					pub who: ::std::boxed::Box<add_to_validator_boost_list::Who>,
				}
				pub mod add_to_validator_boost_list {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddToValidatorBoostList {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "add_to_validator_boost_list";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_from_validator_boot_list`]."]
				pub struct RemoveFromValidatorBootList {
					pub currency_id: remove_from_validator_boot_list::CurrencyId,
					pub who: ::std::boxed::Box<remove_from_validator_boot_list::Who>,
				}
				pub mod remove_from_validator_boot_list {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveFromValidatorBootList {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "remove_from_validator_boot_list";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::convert_treasury_Lst`]."]
				pub struct ConvertTreasuryLst {
					pub Lst: convert_treasury_Lst::Lst,
					pub amount: convert_treasury_Lst::Amount,
				}
				pub mod convert_treasury_Lst {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for ConvertTreasuryLst {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "convert_treasury_Lst";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::clean_outdated_validator_boost_list`]."]
				pub struct CleanOutdatedValidatorBoostList {
					pub token: clean_outdated_validator_boost_list::Token,
					pub page: clean_outdated_validator_boost_list::Page,
				}
				pub mod clean_outdated_validator_boost_list {
					use super::runtime_types;
					pub type Token = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Page = ::core::primitive::u8;
				}
				impl ::subxt::blocks::StaticExtrinsic for CleanOutdatedValidatorBoostList {
					const PALLET: &'static str = "Slp";
					const CALL: &'static str = "clean_outdated_validator_boost_list";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::initialize_delegator`]."]
				pub fn initialize_delegator(
					&self,
					currency_id: types::initialize_delegator::CurrencyId,
					delegator_location: types::initialize_delegator::DelegatorLocation,
				) -> ::subxt::tx::Payload<types::InitializeDelegator> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"initialize_delegator",
						types::InitializeDelegator {
							currency_id,
							delegator_location: ::std::boxed::Box::new(delegator_location),
						},
						[
							248u8, 243u8, 209u8, 182u8, 17u8, 11u8, 165u8, 158u8, 80u8, 168u8,
							198u8, 246u8, 73u8, 255u8, 17u8, 3u8, 0u8, 187u8, 40u8, 38u8, 233u8,
							244u8, 247u8, 132u8, 5u8, 43u8, 242u8, 252u8, 82u8, 122u8, 185u8, 97u8,
						],
					)
				}
				#[doc = "See [`Pallet::bond`]."]
				pub fn bond(
					&self,
					currency_id: types::bond::CurrencyId,
					who: types::bond::Who,
					amount: types::bond::Amount,
					validator: types::bond::Validator,
					weight_and_fee: types::bond::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Bond> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"bond",
						types::Bond {
							currency_id,
							who: ::std::boxed::Box::new(who),
							amount,
							validator,
							weight_and_fee,
						},
						[
							86u8, 73u8, 252u8, 240u8, 158u8, 157u8, 8u8, 217u8, 240u8, 152u8, 69u8,
							62u8, 113u8, 182u8, 143u8, 43u8, 236u8, 108u8, 16u8, 48u8, 115u8,
							169u8, 130u8, 203u8, 18u8, 10u8, 50u8, 250u8, 227u8, 56u8, 114u8,
							127u8,
						],
					)
				}
				#[doc = "See [`Pallet::bond_extra`]."]
				pub fn bond_extra(
					&self,
					currency_id: types::bond_extra::CurrencyId,
					who: types::bond_extra::Who,
					validator: types::bond_extra::Validator,
					amount: types::bond_extra::Amount,
					weight_and_fee: types::bond_extra::WeightAndFee,
				) -> ::subxt::tx::Payload<types::BondExtra> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"bond_extra",
						types::BondExtra {
							currency_id,
							who: ::std::boxed::Box::new(who),
							validator,
							amount,
							weight_and_fee,
						},
						[
							169u8, 163u8, 108u8, 66u8, 221u8, 196u8, 131u8, 58u8, 161u8, 14u8,
							176u8, 98u8, 35u8, 110u8, 72u8, 135u8, 179u8, 241u8, 119u8, 191u8,
							122u8, 69u8, 37u8, 30u8, 71u8, 182u8, 0u8, 41u8, 70u8, 117u8, 118u8,
							233u8,
						],
					)
				}
				#[doc = "See [`Pallet::unbond`]."]
				pub fn unbond(
					&self,
					currency_id: types::unbond::CurrencyId,
					who: types::unbond::Who,
					validator: types::unbond::Validator,
					amount: types::unbond::Amount,
					weight_and_fee: types::unbond::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Unbond> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"unbond",
						types::Unbond {
							currency_id,
							who: ::std::boxed::Box::new(who),
							validator,
							amount,
							weight_and_fee,
						},
						[
							82u8, 106u8, 189u8, 11u8, 90u8, 66u8, 22u8, 64u8, 57u8, 29u8, 86u8,
							184u8, 96u8, 191u8, 99u8, 76u8, 193u8, 205u8, 126u8, 161u8, 93u8, 66u8,
							212u8, 115u8, 199u8, 19u8, 141u8, 171u8, 168u8, 138u8, 102u8, 201u8,
						],
					)
				}
				#[doc = "See [`Pallet::unbond_all`]."]
				pub fn unbond_all(
					&self,
					currency_id: types::unbond_all::CurrencyId,
					who: types::unbond_all::Who,
					weight_and_fee: types::unbond_all::WeightAndFee,
				) -> ::subxt::tx::Payload<types::UnbondAll> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"unbond_all",
						types::UnbondAll {
							currency_id,
							who: ::std::boxed::Box::new(who),
							weight_and_fee,
						},
						[
							155u8, 225u8, 43u8, 153u8, 53u8, 92u8, 191u8, 210u8, 37u8, 19u8, 173u8,
							115u8, 190u8, 102u8, 223u8, 15u8, 226u8, 160u8, 112u8, 12u8, 215u8,
							41u8, 14u8, 13u8, 24u8, 172u8, 251u8, 93u8, 56u8, 129u8, 203u8, 207u8,
						],
					)
				}
				#[doc = "See [`Pallet::rebond`]."]
				pub fn rebond(
					&self,
					currency_id: types::rebond::CurrencyId,
					who: types::rebond::Who,
					validator: types::rebond::Validator,
					amount: types::rebond::Amount,
					weight_and_fee: types::rebond::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Rebond> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"rebond",
						types::Rebond {
							currency_id,
							who: ::std::boxed::Box::new(who),
							validator,
							amount,
							weight_and_fee,
						},
						[
							18u8, 118u8, 40u8, 120u8, 65u8, 124u8, 122u8, 103u8, 167u8, 134u8,
							161u8, 81u8, 144u8, 232u8, 64u8, 43u8, 145u8, 216u8, 83u8, 206u8,
							209u8, 58u8, 76u8, 37u8, 222u8, 168u8, 125u8, 57u8, 118u8, 36u8, 143u8,
							183u8,
						],
					)
				}
				#[doc = "See [`Pallet::delegate`]."]
				pub fn delegate(
					&self,
					currency_id: types::delegate::CurrencyId,
					who: types::delegate::Who,
					targets: types::delegate::Targets,
					weight_and_fee: types::delegate::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Delegate> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"delegate",
						types::Delegate {
							currency_id,
							who: ::std::boxed::Box::new(who),
							targets,
							weight_and_fee,
						},
						[
							134u8, 245u8, 122u8, 228u8, 44u8, 158u8, 217u8, 30u8, 43u8, 190u8,
							226u8, 69u8, 59u8, 171u8, 47u8, 4u8, 128u8, 177u8, 248u8, 18u8, 22u8,
							208u8, 233u8, 144u8, 75u8, 176u8, 90u8, 174u8, 107u8, 247u8, 93u8,
							220u8,
						],
					)
				}
				#[doc = "See [`Pallet::undelegate`]."]
				pub fn undelegate(
					&self,
					currency_id: types::undelegate::CurrencyId,
					who: types::undelegate::Who,
					targets: types::undelegate::Targets,
					weight_and_fee: types::undelegate::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Undelegate> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"undelegate",
						types::Undelegate {
							currency_id,
							who: ::std::boxed::Box::new(who),
							targets,
							weight_and_fee,
						},
						[
							81u8, 96u8, 21u8, 201u8, 32u8, 215u8, 160u8, 52u8, 243u8, 16u8, 166u8,
							157u8, 84u8, 153u8, 214u8, 110u8, 66u8, 238u8, 96u8, 34u8, 172u8, 31u8,
							244u8, 211u8, 97u8, 228u8, 43u8, 214u8, 88u8, 64u8, 243u8, 185u8,
						],
					)
				}
				#[doc = "See [`Pallet::redelegate`]."]
				pub fn redelegate(
					&self,
					currency_id: types::redelegate::CurrencyId,
					who: types::redelegate::Who,
					targets: types::redelegate::Targets,
					weight_and_fee: types::redelegate::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Redelegate> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"redelegate",
						types::Redelegate {
							currency_id,
							who: ::std::boxed::Box::new(who),
							targets,
							weight_and_fee,
						},
						[
							189u8, 62u8, 98u8, 91u8, 129u8, 104u8, 127u8, 236u8, 163u8, 236u8,
							204u8, 252u8, 221u8, 161u8, 118u8, 212u8, 117u8, 125u8, 255u8, 105u8,
							81u8, 114u8, 163u8, 140u8, 7u8, 93u8, 170u8, 111u8, 74u8, 121u8, 30u8,
							208u8,
						],
					)
				}
				#[doc = "See [`Pallet::payout`]."]
				pub fn payout(
					&self,
					currency_id: types::payout::CurrencyId,
					who: types::payout::Who,
					validator: types::payout::Validator,
					when: types::payout::When,
					weight_and_fee: types::payout::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Payout> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"payout",
						types::Payout {
							currency_id,
							who: ::std::boxed::Box::new(who),
							validator: ::std::boxed::Box::new(validator),
							when,
							weight_and_fee,
						},
						[
							181u8, 241u8, 242u8, 155u8, 16u8, 123u8, 13u8, 67u8, 83u8, 113u8,
							227u8, 9u8, 100u8, 85u8, 123u8, 225u8, 231u8, 147u8, 135u8, 84u8, 41u8,
							240u8, 146u8, 210u8, 70u8, 56u8, 242u8, 189u8, 98u8, 103u8, 102u8,
							253u8,
						],
					)
				}
				#[doc = "See [`Pallet::liquidize`]."]
				pub fn liquidize(
					&self,
					currency_id: types::liquidize::CurrencyId,
					who: types::liquidize::Who,
					when: types::liquidize::When,
					validator: types::liquidize::Validator,
					amount: types::liquidize::Amount,
					weight_and_fee: types::liquidize::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Liquidize> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"liquidize",
						types::Liquidize {
							currency_id,
							who: ::std::boxed::Box::new(who),
							when,
							validator,
							amount,
							weight_and_fee,
						},
						[
							66u8, 70u8, 167u8, 141u8, 103u8, 115u8, 160u8, 13u8, 200u8, 180u8,
							27u8, 57u8, 251u8, 229u8, 123u8, 245u8, 16u8, 59u8, 102u8, 179u8,
							211u8, 53u8, 29u8, 53u8, 154u8, 111u8, 20u8, 131u8, 131u8, 147u8, 44u8,
							45u8,
						],
					)
				}
				#[doc = "See [`Pallet::chill`]."]
				pub fn chill(
					&self,
					currency_id: types::chill::CurrencyId,
					who: types::chill::Who,
					weight_and_fee: types::chill::WeightAndFee,
				) -> ::subxt::tx::Payload<types::Chill> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"chill",
						types::Chill {
							currency_id,
							who: ::std::boxed::Box::new(who),
							weight_and_fee,
						},
						[
							93u8, 105u8, 240u8, 254u8, 39u8, 172u8, 243u8, 19u8, 183u8, 43u8, 66u8,
							8u8, 206u8, 251u8, 144u8, 137u8, 229u8, 66u8, 218u8, 36u8, 178u8,
							156u8, 191u8, 201u8, 157u8, 172u8, 142u8, 244u8, 87u8, 120u8, 132u8,
							147u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_back`]."]
				pub fn transfer_back(
					&self,
					currency_id: types::transfer_back::CurrencyId,
					from: types::transfer_back::From,
					to: types::transfer_back::To,
					amount: types::transfer_back::Amount,
					weight_and_fee: types::transfer_back::WeightAndFee,
				) -> ::subxt::tx::Payload<types::TransferBack> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"transfer_back",
						types::TransferBack {
							currency_id,
							from: ::std::boxed::Box::new(from),
							to: ::std::boxed::Box::new(to),
							amount,
							weight_and_fee,
						},
						[
							37u8, 184u8, 118u8, 148u8, 240u8, 235u8, 158u8, 80u8, 51u8, 103u8,
							123u8, 72u8, 129u8, 141u8, 71u8, 242u8, 233u8, 167u8, 228u8, 109u8,
							40u8, 82u8, 245u8, 34u8, 64u8, 250u8, 147u8, 18u8, 255u8, 22u8, 222u8,
							46u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_to`]."]
				pub fn transfer_to(
					&self,
					currency_id: types::transfer_to::CurrencyId,
					from: types::transfer_to::From,
					to: types::transfer_to::To,
					amount: types::transfer_to::Amount,
				) -> ::subxt::tx::Payload<types::TransferTo> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"transfer_to",
						types::TransferTo {
							currency_id,
							from: ::std::boxed::Box::new(from),
							to: ::std::boxed::Box::new(to),
							amount,
						},
						[
							149u8, 81u8, 181u8, 72u8, 196u8, 118u8, 27u8, 37u8, 9u8, 83u8, 152u8,
							152u8, 2u8, 5u8, 57u8, 82u8, 51u8, 79u8, 32u8, 99u8, 189u8, 176u8,
							67u8, 148u8, 223u8, 200u8, 222u8, 196u8, 106u8, 215u8, 2u8, 149u8,
						],
					)
				}
				#[doc = "See [`Pallet::convert_asset`]."]
				pub fn convert_asset(
					&self,
					currency_id: types::convert_asset::CurrencyId,
					who: types::convert_asset::Who,
					amount: types::convert_asset::Amount,
					if_from_currency: types::convert_asset::IfFromCurrency,
					weight_and_fee: types::convert_asset::WeightAndFee,
				) -> ::subxt::tx::Payload<types::ConvertAsset> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"convert_asset",
						types::ConvertAsset {
							currency_id,
							who: ::std::boxed::Box::new(who),
							amount,
							if_from_currency,
							weight_and_fee,
						},
						[
							220u8, 38u8, 61u8, 121u8, 118u8, 156u8, 21u8, 238u8, 67u8, 33u8, 161u8,
							141u8, 149u8, 195u8, 7u8, 61u8, 89u8, 67u8, 46u8, 62u8, 43u8, 166u8,
							167u8, 183u8, 22u8, 62u8, 229u8, 11u8, 138u8, 143u8, 249u8, 187u8,
						],
					)
				}
				#[doc = "See [`Pallet::increase_token_pool`]."]
				pub fn increase_token_pool(
					&self,
					currency_id: types::increase_token_pool::CurrencyId,
					amount: types::increase_token_pool::Amount,
				) -> ::subxt::tx::Payload<types::IncreaseTokenPool> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"increase_token_pool",
						types::IncreaseTokenPool { currency_id, amount },
						[
							110u8, 99u8, 218u8, 76u8, 71u8, 6u8, 44u8, 108u8, 168u8, 56u8, 231u8,
							46u8, 148u8, 20u8, 111u8, 101u8, 228u8, 15u8, 133u8, 10u8, 191u8, 18u8,
							122u8, 68u8, 88u8, 83u8, 110u8, 154u8, 241u8, 44u8, 77u8, 254u8,
						],
					)
				}
				#[doc = "See [`Pallet::decrease_token_pool`]."]
				pub fn decrease_token_pool(
					&self,
					currency_id: types::decrease_token_pool::CurrencyId,
					amount: types::decrease_token_pool::Amount,
				) -> ::subxt::tx::Payload<types::DecreaseTokenPool> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"decrease_token_pool",
						types::DecreaseTokenPool { currency_id, amount },
						[
							48u8, 230u8, 218u8, 219u8, 27u8, 48u8, 132u8, 73u8, 11u8, 18u8, 125u8,
							24u8, 229u8, 17u8, 139u8, 49u8, 129u8, 67u8, 42u8, 115u8, 36u8, 55u8,
							63u8, 87u8, 18u8, 214u8, 95u8, 199u8, 141u8, 28u8, 212u8, 153u8,
						],
					)
				}
				#[doc = "See [`Pallet::update_ongoing_time_unit`]."]
				pub fn update_ongoing_time_unit(
					&self,
					currency_id: types::update_ongoing_time_unit::CurrencyId,
					time_unit: types::update_ongoing_time_unit::TimeUnit,
				) -> ::subxt::tx::Payload<types::UpdateOngoingTimeUnit> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"update_ongoing_time_unit",
						types::UpdateOngoingTimeUnit { currency_id, time_unit },
						[
							90u8, 230u8, 158u8, 46u8, 198u8, 248u8, 82u8, 234u8, 94u8, 143u8,
							137u8, 178u8, 171u8, 203u8, 111u8, 41u8, 222u8, 18u8, 148u8, 2u8,
							144u8, 113u8, 123u8, 31u8, 48u8, 93u8, 103u8, 227u8, 113u8, 105u8,
							150u8, 62u8,
						],
					)
				}
				#[doc = "See [`Pallet::refund_currency_due_unbond`]."]
				pub fn refund_currency_due_unbond(
					&self,
					currency_id: types::refund_currency_due_unbond::CurrencyId,
				) -> ::subxt::tx::Payload<types::RefundCurrencyDueUnbond> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"refund_currency_due_unbond",
						types::RefundCurrencyDueUnbond { currency_id },
						[
							248u8, 108u8, 215u8, 18u8, 74u8, 0u8, 20u8, 224u8, 160u8, 235u8, 186u8,
							249u8, 4u8, 130u8, 171u8, 84u8, 35u8, 123u8, 244u8, 94u8, 82u8, 244u8,
							230u8, 119u8, 0u8, 8u8, 164u8, 6u8, 145u8, 60u8, 191u8, 74u8,
						],
					)
				}
				#[doc = "See [`Pallet::supplement_fee_reserve`]."]
				pub fn supplement_fee_reserve(
					&self,
					currency_id: types::supplement_fee_reserve::CurrencyId,
					dest: types::supplement_fee_reserve::Dest,
				) -> ::subxt::tx::Payload<types::SupplementFeeReserve> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"supplement_fee_reserve",
						types::SupplementFeeReserve {
							currency_id,
							dest: ::std::boxed::Box::new(dest),
						},
						[
							224u8, 240u8, 185u8, 184u8, 246u8, 171u8, 155u8, 163u8, 9u8, 140u8,
							60u8, 56u8, 39u8, 202u8, 80u8, 148u8, 93u8, 40u8, 115u8, 146u8, 116u8,
							18u8, 170u8, 73u8, 96u8, 143u8, 32u8, 247u8, 111u8, 175u8, 62u8, 200u8,
						],
					)
				}
				#[doc = "See [`Pallet::charge_host_fee_and_tune_Lst_exchange_rate`]."]
				pub fn charge_host_fee_and_tune_Lst_exchange_rate(
					&self,
					currency_id: types::charge_host_fee_and_tune_Lst_exchange_rate::CurrencyId,
					value: types::charge_host_fee_and_tune_Lst_exchange_rate::Value,
					who: types::charge_host_fee_and_tune_Lst_exchange_rate::Who,
				) -> ::subxt::tx::Payload<types::ChargeHostFeeAndTuneLstExchangeRate> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"charge_host_fee_and_tune_Lst_exchange_rate",
						types::ChargeHostFeeAndTuneLstExchangeRate { currency_id, value, who },
						[
							166u8, 42u8, 183u8, 158u8, 51u8, 152u8, 144u8, 51u8, 138u8, 148u8,
							50u8, 60u8, 220u8, 209u8, 10u8, 43u8, 79u8, 164u8, 170u8, 120u8, 24u8,
							204u8, 252u8, 175u8, 91u8, 113u8, 211u8, 244u8, 203u8, 251u8, 6u8,
							148u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_operate_origin`]."]
				pub fn set_operate_origin(
					&self,
					currency_id: types::set_operate_origin::CurrencyId,
					who: types::set_operate_origin::Who,
				) -> ::subxt::tx::Payload<types::SetOperateOrigin> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_operate_origin",
						types::SetOperateOrigin { currency_id, who },
						[
							44u8, 243u8, 113u8, 215u8, 143u8, 117u8, 67u8, 233u8, 98u8, 156u8, 4u8,
							109u8, 41u8, 107u8, 48u8, 103u8, 240u8, 199u8, 112u8, 146u8, 171u8,
							60u8, 145u8, 168u8, 48u8, 111u8, 239u8, 79u8, 21u8, 110u8, 116u8,
							141u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_fee_source`]."]
				pub fn set_fee_source(
					&self,
					currency_id: types::set_fee_source::CurrencyId,
					who_and_fee: types::set_fee_source::WhoAndFee,
				) -> ::subxt::tx::Payload<types::SetFeeSource> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_fee_source",
						types::SetFeeSource { currency_id, who_and_fee },
						[
							10u8, 117u8, 230u8, 180u8, 151u8, 243u8, 210u8, 160u8, 10u8, 38u8,
							49u8, 67u8, 232u8, 153u8, 49u8, 104u8, 132u8, 74u8, 54u8, 33u8, 4u8,
							102u8, 193u8, 232u8, 26u8, 236u8, 232u8, 226u8, 122u8, 201u8, 211u8,
							85u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_delegator`]."]
				pub fn add_delegator(
					&self,
					currency_id: types::add_delegator::CurrencyId,
					index: types::add_delegator::Index,
					who: types::add_delegator::Who,
				) -> ::subxt::tx::Payload<types::AddDelegator> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"add_delegator",
						types::AddDelegator {
							currency_id,
							index,
							who: ::std::boxed::Box::new(who),
						},
						[
							149u8, 35u8, 241u8, 229u8, 22u8, 75u8, 68u8, 61u8, 209u8, 235u8, 127u8,
							65u8, 54u8, 137u8, 184u8, 252u8, 180u8, 230u8, 19u8, 70u8, 151u8, 6u8,
							184u8, 17u8, 106u8, 73u8, 164u8, 96u8, 200u8, 77u8, 48u8, 163u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_delegator`]."]
				pub fn remove_delegator(
					&self,
					currency_id: types::remove_delegator::CurrencyId,
					who: types::remove_delegator::Who,
				) -> ::subxt::tx::Payload<types::RemoveDelegator> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"remove_delegator",
						types::RemoveDelegator { currency_id, who: ::std::boxed::Box::new(who) },
						[
							33u8, 89u8, 129u8, 76u8, 62u8, 125u8, 69u8, 223u8, 109u8, 85u8, 82u8,
							247u8, 73u8, 119u8, 125u8, 163u8, 20u8, 134u8, 151u8, 12u8, 49u8,
							203u8, 47u8, 144u8, 153u8, 50u8, 174u8, 121u8, 53u8, 118u8, 140u8,
							64u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_validator`]."]
				pub fn add_validator(
					&self,
					currency_id: types::add_validator::CurrencyId,
					who: types::add_validator::Who,
				) -> ::subxt::tx::Payload<types::AddValidator> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"add_validator",
						types::AddValidator { currency_id, who: ::std::boxed::Box::new(who) },
						[
							167u8, 44u8, 96u8, 220u8, 199u8, 77u8, 232u8, 30u8, 13u8, 39u8, 207u8,
							243u8, 217u8, 6u8, 2u8, 215u8, 34u8, 78u8, 17u8, 8u8, 170u8, 233u8,
							237u8, 200u8, 97u8, 247u8, 40u8, 242u8, 47u8, 166u8, 177u8, 117u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_validator`]."]
				pub fn remove_validator(
					&self,
					currency_id: types::remove_validator::CurrencyId,
					who: types::remove_validator::Who,
				) -> ::subxt::tx::Payload<types::RemoveValidator> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"remove_validator",
						types::RemoveValidator { currency_id, who: ::std::boxed::Box::new(who) },
						[
							200u8, 202u8, 124u8, 68u8, 201u8, 185u8, 155u8, 174u8, 160u8, 107u8,
							15u8, 217u8, 243u8, 21u8, 161u8, 133u8, 115u8, 152u8, 213u8, 250u8,
							7u8, 103u8, 238u8, 44u8, 20u8, 2u8, 174u8, 219u8, 96u8, 150u8, 247u8,
							243u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_validators_by_delegator`]."]
				pub fn set_validators_by_delegator(
					&self,
					currency_id: types::set_validators_by_delegator::CurrencyId,
					who: types::set_validators_by_delegator::Who,
					validators: types::set_validators_by_delegator::Validators,
				) -> ::subxt::tx::Payload<types::SetValidatorsByDelegator> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_validators_by_delegator",
						types::SetValidatorsByDelegator {
							currency_id,
							who: ::std::boxed::Box::new(who),
							validators,
						},
						[
							181u8, 95u8, 70u8, 182u8, 173u8, 132u8, 138u8, 15u8, 106u8, 250u8,
							197u8, 254u8, 165u8, 33u8, 119u8, 8u8, 159u8, 250u8, 238u8, 164u8,
							147u8, 169u8, 139u8, 115u8, 63u8, 45u8, 236u8, 168u8, 174u8, 227u8,
							36u8, 51u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_delegator_ledger`]."]
				pub fn set_delegator_ledger(
					&self,
					currency_id: types::set_delegator_ledger::CurrencyId,
					who: types::set_delegator_ledger::Who,
					ledger: types::set_delegator_ledger::Ledger,
				) -> ::subxt::tx::Payload<types::SetDelegatorLedger> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_delegator_ledger",
						types::SetDelegatorLedger {
							currency_id,
							who: ::std::boxed::Box::new(who),
							ledger: ::std::boxed::Box::new(ledger),
						},
						[
							171u8, 82u8, 226u8, 191u8, 148u8, 185u8, 243u8, 166u8, 156u8, 78u8,
							6u8, 239u8, 233u8, 165u8, 55u8, 131u8, 14u8, 51u8, 126u8, 70u8, 67u8,
							0u8, 118u8, 116u8, 29u8, 223u8, 23u8, 199u8, 176u8, 179u8, 47u8, 50u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_minimums_and_maximums`]."]
				pub fn set_minimums_and_maximums(
					&self,
					currency_id: types::set_minimums_and_maximums::CurrencyId,
					constraints: types::set_minimums_and_maximums::Constraints,
				) -> ::subxt::tx::Payload<types::SetMinimumsAndMaximums> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_minimums_and_maximums",
						types::SetMinimumsAndMaximums { currency_id, constraints },
						[
							183u8, 216u8, 202u8, 3u8, 30u8, 164u8, 189u8, 3u8, 22u8, 50u8, 251u8,
							214u8, 19u8, 141u8, 144u8, 152u8, 35u8, 134u8, 161u8, 141u8, 172u8,
							72u8, 137u8, 111u8, 93u8, 187u8, 114u8, 151u8, 234u8, 7u8, 146u8, 50u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_currency_delays`]."]
				pub fn set_currency_delays(
					&self,
					currency_id: types::set_currency_delays::CurrencyId,
					maybe_delays: types::set_currency_delays::MaybeDelays,
				) -> ::subxt::tx::Payload<types::SetCurrencyDelays> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_currency_delays",
						types::SetCurrencyDelays { currency_id, maybe_delays },
						[
							6u8, 176u8, 60u8, 40u8, 240u8, 32u8, 136u8, 118u8, 181u8, 156u8, 241u8,
							200u8, 13u8, 101u8, 240u8, 209u8, 14u8, 247u8, 81u8, 253u8, 196u8,
							91u8, 232u8, 142u8, 131u8, 6u8, 182u8, 77u8, 202u8, 179u8, 166u8, 55u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_hosting_fees`]."]
				pub fn set_hosting_fees(
					&self,
					currency_id: types::set_hosting_fees::CurrencyId,
					maybe_fee_set: types::set_hosting_fees::MaybeFeeSet,
				) -> ::subxt::tx::Payload<types::SetHostingFees> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_hosting_fees",
						types::SetHostingFees { currency_id, maybe_fee_set },
						[
							54u8, 104u8, 203u8, 160u8, 219u8, 57u8, 124u8, 216u8, 10u8, 122u8,
							107u8, 32u8, 137u8, 162u8, 199u8, 248u8, 57u8, 167u8, 103u8, 255u8,
							64u8, 129u8, 140u8, 22u8, 61u8, 34u8, 140u8, 211u8, 158u8, 255u8,
							131u8, 210u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_currency_tune_exchange_rate_limit`]."]
				pub fn set_currency_tune_exchange_rate_limit(
					&self,
					currency_id: types::set_currency_tune_exchange_rate_limit::CurrencyId,
					maybe_tune_exchange_rate_limit : types :: set_currency_tune_exchange_rate_limit :: MaybeTuneExchangeRateLimit,
				) -> ::subxt::tx::Payload<types::SetCurrencyTuneExchangeRateLimit> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_currency_tune_exchange_rate_limit",
						types::SetCurrencyTuneExchangeRateLimit {
							currency_id,
							maybe_tune_exchange_rate_limit,
						},
						[
							8u8, 163u8, 16u8, 234u8, 65u8, 129u8, 129u8, 72u8, 115u8, 17u8, 54u8,
							198u8, 87u8, 174u8, 128u8, 74u8, 77u8, 91u8, 105u8, 183u8, 173u8,
							211u8, 160u8, 232u8, 87u8, 186u8, 78u8, 49u8, 129u8, 98u8, 234u8,
							178u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_ongoing_time_unit_update_interval`]."]
				pub fn set_ongoing_time_unit_update_interval(
					&self,
					currency_id: types::set_ongoing_time_unit_update_interval::CurrencyId,
					maybe_interval: types::set_ongoing_time_unit_update_interval::MaybeInterval,
				) -> ::subxt::tx::Payload<types::SetOngoingTimeUnitUpdateInterval> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_ongoing_time_unit_update_interval",
						types::SetOngoingTimeUnitUpdateInterval { currency_id, maybe_interval },
						[
							190u8, 191u8, 121u8, 42u8, 210u8, 73u8, 10u8, 135u8, 182u8, 211u8,
							162u8, 137u8, 82u8, 176u8, 54u8, 146u8, 18u8, 174u8, 126u8, 167u8,
							139u8, 103u8, 197u8, 81u8, 254u8, 106u8, 42u8, 193u8, 138u8, 175u8,
							18u8, 132u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_supplement_fee_account_to_whitelist`]."]
				pub fn add_supplement_fee_account_to_whitelist(
					&self,
					currency_id: types::add_supplement_fee_account_to_whitelist::CurrencyId,
					who: types::add_supplement_fee_account_to_whitelist::Who,
				) -> ::subxt::tx::Payload<types::AddSupplementFeeAccountToWhitelist> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"add_supplement_fee_account_to_whitelist",
						types::AddSupplementFeeAccountToWhitelist {
							currency_id,
							who: ::std::boxed::Box::new(who),
						},
						[
							238u8, 110u8, 220u8, 141u8, 183u8, 154u8, 254u8, 65u8, 26u8, 247u8,
							67u8, 175u8, 166u8, 63u8, 5u8, 14u8, 203u8, 21u8, 167u8, 202u8, 4u8,
							234u8, 20u8, 206u8, 41u8, 62u8, 243u8, 254u8, 139u8, 147u8, 174u8,
							67u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_supplement_fee_account_from_whitelist`]."]
				pub fn remove_supplement_fee_account_from_whitelist(
					&self,
					currency_id: types::remove_supplement_fee_account_from_whitelist::CurrencyId,
					who: types::remove_supplement_fee_account_from_whitelist::Who,
				) -> ::subxt::tx::Payload<types::RemoveSupplementFeeAccountFromWhitelist> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"remove_supplement_fee_account_from_whitelist",
						types::RemoveSupplementFeeAccountFromWhitelist {
							currency_id,
							who: ::std::boxed::Box::new(who),
						},
						[
							83u8, 148u8, 205u8, 193u8, 70u8, 172u8, 219u8, 51u8, 62u8, 34u8, 65u8,
							233u8, 241u8, 103u8, 55u8, 178u8, 56u8, 71u8, 137u8, 235u8, 30u8,
							185u8, 217u8, 191u8, 184u8, 176u8, 81u8, 242u8, 221u8, 229u8, 199u8,
							228u8,
						],
					)
				}
				#[doc = "See [`Pallet::confirm_delegator_ledger_query_response`]."]
				pub fn confirm_delegator_ledger_query_response(
					&self,
					currency_id: types::confirm_delegator_ledger_query_response::CurrencyId,
					query_id: types::confirm_delegator_ledger_query_response::QueryId,
				) -> ::subxt::tx::Payload<types::ConfirmDelegatorLedgerQueryResponse> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"confirm_delegator_ledger_query_response",
						types::ConfirmDelegatorLedgerQueryResponse { currency_id, query_id },
						[
							230u8, 128u8, 19u8, 166u8, 64u8, 62u8, 252u8, 44u8, 131u8, 125u8,
							148u8, 164u8, 65u8, 209u8, 147u8, 169u8, 134u8, 67u8, 207u8, 87u8,
							153u8, 121u8, 78u8, 136u8, 223u8, 214u8, 51u8, 153u8, 217u8, 199u8,
							123u8, 217u8,
						],
					)
				}
				#[doc = "See [`Pallet::fail_delegator_ledger_query_response`]."]
				pub fn fail_delegator_ledger_query_response(
					&self,
					currency_id: types::fail_delegator_ledger_query_response::CurrencyId,
					query_id: types::fail_delegator_ledger_query_response::QueryId,
				) -> ::subxt::tx::Payload<types::FailDelegatorLedgerQueryResponse> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"fail_delegator_ledger_query_response",
						types::FailDelegatorLedgerQueryResponse { currency_id, query_id },
						[
							155u8, 181u8, 173u8, 132u8, 154u8, 252u8, 66u8, 98u8, 244u8, 84u8,
							181u8, 156u8, 108u8, 215u8, 18u8, 252u8, 51u8, 150u8, 214u8, 161u8,
							150u8, 194u8, 147u8, 193u8, 10u8, 148u8, 68u8, 35u8, 226u8, 191u8,
							158u8, 25u8,
						],
					)
				}
				#[doc = "See [`Pallet::confirm_validators_by_delegator_query_response`]."]
				pub fn confirm_validators_by_delegator_query_response(
					&self,
					currency_id: types::confirm_validators_by_delegator_query_response::CurrencyId,
					query_id: types::confirm_validators_by_delegator_query_response::QueryId,
				) -> ::subxt::tx::Payload<types::ConfirmValidatorsByDelegatorQueryResponse> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"confirm_validators_by_delegator_query_response",
						types::ConfirmValidatorsByDelegatorQueryResponse { currency_id, query_id },
						[
							113u8, 142u8, 131u8, 113u8, 13u8, 131u8, 207u8, 112u8, 50u8, 139u8,
							223u8, 29u8, 153u8, 15u8, 111u8, 207u8, 33u8, 12u8, 104u8, 245u8,
							101u8, 186u8, 85u8, 21u8, 125u8, 3u8, 241u8, 213u8, 241u8, 223u8,
							205u8, 10u8,
						],
					)
				}
				#[doc = "See [`Pallet::fail_validators_by_delegator_query_response`]."]
				pub fn fail_validators_by_delegator_query_response(
					&self,
					currency_id: types::fail_validators_by_delegator_query_response::CurrencyId,
					query_id: types::fail_validators_by_delegator_query_response::QueryId,
				) -> ::subxt::tx::Payload<types::FailValidatorsByDelegatorQueryResponse> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"fail_validators_by_delegator_query_response",
						types::FailValidatorsByDelegatorQueryResponse { currency_id, query_id },
						[
							50u8, 6u8, 223u8, 109u8, 115u8, 190u8, 184u8, 147u8, 232u8, 74u8,
							200u8, 15u8, 177u8, 42u8, 4u8, 90u8, 164u8, 225u8, 71u8, 125u8, 48u8,
							219u8, 179u8, 123u8, 155u8, 131u8, 204u8, 101u8, 5u8, 198u8, 39u8,
							216u8,
						],
					)
				}
				#[doc = "See [`Pallet::confirm_delegator_ledger`]."]
				pub fn confirm_delegator_ledger(
					&self,
					query_id: types::confirm_delegator_ledger::QueryId,
					response: types::confirm_delegator_ledger::Response,
				) -> ::subxt::tx::Payload<types::ConfirmDelegatorLedger> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"confirm_delegator_ledger",
						types::ConfirmDelegatorLedger { query_id, response },
						[
							62u8, 246u8, 80u8, 156u8, 142u8, 226u8, 80u8, 220u8, 230u8, 143u8,
							30u8, 162u8, 17u8, 168u8, 45u8, 170u8, 0u8, 105u8, 186u8, 21u8, 77u8,
							36u8, 87u8, 99u8, 13u8, 112u8, 197u8, 22u8, 188u8, 57u8, 162u8, 88u8,
						],
					)
				}
				#[doc = "See [`Pallet::confirm_validators_by_delegator`]."]
				pub fn confirm_validators_by_delegator(
					&self,
					query_id: types::confirm_validators_by_delegator::QueryId,
					response: types::confirm_validators_by_delegator::Response,
				) -> ::subxt::tx::Payload<types::ConfirmValidatorsByDelegator> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"confirm_validators_by_delegator",
						types::ConfirmValidatorsByDelegator { query_id, response },
						[
							118u8, 232u8, 75u8, 50u8, 161u8, 213u8, 31u8, 176u8, 119u8, 229u8, 4u8,
							229u8, 92u8, 9u8, 129u8, 41u8, 65u8, 105u8, 90u8, 148u8, 77u8, 243u8,
							44u8, 88u8, 35u8, 74u8, 81u8, 34u8, 157u8, 186u8, 112u8, 164u8,
						],
					)
				}
				#[doc = "See [`Pallet::reset_validators`]."]
				pub fn reset_validators(
					&self,
					currency_id: types::reset_validators::CurrencyId,
					validator_list: types::reset_validators::ValidatorList,
				) -> ::subxt::tx::Payload<types::ResetValidators> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"reset_validators",
						types::ResetValidators { currency_id, validator_list },
						[
							148u8, 12u8, 210u8, 98u8, 113u8, 64u8, 253u8, 134u8, 56u8, 102u8,
							236u8, 174u8, 104u8, 156u8, 66u8, 218u8, 52u8, 45u8, 73u8, 232u8,
							100u8, 221u8, 234u8, 63u8, 174u8, 98u8, 219u8, 186u8, 199u8, 126u8,
							69u8, 241u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_validator_boost_list`]."]
				pub fn set_validator_boost_list(
					&self,
					currency_id: types::set_validator_boost_list::CurrencyId,
					validator_list: types::set_validator_boost_list::ValidatorList,
				) -> ::subxt::tx::Payload<types::SetValidatorBoostList> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"set_validator_boost_list",
						types::SetValidatorBoostList { currency_id, validator_list },
						[
							230u8, 102u8, 163u8, 70u8, 146u8, 94u8, 164u8, 98u8, 235u8, 67u8,
							218u8, 96u8, 229u8, 58u8, 118u8, 233u8, 0u8, 240u8, 29u8, 18u8, 16u8,
							46u8, 137u8, 54u8, 34u8, 78u8, 74u8, 186u8, 106u8, 238u8, 172u8, 137u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_to_validator_boost_list`]."]
				pub fn add_to_validator_boost_list(
					&self,
					currency_id: types::add_to_validator_boost_list::CurrencyId,
					who: types::add_to_validator_boost_list::Who,
				) -> ::subxt::tx::Payload<types::AddToValidatorBoostList> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"add_to_validator_boost_list",
						types::AddToValidatorBoostList {
							currency_id,
							who: ::std::boxed::Box::new(who),
						},
						[
							90u8, 35u8, 14u8, 36u8, 131u8, 109u8, 236u8, 10u8, 140u8, 207u8, 152u8,
							103u8, 79u8, 119u8, 67u8, 196u8, 103u8, 136u8, 210u8, 86u8, 166u8,
							121u8, 85u8, 104u8, 155u8, 231u8, 184u8, 210u8, 171u8, 111u8, 55u8,
							100u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_from_validator_boot_list`]."]
				pub fn remove_from_validator_boot_list(
					&self,
					currency_id: types::remove_from_validator_boot_list::CurrencyId,
					who: types::remove_from_validator_boot_list::Who,
				) -> ::subxt::tx::Payload<types::RemoveFromValidatorBootList> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"remove_from_validator_boot_list",
						types::RemoveFromValidatorBootList {
							currency_id,
							who: ::std::boxed::Box::new(who),
						},
						[
							49u8, 248u8, 87u8, 160u8, 62u8, 131u8, 62u8, 115u8, 175u8, 147u8,
							119u8, 63u8, 56u8, 51u8, 38u8, 234u8, 145u8, 218u8, 141u8, 226u8, 7u8,
							42u8, 65u8, 153u8, 91u8, 244u8, 67u8, 39u8, 122u8, 131u8, 0u8, 253u8,
						],
					)
				}
				#[doc = "See [`Pallet::convert_treasury_Lst`]."]
				pub fn convert_treasury_Lst(
					&self,
					Lst: types::convert_treasury_Lst::Lst,
					amount: types::convert_treasury_Lst::Amount,
				) -> ::subxt::tx::Payload<types::ConvertTreasuryLst> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"convert_treasury_Lst",
						types::ConvertTreasuryLst { Lst, amount },
						[
							116u8, 182u8, 9u8, 64u8, 153u8, 148u8, 121u8, 50u8, 231u8, 232u8,
							125u8, 8u8, 215u8, 243u8, 111u8, 232u8, 250u8, 161u8, 199u8, 252u8,
							177u8, 45u8, 179u8, 242u8, 228u8, 171u8, 10u8, 149u8, 142u8, 49u8,
							84u8, 183u8,
						],
					)
				}
				#[doc = "See [`Pallet::clean_outdated_validator_boost_list`]."]
				pub fn clean_outdated_validator_boost_list(
					&self,
					token: types::clean_outdated_validator_boost_list::Token,
					page: types::clean_outdated_validator_boost_list::Page,
				) -> ::subxt::tx::Payload<types::CleanOutdatedValidatorBoostList> {
					::subxt::tx::Payload::new_static(
						"Slp",
						"clean_outdated_validator_boost_list",
						types::CleanOutdatedValidatorBoostList { token, page },
						[
							134u8, 26u8, 243u8, 147u8, 219u8, 175u8, 202u8, 246u8, 145u8, 103u8,
							59u8, 60u8, 37u8, 42u8, 107u8, 178u8, 78u8, 4u8, 28u8, 14u8, 66u8,
							99u8, 54u8, 118u8, 200u8, 220u8, 202u8, 186u8, 141u8, 202u8, 64u8,
							18u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_slp::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorInitialized {
				pub currency_id: delegator_initialized::CurrencyId,
				pub delegator_id: delegator_initialized::DelegatorId,
			}
			pub mod delegator_initialized {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for DelegatorInitialized {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorInitialized";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorBonded {
				pub currency_id: delegator_bonded::CurrencyId,
				pub delegator_id: delegator_bonded::DelegatorId,
				#[codec(compact)]
				pub bonded_amount: delegator_bonded::BondedAmount,
				#[codec(compact)]
				pub query_id: delegator_bonded::QueryId,
				pub query_id_hash: delegator_bonded::QueryIdHash,
				pub validator: delegator_bonded::Validator,
			}
			pub mod delegator_bonded {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type BondedAmount = ::core::primitive::u128;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
				pub type Validator = ::core::option::Option<
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				>;
			}
			impl ::subxt::events::StaticEvent for DelegatorBonded {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorBonded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorBondExtra {
				pub currency_id: delegator_bond_extra::CurrencyId,
				pub delegator_id: delegator_bond_extra::DelegatorId,
				#[codec(compact)]
				pub extra_bonded_amount: delegator_bond_extra::ExtraBondedAmount,
				#[codec(compact)]
				pub query_id: delegator_bond_extra::QueryId,
				pub query_id_hash: delegator_bond_extra::QueryIdHash,
				pub validator: delegator_bond_extra::Validator,
			}
			pub mod delegator_bond_extra {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type ExtraBondedAmount = ::core::primitive::u128;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
				pub type Validator = ::core::option::Option<
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				>;
			}
			impl ::subxt::events::StaticEvent for DelegatorBondExtra {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorBondExtra";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorUnbond {
				pub currency_id: delegator_unbond::CurrencyId,
				pub delegator_id: delegator_unbond::DelegatorId,
				#[codec(compact)]
				pub unbond_amount: delegator_unbond::UnbondAmount,
				#[codec(compact)]
				pub query_id: delegator_unbond::QueryId,
				pub query_id_hash: delegator_unbond::QueryIdHash,
				pub validator: delegator_unbond::Validator,
			}
			pub mod delegator_unbond {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type UnbondAmount = ::core::primitive::u128;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
				pub type Validator = ::core::option::Option<
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				>;
			}
			impl ::subxt::events::StaticEvent for DelegatorUnbond {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorUnbond";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorUnbondAll {
				pub currency_id: delegator_unbond_all::CurrencyId,
				pub delegator_id: delegator_unbond_all::DelegatorId,
				#[codec(compact)]
				pub query_id: delegator_unbond_all::QueryId,
				pub query_id_hash: delegator_unbond_all::QueryIdHash,
			}
			pub mod delegator_unbond_all {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for DelegatorUnbondAll {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorUnbondAll";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorRebond {
				pub currency_id: delegator_rebond::CurrencyId,
				pub delegator_id: delegator_rebond::DelegatorId,
				pub rebond_amount: delegator_rebond::RebondAmount,
				#[codec(compact)]
				pub query_id: delegator_rebond::QueryId,
				pub query_id_hash: delegator_rebond::QueryIdHash,
				pub validator: delegator_rebond::Validator,
			}
			pub mod delegator_rebond {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type RebondAmount = ::core::option::Option<::core::primitive::u128>;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
				pub type Validator = ::core::option::Option<
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				>;
			}
			impl ::subxt::events::StaticEvent for DelegatorRebond {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorRebond";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Delegated {
				pub currency_id: delegated::CurrencyId,
				pub delegator_id: delegated::DelegatorId,
				pub targets: delegated::Targets,
				#[codec(compact)]
				pub query_id: delegated::QueryId,
				pub query_id_hash: delegated::QueryIdHash,
			}
			pub mod delegated {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Targets = ::core::option::Option<
					::std::vec::Vec<runtime_types::staging_xcm::v3::multilocation::MultiLocation>,
				>;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Delegated {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Undelegated {
				pub currency_id: undelegated::CurrencyId,
				pub delegator_id: undelegated::DelegatorId,
				pub targets: undelegated::Targets,
				#[codec(compact)]
				pub query_id: undelegated::QueryId,
				pub query_id_hash: undelegated::QueryIdHash,
			}
			pub mod undelegated {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Targets =
					::std::vec::Vec<runtime_types::staging_xcm::v3::multilocation::MultiLocation>;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "Undelegated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Payout {
				pub currency_id: payout::CurrencyId,
				pub validator: payout::Validator,
				pub time_unit: payout::TimeUnit,
			}
			pub mod payout {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Validator = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type TimeUnit =
					::core::option::Option<runtime_types::tangle_primitives::TimeUnit>;
			}
			impl ::subxt::events::StaticEvent for Payout {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "Payout";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Liquidize {
				pub currency_id: liquidize::CurrencyId,
				pub delegator_id: liquidize::DelegatorId,
				pub time_unit: liquidize::TimeUnit,
				#[codec(compact)]
				pub query_id: liquidize::QueryId,
				pub query_id_hash: liquidize::QueryIdHash,
				pub amount: liquidize::Amount,
			}
			pub mod liquidize {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type TimeUnit =
					::core::option::Option<runtime_types::tangle_primitives::TimeUnit>;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
				pub type Amount = ::core::option::Option<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for Liquidize {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "Liquidize";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Chill {
				pub currency_id: chill::CurrencyId,
				pub delegator_id: chill::DelegatorId,
				#[codec(compact)]
				pub query_id: chill::QueryId,
				pub query_id_hash: chill::QueryIdHash,
			}
			pub mod chill {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
				pub type QueryIdHash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for Chill {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "Chill";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferBack {
				pub currency_id: transfer_back::CurrencyId,
				pub from: transfer_back::From,
				pub to: transfer_back::To,
				#[codec(compact)]
				pub amount: transfer_back::Amount,
			}
			pub mod transfer_back {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type From = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type To = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TransferBack {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "TransferBack";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferTo {
				pub currency_id: transfer_to::CurrencyId,
				pub from: transfer_to::From,
				pub to: transfer_to::To,
				#[codec(compact)]
				pub amount: transfer_to::Amount,
			}
			pub mod transfer_to {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type From = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type To = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TransferTo {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "TransferTo";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConvertAsset {
				pub currency_id: convert_asset::CurrencyId,
				pub who: convert_asset::Who,
				#[codec(compact)]
				pub amount: convert_asset::Amount,
			}
			pub mod convert_asset {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for ConvertAsset {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ConvertAsset";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorAdded {
				pub currency_id: delegator_added::CurrencyId,
				#[codec(compact)]
				pub index: delegator_added::Index,
				pub delegator_id: delegator_added::DelegatorId,
			}
			pub mod delegator_added {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Index = ::core::primitive::u16;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for DelegatorAdded {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorRemoved {
				pub currency_id: delegator_removed::CurrencyId,
				pub delegator_id: delegator_removed::DelegatorId,
			}
			pub mod delegator_removed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for DelegatorRemoved {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorsAdded {
				pub currency_id: validators_added::CurrencyId,
				pub validator_id: validators_added::ValidatorId,
			}
			pub mod validators_added {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type ValidatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for ValidatorsAdded {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorsAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorsRemoved {
				pub currency_id: validators_removed::CurrencyId,
				pub validator_id: validators_removed::ValidatorId,
			}
			pub mod validators_removed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type ValidatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for ValidatorsRemoved {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorsRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Refund {
				pub currency_id: refund::CurrencyId,
				pub time_unit: refund::TimeUnit,
				#[codec(compact)]
				pub index: refund::Index,
				#[codec(compact)]
				pub amount: refund::Amount,
			}
			pub mod refund {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TimeUnit = runtime_types::tangle_primitives::TimeUnit;
				pub type Index = ::core::primitive::u32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for Refund {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "Refund";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FundMoveFromExitToEntrance {
				pub currency_id: fund_move_from_exit_to_entrance::CurrencyId,
				#[codec(compact)]
				pub amount: fund_move_from_exit_to_entrance::Amount,
			}
			pub mod fund_move_from_exit_to_entrance {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for FundMoveFromExitToEntrance {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "FundMoveFromExitToEntrance";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TimeUnitUpdated {
				pub currency_id: time_unit_updated::CurrencyId,
				pub old: time_unit_updated::Old,
				pub new: time_unit_updated::New,
			}
			pub mod time_unit_updated {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Old = ::core::option::Option<runtime_types::tangle_primitives::TimeUnit>;
				pub type New = runtime_types::tangle_primitives::TimeUnit;
			}
			impl ::subxt::events::StaticEvent for TimeUnitUpdated {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "TimeUnitUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PoolTokenIncreased {
				pub currency_id: pool_token_increased::CurrencyId,
				#[codec(compact)]
				pub amount: pool_token_increased::Amount,
			}
			pub mod pool_token_increased {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for PoolTokenIncreased {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "PoolTokenIncreased";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct HostingFeeCharged {
				pub currency_id: hosting_fee_charged::CurrencyId,
				#[codec(compact)]
				pub amount: hosting_fee_charged::Amount,
			}
			pub mod hosting_fee_charged {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for HostingFeeCharged {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "HostingFeeCharged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PoolTokenDecreased {
				pub currency_id: pool_token_decreased::CurrencyId,
				#[codec(compact)]
				pub amount: pool_token_decreased::Amount,
			}
			pub mod pool_token_decreased {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for PoolTokenDecreased {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "PoolTokenDecreased";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FeeSupplemented {
				pub currency_id: fee_supplemented::CurrencyId,
				#[codec(compact)]
				pub amount: fee_supplemented::Amount,
				pub from: fee_supplemented::From,
				pub to: fee_supplemented::To,
			}
			pub mod fee_supplemented {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
				pub type From = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type To = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for FeeSupplemented {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "FeeSupplemented";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorsByDelegatorSet {
				pub currency_id: validators_by_delegator_set::CurrencyId,
				pub validators_list: validators_by_delegator_set::ValidatorsList,
				pub delegator_id: validators_by_delegator_set::DelegatorId,
			}
			pub mod validators_by_delegator_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type ValidatorsList =
					::std::vec::Vec<runtime_types::staging_xcm::v3::multilocation::MultiLocation>;
				pub type DelegatorId = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for ValidatorsByDelegatorSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorsByDelegatorSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OperateOriginSet {
				pub currency_id: operate_origin_set::CurrencyId,
				pub operator: operate_origin_set::Operator,
			}
			pub mod operate_origin_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Operator = ::core::option::Option<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for OperateOriginSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "OperateOriginSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FeeSourceSet {
				pub currency_id: fee_source_set::CurrencyId,
				pub who_and_fee: fee_source_set::WhoAndFee,
			}
			pub mod fee_source_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type WhoAndFee = ::core::option::Option<(
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					::core::primitive::u128,
				)>;
			}
			impl ::subxt::events::StaticEvent for FeeSourceSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "FeeSourceSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorLedgerSet {
				pub currency_id: delegator_ledger_set::CurrencyId,
				pub delegator: delegator_ledger_set::Delegator,
				pub ledger: delegator_ledger_set::Ledger,
			}
			pub mod delegator_ledger_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Delegator = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type Ledger = ::core::option::Option<
					runtime_types::tangle_slp::primitives::Ledger<::core::primitive::u128>,
				>;
			}
			impl ::subxt::events::StaticEvent for DelegatorLedgerSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorLedgerSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorLedgerQueryResponseConfirmed {
				#[codec(compact)]
				pub query_id: delegator_ledger_query_response_confirmed::QueryId,
				pub entry: delegator_ledger_query_response_confirmed::Entry,
			}
			pub mod delegator_ledger_query_response_confirmed {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
				pub type Entry = runtime_types::tangle_slp::primitives::LedgerUpdateEntry<
					::core::primitive::u128,
				>;
			}
			impl ::subxt::events::StaticEvent for DelegatorLedgerQueryResponseConfirmed {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorLedgerQueryResponseConfirmed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorLedgerQueryResponseFailed {
				#[codec(compact)]
				pub query_id: delegator_ledger_query_response_failed::QueryId,
			}
			pub mod delegator_ledger_query_response_failed {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for DelegatorLedgerQueryResponseFailed {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "DelegatorLedgerQueryResponseFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorsByDelegatorQueryResponseConfirmed {
				#[codec(compact)]
				pub query_id: validators_by_delegator_query_response_confirmed::QueryId,
				pub entry: validators_by_delegator_query_response_confirmed::Entry,
			}
			pub mod validators_by_delegator_query_response_confirmed {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
				pub type Entry =
					runtime_types::tangle_slp::primitives::ValidatorsByDelegatorUpdateEntry;
			}
			impl ::subxt::events::StaticEvent for ValidatorsByDelegatorQueryResponseConfirmed {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorsByDelegatorQueryResponseConfirmed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorsByDelegatorQueryResponseFailed {
				#[codec(compact)]
				pub query_id: validators_by_delegator_query_response_failed::QueryId,
			}
			pub mod validators_by_delegator_query_response_failed {
				use super::runtime_types;
				pub type QueryId = ::core::primitive::u64;
			}
			impl ::subxt::events::StaticEvent for ValidatorsByDelegatorQueryResponseFailed {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorsByDelegatorQueryResponseFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MinimumsMaximumsSet {
				pub currency_id: minimums_maximums_set::CurrencyId,
				pub minimums_and_maximums: minimums_maximums_set::MinimumsAndMaximums,
			}
			pub mod minimums_maximums_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type MinimumsAndMaximums = ::core::option::Option<
					runtime_types::tangle_slp::primitives::MinimumsMaximums<
						::core::primitive::u128,
					>,
				>;
			}
			impl ::subxt::events::StaticEvent for MinimumsMaximumsSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "MinimumsMaximumsSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CurrencyDelaysSet {
				pub currency_id: currency_delays_set::CurrencyId,
				pub delays: currency_delays_set::Delays,
			}
			pub mod currency_delays_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Delays =
					::core::option::Option<runtime_types::tangle_slp::primitives::Delays>;
			}
			impl ::subxt::events::StaticEvent for CurrencyDelaysSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "CurrencyDelaysSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct HostingFeesSet {
				pub currency_id: hosting_fees_set::CurrencyId,
				pub fees: hosting_fees_set::Fees,
			}
			pub mod hosting_fees_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Fees = ::core::option::Option<(
					runtime_types::sp_arithmetic::per_things::Permill,
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
				)>;
			}
			impl ::subxt::events::StaticEvent for HostingFeesSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "HostingFeesSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CurrencyTuneExchangeRateLimitSet {
				pub currency_id: currency_tune_exchange_rate_limit_set::CurrencyId,
				pub tune_exchange_rate_limit:
					currency_tune_exchange_rate_limit_set::TuneExchangeRateLimit,
			}
			pub mod currency_tune_exchange_rate_limit_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TuneExchangeRateLimit = ::core::option::Option<(
					::core::primitive::u32,
					runtime_types::sp_arithmetic::per_things::Permill,
				)>;
			}
			impl ::subxt::events::StaticEvent for CurrencyTuneExchangeRateLimitSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "CurrencyTuneExchangeRateLimitSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OngoingTimeUnitUpdateIntervalSet {
				pub currency_id: ongoing_time_unit_update_interval_set::CurrencyId,
				pub interval: ongoing_time_unit_update_interval_set::Interval,
			}
			pub mod ongoing_time_unit_update_interval_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Interval = ::core::option::Option<::core::primitive::u32>;
			}
			impl ::subxt::events::StaticEvent for OngoingTimeUnitUpdateIntervalSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "OngoingTimeUnitUpdateIntervalSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SupplementFeeAccountWhitelistAdded {
				pub currency_id: supplement_fee_account_whitelist_added::CurrencyId,
				pub who: supplement_fee_account_whitelist_added::Who,
			}
			pub mod supplement_fee_account_whitelist_added {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for SupplementFeeAccountWhitelistAdded {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "SupplementFeeAccountWhitelistAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SupplementFeeAccountWhitelistRemoved {
				pub currency_id: supplement_fee_account_whitelist_removed::CurrencyId,
				pub who: supplement_fee_account_whitelist_removed::Who,
			}
			pub mod supplement_fee_account_whitelist_removed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for SupplementFeeAccountWhitelistRemoved {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "SupplementFeeAccountWhitelistRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorsReset {
				pub currency_id: validators_reset::CurrencyId,
				pub validator_list: validators_reset::ValidatorList,
			}
			pub mod validators_reset {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type ValidatorList =
					::std::vec::Vec<runtime_types::staging_xcm::v3::multilocation::MultiLocation>;
			}
			impl ::subxt::events::StaticEvent for ValidatorsReset {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorsReset";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorBoostListSet {
				pub currency_id: validator_boost_list_set::CurrencyId,
				pub validator_boost_list: validator_boost_list_set::ValidatorBoostList,
			}
			pub mod validator_boost_list_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type ValidatorBoostList = ::std::vec::Vec<(
					runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					::core::primitive::u32,
				)>;
			}
			impl ::subxt::events::StaticEvent for ValidatorBoostListSet {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorBoostListSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorBoostListAdded {
				pub currency_id: validator_boost_list_added::CurrencyId,
				pub who: validator_boost_list_added::Who,
				pub due_block_number: validator_boost_list_added::DueBlockNumber,
			}
			pub mod validator_boost_list_added {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type DueBlockNumber = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ValidatorBoostListAdded {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "ValidatorBoostListAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemovedFromBoostList {
				pub currency_id: removed_from_boost_list::CurrencyId,
				pub who: removed_from_boost_list::Who,
			}
			pub mod removed_from_boost_list {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Who = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::events::StaticEvent for RemovedFromBoostList {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "RemovedFromBoostList";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OutdatedValidatorBoostListCleaned {
				pub currency_id: outdated_validator_boost_list_cleaned::CurrencyId,
				pub page: outdated_validator_boost_list_cleaned::Page,
				pub remove_num: outdated_validator_boost_list_cleaned::RemoveNum,
				pub num_left: outdated_validator_boost_list_cleaned::NumLeft,
			}
			pub mod outdated_validator_boost_list_cleaned {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Page = ::core::primitive::u8;
				pub type RemoveNum = ::core::primitive::u32;
				pub type NumLeft = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for OutdatedValidatorBoostListCleaned {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "OutdatedValidatorBoostListCleaned";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BurnFeeFailed {
				pub currency_id: burn_fee_failed::CurrencyId,
				pub amount: burn_fee_failed::Amount,
			}
			pub mod burn_fee_failed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for BurnFeeFailed {
				const PALLET: &'static str = "Slp";
				const EVENT: &'static str = "BurnFeeFailed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod operate_origins {
					use super::runtime_types;
					pub type OperateOrigins = ::subxt::utils::AccountId32;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod fee_sources {
					use super::runtime_types;
					pub type FeeSources = (
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						::core::primitive::u128,
					);
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod hosting_fees {
					use super::runtime_types;
					pub type HostingFees = (
						runtime_types::sp_arithmetic::per_things::Permill,
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					);
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod delegators_index2_multilocation {
					use super::runtime_types;
					pub type DelegatorsIndex2Multilocation =
						runtime_types::staging_xcm::v3::multilocation::MultiLocation;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = ::core::primitive::u16;
				}
				pub mod delegators_multilocation2_index {
					use super::runtime_types;
					pub type DelegatorsMultilocation2Index = ::core::primitive::u16;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				pub mod delegator_next_index {
					use super::runtime_types;
					pub type DelegatorNextIndex = ::core::primitive::u16;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod validators {
					use super::runtime_types;
					pub type Validators =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod validator_boost_list {
					use super::runtime_types;
					pub type ValidatorBoostList =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
							::core::primitive::u32,
						)>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod validators_by_delegator {
					use super::runtime_types;
					pub type ValidatorsByDelegator =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				pub mod validators_by_delegator_xcm_update_queue {
					use super::runtime_types;
					pub type ValidatorsByDelegatorXcmUpdateQueue = (
						runtime_types::tangle_slp::primitives::ValidatorsByDelegatorUpdateEntry,
						::core::primitive::u32,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod delegator_ledgers {
					use super::runtime_types;
					pub type DelegatorLedgers =
						runtime_types::tangle_slp::primitives::Ledger<::core::primitive::u128>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				pub mod delegator_ledger_xcm_update_queue {
					use super::runtime_types;
					pub type DelegatorLedgerXcmUpdateQueue = (
						runtime_types::tangle_slp::primitives::LedgerUpdateEntry<
							::core::primitive::u128,
						>,
						::core::primitive::u32,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod minimums_and_maximums {
					use super::runtime_types;
					pub type MinimumsAndMaximums =
						runtime_types::tangle_slp::primitives::MinimumsMaximums<
							::core::primitive::u128,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod currency_delays {
					use super::runtime_types;
					pub type CurrencyDelays = runtime_types::tangle_slp::primitives::Delays;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod delegator_latest_tune_record {
					use super::runtime_types;
					pub type DelegatorLatestTuneRecord = runtime_types::tangle_primitives::TimeUnit;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				}
				pub mod currency_latest_tune_record {
					use super::runtime_types;
					pub type CurrencyLatestTuneRecord =
						(runtime_types::tangle_primitives::TimeUnit, ::core::primitive::u32);
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod currency_tune_exchange_rate_limit {
					use super::runtime_types;
					pub type CurrencyTuneExchangeRateLimit =
						(::core::primitive::u32, runtime_types::sp_arithmetic::per_things::Permill);
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod delegations_occupied {
					use super::runtime_types;
					pub type DelegationsOccupied = ::core::primitive::bool;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod last_time_updated_ongoing_time_unit {
					use super::runtime_types;
					pub type LastTimeUpdatedOngoingTimeUnit = ::core::primitive::u32;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod ongoing_time_unit_update_interval {
					use super::runtime_types;
					pub type OngoingTimeUnitUpdateInterval = ::core::primitive::u32;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod supplement_fee_account_whitelist {
					use super::runtime_types;
					pub type SupplementFeeAccountWhitelist = ::std::vec::Vec<(
						runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						::subxt::utils::H256,
					)>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " One operate origin(can be a multisig account) for a currency. An operating origins are"]
				#[doc = " normal account in tangle chain."]
				pub fn operate_origins_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::operate_origins::OperateOrigins,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"OperateOrigins",
						vec![],
						[
							159u8, 186u8, 89u8, 241u8, 21u8, 100u8, 255u8, 185u8, 75u8, 77u8,
							187u8, 94u8, 203u8, 248u8, 177u8, 3u8, 132u8, 202u8, 106u8, 206u8,
							131u8, 71u8, 220u8, 93u8, 118u8, 98u8, 220u8, 120u8, 224u8, 77u8,
							176u8, 144u8,
						],
					)
				}
				#[doc = " One operate origin(can be a multisig account) for a currency. An operating origins are"]
				#[doc = " normal account in tangle chain."]
				pub fn operate_origins(
					&self,
					_0: impl ::std::borrow::Borrow<types::operate_origins::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::operate_origins::OperateOrigins,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"OperateOrigins",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							159u8, 186u8, 89u8, 241u8, 21u8, 100u8, 255u8, 185u8, 75u8, 77u8,
							187u8, 94u8, 203u8, 248u8, 177u8, 3u8, 132u8, 202u8, 106u8, 206u8,
							131u8, 71u8, 220u8, 93u8, 118u8, 98u8, 220u8, 120u8, 224u8, 77u8,
							176u8, 144u8,
						],
					)
				}
				#[doc = " Origins and Amounts for the staking operating account fee supplement. An operating account"]
				#[doc = " is identified in MultiLocation format."]
				pub fn fee_sources_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::fee_sources::FeeSources,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"FeeSources",
						vec![],
						[
							162u8, 110u8, 75u8, 186u8, 198u8, 134u8, 65u8, 122u8, 41u8, 253u8,
							148u8, 2u8, 90u8, 110u8, 41u8, 164u8, 47u8, 139u8, 220u8, 224u8, 11u8,
							120u8, 181u8, 69u8, 173u8, 200u8, 54u8, 117u8, 162u8, 237u8, 207u8,
							87u8,
						],
					)
				}
				#[doc = " Origins and Amounts for the staking operating account fee supplement. An operating account"]
				#[doc = " is identified in MultiLocation format."]
				pub fn fee_sources(
					&self,
					_0: impl ::std::borrow::Borrow<types::fee_sources::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::fee_sources::FeeSources,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"FeeSources",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							162u8, 110u8, 75u8, 186u8, 198u8, 134u8, 65u8, 122u8, 41u8, 253u8,
							148u8, 2u8, 90u8, 110u8, 41u8, 164u8, 47u8, 139u8, 220u8, 224u8, 11u8,
							120u8, 181u8, 69u8, 173u8, 200u8, 54u8, 117u8, 162u8, 237u8, 207u8,
							87u8,
						],
					)
				}
				#[doc = " Hosting fee percentage and beneficiary account for different chains"]
				pub fn hosting_fees_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::hosting_fees::HostingFees,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"HostingFees",
						vec![],
						[
							153u8, 52u8, 231u8, 12u8, 240u8, 194u8, 125u8, 37u8, 97u8, 207u8, 34u8,
							113u8, 244u8, 41u8, 105u8, 8u8, 115u8, 206u8, 204u8, 190u8, 237u8,
							112u8, 170u8, 36u8, 254u8, 105u8, 231u8, 71u8, 60u8, 151u8, 224u8,
							220u8,
						],
					)
				}
				#[doc = " Hosting fee percentage and beneficiary account for different chains"]
				pub fn hosting_fees(
					&self,
					_0: impl ::std::borrow::Borrow<types::hosting_fees::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::hosting_fees::HostingFees,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"HostingFees",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							153u8, 52u8, 231u8, 12u8, 240u8, 194u8, 125u8, 37u8, 97u8, 207u8, 34u8,
							113u8, 244u8, 41u8, 105u8, 8u8, 115u8, 206u8, 204u8, 190u8, 237u8,
							112u8, 170u8, 36u8, 254u8, 105u8, 231u8, 71u8, 60u8, 151u8, 224u8,
							220u8,
						],
					)
				}
				#[doc = " Delegators in service. A delegator is identified in MultiLocation format."]
				#[doc = " Currency Id + Sub-account index => MultiLocation"]
				pub fn delegators_index2_multilocation_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators_index2_multilocation::DelegatorsIndex2Multilocation,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorsIndex2Multilocation",
						vec![],
						[
							102u8, 134u8, 97u8, 229u8, 176u8, 78u8, 192u8, 89u8, 93u8, 69u8, 61u8,
							76u8, 91u8, 122u8, 165u8, 210u8, 180u8, 111u8, 187u8, 55u8, 124u8,
							103u8, 181u8, 5u8, 59u8, 33u8, 177u8, 148u8, 22u8, 242u8, 73u8, 138u8,
						],
					)
				}
				#[doc = " Delegators in service. A delegator is identified in MultiLocation format."]
				#[doc = " Currency Id + Sub-account index => MultiLocation"]
				pub fn delegators_index2_multilocation_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegators_index2_multilocation::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators_index2_multilocation::DelegatorsIndex2Multilocation,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorsIndex2Multilocation",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							102u8, 134u8, 97u8, 229u8, 176u8, 78u8, 192u8, 89u8, 93u8, 69u8, 61u8,
							76u8, 91u8, 122u8, 165u8, 210u8, 180u8, 111u8, 187u8, 55u8, 124u8,
							103u8, 181u8, 5u8, 59u8, 33u8, 177u8, 148u8, 22u8, 242u8, 73u8, 138u8,
						],
					)
				}
				#[doc = " Delegators in service. A delegator is identified in MultiLocation format."]
				#[doc = " Currency Id + Sub-account index => MultiLocation"]
				pub fn delegators_index2_multilocation(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegators_index2_multilocation::Param0>,
					_1: impl ::std::borrow::Borrow<types::delegators_index2_multilocation::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators_index2_multilocation::DelegatorsIndex2Multilocation,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorsIndex2Multilocation",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							102u8, 134u8, 97u8, 229u8, 176u8, 78u8, 192u8, 89u8, 93u8, 69u8, 61u8,
							76u8, 91u8, 122u8, 165u8, 210u8, 180u8, 111u8, 187u8, 55u8, 124u8,
							103u8, 181u8, 5u8, 59u8, 33u8, 177u8, 148u8, 22u8, 242u8, 73u8, 138u8,
						],
					)
				}
				#[doc = " Delegators in service. Currency Id + MultiLocation => Sub-account index"]
				pub fn delegators_multilocation2_index_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators_multilocation2_index::DelegatorsMultilocation2Index,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorsMultilocation2Index",
						vec![],
						[
							114u8, 106u8, 196u8, 56u8, 145u8, 151u8, 204u8, 117u8, 0u8, 64u8, 19u8,
							154u8, 100u8, 190u8, 47u8, 34u8, 223u8, 210u8, 118u8, 239u8, 123u8,
							49u8, 218u8, 222u8, 199u8, 247u8, 168u8, 209u8, 13u8, 100u8, 167u8,
							194u8,
						],
					)
				}
				#[doc = " Delegators in service. Currency Id + MultiLocation => Sub-account index"]
				pub fn delegators_multilocation2_index_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegators_multilocation2_index::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators_multilocation2_index::DelegatorsMultilocation2Index,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorsMultilocation2Index",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							114u8, 106u8, 196u8, 56u8, 145u8, 151u8, 204u8, 117u8, 0u8, 64u8, 19u8,
							154u8, 100u8, 190u8, 47u8, 34u8, 223u8, 210u8, 118u8, 239u8, 123u8,
							49u8, 218u8, 222u8, 199u8, 247u8, 168u8, 209u8, 13u8, 100u8, 167u8,
							194u8,
						],
					)
				}
				#[doc = " Delegators in service. Currency Id + MultiLocation => Sub-account index"]
				pub fn delegators_multilocation2_index(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegators_multilocation2_index::Param0>,
					_1: impl ::std::borrow::Borrow<types::delegators_multilocation2_index::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators_multilocation2_index::DelegatorsMultilocation2Index,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorsMultilocation2Index",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							114u8, 106u8, 196u8, 56u8, 145u8, 151u8, 204u8, 117u8, 0u8, 64u8, 19u8,
							154u8, 100u8, 190u8, 47u8, 34u8, 223u8, 210u8, 118u8, 239u8, 123u8,
							49u8, 218u8, 222u8, 199u8, 247u8, 168u8, 209u8, 13u8, 100u8, 167u8,
							194u8,
						],
					)
				}
				#[doc = " Next index of different currency delegators."]
				pub fn delegator_next_index_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_next_index::DelegatorNextIndex,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorNextIndex",
						vec![],
						[
							5u8, 75u8, 34u8, 166u8, 9u8, 3u8, 198u8, 148u8, 228u8, 238u8, 236u8,
							158u8, 226u8, 202u8, 231u8, 27u8, 226u8, 182u8, 206u8, 134u8, 229u8,
							81u8, 3u8, 102u8, 156u8, 194u8, 173u8, 29u8, 46u8, 78u8, 143u8, 153u8,
						],
					)
				}
				#[doc = " Next index of different currency delegators."]
				pub fn delegator_next_index(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_next_index::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_next_index::DelegatorNextIndex,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorNextIndex",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							5u8, 75u8, 34u8, 166u8, 9u8, 3u8, 198u8, 148u8, 228u8, 238u8, 236u8,
							158u8, 226u8, 202u8, 231u8, 27u8, 226u8, 182u8, 206u8, 134u8, 229u8,
							81u8, 3u8, 102u8, 156u8, 194u8, 173u8, 29u8, 46u8, 78u8, 143u8, 153u8,
						],
					)
				}
				#[doc = " (VWL) Validator in service. A validator is identified in MultiLocation format."]
				pub fn validators_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validators::Validators,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"Validators",
						vec![],
						[
							128u8, 33u8, 140u8, 211u8, 139u8, 175u8, 146u8, 166u8, 231u8, 223u8,
							130u8, 94u8, 211u8, 171u8, 158u8, 230u8, 61u8, 236u8, 130u8, 59u8,
							119u8, 4u8, 5u8, 75u8, 238u8, 18u8, 224u8, 57u8, 50u8, 213u8, 75u8,
							61u8,
						],
					)
				}
				#[doc = " (VWL) Validator in service. A validator is identified in MultiLocation format."]
				pub fn validators(
					&self,
					_0: impl ::std::borrow::Borrow<types::validators::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validators::Validators,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"Validators",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							128u8, 33u8, 140u8, 211u8, 139u8, 175u8, 146u8, 166u8, 231u8, 223u8,
							130u8, 94u8, 211u8, 171u8, 158u8, 230u8, 61u8, 236u8, 130u8, 59u8,
							119u8, 4u8, 5u8, 75u8, 238u8, 18u8, 224u8, 57u8, 50u8, 213u8, 75u8,
							61u8,
						],
					)
				}
				#[doc = " (VBL) Validator Boost List -> (validator multilocation, due block number)"]
				pub fn validator_boost_list_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validator_boost_list::ValidatorBoostList,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"ValidatorBoostList",
						vec![],
						[
							115u8, 67u8, 200u8, 121u8, 38u8, 238u8, 45u8, 212u8, 190u8, 95u8,
							147u8, 92u8, 58u8, 86u8, 223u8, 68u8, 52u8, 253u8, 19u8, 239u8, 17u8,
							139u8, 50u8, 20u8, 199u8, 112u8, 121u8, 31u8, 39u8, 128u8, 48u8, 124u8,
						],
					)
				}
				#[doc = " (VBL) Validator Boost List -> (validator multilocation, due block number)"]
				pub fn validator_boost_list(
					&self,
					_0: impl ::std::borrow::Borrow<types::validator_boost_list::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validator_boost_list::ValidatorBoostList,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"ValidatorBoostList",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							115u8, 67u8, 200u8, 121u8, 38u8, 238u8, 45u8, 212u8, 190u8, 95u8,
							147u8, 92u8, 58u8, 86u8, 223u8, 68u8, 52u8, 253u8, 19u8, 239u8, 17u8,
							139u8, 50u8, 20u8, 199u8, 112u8, 121u8, 31u8, 39u8, 128u8, 48u8, 124u8,
						],
					)
				}
				#[doc = " Validators for each delegator. CurrencyId + Delegator => Vec<Validator>"]
				pub fn validators_by_delegator_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validators_by_delegator::ValidatorsByDelegator,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"ValidatorsByDelegator",
						vec![],
						[
							166u8, 60u8, 68u8, 120u8, 112u8, 250u8, 233u8, 83u8, 245u8, 248u8,
							121u8, 39u8, 122u8, 14u8, 245u8, 162u8, 134u8, 227u8, 140u8, 98u8,
							155u8, 154u8, 9u8, 153u8, 15u8, 113u8, 157u8, 195u8, 227u8, 117u8,
							152u8, 187u8,
						],
					)
				}
				#[doc = " Validators for each delegator. CurrencyId + Delegator => Vec<Validator>"]
				pub fn validators_by_delegator_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::validators_by_delegator::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validators_by_delegator::ValidatorsByDelegator,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"ValidatorsByDelegator",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							166u8, 60u8, 68u8, 120u8, 112u8, 250u8, 233u8, 83u8, 245u8, 248u8,
							121u8, 39u8, 122u8, 14u8, 245u8, 162u8, 134u8, 227u8, 140u8, 98u8,
							155u8, 154u8, 9u8, 153u8, 15u8, 113u8, 157u8, 195u8, 227u8, 117u8,
							152u8, 187u8,
						],
					)
				}
				#[doc = " Validators for each delegator. CurrencyId + Delegator => Vec<Validator>"]
				pub fn validators_by_delegator(
					&self,
					_0: impl ::std::borrow::Borrow<types::validators_by_delegator::Param0>,
					_1: impl ::std::borrow::Borrow<types::validators_by_delegator::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::validators_by_delegator::ValidatorsByDelegator,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"ValidatorsByDelegator",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							166u8, 60u8, 68u8, 120u8, 112u8, 250u8, 233u8, 83u8, 245u8, 248u8,
							121u8, 39u8, 122u8, 14u8, 245u8, 162u8, 134u8, 227u8, 140u8, 98u8,
							155u8, 154u8, 9u8, 153u8, 15u8, 113u8, 157u8, 195u8, 227u8, 117u8,
							152u8, 187u8,
						],
					)
				}				pub fn validators_by_delegator_xcm_update_queue_iter (& self ,) -> :: subxt :: storage :: address :: Address :: < :: subxt :: storage :: address :: StaticStorageMapKey , types :: validators_by_delegator_xcm_update_queue :: ValidatorsByDelegatorXcmUpdateQueue , () , () , :: subxt :: storage :: address :: Yes >{
					::subxt::storage::address::Address::new_static(
						"Slp",
						"ValidatorsByDelegatorXcmUpdateQueue",
						vec![],
						[
							56u8, 83u8, 242u8, 53u8, 86u8, 154u8, 92u8, 184u8, 73u8, 168u8, 80u8,
							8u8, 243u8, 204u8, 198u8, 97u8, 49u8, 182u8, 109u8, 136u8, 201u8, 62u8,
							15u8, 51u8, 220u8, 106u8, 17u8, 71u8, 140u8, 34u8, 248u8, 135u8,
						],
					)
				}				pub fn validators_by_delegator_xcm_update_queue (& self , _0 : impl :: std :: borrow :: Borrow < types :: validators_by_delegator_xcm_update_queue :: Param0 > ,) -> :: subxt :: storage :: address :: Address :: < :: subxt :: storage :: address :: StaticStorageMapKey , types :: validators_by_delegator_xcm_update_queue :: ValidatorsByDelegatorXcmUpdateQueue , :: subxt :: storage :: address :: Yes , () , () >{
					::subxt::storage::address::Address::new_static(
						"Slp",
						"ValidatorsByDelegatorXcmUpdateQueue",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							56u8, 83u8, 242u8, 53u8, 86u8, 154u8, 92u8, 184u8, 73u8, 168u8, 80u8,
							8u8, 243u8, 204u8, 198u8, 97u8, 49u8, 182u8, 109u8, 136u8, 201u8, 62u8,
							15u8, 51u8, 220u8, 106u8, 17u8, 71u8, 140u8, 34u8, 248u8, 135u8,
						],
					)
				}
				#[doc = " Delegator ledgers. A delegator is identified in MultiLocation format."]
				pub fn delegator_ledgers_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_ledgers::DelegatorLedgers,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLedgers",
						vec![],
						[
							233u8, 109u8, 65u8, 93u8, 235u8, 222u8, 229u8, 246u8, 13u8, 181u8,
							131u8, 178u8, 62u8, 105u8, 243u8, 82u8, 34u8, 189u8, 22u8, 232u8,
							116u8, 193u8, 252u8, 207u8, 8u8, 182u8, 133u8, 238u8, 50u8, 50u8,
							199u8, 229u8,
						],
					)
				}
				#[doc = " Delegator ledgers. A delegator is identified in MultiLocation format."]
				pub fn delegator_ledgers_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_ledgers::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_ledgers::DelegatorLedgers,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLedgers",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							233u8, 109u8, 65u8, 93u8, 235u8, 222u8, 229u8, 246u8, 13u8, 181u8,
							131u8, 178u8, 62u8, 105u8, 243u8, 82u8, 34u8, 189u8, 22u8, 232u8,
							116u8, 193u8, 252u8, 207u8, 8u8, 182u8, 133u8, 238u8, 50u8, 50u8,
							199u8, 229u8,
						],
					)
				}
				#[doc = " Delegator ledgers. A delegator is identified in MultiLocation format."]
				pub fn delegator_ledgers(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_ledgers::Param0>,
					_1: impl ::std::borrow::Borrow<types::delegator_ledgers::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_ledgers::DelegatorLedgers,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLedgers",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							233u8, 109u8, 65u8, 93u8, 235u8, 222u8, 229u8, 246u8, 13u8, 181u8,
							131u8, 178u8, 62u8, 105u8, 243u8, 82u8, 34u8, 189u8, 22u8, 232u8,
							116u8, 193u8, 252u8, 207u8, 8u8, 182u8, 133u8, 238u8, 50u8, 50u8,
							199u8, 229u8,
						],
					)
				}
				pub fn delegator_ledger_xcm_update_queue_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_ledger_xcm_update_queue::DelegatorLedgerXcmUpdateQueue,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLedgerXcmUpdateQueue",
						vec![],
						[
							33u8, 201u8, 151u8, 242u8, 50u8, 9u8, 191u8, 65u8, 131u8, 202u8, 205u8,
							58u8, 15u8, 23u8, 252u8, 197u8, 251u8, 22u8, 224u8, 112u8, 65u8, 233u8,
							21u8, 115u8, 118u8, 154u8, 220u8, 201u8, 69u8, 206u8, 137u8, 121u8,
						],
					)
				}
				pub fn delegator_ledger_xcm_update_queue(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_ledger_xcm_update_queue::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_ledger_xcm_update_queue::DelegatorLedgerXcmUpdateQueue,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLedgerXcmUpdateQueue",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							33u8, 201u8, 151u8, 242u8, 50u8, 9u8, 191u8, 65u8, 131u8, 202u8, 205u8,
							58u8, 15u8, 23u8, 252u8, 197u8, 251u8, 22u8, 224u8, 112u8, 65u8, 233u8,
							21u8, 115u8, 118u8, 154u8, 220u8, 201u8, 69u8, 206u8, 137u8, 121u8,
						],
					)
				}
				#[doc = " Minimum and Maximum constraints for different chains."]
				pub fn minimums_and_maximums_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::minimums_and_maximums::MinimumsAndMaximums,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"MinimumsAndMaximums",
						vec![],
						[
							252u8, 19u8, 144u8, 130u8, 131u8, 39u8, 217u8, 45u8, 175u8, 196u8,
							214u8, 74u8, 167u8, 175u8, 15u8, 55u8, 231u8, 221u8, 69u8, 173u8,
							121u8, 188u8, 88u8, 231u8, 209u8, 74u8, 156u8, 106u8, 181u8, 204u8,
							94u8, 50u8,
						],
					)
				}
				#[doc = " Minimum and Maximum constraints for different chains."]
				pub fn minimums_and_maximums(
					&self,
					_0: impl ::std::borrow::Borrow<types::minimums_and_maximums::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::minimums_and_maximums::MinimumsAndMaximums,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"MinimumsAndMaximums",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							252u8, 19u8, 144u8, 130u8, 131u8, 39u8, 217u8, 45u8, 175u8, 196u8,
							214u8, 74u8, 167u8, 175u8, 15u8, 55u8, 231u8, 221u8, 69u8, 173u8,
							121u8, 188u8, 88u8, 231u8, 209u8, 74u8, 156u8, 106u8, 181u8, 204u8,
							94u8, 50u8,
						],
					)
				}
				#[doc = " TimeUnit delay params for different chains."]
				pub fn currency_delays_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_delays::CurrencyDelays,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"CurrencyDelays",
						vec![],
						[
							224u8, 13u8, 127u8, 139u8, 148u8, 81u8, 80u8, 86u8, 98u8, 109u8, 242u8,
							174u8, 29u8, 247u8, 171u8, 16u8, 38u8, 218u8, 161u8, 169u8, 119u8,
							120u8, 49u8, 205u8, 224u8, 37u8, 12u8, 209u8, 243u8, 186u8, 111u8,
							59u8,
						],
					)
				}
				#[doc = " TimeUnit delay params for different chains."]
				pub fn currency_delays(
					&self,
					_0: impl ::std::borrow::Borrow<types::currency_delays::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_delays::CurrencyDelays,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"CurrencyDelays",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							224u8, 13u8, 127u8, 139u8, 148u8, 81u8, 80u8, 86u8, 98u8, 109u8, 242u8,
							174u8, 29u8, 247u8, 171u8, 16u8, 38u8, 218u8, 161u8, 169u8, 119u8,
							120u8, 49u8, 205u8, 224u8, 37u8, 12u8, 209u8, 243u8, 186u8, 111u8,
							59u8,
						],
					)
				}
				#[doc = " A delegator's tuning record of exchange rate for the current time unit."]
				#[doc = " Currency Id + Delegator Id => latest tuned TimeUnit"]
				pub fn delegator_latest_tune_record_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_latest_tune_record::DelegatorLatestTuneRecord,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLatestTuneRecord",
						vec![],
						[
							174u8, 73u8, 161u8, 238u8, 25u8, 233u8, 211u8, 252u8, 161u8, 191u8,
							187u8, 81u8, 219u8, 75u8, 121u8, 151u8, 73u8, 83u8, 253u8, 52u8, 236u8,
							146u8, 20u8, 179u8, 67u8, 44u8, 152u8, 217u8, 69u8, 141u8, 18u8, 77u8,
						],
					)
				}
				#[doc = " A delegator's tuning record of exchange rate for the current time unit."]
				#[doc = " Currency Id + Delegator Id => latest tuned TimeUnit"]
				pub fn delegator_latest_tune_record_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_latest_tune_record::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_latest_tune_record::DelegatorLatestTuneRecord,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLatestTuneRecord",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							174u8, 73u8, 161u8, 238u8, 25u8, 233u8, 211u8, 252u8, 161u8, 191u8,
							187u8, 81u8, 219u8, 75u8, 121u8, 151u8, 73u8, 83u8, 253u8, 52u8, 236u8,
							146u8, 20u8, 179u8, 67u8, 44u8, 152u8, 217u8, 69u8, 141u8, 18u8, 77u8,
						],
					)
				}
				#[doc = " A delegator's tuning record of exchange rate for the current time unit."]
				#[doc = " Currency Id + Delegator Id => latest tuned TimeUnit"]
				pub fn delegator_latest_tune_record(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_latest_tune_record::Param0>,
					_1: impl ::std::borrow::Borrow<types::delegator_latest_tune_record::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_latest_tune_record::DelegatorLatestTuneRecord,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegatorLatestTuneRecord",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							174u8, 73u8, 161u8, 238u8, 25u8, 233u8, 211u8, 252u8, 161u8, 191u8,
							187u8, 81u8, 219u8, 75u8, 121u8, 151u8, 73u8, 83u8, 253u8, 52u8, 236u8,
							146u8, 20u8, 179u8, 67u8, 44u8, 152u8, 217u8, 69u8, 141u8, 18u8, 77u8,
						],
					)
				}
				#[doc = " Currency's tuning record of exchange rate for the current time unit."]
				#[doc = " Currency Id => (latest tuned TimeUnit, number of tuning times)"]
				pub fn currency_latest_tune_record_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_latest_tune_record::CurrencyLatestTuneRecord,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"CurrencyLatestTuneRecord",
						vec![],
						[
							5u8, 151u8, 95u8, 4u8, 234u8, 11u8, 135u8, 137u8, 225u8, 37u8, 195u8,
							206u8, 26u8, 114u8, 89u8, 80u8, 208u8, 89u8, 138u8, 83u8, 139u8, 69u8,
							156u8, 107u8, 34u8, 105u8, 225u8, 96u8, 172u8, 71u8, 39u8, 93u8,
						],
					)
				}
				#[doc = " Currency's tuning record of exchange rate for the current time unit."]
				#[doc = " Currency Id => (latest tuned TimeUnit, number of tuning times)"]
				pub fn currency_latest_tune_record(
					&self,
					_0: impl ::std::borrow::Borrow<types::currency_latest_tune_record::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_latest_tune_record::CurrencyLatestTuneRecord,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"CurrencyLatestTuneRecord",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							5u8, 151u8, 95u8, 4u8, 234u8, 11u8, 135u8, 137u8, 225u8, 37u8, 195u8,
							206u8, 26u8, 114u8, 89u8, 80u8, 208u8, 89u8, 138u8, 83u8, 139u8, 69u8,
							156u8, 107u8, 34u8, 105u8, 225u8, 96u8, 172u8, 71u8, 39u8, 93u8,
						],
					)
				}
				#[doc = " For each currencyId: how many times that a Currency's all delegators can tune the exchange"]
				#[doc = " rate for a single time unit, and how much at most each time can tune the"]
				#[doc = " exchange rate"]
				pub fn currency_tune_exchange_rate_limit_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_tune_exchange_rate_limit::CurrencyTuneExchangeRateLimit,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"CurrencyTuneExchangeRateLimit",
						vec![],
						[
							221u8, 145u8, 186u8, 47u8, 176u8, 237u8, 12u8, 58u8, 65u8, 227u8,
							182u8, 101u8, 26u8, 136u8, 93u8, 205u8, 68u8, 176u8, 74u8, 23u8, 138u8,
							160u8, 250u8, 32u8, 141u8, 202u8, 180u8, 124u8, 143u8, 166u8, 80u8,
							49u8,
						],
					)
				}
				#[doc = " For each currencyId: how many times that a Currency's all delegators can tune the exchange"]
				#[doc = " rate for a single time unit, and how much at most each time can tune the"]
				#[doc = " exchange rate"]
				pub fn currency_tune_exchange_rate_limit(
					&self,
					_0: impl ::std::borrow::Borrow<types::currency_tune_exchange_rate_limit::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_tune_exchange_rate_limit::CurrencyTuneExchangeRateLimit,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"CurrencyTuneExchangeRateLimit",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							221u8, 145u8, 186u8, 47u8, 176u8, 237u8, 12u8, 58u8, 65u8, 227u8,
							182u8, 101u8, 26u8, 136u8, 93u8, 205u8, 68u8, 176u8, 74u8, 23u8, 138u8,
							160u8, 250u8, 32u8, 141u8, 202u8, 180u8, 124u8, 143u8, 166u8, 80u8,
							49u8,
						],
					)
				}
				#[doc = " reflect if all delegations are on a decrease/revoke status. If yes, then new user redeeming"]
				#[doc = " is unaccepted."]
				pub fn delegations_occupied_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegations_occupied::DelegationsOccupied,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegationsOccupied",
						vec![],
						[
							199u8, 115u8, 210u8, 50u8, 168u8, 121u8, 116u8, 223u8, 107u8, 74u8,
							176u8, 29u8, 225u8, 37u8, 178u8, 30u8, 43u8, 46u8, 190u8, 123u8, 189u8,
							170u8, 166u8, 47u8, 153u8, 91u8, 107u8, 116u8, 22u8, 127u8, 117u8,
							16u8,
						],
					)
				}
				#[doc = " reflect if all delegations are on a decrease/revoke status. If yes, then new user redeeming"]
				#[doc = " is unaccepted."]
				pub fn delegations_occupied(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegations_occupied::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegations_occupied::DelegationsOccupied,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"DelegationsOccupied",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							199u8, 115u8, 210u8, 50u8, 168u8, 121u8, 116u8, 223u8, 107u8, 74u8,
							176u8, 29u8, 225u8, 37u8, 178u8, 30u8, 43u8, 46u8, 190u8, 123u8, 189u8,
							170u8, 166u8, 47u8, 153u8, 91u8, 107u8, 116u8, 22u8, 127u8, 117u8,
							16u8,
						],
					)
				}
				pub fn last_time_updated_ongoing_time_unit_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::last_time_updated_ongoing_time_unit::LastTimeUpdatedOngoingTimeUnit,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"LastTimeUpdatedOngoingTimeUnit",
						vec![],
						[
							180u8, 129u8, 72u8, 155u8, 38u8, 197u8, 185u8, 102u8, 234u8, 151u8,
							124u8, 196u8, 186u8, 36u8, 126u8, 90u8, 31u8, 168u8, 88u8, 234u8,
							134u8, 93u8, 117u8, 248u8, 217u8, 143u8, 67u8, 143u8, 99u8, 249u8, 6u8,
							161u8,
						],
					)
				}
				pub fn last_time_updated_ongoing_time_unit(
					&self,
					_0: impl ::std::borrow::Borrow<types::last_time_updated_ongoing_time_unit::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::last_time_updated_ongoing_time_unit::LastTimeUpdatedOngoingTimeUnit,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"LastTimeUpdatedOngoingTimeUnit",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							180u8, 129u8, 72u8, 155u8, 38u8, 197u8, 185u8, 102u8, 234u8, 151u8,
							124u8, 196u8, 186u8, 36u8, 126u8, 90u8, 31u8, 168u8, 88u8, 234u8,
							134u8, 93u8, 117u8, 248u8, 217u8, 143u8, 67u8, 143u8, 99u8, 249u8, 6u8,
							161u8,
						],
					)
				}
				pub fn ongoing_time_unit_update_interval_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::ongoing_time_unit_update_interval::OngoingTimeUnitUpdateInterval,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"OngoingTimeUnitUpdateInterval",
						vec![],
						[
							19u8, 126u8, 188u8, 126u8, 14u8, 98u8, 185u8, 109u8, 35u8, 243u8, 81u8,
							190u8, 253u8, 79u8, 96u8, 110u8, 86u8, 215u8, 65u8, 58u8, 57u8, 158u8,
							211u8, 109u8, 3u8, 53u8, 229u8, 179u8, 36u8, 82u8, 223u8, 97u8,
						],
					)
				}
				pub fn ongoing_time_unit_update_interval(
					&self,
					_0: impl ::std::borrow::Borrow<types::ongoing_time_unit_update_interval::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::ongoing_time_unit_update_interval::OngoingTimeUnitUpdateInterval,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"OngoingTimeUnitUpdateInterval",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							19u8, 126u8, 188u8, 126u8, 14u8, 98u8, 185u8, 109u8, 35u8, 243u8, 81u8,
							190u8, 253u8, 79u8, 96u8, 110u8, 86u8, 215u8, 65u8, 58u8, 57u8, 158u8,
							211u8, 109u8, 3u8, 53u8, 229u8, 179u8, 36u8, 82u8, 223u8, 97u8,
						],
					)
				}
				pub fn supplement_fee_account_whitelist_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::supplement_fee_account_whitelist::SupplementFeeAccountWhitelist,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"SupplementFeeAccountWhitelist",
						vec![],
						[
							216u8, 14u8, 116u8, 129u8, 77u8, 196u8, 165u8, 99u8, 250u8, 126u8,
							129u8, 230u8, 179u8, 112u8, 249u8, 131u8, 135u8, 251u8, 217u8, 243u8,
							156u8, 186u8, 9u8, 57u8, 194u8, 110u8, 154u8, 46u8, 253u8, 71u8, 176u8,
							121u8,
						],
					)
				}
				pub fn supplement_fee_account_whitelist(
					&self,
					_0: impl ::std::borrow::Borrow<types::supplement_fee_account_whitelist::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::supplement_fee_account_whitelist::SupplementFeeAccountWhitelist,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slp",
						"SupplementFeeAccountWhitelist",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							216u8, 14u8, 116u8, 129u8, 77u8, 196u8, 165u8, 99u8, 250u8, 126u8,
							129u8, 230u8, 179u8, 112u8, 249u8, 131u8, 135u8, 251u8, 217u8, 243u8,
							156u8, 186u8, 9u8, 57u8, 194u8, 110u8, 154u8, 46u8, 253u8, 71u8, 176u8,
							121u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn max_type_entry_per_block(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Slp",
						"MaxTypeEntryPerBlock",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn max_refund_per_block(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Slp",
						"MaxRefundPerBlock",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn max_length_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Slp",
						"MaxLengthLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn treasury_account(
					&self,
				) -> ::subxt::constants::Address<::subxt::utils::AccountId32> {
					::subxt::constants::Address::new_static(
						"Slp",
						"TreasuryAccount",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
			}
		}
	}
	pub mod xcm_interface {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_xcm_interface::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_xcm_interface::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::update_xcm_dest_weight_and_fee`]."]
				pub struct UpdateXcmDestWeightAndFee {
					pub updates: update_xcm_dest_weight_and_fee::Updates,
				}
				pub mod update_xcm_dest_weight_and_fee {
					use super::runtime_types;
					pub type Updates = ::std::vec::Vec<(
						runtime_types::tangle_primitives::currency::CurrencyId,
						runtime_types::tangle_primitives::XcmOperationType,
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for UpdateXcmDestWeightAndFee {
					const PALLET: &'static str = "XcmInterface";
					const CALL: &'static str = "update_xcm_dest_weight_and_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::transfer_statemine_assets`]."]
				pub struct TransferStatemineAssets {
					pub amount: transfer_statemine_assets::Amount,
					pub asset_id: transfer_statemine_assets::AssetId,
					pub dest: transfer_statemine_assets::Dest,
				}
				pub mod transfer_statemine_assets {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
					pub type AssetId = ::core::primitive::u32;
					pub type Dest = ::core::option::Option<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for TransferStatemineAssets {
					const PALLET: &'static str = "XcmInterface";
					const CALL: &'static str = "transfer_statemine_assets";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::update_xcm_dest_weight_and_fee`]."]
				pub fn update_xcm_dest_weight_and_fee(
					&self,
					updates: types::update_xcm_dest_weight_and_fee::Updates,
				) -> ::subxt::tx::Payload<types::UpdateXcmDestWeightAndFee> {
					::subxt::tx::Payload::new_static(
						"XcmInterface",
						"update_xcm_dest_weight_and_fee",
						types::UpdateXcmDestWeightAndFee { updates },
						[
							42u8, 2u8, 171u8, 10u8, 135u8, 3u8, 112u8, 152u8, 227u8, 49u8, 19u8,
							27u8, 63u8, 48u8, 149u8, 2u8, 220u8, 228u8, 34u8, 229u8, 106u8, 14u8,
							137u8, 199u8, 195u8, 174u8, 110u8, 216u8, 196u8, 222u8, 48u8, 38u8,
						],
					)
				}
				#[doc = "See [`Pallet::transfer_statemine_assets`]."]
				pub fn transfer_statemine_assets(
					&self,
					amount: types::transfer_statemine_assets::Amount,
					asset_id: types::transfer_statemine_assets::AssetId,
					dest: types::transfer_statemine_assets::Dest,
				) -> ::subxt::tx::Payload<types::TransferStatemineAssets> {
					::subxt::tx::Payload::new_static(
						"XcmInterface",
						"transfer_statemine_assets",
						types::TransferStatemineAssets { amount, asset_id, dest },
						[
							140u8, 64u8, 104u8, 18u8, 212u8, 17u8, 67u8, 174u8, 216u8, 165u8, 64u8,
							138u8, 150u8, 39u8, 191u8, 184u8, 120u8, 84u8, 15u8, 62u8, 132u8,
							198u8, 7u8, 155u8, 166u8, 14u8, 94u8, 181u8, 131u8, 250u8, 169u8,
							113u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_xcm_interface::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmDestWeightAndFeeUpdated(
				pub xcm_dest_weight_and_fee_updated::Field0,
				pub xcm_dest_weight_and_fee_updated::Field1,
				pub xcm_dest_weight_and_fee_updated::Field2,
				pub xcm_dest_weight_and_fee_updated::Field3,
			);
			pub mod xcm_dest_weight_and_fee_updated {
				use super::runtime_types;
				pub type Field0 = runtime_types::tangle_primitives::XcmOperationType;
				pub type Field1 = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Field2 = runtime_types::sp_weights::weight_v2::Weight;
				pub type Field3 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for XcmDestWeightAndFeeUpdated {
				const PALLET: &'static str = "XcmInterface";
				const EVENT: &'static str = "XcmDestWeightAndFeeUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferredStatemineMultiAsset(
				pub transferred_statemine_multi_asset::Field0,
				pub transferred_statemine_multi_asset::Field1,
			);
			pub mod transferred_statemine_multi_asset {
				use super::runtime_types;
				pub type Field0 = ::subxt::utils::AccountId32;
				pub type Field1 = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TransferredStatemineMultiAsset {
				const PALLET: &'static str = "XcmInterface";
				const EVENT: &'static str = "TransferredStatemineMultiAsset";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod xcm_weight_and_fee {
					use super::runtime_types;
					pub type XcmWeightAndFee =
						(runtime_types::sp_weights::weight_v2::Weight, ::core::primitive::u128);
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = runtime_types::tangle_primitives::XcmOperationType;
				}
				pub mod current_nonce {
					use super::runtime_types;
					pub type CurrentNonce = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The dest weight limit and fee for execution XCM msg sent by XcmInterface. Must be"]
				#[doc = " sufficient, otherwise the execution of XCM msg on relaychain will fail."]
				#[doc = ""]
				#[doc = " XcmWeightAndFee: map: XcmOperationType => (Weight, Balance)"]
				pub fn xcm_weight_and_fee_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::xcm_weight_and_fee::XcmWeightAndFee,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmInterface",
						"XcmWeightAndFee",
						vec![],
						[
							146u8, 23u8, 117u8, 183u8, 231u8, 109u8, 177u8, 60u8, 133u8, 12u8,
							76u8, 6u8, 190u8, 238u8, 45u8, 108u8, 232u8, 112u8, 69u8, 248u8, 56u8,
							234u8, 60u8, 164u8, 129u8, 15u8, 193u8, 102u8, 173u8, 217u8, 17u8,
							29u8,
						],
					)
				}
				#[doc = " The dest weight limit and fee for execution XCM msg sent by XcmInterface. Must be"]
				#[doc = " sufficient, otherwise the execution of XCM msg on relaychain will fail."]
				#[doc = ""]
				#[doc = " XcmWeightAndFee: map: XcmOperationType => (Weight, Balance)"]
				pub fn xcm_weight_and_fee_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::xcm_weight_and_fee::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::xcm_weight_and_fee::XcmWeightAndFee,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmInterface",
						"XcmWeightAndFee",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							146u8, 23u8, 117u8, 183u8, 231u8, 109u8, 177u8, 60u8, 133u8, 12u8,
							76u8, 6u8, 190u8, 238u8, 45u8, 108u8, 232u8, 112u8, 69u8, 248u8, 56u8,
							234u8, 60u8, 164u8, 129u8, 15u8, 193u8, 102u8, 173u8, 217u8, 17u8,
							29u8,
						],
					)
				}
				#[doc = " The dest weight limit and fee for execution XCM msg sent by XcmInterface. Must be"]
				#[doc = " sufficient, otherwise the execution of XCM msg on relaychain will fail."]
				#[doc = ""]
				#[doc = " XcmWeightAndFee: map: XcmOperationType => (Weight, Balance)"]
				pub fn xcm_weight_and_fee(
					&self,
					_0: impl ::std::borrow::Borrow<types::xcm_weight_and_fee::Param0>,
					_1: impl ::std::borrow::Borrow<types::xcm_weight_and_fee::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::xcm_weight_and_fee::XcmWeightAndFee,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmInterface",
						"XcmWeightAndFee",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							146u8, 23u8, 117u8, 183u8, 231u8, 109u8, 177u8, 60u8, 133u8, 12u8,
							76u8, 6u8, 190u8, 238u8, 45u8, 108u8, 232u8, 112u8, 69u8, 248u8, 56u8,
							234u8, 60u8, 164u8, 129u8, 15u8, 193u8, 102u8, 173u8, 217u8, 17u8,
							29u8,
						],
					)
				}
				pub fn current_nonce_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::current_nonce::CurrentNonce,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"XcmInterface",
						"CurrentNonce",
						vec![],
						[
							75u8, 26u8, 105u8, 206u8, 35u8, 74u8, 44u8, 174u8, 3u8, 221u8, 204u8,
							251u8, 202u8, 206u8, 84u8, 108u8, 137u8, 205u8, 70u8, 1u8, 160u8, 81u8,
							147u8, 111u8, 186u8, 235u8, 84u8, 46u8, 249u8, 27u8, 9u8, 136u8,
						],
					)
				}
				pub fn current_nonce(
					&self,
					_0: impl ::std::borrow::Borrow<types::current_nonce::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::current_nonce::CurrentNonce,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"XcmInterface",
						"CurrentNonce",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							75u8, 26u8, 105u8, 206u8, 35u8, 74u8, 44u8, 174u8, 3u8, 221u8, 204u8,
							251u8, 202u8, 206u8, 84u8, 108u8, 137u8, 205u8, 70u8, 1u8, 160u8, 81u8,
							147u8, 111u8, 186u8, 235u8, 84u8, 46u8, 249u8, 27u8, 9u8, 136u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The currency id of the RelayChain"]
				pub fn relaychain_currency_id(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::tangle_primitives::currency::CurrencyId,
				> {
					::subxt::constants::Address::new_static(
						"XcmInterface",
						"RelaychainCurrencyId",
						[
							0u8, 142u8, 146u8, 232u8, 120u8, 214u8, 141u8, 122u8, 106u8, 238u8,
							244u8, 172u8, 42u8, 28u8, 151u8, 105u8, 14u8, 234u8, 196u8, 156u8,
							103u8, 83u8, 72u8, 226u8, 166u8, 84u8, 244u8, 226u8, 248u8, 176u8,
							92u8, 22u8,
						],
					)
				}
				#[doc = " The account of parachain on the relaychain."]
				pub fn parachain_sovereign_account(
					&self,
				) -> ::subxt::constants::Address<::subxt::utils::AccountId32> {
					::subxt::constants::Address::new_static(
						"XcmInterface",
						"ParachainSovereignAccount",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
				pub fn relay_network(
					&self,
				) -> ::subxt::constants::Address<runtime_types::xcm::v3::junction::NetworkId> {
					::subxt::constants::Address::new_static(
						"XcmInterface",
						"RelayNetwork",
						[
							4u8, 181u8, 250u8, 94u8, 113u8, 20u8, 210u8, 201u8, 235u8, 145u8,
							179u8, 94u8, 162u8, 164u8, 136u8, 163u8, 83u8, 72u8, 196u8, 45u8,
							210u8, 177u8, 238u8, 16u8, 229u8, 73u8, 131u8, 122u8, 197u8, 210u8,
							48u8, 54u8,
						],
					)
				}
				pub fn parachain_id(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::polkadot_parachain_primitives::primitives::Id,
				> {
					::subxt::constants::Address::new_static(
						"XcmInterface",
						"ParachainId",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				pub fn call_back_time_out(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"XcmInterface",
						"CallBackTimeOut",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod slpx {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_slpx::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_slpx::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::mint`]."]
				pub struct Mint {
					pub evm_caller: mint::EvmCaller,
					pub currency_id: mint::CurrencyId,
					pub target_chain: mint::TargetChain,
					pub remark: mint::Remark,
				}
				pub mod mint {
					use super::runtime_types;
					pub type EvmCaller = ::subxt::utils::H160;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TargetChain =
						runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
					pub type Remark = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Mint {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "mint";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::zenlink_swap`]."]
				pub struct ZenlinkSwap {
					pub evm_caller: zenlink_swap::EvmCaller,
					pub currency_id_in: zenlink_swap::CurrencyIdIn,
					pub currency_id_out: zenlink_swap::CurrencyIdOut,
					pub currency_id_out_min: zenlink_swap::CurrencyIdOutMin,
					pub target_chain: zenlink_swap::TargetChain,
				}
				pub mod zenlink_swap {
					use super::runtime_types;
					pub type EvmCaller = ::subxt::utils::H160;
					pub type CurrencyIdIn = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type CurrencyIdOut = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type CurrencyIdOutMin = ::core::primitive::u128;
					pub type TargetChain =
						runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ZenlinkSwap {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "zenlink_swap";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::redeem`]."]
				pub struct Redeem {
					pub evm_caller: redeem::EvmCaller,
					pub Lst_id: redeem::LstId,
					pub target_chain: redeem::TargetChain,
				}
				pub mod redeem {
					use super::runtime_types;
					pub type EvmCaller = ::subxt::utils::H160;
					pub type LstId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TargetChain =
						runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Redeem {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "redeem";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::stable_pool_swap`]."]
				pub struct StablePoolSwap {
					pub evm_caller: stable_pool_swap::EvmCaller,
					pub pool_id: stable_pool_swap::PoolId,
					pub currency_id_in: stable_pool_swap::CurrencyIdIn,
					pub currency_id_out: stable_pool_swap::CurrencyIdOut,
					pub min_dy: stable_pool_swap::MinDy,
					pub target_chain: stable_pool_swap::TargetChain,
				}
				pub mod stable_pool_swap {
					use super::runtime_types;
					pub type EvmCaller = ::subxt::utils::H160;
					pub type PoolId = ::core::primitive::u32;
					pub type CurrencyIdIn = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type CurrencyIdOut = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type MinDy = ::core::primitive::u128;
					pub type TargetChain =
						runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for StablePoolSwap {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "stable_pool_swap";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_whitelist`]."]
				pub struct AddWhitelist {
					pub support_chain: add_whitelist::SupportChain,
					pub evm_contract_account_id: add_whitelist::EvmContractAccountId,
				}
				pub mod add_whitelist {
					use super::runtime_types;
					pub type SupportChain = runtime_types::tangle_slpx::types::SupportChain;
					pub type EvmContractAccountId = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddWhitelist {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "add_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_whitelist`]."]
				pub struct RemoveWhitelist {
					pub support_chain: remove_whitelist::SupportChain,
					pub evm_contract_account_id: remove_whitelist::EvmContractAccountId,
				}
				pub mod remove_whitelist {
					use super::runtime_types;
					pub type SupportChain = runtime_types::tangle_slpx::types::SupportChain;
					pub type EvmContractAccountId = ::subxt::utils::AccountId32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveWhitelist {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "remove_whitelist";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_execution_fee`]."]
				pub struct SetExecutionFee {
					pub currency_id: set_execution_fee::CurrencyId,
					pub execution_fee: set_execution_fee::ExecutionFee,
				}
				pub mod set_execution_fee {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type ExecutionFee = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetExecutionFee {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "set_execution_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_transfer_to_fee`]."]
				pub struct SetTransferToFee {
					pub support_chain: set_transfer_to_fee::SupportChain,
					pub transfer_to_fee: set_transfer_to_fee::TransferToFee,
				}
				pub mod set_transfer_to_fee {
					use super::runtime_types;
					pub type SupportChain = runtime_types::tangle_slpx::types::SupportChain;
					pub type TransferToFee = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetTransferToFee {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "set_transfer_to_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_currency_ethereum_call_switch`]."]
				pub struct SetCurrencyEthereumCallSwitch {
					pub currency_id: set_currency_ethereum_call_switch::CurrencyId,
					pub is_support: set_currency_ethereum_call_switch::IsSupport,
				}
				pub mod set_currency_ethereum_call_switch {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type IsSupport = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetCurrencyEthereumCallSwitch {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "set_currency_ethereum_call_switch";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_ethereum_call_configration`]."]
				pub struct SetEthereumCallConfigration {
					pub xcm_fee: set_ethereum_call_configration::XcmFee,
					pub xcm_weight: set_ethereum_call_configration::XcmWeight,
					pub period: set_ethereum_call_configration::Period,
					pub contract: set_ethereum_call_configration::Contract,
				}
				pub mod set_ethereum_call_configration {
					use super::runtime_types;
					pub type XcmFee = ::core::primitive::u128;
					pub type XcmWeight = runtime_types::sp_weights::weight_v2::Weight;
					pub type Period = ::core::primitive::u32;
					pub type Contract = ::subxt::utils::H160;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetEthereumCallConfigration {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "set_ethereum_call_configration";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_currency_support_xcm_fee`]."]
				pub struct SetCurrencySupportXcmFee {
					pub currency_id: set_currency_support_xcm_fee::CurrencyId,
					pub is_support: set_currency_support_xcm_fee::IsSupport,
				}
				pub mod set_currency_support_xcm_fee {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type IsSupport = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetCurrencySupportXcmFee {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "set_currency_support_xcm_fee";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_delay_block`]."]
				pub struct SetDelayBlock {
					pub delay_block: set_delay_block::DelayBlock,
				}
				pub mod set_delay_block {
					use super::runtime_types;
					pub type DelayBlock = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetDelayBlock {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "set_delay_block";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::force_add_order`]."]
				pub struct ForceAddOrder {
					pub slpx_contract_derivative_account:
						force_add_order::SlpxContractDerivativeAccount,
					pub evm_caller: force_add_order::EvmCaller,
					pub currency_id: force_add_order::CurrencyId,
					pub target_chain: force_add_order::TargetChain,
					pub remark: force_add_order::Remark,
					pub order_type: force_add_order::OrderType,
				}
				pub mod force_add_order {
					use super::runtime_types;
					pub type SlpxContractDerivativeAccount = ::subxt::utils::AccountId32;
					pub type EvmCaller = ::subxt::utils::H160;
					pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type TargetChain =
						runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
					pub type Remark = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>;
					pub type OrderType = runtime_types::tangle_slpx::types::OrderType;
				}
				impl ::subxt::blocks::StaticExtrinsic for ForceAddOrder {
					const PALLET: &'static str = "Slpx";
					const CALL: &'static str = "force_add_order";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::mint`]."]
				pub fn mint(
					&self,
					evm_caller: types::mint::EvmCaller,
					currency_id: types::mint::CurrencyId,
					target_chain: types::mint::TargetChain,
					remark: types::mint::Remark,
				) -> ::subxt::tx::Payload<types::Mint> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"mint",
						types::Mint { evm_caller, currency_id, target_chain, remark },
						[
							120u8, 122u8, 96u8, 241u8, 253u8, 223u8, 208u8, 70u8, 94u8, 149u8,
							167u8, 223u8, 255u8, 146u8, 92u8, 83u8, 173u8, 72u8, 2u8, 132u8, 182u8,
							229u8, 24u8, 186u8, 159u8, 163u8, 128u8, 23u8, 153u8, 213u8, 45u8,
							116u8,
						],
					)
				}
				#[doc = "See [`Pallet::zenlink_swap`]."]
				pub fn zenlink_swap(
					&self,
					evm_caller: types::zenlink_swap::EvmCaller,
					currency_id_in: types::zenlink_swap::CurrencyIdIn,
					currency_id_out: types::zenlink_swap::CurrencyIdOut,
					currency_id_out_min: types::zenlink_swap::CurrencyIdOutMin,
					target_chain: types::zenlink_swap::TargetChain,
				) -> ::subxt::tx::Payload<types::ZenlinkSwap> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"zenlink_swap",
						types::ZenlinkSwap {
							evm_caller,
							currency_id_in,
							currency_id_out,
							currency_id_out_min,
							target_chain,
						},
						[
							240u8, 121u8, 78u8, 83u8, 197u8, 166u8, 179u8, 61u8, 214u8, 112u8,
							26u8, 255u8, 65u8, 93u8, 79u8, 167u8, 248u8, 197u8, 220u8, 32u8, 52u8,
							187u8, 8u8, 243u8, 218u8, 77u8, 222u8, 170u8, 56u8, 228u8, 15u8, 254u8,
						],
					)
				}
				#[doc = "See [`Pallet::redeem`]."]
				pub fn redeem(
					&self,
					evm_caller: types::redeem::EvmCaller,
					Lst_id: types::redeem::LstId,
					target_chain: types::redeem::TargetChain,
				) -> ::subxt::tx::Payload<types::Redeem> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"redeem",
						types::Redeem { evm_caller, Lst_id, target_chain },
						[
							248u8, 165u8, 222u8, 87u8, 66u8, 61u8, 103u8, 36u8, 38u8, 215u8, 44u8,
							170u8, 135u8, 75u8, 209u8, 224u8, 104u8, 107u8, 153u8, 146u8, 148u8,
							184u8, 118u8, 242u8, 54u8, 199u8, 68u8, 118u8, 16u8, 159u8, 67u8, 15u8,
						],
					)
				}
				#[doc = "See [`Pallet::stable_pool_swap`]."]
				pub fn stable_pool_swap(
					&self,
					evm_caller: types::stable_pool_swap::EvmCaller,
					pool_id: types::stable_pool_swap::PoolId,
					currency_id_in: types::stable_pool_swap::CurrencyIdIn,
					currency_id_out: types::stable_pool_swap::CurrencyIdOut,
					min_dy: types::stable_pool_swap::MinDy,
					target_chain: types::stable_pool_swap::TargetChain,
				) -> ::subxt::tx::Payload<types::StablePoolSwap> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"stable_pool_swap",
						types::StablePoolSwap {
							evm_caller,
							pool_id,
							currency_id_in,
							currency_id_out,
							min_dy,
							target_chain,
						},
						[
							126u8, 130u8, 159u8, 227u8, 135u8, 211u8, 7u8, 72u8, 171u8, 99u8, 37u8,
							157u8, 227u8, 77u8, 150u8, 179u8, 168u8, 171u8, 68u8, 64u8, 187u8,
							215u8, 36u8, 134u8, 91u8, 117u8, 55u8, 177u8, 124u8, 65u8, 145u8,
							225u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_whitelist`]."]
				pub fn add_whitelist(
					&self,
					support_chain: types::add_whitelist::SupportChain,
					evm_contract_account_id: types::add_whitelist::EvmContractAccountId,
				) -> ::subxt::tx::Payload<types::AddWhitelist> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"add_whitelist",
						types::AddWhitelist { support_chain, evm_contract_account_id },
						[
							206u8, 50u8, 132u8, 194u8, 3u8, 25u8, 32u8, 69u8, 97u8, 157u8, 254u8,
							155u8, 153u8, 57u8, 38u8, 69u8, 200u8, 218u8, 220u8, 57u8, 36u8, 112u8,
							27u8, 135u8, 174u8, 129u8, 127u8, 254u8, 34u8, 207u8, 84u8, 0u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_whitelist`]."]
				pub fn remove_whitelist(
					&self,
					support_chain: types::remove_whitelist::SupportChain,
					evm_contract_account_id: types::remove_whitelist::EvmContractAccountId,
				) -> ::subxt::tx::Payload<types::RemoveWhitelist> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"remove_whitelist",
						types::RemoveWhitelist { support_chain, evm_contract_account_id },
						[
							194u8, 112u8, 202u8, 121u8, 207u8, 0u8, 130u8, 39u8, 122u8, 96u8,
							117u8, 32u8, 179u8, 246u8, 149u8, 154u8, 42u8, 24u8, 198u8, 78u8, 17u8,
							239u8, 127u8, 238u8, 1u8, 221u8, 113u8, 173u8, 108u8, 32u8, 104u8,
							177u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_execution_fee`]."]
				pub fn set_execution_fee(
					&self,
					currency_id: types::set_execution_fee::CurrencyId,
					execution_fee: types::set_execution_fee::ExecutionFee,
				) -> ::subxt::tx::Payload<types::SetExecutionFee> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"set_execution_fee",
						types::SetExecutionFee { currency_id, execution_fee },
						[
							188u8, 136u8, 132u8, 62u8, 18u8, 227u8, 246u8, 158u8, 26u8, 126u8, 9u8,
							140u8, 173u8, 214u8, 247u8, 138u8, 71u8, 178u8, 134u8, 228u8, 157u8,
							170u8, 224u8, 127u8, 165u8, 68u8, 87u8, 59u8, 231u8, 20u8, 208u8, 1u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_transfer_to_fee`]."]
				pub fn set_transfer_to_fee(
					&self,
					support_chain: types::set_transfer_to_fee::SupportChain,
					transfer_to_fee: types::set_transfer_to_fee::TransferToFee,
				) -> ::subxt::tx::Payload<types::SetTransferToFee> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"set_transfer_to_fee",
						types::SetTransferToFee { support_chain, transfer_to_fee },
						[
							152u8, 133u8, 252u8, 215u8, 143u8, 11u8, 54u8, 92u8, 120u8, 161u8,
							85u8, 115u8, 250u8, 202u8, 108u8, 154u8, 105u8, 246u8, 166u8, 7u8,
							204u8, 91u8, 118u8, 43u8, 234u8, 87u8, 219u8, 187u8, 184u8, 225u8,
							222u8, 9u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_currency_ethereum_call_switch`]."]
				pub fn set_currency_ethereum_call_switch(
					&self,
					currency_id: types::set_currency_ethereum_call_switch::CurrencyId,
					is_support: types::set_currency_ethereum_call_switch::IsSupport,
				) -> ::subxt::tx::Payload<types::SetCurrencyEthereumCallSwitch> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"set_currency_ethereum_call_switch",
						types::SetCurrencyEthereumCallSwitch { currency_id, is_support },
						[
							183u8, 115u8, 111u8, 93u8, 76u8, 21u8, 59u8, 7u8, 253u8, 13u8, 242u8,
							186u8, 165u8, 175u8, 15u8, 210u8, 83u8, 203u8, 114u8, 255u8, 111u8,
							10u8, 206u8, 112u8, 66u8, 166u8, 28u8, 172u8, 238u8, 33u8, 126u8,
							162u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_ethereum_call_configration`]."]
				pub fn set_ethereum_call_configration(
					&self,
					xcm_fee: types::set_ethereum_call_configration::XcmFee,
					xcm_weight: types::set_ethereum_call_configration::XcmWeight,
					period: types::set_ethereum_call_configration::Period,
					contract: types::set_ethereum_call_configration::Contract,
				) -> ::subxt::tx::Payload<types::SetEthereumCallConfigration> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"set_ethereum_call_configration",
						types::SetEthereumCallConfigration {
							xcm_fee,
							xcm_weight,
							period,
							contract,
						},
						[
							19u8, 220u8, 155u8, 249u8, 4u8, 121u8, 186u8, 152u8, 152u8, 90u8,
							215u8, 88u8, 66u8, 133u8, 129u8, 105u8, 17u8, 227u8, 65u8, 158u8, 52u8,
							212u8, 41u8, 189u8, 119u8, 230u8, 239u8, 64u8, 135u8, 9u8, 100u8, 99u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_currency_support_xcm_fee`]."]
				pub fn set_currency_support_xcm_fee(
					&self,
					currency_id: types::set_currency_support_xcm_fee::CurrencyId,
					is_support: types::set_currency_support_xcm_fee::IsSupport,
				) -> ::subxt::tx::Payload<types::SetCurrencySupportXcmFee> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"set_currency_support_xcm_fee",
						types::SetCurrencySupportXcmFee { currency_id, is_support },
						[
							234u8, 33u8, 26u8, 158u8, 178u8, 92u8, 153u8, 114u8, 41u8, 251u8,
							156u8, 82u8, 175u8, 198u8, 102u8, 198u8, 49u8, 52u8, 183u8, 186u8,
							179u8, 17u8, 31u8, 44u8, 119u8, 157u8, 241u8, 123u8, 250u8, 232u8,
							69u8, 215u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_delay_block`]."]
				pub fn set_delay_block(
					&self,
					delay_block: types::set_delay_block::DelayBlock,
				) -> ::subxt::tx::Payload<types::SetDelayBlock> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"set_delay_block",
						types::SetDelayBlock { delay_block },
						[
							76u8, 169u8, 50u8, 211u8, 171u8, 0u8, 12u8, 224u8, 215u8, 115u8, 218u8,
							179u8, 83u8, 223u8, 57u8, 33u8, 247u8, 25u8, 51u8, 187u8, 34u8, 99u8,
							99u8, 251u8, 42u8, 103u8, 53u8, 54u8, 140u8, 212u8, 4u8, 42u8,
						],
					)
				}
				#[doc = "See [`Pallet::force_add_order`]."]
				pub fn force_add_order(
					&self,
					slpx_contract_derivative_account : types :: force_add_order :: SlpxContractDerivativeAccount,
					evm_caller: types::force_add_order::EvmCaller,
					currency_id: types::force_add_order::CurrencyId,
					target_chain: types::force_add_order::TargetChain,
					remark: types::force_add_order::Remark,
					order_type: types::force_add_order::OrderType,
				) -> ::subxt::tx::Payload<types::ForceAddOrder> {
					::subxt::tx::Payload::new_static(
						"Slpx",
						"force_add_order",
						types::ForceAddOrder {
							slpx_contract_derivative_account,
							evm_caller,
							currency_id,
							target_chain,
							remark,
							order_type,
						},
						[
							66u8, 65u8, 132u8, 56u8, 23u8, 144u8, 96u8, 189u8, 23u8, 59u8, 195u8,
							202u8, 238u8, 71u8, 172u8, 105u8, 136u8, 210u8, 235u8, 105u8, 172u8,
							161u8, 40u8, 32u8, 83u8, 37u8, 119u8, 66u8, 60u8, 127u8, 210u8, 203u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_slpx::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddWhitelistAccountId {
				pub support_chain: add_whitelist_account_id::SupportChain,
				pub evm_contract_account_id: add_whitelist_account_id::EvmContractAccountId,
			}
			pub mod add_whitelist_account_id {
				use super::runtime_types;
				pub type SupportChain = runtime_types::tangle_slpx::types::SupportChain;
				pub type EvmContractAccountId = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for AddWhitelistAccountId {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "AddWhitelistAccountId";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveWhitelistAccountId {
				pub support_chain: remove_whitelist_account_id::SupportChain,
				pub evm_contract_account_id: remove_whitelist_account_id::EvmContractAccountId,
			}
			pub mod remove_whitelist_account_id {
				use super::runtime_types;
				pub type SupportChain = runtime_types::tangle_slpx::types::SupportChain;
				pub type EvmContractAccountId = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for RemoveWhitelistAccountId {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "RemoveWhitelistAccountId";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmMint {
				pub evm_caller: xcm_mint::EvmCaller,
				pub currency_id: xcm_mint::CurrencyId,
				pub token_amount: xcm_mint::TokenAmount,
				pub target_chain: xcm_mint::TargetChain,
			}
			pub mod xcm_mint {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TokenAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmMint {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmMint";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmMintFailed {
				pub evm_caller: xcm_mint_failed::EvmCaller,
				pub currency_id: xcm_mint_failed::CurrencyId,
				pub token_amount: xcm_mint_failed::TokenAmount,
				pub target_chain: xcm_mint_failed::TargetChain,
			}
			pub mod xcm_mint_failed {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TokenAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmMintFailed {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmMintFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmZenlinkSwap {
				pub evm_caller: xcm_zenlink_swap::EvmCaller,
				pub currency_id_in: xcm_zenlink_swap::CurrencyIdIn,
				pub currency_id_out: xcm_zenlink_swap::CurrencyIdOut,
				pub currency_id_out_amount: xcm_zenlink_swap::CurrencyIdOutAmount,
				pub target_chain: xcm_zenlink_swap::TargetChain,
			}
			pub mod xcm_zenlink_swap {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type CurrencyIdIn = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type CurrencyIdOut = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type CurrencyIdOutAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmZenlinkSwap {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmZenlinkSwap";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmZenlinkSwapFailed {
				pub evm_caller: xcm_zenlink_swap_failed::EvmCaller,
				pub currency_id_in: xcm_zenlink_swap_failed::CurrencyIdIn,
				pub currency_id_out: xcm_zenlink_swap_failed::CurrencyIdOut,
				pub currency_id_in_amount: xcm_zenlink_swap_failed::CurrencyIdInAmount,
				pub target_chain: xcm_zenlink_swap_failed::TargetChain,
			}
			pub mod xcm_zenlink_swap_failed {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type CurrencyIdIn = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type CurrencyIdOut = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type CurrencyIdInAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmZenlinkSwapFailed {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmZenlinkSwapFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmStablePoolSwap {
				pub evm_caller: xcm_stable_pool_swap::EvmCaller,
				pub pool_token_index_in: xcm_stable_pool_swap::PoolTokenIndexIn,
				pub pool_token_index_out: xcm_stable_pool_swap::PoolTokenIndexOut,
				pub currency_id_out_amount: xcm_stable_pool_swap::CurrencyIdOutAmount,
				pub target_chain: xcm_stable_pool_swap::TargetChain,
			}
			pub mod xcm_stable_pool_swap {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type PoolTokenIndexIn = ::core::primitive::u32;
				pub type PoolTokenIndexOut = ::core::primitive::u32;
				pub type CurrencyIdOutAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmStablePoolSwap {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmStablePoolSwap";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmStablePoolSwapFailed {
				pub evm_caller: xcm_stable_pool_swap_failed::EvmCaller,
				pub pool_token_index_in: xcm_stable_pool_swap_failed::PoolTokenIndexIn,
				pub pool_token_index_out: xcm_stable_pool_swap_failed::PoolTokenIndexOut,
				pub currency_id_in_amount: xcm_stable_pool_swap_failed::CurrencyIdInAmount,
				pub target_chain: xcm_stable_pool_swap_failed::TargetChain,
			}
			pub mod xcm_stable_pool_swap_failed {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type PoolTokenIndexIn = ::core::primitive::u32;
				pub type PoolTokenIndexOut = ::core::primitive::u32;
				pub type CurrencyIdInAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmStablePoolSwapFailed {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmStablePoolSwapFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmRedeem {
				pub evm_caller: xcm_redeem::EvmCaller,
				pub Lst_id: xcm_redeem::LstId,
				pub Lst_amount: xcm_redeem::LstAmount,
				pub target_chain: xcm_redeem::TargetChain,
			}
			pub mod xcm_redeem {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type LstId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type LstAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmRedeem {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmRedeem";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmRedeemFailed {
				pub evm_caller: xcm_redeem_failed::EvmCaller,
				pub Lst_id: xcm_redeem_failed::LstId,
				pub Lst_amount: xcm_redeem_failed::LstAmount,
				pub target_chain: xcm_redeem_failed::TargetChain,
			}
			pub mod xcm_redeem_failed {
				use super::runtime_types;
				pub type EvmCaller = ::subxt::utils::H160;
				pub type LstId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type LstAmount = ::core::primitive::u128;
				pub type TargetChain =
					runtime_types::tangle_slpx::types::TargetChain<::subxt::utils::AccountId32>;
			}
			impl ::subxt::events::StaticEvent for XcmRedeemFailed {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmRedeemFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetTransferToFee {
				pub support_chain: set_transfer_to_fee::SupportChain,
				pub transfer_to_fee: set_transfer_to_fee::TransferToFee,
			}
			pub mod set_transfer_to_fee {
				use super::runtime_types;
				pub type SupportChain = runtime_types::tangle_slpx::types::SupportChain;
				pub type TransferToFee = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SetTransferToFee {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "SetTransferToFee";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetExecutionFee {
				pub currency_id: set_execution_fee::CurrencyId,
				pub execution_fee: set_execution_fee::ExecutionFee,
			}
			pub mod set_execution_fee {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type ExecutionFee = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SetExecutionFee {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "SetExecutionFee";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCurrencyEthereumCallSwitch {
				pub currency_id: set_currency_ethereum_call_switch::CurrencyId,
				pub is_support: set_currency_ethereum_call_switch::IsSupport,
			}
			pub mod set_currency_ethereum_call_switch {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type IsSupport = ::core::primitive::bool;
			}
			impl ::subxt::events::StaticEvent for SetCurrencyEthereumCallSwitch {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "SetCurrencyEthereumCallSwitch";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetEthereumCallConfiguration {
				pub xcm_fee: set_ethereum_call_configuration::XcmFee,
				pub xcm_weight: set_ethereum_call_configuration::XcmWeight,
				pub period: set_ethereum_call_configuration::Period,
				pub contract: set_ethereum_call_configuration::Contract,
			}
			pub mod set_ethereum_call_configuration {
				use super::runtime_types;
				pub type XcmFee = ::core::primitive::u128;
				pub type XcmWeight = runtime_types::sp_weights::weight_v2::Weight;
				pub type Period = ::core::primitive::u32;
				pub type Contract = ::subxt::utils::H160;
			}
			impl ::subxt::events::StaticEvent for SetEthereumCallConfiguration {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "SetEthereumCallConfiguration";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct XcmSetTokenAmount {
				pub currency_id: xcm_set_token_amount::CurrencyId,
				pub token_amount: xcm_set_token_amount::TokenAmount,
				pub vcurrency_id: xcm_set_token_amount::VcurrencyId,
				pub Lst_amount: xcm_set_token_amount::LstAmount,
			}
			pub mod xcm_set_token_amount {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type TokenAmount = ::core::primitive::u128;
				pub type VcurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type LstAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for XcmSetTokenAmount {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "XcmSetTokenAmount";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCurrencyToSupportXcmFee {
				pub currency_id: set_currency_to_support_xcm_fee::CurrencyId,
				pub is_support: set_currency_to_support_xcm_fee::IsSupport,
			}
			pub mod set_currency_to_support_xcm_fee {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type IsSupport = ::core::primitive::bool;
			}
			impl ::subxt::events::StaticEvent for SetCurrencyToSupportXcmFee {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "SetCurrencyToSupportXcmFee";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetDelayBlock {
				pub delay_block: set_delay_block::DelayBlock,
			}
			pub mod set_delay_block {
				use super::runtime_types;
				pub type DelayBlock = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for SetDelayBlock {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "SetDelayBlock";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CreateOrder {
				pub order: create_order::Order,
			}
			pub mod create_order {
				use super::runtime_types;
				pub type Order = runtime_types::tangle_slpx::types::Order<
					::subxt::utils::AccountId32,
					runtime_types::tangle_primitives::currency::CurrencyId,
					::core::primitive::u128,
					::core::primitive::u32,
				>;
			}
			impl ::subxt::events::StaticEvent for CreateOrder {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "CreateOrder";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OrderHandled {
				pub order: order_handled::Order,
			}
			pub mod order_handled {
				use super::runtime_types;
				pub type Order = runtime_types::tangle_slpx::types::Order<
					::subxt::utils::AccountId32,
					runtime_types::tangle_primitives::currency::CurrencyId,
					::core::primitive::u128,
					::core::primitive::u32,
				>;
			}
			impl ::subxt::events::StaticEvent for OrderHandled {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "OrderHandled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OrderFailed {
				pub order: order_failed::Order,
			}
			pub mod order_failed {
				use super::runtime_types;
				pub type Order = runtime_types::tangle_slpx::types::Order<
					::subxt::utils::AccountId32,
					runtime_types::tangle_primitives::currency::CurrencyId,
					::core::primitive::u128,
					::core::primitive::u32,
				>;
			}
			impl ::subxt::events::StaticEvent for OrderFailed {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "OrderFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InsufficientAssets;
			impl ::subxt::events::StaticEvent for InsufficientAssets {
				const PALLET: &'static str = "Slpx";
				const EVENT: &'static str = "InsufficientAssets";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod whitelist_account_id {
					use super::runtime_types;
					pub type WhitelistAccountId =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>;
					pub type Param0 = runtime_types::tangle_slpx::types::SupportChain;
				}
				pub mod execution_fee {
					use super::runtime_types;
					pub type ExecutionFee = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod transfer_to_fee {
					use super::runtime_types;
					pub type TransferToFee = ::core::primitive::u128;
					pub type Param0 = runtime_types::tangle_slpx::types::SupportChain;
				}
				pub mod xcm_ethereum_call_configuration {
					use super::runtime_types;
					pub type XcmEthereumCallConfiguration =
						runtime_types::tangle_slpx::types::EthereumCallConfiguration<
							::core::primitive::u32,
						>;
				}
				pub mod currency_id_list {
					use super::runtime_types;
					pub type CurrencyIdList =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::tangle_primitives::currency::CurrencyId,
						>;
				}
				pub mod support_xcm_fee_list {
					use super::runtime_types;
					pub type SupportXcmFeeList =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::tangle_primitives::currency::CurrencyId,
						>;
				}
				pub mod order_queue {
					use super::runtime_types;
					pub type OrderQueue =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::tangle_slpx::types::Order<
								::subxt::utils::AccountId32,
								runtime_types::tangle_primitives::currency::CurrencyId,
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						>;
				}
				pub mod delay_block {
					use super::runtime_types;
					pub type DelayBlock = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Contract whitelist"]
				pub fn whitelist_account_id_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::whitelist_account_id::WhitelistAccountId,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"WhitelistAccountId",
						vec![],
						[
							99u8, 57u8, 67u8, 93u8, 180u8, 11u8, 196u8, 15u8, 223u8, 198u8, 61u8,
							227u8, 85u8, 104u8, 96u8, 3u8, 8u8, 28u8, 112u8, 122u8, 172u8, 116u8,
							247u8, 52u8, 138u8, 213u8, 207u8, 46u8, 160u8, 158u8, 213u8, 228u8,
						],
					)
				}
				#[doc = " Contract whitelist"]
				pub fn whitelist_account_id(
					&self,
					_0: impl ::std::borrow::Borrow<types::whitelist_account_id::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::whitelist_account_id::WhitelistAccountId,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"WhitelistAccountId",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							99u8, 57u8, 67u8, 93u8, 180u8, 11u8, 196u8, 15u8, 223u8, 198u8, 61u8,
							227u8, 85u8, 104u8, 96u8, 3u8, 8u8, 28u8, 112u8, 122u8, 172u8, 116u8,
							247u8, 52u8, 138u8, 213u8, 207u8, 46u8, 160u8, 158u8, 213u8, 228u8,
						],
					)
				}
				#[doc = " Charge corresponding fees for different CurrencyId"]
				pub fn execution_fee_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::execution_fee::ExecutionFee,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"ExecutionFee",
						vec![],
						[
							49u8, 172u8, 3u8, 57u8, 129u8, 9u8, 220u8, 207u8, 35u8, 177u8, 182u8,
							132u8, 122u8, 213u8, 118u8, 240u8, 218u8, 236u8, 138u8, 223u8, 236u8,
							246u8, 41u8, 124u8, 243u8, 251u8, 251u8, 115u8, 1u8, 47u8, 207u8,
							205u8,
						],
					)
				}
				#[doc = " Charge corresponding fees for different CurrencyId"]
				pub fn execution_fee(
					&self,
					_0: impl ::std::borrow::Borrow<types::execution_fee::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::execution_fee::ExecutionFee,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"ExecutionFee",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							49u8, 172u8, 3u8, 57u8, 129u8, 9u8, 220u8, 207u8, 35u8, 177u8, 182u8,
							132u8, 122u8, 213u8, 118u8, 240u8, 218u8, 236u8, 138u8, 223u8, 236u8,
							246u8, 41u8, 124u8, 243u8, 251u8, 251u8, 115u8, 1u8, 47u8, 207u8,
							205u8,
						],
					)
				}
				#[doc = " XCM fee for transferring to Moonbeam(TNT)"]
				pub fn transfer_to_fee_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::transfer_to_fee::TransferToFee,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"TransferToFee",
						vec![],
						[
							68u8, 169u8, 28u8, 2u8, 238u8, 96u8, 144u8, 85u8, 167u8, 3u8, 189u8,
							195u8, 122u8, 84u8, 181u8, 10u8, 183u8, 167u8, 92u8, 109u8, 230u8,
							37u8, 218u8, 47u8, 176u8, 50u8, 239u8, 24u8, 134u8, 243u8, 188u8,
							159u8,
						],
					)
				}
				#[doc = " XCM fee for transferring to Moonbeam(TNT)"]
				pub fn transfer_to_fee(
					&self,
					_0: impl ::std::borrow::Borrow<types::transfer_to_fee::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::transfer_to_fee::TransferToFee,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"TransferToFee",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							68u8, 169u8, 28u8, 2u8, 238u8, 96u8, 144u8, 85u8, 167u8, 3u8, 189u8,
							195u8, 122u8, 84u8, 181u8, 10u8, 183u8, 167u8, 92u8, 109u8, 230u8,
							37u8, 218u8, 47u8, 176u8, 50u8, 239u8, 24u8, 134u8, 243u8, 188u8,
							159u8,
						],
					)
				}
				pub fn xcm_ethereum_call_configuration(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::xcm_ethereum_call_configuration::XcmEthereumCallConfiguration,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"XcmEthereumCallConfiguration",
						vec![],
						[
							10u8, 2u8, 179u8, 122u8, 89u8, 147u8, 101u8, 153u8, 24u8, 32u8, 113u8,
							109u8, 162u8, 111u8, 90u8, 88u8, 232u8, 65u8, 238u8, 28u8, 234u8, 49u8,
							250u8, 176u8, 117u8, 198u8, 81u8, 26u8, 33u8, 97u8, 147u8, 157u8,
						],
					)
				}
				pub fn currency_id_list(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::currency_id_list::CurrencyIdList,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"CurrencyIdList",
						vec![],
						[
							140u8, 121u8, 162u8, 105u8, 80u8, 81u8, 235u8, 128u8, 4u8, 73u8, 26u8,
							54u8, 32u8, 67u8, 25u8, 226u8, 178u8, 139u8, 11u8, 248u8, 215u8, 46u8,
							38u8, 29u8, 79u8, 108u8, 180u8, 172u8, 143u8, 123u8, 179u8, 179u8,
						],
					)
				}
				pub fn support_xcm_fee_list(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::support_xcm_fee_list::SupportXcmFeeList,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"SupportXcmFeeList",
						vec![],
						[
							183u8, 166u8, 94u8, 93u8, 249u8, 183u8, 17u8, 143u8, 151u8, 29u8,
							194u8, 78u8, 124u8, 30u8, 86u8, 166u8, 208u8, 176u8, 199u8, 69u8,
							216u8, 91u8, 8u8, 211u8, 229u8, 41u8, 25u8, 53u8, 103u8, 58u8, 28u8,
							45u8,
						],
					)
				}
				pub fn order_queue(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::order_queue::OrderQueue,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"OrderQueue",
						vec![],
						[
							197u8, 64u8, 31u8, 98u8, 133u8, 108u8, 153u8, 224u8, 70u8, 82u8, 83u8,
							29u8, 218u8, 24u8, 89u8, 164u8, 153u8, 199u8, 123u8, 191u8, 242u8,
							23u8, 152u8, 18u8, 203u8, 217u8, 71u8, 141u8, 42u8, 144u8, 16u8, 7u8,
						],
					)
				}
				pub fn delay_block(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delay_block::DelayBlock,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Slpx",
						"DelayBlock",
						vec![],
						[
							214u8, 250u8, 108u8, 44u8, 162u8, 221u8, 244u8, 123u8, 241u8, 68u8,
							39u8, 231u8, 118u8, 181u8, 90u8, 216u8, 211u8, 212u8, 235u8, 113u8,
							130u8, 83u8, 110u8, 79u8, 116u8, 167u8, 183u8, 127u8, 209u8, 245u8,
							197u8, 92u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " TreasuryAccount"]
				pub fn treasury_account(
					&self,
				) -> ::subxt::constants::Address<::subxt::utils::AccountId32> {
					::subxt::constants::Address::new_static(
						"Slpx",
						"TreasuryAccount",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
				pub fn parachain_id(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::polkadot_parachain_primitives::primitives::Id,
				> {
					::subxt::constants::Address::new_static(
						"Slpx",
						"ParachainId",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
			}
		}
	}
	pub mod fellowship_collective {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_ranked_collective::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_ranked_collective::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_member`]."]
				pub struct AddMember {
					pub who: add_member::Who,
				}
				pub mod add_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddMember {
					const PALLET: &'static str = "FellowshipCollective";
					const CALL: &'static str = "add_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::promote_member`]."]
				pub struct PromoteMember {
					pub who: promote_member::Who,
				}
				pub mod promote_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for PromoteMember {
					const PALLET: &'static str = "FellowshipCollective";
					const CALL: &'static str = "promote_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::demote_member`]."]
				pub struct DemoteMember {
					pub who: demote_member::Who,
				}
				pub mod demote_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for DemoteMember {
					const PALLET: &'static str = "FellowshipCollective";
					const CALL: &'static str = "demote_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_member`]."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
					pub min_rank: remove_member::MinRank,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type MinRank = ::core::primitive::u16;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "FellowshipCollective";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::vote`]."]
				pub struct Vote {
					pub poll: vote::Poll,
					pub aye: vote::Aye,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Poll = ::core::primitive::u32;
					pub type Aye = ::core::primitive::bool;
				}
				impl ::subxt::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "FellowshipCollective";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cleanup_poll`]."]
				pub struct CleanupPoll {
					pub poll_index: cleanup_poll::PollIndex,
					pub max: cleanup_poll::Max,
				}
				pub mod cleanup_poll {
					use super::runtime_types;
					pub type PollIndex = ::core::primitive::u32;
					pub type Max = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for CleanupPoll {
					const PALLET: &'static str = "FellowshipCollective";
					const CALL: &'static str = "cleanup_poll";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::add_member`]."]
				pub fn add_member(
					&self,
					who: types::add_member::Who,
				) -> ::subxt::tx::Payload<types::AddMember> {
					::subxt::tx::Payload::new_static(
						"FellowshipCollective",
						"add_member",
						types::AddMember { who },
						[
							237u8, 212u8, 114u8, 106u8, 42u8, 1u8, 28u8, 244u8, 161u8, 140u8, 80u8,
							251u8, 217u8, 116u8, 9u8, 155u8, 234u8, 94u8, 3u8, 156u8, 5u8, 68u8,
							197u8, 90u8, 47u8, 223u8, 235u8, 200u8, 194u8, 195u8, 90u8, 70u8,
						],
					)
				}
				#[doc = "See [`Pallet::promote_member`]."]
				pub fn promote_member(
					&self,
					who: types::promote_member::Who,
				) -> ::subxt::tx::Payload<types::PromoteMember> {
					::subxt::tx::Payload::new_static(
						"FellowshipCollective",
						"promote_member",
						types::PromoteMember { who },
						[
							151u8, 129u8, 198u8, 250u8, 9u8, 92u8, 68u8, 163u8, 82u8, 3u8, 98u8,
							178u8, 86u8, 246u8, 165u8, 97u8, 217u8, 237u8, 58u8, 38u8, 215u8,
							195u8, 108u8, 82u8, 115u8, 23u8, 227u8, 229u8, 138u8, 186u8, 130u8,
							96u8,
						],
					)
				}
				#[doc = "See [`Pallet::demote_member`]."]
				pub fn demote_member(
					&self,
					who: types::demote_member::Who,
				) -> ::subxt::tx::Payload<types::DemoteMember> {
					::subxt::tx::Payload::new_static(
						"FellowshipCollective",
						"demote_member",
						types::DemoteMember { who },
						[
							93u8, 134u8, 125u8, 30u8, 74u8, 38u8, 74u8, 176u8, 14u8, 161u8, 162u8,
							7u8, 20u8, 73u8, 96u8, 104u8, 242u8, 177u8, 191u8, 139u8, 204u8, 39u8,
							197u8, 142u8, 26u8, 222u8, 102u8, 141u8, 153u8, 249u8, 232u8, 49u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_member`]."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
					min_rank: types::remove_member::MinRank,
				) -> ::subxt::tx::Payload<types::RemoveMember> {
					::subxt::tx::Payload::new_static(
						"FellowshipCollective",
						"remove_member",
						types::RemoveMember { who, min_rank },
						[
							142u8, 183u8, 142u8, 8u8, 123u8, 189u8, 207u8, 140u8, 125u8, 254u8,
							69u8, 113u8, 58u8, 128u8, 218u8, 113u8, 213u8, 50u8, 38u8, 251u8,
							107u8, 95u8, 114u8, 36u8, 9u8, 230u8, 151u8, 112u8, 177u8, 148u8,
							101u8, 227u8,
						],
					)
				}
				#[doc = "See [`Pallet::vote`]."]
				pub fn vote(
					&self,
					poll: types::vote::Poll,
					aye: types::vote::Aye,
				) -> ::subxt::tx::Payload<types::Vote> {
					::subxt::tx::Payload::new_static(
						"FellowshipCollective",
						"vote",
						types::Vote { poll, aye },
						[
							54u8, 116u8, 81u8, 239u8, 223u8, 35u8, 11u8, 244u8, 245u8, 94u8, 23u8,
							241u8, 125u8, 231u8, 56u8, 150u8, 105u8, 125u8, 100u8, 171u8, 182u8,
							186u8, 134u8, 40u8, 4u8, 121u8, 119u8, 11u8, 93u8, 158u8, 59u8, 209u8,
						],
					)
				}
				#[doc = "See [`Pallet::cleanup_poll`]."]
				pub fn cleanup_poll(
					&self,
					poll_index: types::cleanup_poll::PollIndex,
					max: types::cleanup_poll::Max,
				) -> ::subxt::tx::Payload<types::CleanupPoll> {
					::subxt::tx::Payload::new_static(
						"FellowshipCollective",
						"cleanup_poll",
						types::CleanupPoll { poll_index, max },
						[
							157u8, 109u8, 86u8, 253u8, 62u8, 107u8, 235u8, 255u8, 171u8, 68u8,
							103u8, 92u8, 245u8, 25u8, 252u8, 158u8, 174u8, 137u8, 77u8, 251u8,
							105u8, 113u8, 165u8, 46u8, 39u8, 55u8, 166u8, 79u8, 103u8, 81u8, 121u8,
							37u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_ranked_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A member `who` has been added."]
			pub struct MemberAdded {
				pub who: member_added::Who,
			}
			pub mod member_added {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "FellowshipCollective";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The member `who`se rank has been changed to the given `rank`."]
			pub struct RankChanged {
				pub who: rank_changed::Who,
				pub rank: rank_changed::Rank,
			}
			pub mod rank_changed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Rank = ::core::primitive::u16;
			}
			impl ::subxt::events::StaticEvent for RankChanged {
				const PALLET: &'static str = "FellowshipCollective";
				const EVENT: &'static str = "RankChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The member `who` of given `rank` has been removed from the collective."]
			pub struct MemberRemoved {
				pub who: member_removed::Who,
				pub rank: member_removed::Rank,
			}
			pub mod member_removed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Rank = ::core::primitive::u16;
			}
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "FellowshipCollective";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The member `who` has voted for the `poll` with the given `vote` leading to an updated"]
			#[doc = "`tally`."]
			pub struct Voted {
				pub who: voted::Who,
				pub poll: voted::Poll,
				pub vote: voted::Vote,
				pub tally: voted::Tally,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Poll = ::core::primitive::u32;
				pub type Vote = runtime_types::pallet_ranked_collective::VoteRecord;
				pub type Tally = runtime_types::pallet_ranked_collective::Tally;
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "FellowshipCollective";
				const EVENT: &'static str = "Voted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod member_count {
					use super::runtime_types;
					pub type MemberCount = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod members {
					use super::runtime_types;
					pub type Members = runtime_types::pallet_ranked_collective::MemberRecord;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod id_to_index {
					use super::runtime_types;
					pub type IdToIndex = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u16;
					pub type Param1 = ::subxt::utils::AccountId32;
				}
				pub mod index_to_id {
					use super::runtime_types;
					pub type IndexToId = ::subxt::utils::AccountId32;
					pub type Param0 = ::core::primitive::u16;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod voting {
					use super::runtime_types;
					pub type Voting = runtime_types::pallet_ranked_collective::VoteRecord;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = ::subxt::utils::AccountId32;
				}
				pub mod voting_cleanup {
					use super::runtime_types;
					pub type VotingCleanup =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>;
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The number of members in the collective who have at least the rank according to the index"]
				#[doc = " of the vec."]
				pub fn member_count_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::member_count::MemberCount,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"MemberCount",
						vec![],
						[
							0u8, 141u8, 66u8, 91u8, 155u8, 74u8, 17u8, 191u8, 143u8, 41u8, 231u8,
							56u8, 123u8, 219u8, 145u8, 27u8, 197u8, 62u8, 118u8, 237u8, 30u8, 7u8,
							107u8, 96u8, 95u8, 17u8, 242u8, 206u8, 246u8, 79u8, 53u8, 214u8,
						],
					)
				}
				#[doc = " The number of members in the collective who have at least the rank according to the index"]
				#[doc = " of the vec."]
				pub fn member_count(
					&self,
					_0: impl ::std::borrow::Borrow<types::member_count::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::member_count::MemberCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"MemberCount",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							0u8, 141u8, 66u8, 91u8, 155u8, 74u8, 17u8, 191u8, 143u8, 41u8, 231u8,
							56u8, 123u8, 219u8, 145u8, 27u8, 197u8, 62u8, 118u8, 237u8, 30u8, 7u8,
							107u8, 96u8, 95u8, 17u8, 242u8, 206u8, 246u8, 79u8, 53u8, 214u8,
						],
					)
				}
				#[doc = " The current members of the collective."]
				pub fn members_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"Members",
						vec![],
						[
							101u8, 183u8, 36u8, 241u8, 67u8, 8u8, 252u8, 116u8, 110u8, 153u8,
							117u8, 210u8, 128u8, 80u8, 130u8, 163u8, 38u8, 76u8, 230u8, 107u8,
							112u8, 90u8, 102u8, 24u8, 217u8, 2u8, 244u8, 197u8, 103u8, 215u8,
							247u8, 133u8,
						],
					)
				}
				#[doc = " The current members of the collective."]
				pub fn members(
					&self,
					_0: impl ::std::borrow::Borrow<types::members::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"Members",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							101u8, 183u8, 36u8, 241u8, 67u8, 8u8, 252u8, 116u8, 110u8, 153u8,
							117u8, 210u8, 128u8, 80u8, 130u8, 163u8, 38u8, 76u8, 230u8, 107u8,
							112u8, 90u8, 102u8, 24u8, 217u8, 2u8, 244u8, 197u8, 103u8, 215u8,
							247u8, 133u8,
						],
					)
				}
				#[doc = " The index of each ranks's member into the group of members who have at least that rank."]
				pub fn id_to_index_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::id_to_index::IdToIndex,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"IdToIndex",
						vec![],
						[
							121u8, 225u8, 69u8, 131u8, 194u8, 3u8, 82u8, 27u8, 129u8, 152u8, 157u8,
							45u8, 39u8, 47u8, 166u8, 28u8, 42u8, 92u8, 217u8, 189u8, 160u8, 102u8,
							153u8, 196u8, 94u8, 48u8, 248u8, 113u8, 164u8, 111u8, 27u8, 9u8,
						],
					)
				}
				#[doc = " The index of each ranks's member into the group of members who have at least that rank."]
				pub fn id_to_index_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::id_to_index::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::id_to_index::IdToIndex,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"IdToIndex",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							121u8, 225u8, 69u8, 131u8, 194u8, 3u8, 82u8, 27u8, 129u8, 152u8, 157u8,
							45u8, 39u8, 47u8, 166u8, 28u8, 42u8, 92u8, 217u8, 189u8, 160u8, 102u8,
							153u8, 196u8, 94u8, 48u8, 248u8, 113u8, 164u8, 111u8, 27u8, 9u8,
						],
					)
				}
				#[doc = " The index of each ranks's member into the group of members who have at least that rank."]
				pub fn id_to_index(
					&self,
					_0: impl ::std::borrow::Borrow<types::id_to_index::Param0>,
					_1: impl ::std::borrow::Borrow<types::id_to_index::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::id_to_index::IdToIndex,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"IdToIndex",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							121u8, 225u8, 69u8, 131u8, 194u8, 3u8, 82u8, 27u8, 129u8, 152u8, 157u8,
							45u8, 39u8, 47u8, 166u8, 28u8, 42u8, 92u8, 217u8, 189u8, 160u8, 102u8,
							153u8, 196u8, 94u8, 48u8, 248u8, 113u8, 164u8, 111u8, 27u8, 9u8,
						],
					)
				}
				#[doc = " The members in the collective by index. All indices in the range `0..MemberCount` will"]
				#[doc = " return `Some`, however a member's index is not guaranteed to remain unchanged over time."]
				pub fn index_to_id_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::index_to_id::IndexToId,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"IndexToId",
						vec![],
						[
							110u8, 48u8, 214u8, 224u8, 56u8, 195u8, 186u8, 24u8, 111u8, 37u8, 15u8,
							153u8, 245u8, 101u8, 229u8, 149u8, 216u8, 185u8, 7u8, 242u8, 196u8,
							29u8, 205u8, 243u8, 162u8, 92u8, 71u8, 253u8, 102u8, 152u8, 137u8,
							70u8,
						],
					)
				}
				#[doc = " The members in the collective by index. All indices in the range `0..MemberCount` will"]
				#[doc = " return `Some`, however a member's index is not guaranteed to remain unchanged over time."]
				pub fn index_to_id_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::index_to_id::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::index_to_id::IndexToId,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"IndexToId",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							110u8, 48u8, 214u8, 224u8, 56u8, 195u8, 186u8, 24u8, 111u8, 37u8, 15u8,
							153u8, 245u8, 101u8, 229u8, 149u8, 216u8, 185u8, 7u8, 242u8, 196u8,
							29u8, 205u8, 243u8, 162u8, 92u8, 71u8, 253u8, 102u8, 152u8, 137u8,
							70u8,
						],
					)
				}
				#[doc = " The members in the collective by index. All indices in the range `0..MemberCount` will"]
				#[doc = " return `Some`, however a member's index is not guaranteed to remain unchanged over time."]
				pub fn index_to_id(
					&self,
					_0: impl ::std::borrow::Borrow<types::index_to_id::Param0>,
					_1: impl ::std::borrow::Borrow<types::index_to_id::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::index_to_id::IndexToId,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"IndexToId",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							110u8, 48u8, 214u8, 224u8, 56u8, 195u8, 186u8, 24u8, 111u8, 37u8, 15u8,
							153u8, 245u8, 101u8, 229u8, 149u8, 216u8, 185u8, 7u8, 242u8, 196u8,
							29u8, 205u8, 243u8, 162u8, 92u8, 71u8, 253u8, 102u8, 152u8, 137u8,
							70u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"Voting",
						vec![],
						[
							180u8, 146u8, 236u8, 178u8, 30u8, 50u8, 161u8, 50u8, 140u8, 110u8,
							220u8, 1u8, 109u8, 209u8, 17u8, 94u8, 234u8, 223u8, 222u8, 177u8,
							243u8, 194u8, 246u8, 48u8, 178u8, 86u8, 30u8, 185u8, 56u8, 206u8,
							175u8, 18u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							180u8, 146u8, 236u8, 178u8, 30u8, 50u8, 161u8, 50u8, 140u8, 110u8,
							220u8, 1u8, 109u8, 209u8, 17u8, 94u8, 234u8, 223u8, 222u8, 177u8,
							243u8, 194u8, 246u8, 48u8, 178u8, 86u8, 30u8, 185u8, 56u8, 206u8,
							175u8, 18u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting::Param0>,
					_1: impl ::std::borrow::Borrow<types::voting::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting::Voting,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"Voting",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							180u8, 146u8, 236u8, 178u8, 30u8, 50u8, 161u8, 50u8, 140u8, 110u8,
							220u8, 1u8, 109u8, 209u8, 17u8, 94u8, 234u8, 223u8, 222u8, 177u8,
							243u8, 194u8, 246u8, 48u8, 178u8, 86u8, 30u8, 185u8, 56u8, 206u8,
							175u8, 18u8,
						],
					)
				}
				pub fn voting_cleanup_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_cleanup::VotingCleanup,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"VotingCleanup",
						vec![],
						[
							223u8, 130u8, 79u8, 104u8, 94u8, 221u8, 222u8, 72u8, 187u8, 95u8,
							231u8, 59u8, 28u8, 119u8, 191u8, 63u8, 40u8, 186u8, 58u8, 254u8, 14u8,
							233u8, 152u8, 36u8, 2u8, 231u8, 120u8, 13u8, 120u8, 211u8, 232u8, 11u8,
						],
					)
				}
				pub fn voting_cleanup(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting_cleanup::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_cleanup::VotingCleanup,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipCollective",
						"VotingCleanup",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							223u8, 130u8, 79u8, 104u8, 94u8, 221u8, 222u8, 72u8, 187u8, 95u8,
							231u8, 59u8, 28u8, 119u8, 191u8, 63u8, 40u8, 186u8, 58u8, 254u8, 14u8,
							233u8, 152u8, 36u8, 2u8, 231u8, 120u8, 13u8, 120u8, 211u8, 232u8, 11u8,
						],
					)
				}
			}
		}
	}
	pub mod fellowship_referenda {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_referenda::pallet::Error2;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_referenda::pallet::Call2;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::submit`]."]
				pub struct Submit {
					pub proposal_origin: ::std::boxed::Box<submit::ProposalOrigin>,
					pub proposal: submit::Proposal,
					pub enactment_moment: submit::EnactmentMoment,
				}
				pub mod submit {
					use super::runtime_types;
					pub type ProposalOrigin = runtime_types::tangle_kusama_runtime::OriginCaller;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::tangle_kusama_runtime::RuntimeCall,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>;
					pub type EnactmentMoment =
						runtime_types::frame_support::traits::schedule::DispatchTime<
							::core::primitive::u32,
						>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Submit {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "submit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::place_decision_deposit`]."]
				pub struct PlaceDecisionDeposit {
					pub index: place_decision_deposit::Index,
				}
				pub mod place_decision_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for PlaceDecisionDeposit {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "place_decision_deposit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::refund_decision_deposit`]."]
				pub struct RefundDecisionDeposit {
					pub index: refund_decision_deposit::Index,
				}
				pub mod refund_decision_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RefundDecisionDeposit {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "refund_decision_deposit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::cancel`]."]
				pub struct Cancel {
					pub index: cancel::Index,
				}
				pub mod cancel {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Cancel {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "cancel";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::kill`]."]
				pub struct Kill {
					pub index: kill::Index,
				}
				pub mod kill {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Kill {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "kill";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::nudge_referendum`]."]
				pub struct NudgeReferendum {
					pub index: nudge_referendum::Index,
				}
				pub mod nudge_referendum {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for NudgeReferendum {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "nudge_referendum";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::one_fewer_deciding`]."]
				pub struct OneFewerDeciding {
					pub track: one_fewer_deciding::Track,
				}
				pub mod one_fewer_deciding {
					use super::runtime_types;
					pub type Track = ::core::primitive::u16;
				}
				impl ::subxt::blocks::StaticExtrinsic for OneFewerDeciding {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "one_fewer_deciding";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::refund_submission_deposit`]."]
				pub struct RefundSubmissionDeposit {
					pub index: refund_submission_deposit::Index,
				}
				pub mod refund_submission_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RefundSubmissionDeposit {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "refund_submission_deposit";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_metadata`]."]
				pub struct SetMetadata {
					pub index: set_metadata::Index,
					pub maybe_hash: set_metadata::MaybeHash,
				}
				pub mod set_metadata {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
					pub type MaybeHash = ::core::option::Option<::subxt::utils::H256>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
					const PALLET: &'static str = "FellowshipReferenda";
					const CALL: &'static str = "set_metadata";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::submit`]."]
				pub fn submit(
					&self,
					proposal_origin: types::submit::ProposalOrigin,
					proposal: types::submit::Proposal,
					enactment_moment: types::submit::EnactmentMoment,
				) -> ::subxt::tx::Payload<types::Submit> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"submit",
						types::Submit {
							proposal_origin: ::std::boxed::Box::new(proposal_origin),
							proposal,
							enactment_moment,
						},
						[
							42u8, 83u8, 126u8, 44u8, 70u8, 163u8, 221u8, 129u8, 10u8, 198u8, 167u8,
							71u8, 217u8, 48u8, 215u8, 176u8, 185u8, 245u8, 185u8, 172u8, 122u8,
							61u8, 200u8, 230u8, 149u8, 3u8, 76u8, 82u8, 25u8, 230u8, 182u8, 183u8,
						],
					)
				}
				#[doc = "See [`Pallet::place_decision_deposit`]."]
				pub fn place_decision_deposit(
					&self,
					index: types::place_decision_deposit::Index,
				) -> ::subxt::tx::Payload<types::PlaceDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"place_decision_deposit",
						types::PlaceDecisionDeposit { index },
						[
							247u8, 158u8, 55u8, 191u8, 188u8, 200u8, 3u8, 47u8, 20u8, 175u8, 86u8,
							203u8, 52u8, 253u8, 91u8, 131u8, 21u8, 213u8, 56u8, 68u8, 40u8, 84u8,
							184u8, 30u8, 9u8, 193u8, 63u8, 182u8, 178u8, 241u8, 247u8, 220u8,
						],
					)
				}
				#[doc = "See [`Pallet::refund_decision_deposit`]."]
				pub fn refund_decision_deposit(
					&self,
					index: types::refund_decision_deposit::Index,
				) -> ::subxt::tx::Payload<types::RefundDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"refund_decision_deposit",
						types::RefundDecisionDeposit { index },
						[
							159u8, 19u8, 35u8, 216u8, 114u8, 105u8, 18u8, 42u8, 148u8, 151u8,
							136u8, 92u8, 117u8, 30u8, 29u8, 41u8, 238u8, 58u8, 195u8, 91u8, 115u8,
							135u8, 96u8, 99u8, 154u8, 233u8, 8u8, 249u8, 145u8, 165u8, 77u8, 164u8,
						],
					)
				}
				#[doc = "See [`Pallet::cancel`]."]
				pub fn cancel(
					&self,
					index: types::cancel::Index,
				) -> ::subxt::tx::Payload<types::Cancel> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"cancel",
						types::Cancel { index },
						[
							55u8, 206u8, 119u8, 156u8, 238u8, 165u8, 193u8, 73u8, 242u8, 13u8,
							212u8, 75u8, 136u8, 156u8, 151u8, 14u8, 35u8, 41u8, 156u8, 107u8, 60u8,
							190u8, 39u8, 216u8, 8u8, 74u8, 213u8, 130u8, 160u8, 131u8, 237u8,
							122u8,
						],
					)
				}
				#[doc = "See [`Pallet::kill`]."]
				pub fn kill(&self, index: types::kill::Index) -> ::subxt::tx::Payload<types::Kill> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"kill",
						types::Kill { index },
						[
							50u8, 89u8, 57u8, 0u8, 87u8, 129u8, 113u8, 140u8, 179u8, 178u8, 126u8,
							198u8, 92u8, 92u8, 189u8, 64u8, 123u8, 232u8, 57u8, 227u8, 223u8,
							219u8, 73u8, 217u8, 179u8, 44u8, 210u8, 125u8, 180u8, 10u8, 143u8,
							48u8,
						],
					)
				}
				#[doc = "See [`Pallet::nudge_referendum`]."]
				pub fn nudge_referendum(
					&self,
					index: types::nudge_referendum::Index,
				) -> ::subxt::tx::Payload<types::NudgeReferendum> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"nudge_referendum",
						types::NudgeReferendum { index },
						[
							75u8, 99u8, 172u8, 30u8, 170u8, 150u8, 211u8, 229u8, 249u8, 128u8,
							194u8, 246u8, 100u8, 142u8, 193u8, 184u8, 232u8, 81u8, 29u8, 17u8,
							99u8, 91u8, 236u8, 85u8, 230u8, 226u8, 57u8, 115u8, 45u8, 170u8, 54u8,
							213u8,
						],
					)
				}
				#[doc = "See [`Pallet::one_fewer_deciding`]."]
				pub fn one_fewer_deciding(
					&self,
					track: types::one_fewer_deciding::Track,
				) -> ::subxt::tx::Payload<types::OneFewerDeciding> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"one_fewer_deciding",
						types::OneFewerDeciding { track },
						[
							15u8, 84u8, 79u8, 231u8, 21u8, 239u8, 244u8, 143u8, 183u8, 215u8,
							181u8, 25u8, 225u8, 195u8, 95u8, 171u8, 17u8, 156u8, 182u8, 128u8,
							111u8, 40u8, 151u8, 102u8, 196u8, 55u8, 36u8, 212u8, 89u8, 190u8,
							131u8, 167u8,
						],
					)
				}
				#[doc = "See [`Pallet::refund_submission_deposit`]."]
				pub fn refund_submission_deposit(
					&self,
					index: types::refund_submission_deposit::Index,
				) -> ::subxt::tx::Payload<types::RefundSubmissionDeposit> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"refund_submission_deposit",
						types::RefundSubmissionDeposit { index },
						[
							20u8, 217u8, 115u8, 6u8, 1u8, 60u8, 54u8, 136u8, 35u8, 41u8, 38u8,
							23u8, 85u8, 100u8, 141u8, 126u8, 30u8, 160u8, 61u8, 46u8, 134u8, 98u8,
							82u8, 38u8, 211u8, 124u8, 208u8, 222u8, 210u8, 10u8, 155u8, 122u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_metadata`]."]
				pub fn set_metadata(
					&self,
					index: types::set_metadata::Index,
					maybe_hash: types::set_metadata::MaybeHash,
				) -> ::subxt::tx::Payload<types::SetMetadata> {
					::subxt::tx::Payload::new_static(
						"FellowshipReferenda",
						"set_metadata",
						types::SetMetadata { index, maybe_hash },
						[
							207u8, 29u8, 146u8, 233u8, 219u8, 205u8, 88u8, 118u8, 106u8, 61u8,
							124u8, 101u8, 2u8, 41u8, 169u8, 70u8, 114u8, 189u8, 162u8, 118u8, 1u8,
							108u8, 234u8, 98u8, 245u8, 245u8, 183u8, 126u8, 89u8, 13u8, 112u8,
							88u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_referenda::pallet::Event2;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been submitted."]
			pub struct Submitted {
				pub index: submitted::Index,
				pub track: submitted::Track,
				pub proposal: submitted::Proposal,
			}
			pub mod submitted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Track = ::core::primitive::u16;
				pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::tangle_kusama_runtime::RuntimeCall,
					runtime_types::sp_runtime::traits::BlakeTwo256,
				>;
			}
			impl ::subxt::events::StaticEvent for Submitted {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "Submitted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The decision deposit has been placed."]
			pub struct DecisionDepositPlaced {
				pub index: decision_deposit_placed::Index,
				pub who: decision_deposit_placed::Who,
				pub amount: decision_deposit_placed::Amount,
			}
			pub mod decision_deposit_placed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DecisionDepositPlaced {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "DecisionDepositPlaced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The decision deposit has been refunded."]
			pub struct DecisionDepositRefunded {
				pub index: decision_deposit_refunded::Index,
				pub who: decision_deposit_refunded::Who,
				pub amount: decision_deposit_refunded::Amount,
			}
			pub mod decision_deposit_refunded {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DecisionDepositRefunded {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "DecisionDepositRefunded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A deposit has been slashaed."]
			pub struct DepositSlashed {
				pub who: deposit_slashed::Who,
				pub amount: deposit_slashed::Amount,
			}
			pub mod deposit_slashed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for DepositSlashed {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "DepositSlashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has moved into the deciding phase."]
			pub struct DecisionStarted {
				pub index: decision_started::Index,
				pub track: decision_started::Track,
				pub proposal: decision_started::Proposal,
				pub tally: decision_started::Tally,
			}
			pub mod decision_started {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Track = ::core::primitive::u16;
				pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::tangle_kusama_runtime::RuntimeCall,
					runtime_types::sp_runtime::traits::BlakeTwo256,
				>;
				pub type Tally = runtime_types::pallet_ranked_collective::Tally;
			}
			impl ::subxt::events::StaticEvent for DecisionStarted {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "DecisionStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmStarted {
				pub index: confirm_started::Index,
			}
			pub mod confirm_started {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ConfirmStarted {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "ConfirmStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmAborted {
				pub index: confirm_aborted::Index,
			}
			pub mod confirm_aborted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ConfirmAborted {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "ConfirmAborted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has ended its confirmation phase and is ready for approval."]
			pub struct Confirmed {
				pub index: confirmed::Index,
				pub tally: confirmed::Tally,
			}
			pub mod confirmed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally = runtime_types::pallet_ranked_collective::Tally;
			}
			impl ::subxt::events::StaticEvent for Confirmed {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "Confirmed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been approved and its proposal has been scheduled."]
			pub struct Approved {
				pub index: approved::Index,
			}
			pub mod approved {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A proposal has been rejected by referendum."]
			pub struct Rejected {
				pub index: rejected::Index,
				pub tally: rejected::Tally,
			}
			pub mod rejected {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally = runtime_types::pallet_ranked_collective::Tally;
			}
			impl ::subxt::events::StaticEvent for Rejected {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been timed out without being decided."]
			pub struct TimedOut {
				pub index: timed_out::Index,
				pub tally: timed_out::Tally,
			}
			pub mod timed_out {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally = runtime_types::pallet_ranked_collective::Tally;
			}
			impl ::subxt::events::StaticEvent for TimedOut {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "TimedOut";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been cancelled."]
			pub struct Cancelled {
				pub index: cancelled::Index,
				pub tally: cancelled::Tally,
			}
			pub mod cancelled {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally = runtime_types::pallet_ranked_collective::Tally;
			}
			impl ::subxt::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "A referendum has been killed."]
			pub struct Killed {
				pub index: killed::Index,
				pub tally: killed::Tally,
			}
			pub mod killed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally = runtime_types::pallet_ranked_collective::Tally;
			}
			impl ::subxt::events::StaticEvent for Killed {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "Killed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The submission deposit has been refunded."]
			pub struct SubmissionDepositRefunded {
				pub index: submission_deposit_refunded::Index,
				pub who: submission_deposit_refunded::Who,
				pub amount: submission_deposit_refunded::Amount,
			}
			pub mod submission_deposit_refunded {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for SubmissionDepositRefunded {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "SubmissionDepositRefunded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Metadata for a referendum has been set."]
			pub struct MetadataSet {
				pub index: metadata_set::Index,
				pub hash: metadata_set::Hash,
			}
			pub mod metadata_set {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Metadata for a referendum has been cleared."]
			pub struct MetadataCleared {
				pub index: metadata_cleared::Index,
				pub hash: metadata_cleared::Hash,
			}
			pub mod metadata_cleared {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Hash = ::subxt::utils::H256;
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "FellowshipReferenda";
				const EVENT: &'static str = "MetadataCleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod referendum_count {
					use super::runtime_types;
					pub type ReferendumCount = ::core::primitive::u32;
				}
				pub mod referendum_info_for {
					use super::runtime_types;
					pub type ReferendumInfoFor =
						runtime_types::pallet_referenda::types::ReferendumInfo<
							::core::primitive::u16,
							runtime_types::tangle_kusama_runtime::OriginCaller,
							::core::primitive::u32,
							runtime_types::frame_support::traits::preimages::Bounded<
								runtime_types::tangle_kusama_runtime::RuntimeCall,
								runtime_types::sp_runtime::traits::BlakeTwo256,
							>,
							::core::primitive::u128,
							runtime_types::pallet_ranked_collective::Tally,
							::subxt::utils::AccountId32,
							(::core::primitive::u32, ::core::primitive::u32),
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod track_queue {
					use super::runtime_types;
					pub type TrackQueue =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod deciding_count {
					use super::runtime_types;
					pub type DecidingCount = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod metadata_of {
					use super::runtime_types;
					pub type MetadataOf = ::subxt::utils::H256;
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The next free referendum index, aka the number of referenda started so far."]
				pub fn referendum_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_count::ReferendumCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"ReferendumCount",
						vec![],
						[
							64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
							139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
							198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
							67u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_for::ReferendumInfoFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"ReferendumInfoFor",
						vec![],
						[
							110u8, 63u8, 129u8, 229u8, 190u8, 174u8, 103u8, 36u8, 225u8, 31u8,
							123u8, 18u8, 31u8, 166u8, 1u8, 54u8, 213u8, 128u8, 158u8, 218u8, 82u8,
							35u8, 183u8, 161u8, 214u8, 51u8, 130u8, 210u8, 196u8, 62u8, 7u8, 185u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::referendum_info_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_for::ReferendumInfoFor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"ReferendumInfoFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							110u8, 63u8, 129u8, 229u8, 190u8, 174u8, 103u8, 36u8, 225u8, 31u8,
							123u8, 18u8, 31u8, 166u8, 1u8, 54u8, 213u8, 128u8, 158u8, 218u8, 82u8,
							35u8, 183u8, 161u8, 214u8, 51u8, 130u8, 210u8, 196u8, 62u8, 7u8, 185u8,
						],
					)
				}
				#[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
				#[doc = " conviction-weighted approvals."]
				#[doc = ""]
				#[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
				pub fn track_queue_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::track_queue::TrackQueue,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"TrackQueue",
						vec![],
						[
							187u8, 113u8, 225u8, 99u8, 159u8, 207u8, 182u8, 41u8, 116u8, 136u8,
							119u8, 196u8, 152u8, 50u8, 192u8, 22u8, 171u8, 182u8, 237u8, 228u8,
							80u8, 255u8, 227u8, 141u8, 155u8, 83u8, 71u8, 131u8, 118u8, 109u8,
							186u8, 65u8,
						],
					)
				}
				#[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
				#[doc = " conviction-weighted approvals."]
				#[doc = ""]
				#[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
				pub fn track_queue(
					&self,
					_0: impl ::std::borrow::Borrow<types::track_queue::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::track_queue::TrackQueue,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"TrackQueue",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							187u8, 113u8, 225u8, 99u8, 159u8, 207u8, 182u8, 41u8, 116u8, 136u8,
							119u8, 196u8, 152u8, 50u8, 192u8, 22u8, 171u8, 182u8, 237u8, 228u8,
							80u8, 255u8, 227u8, 141u8, 155u8, 83u8, 71u8, 131u8, 118u8, 109u8,
							186u8, 65u8,
						],
					)
				}
				#[doc = " The number of referenda being decided currently."]
				pub fn deciding_count_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::deciding_count::DecidingCount,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"DecidingCount",
						vec![],
						[
							203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
							146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
							103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
							245u8,
						],
					)
				}
				#[doc = " The number of referenda being decided currently."]
				pub fn deciding_count(
					&self,
					_0: impl ::std::borrow::Borrow<types::deciding_count::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::deciding_count::DecidingCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"DecidingCount",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
							146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
							103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
							245u8,
						],
					)
				}
				#[doc = " The metadata is a general information concerning the referendum."]
				#[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::metadata_of::MetadataOf,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"MetadataOf",
						vec![],
						[
							159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
							124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
							45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
							110u8,
						],
					)
				}
				#[doc = " The metadata is a general information concerning the referendum."]
				#[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<types::metadata_of::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::metadata_of::MetadataOf,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FellowshipReferenda",
						"MetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
							124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
							45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
							110u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
				pub fn submission_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"FellowshipReferenda",
						"SubmissionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum size of the referendum queue for a single track."]
				pub fn max_queued(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"FellowshipReferenda",
						"MaxQueued",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The number of blocks after submission that a referendum must begin being decided by."]
				#[doc = " Once this passes, then anyone may cancel the referendum."]
				pub fn undeciding_timeout(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"FellowshipReferenda",
						"UndecidingTimeout",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Quantization level for the referendum wakeup scheduler. A higher number will result in"]
				#[doc = " fewer storage reads/writes needed for smaller voters, but also result in delays to the"]
				#[doc = " automatic referendum status changes. Explicit servicing instructions are unaffected."]
				pub fn alarm_interval(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"FellowshipReferenda",
						"AlarmInterval",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Information concerning the different referendum tracks."]
				pub fn tracks(
					&self,
				) -> ::subxt::constants::Address<
					::std::vec::Vec<(
						::core::primitive::u16,
						runtime_types::pallet_referenda::types::TrackInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					)>,
				> {
					::subxt::constants::Address::new_static(
						"FellowshipReferenda",
						"Tracks",
						[
							35u8, 226u8, 207u8, 234u8, 184u8, 139u8, 187u8, 184u8, 128u8, 199u8,
							227u8, 15u8, 31u8, 196u8, 5u8, 207u8, 138u8, 174u8, 130u8, 201u8,
							200u8, 113u8, 86u8, 93u8, 221u8, 243u8, 229u8, 24u8, 18u8, 150u8, 56u8,
							159u8,
						],
					)
				}
			}
		}
	}
	pub mod stable_asset {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_stable_asset::pallet::Error;
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_stable_asset::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CreatePool {
				pub pool_id: create_pool::PoolId,
				pub a: create_pool::A,
				pub swap_id: create_pool::SwapId,
				pub pallet_id: create_pool::PalletId,
			}
			pub mod create_pool {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type SwapId = ::subxt::utils::AccountId32;
				pub type PalletId = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for CreatePool {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "CreatePool";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct LiquidityAdded {
				pub minter: liquidity_added::Minter,
				pub pool_id: liquidity_added::PoolId,
				pub a: liquidity_added::A,
				pub input_amounts: liquidity_added::InputAmounts,
				pub min_output_amount: liquidity_added::MinOutputAmount,
				pub balances: liquidity_added::Balances,
				pub total_supply: liquidity_added::TotalSupply,
				pub fee_amount: liquidity_added::FeeAmount,
				pub output_amount: liquidity_added::OutputAmount,
			}
			pub mod liquidity_added {
				use super::runtime_types;
				pub type Minter = ::subxt::utils::AccountId32;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type InputAmounts = ::std::vec::Vec<::core::primitive::u128>;
				pub type MinOutputAmount = ::core::primitive::u128;
				pub type Balances = ::std::vec::Vec<::core::primitive::u128>;
				pub type TotalSupply = ::core::primitive::u128;
				pub type FeeAmount = ::core::primitive::u128;
				pub type OutputAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for LiquidityAdded {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "LiquidityAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TokenSwapped {
				pub swapper: token_swapped::Swapper,
				pub pool_id: token_swapped::PoolId,
				pub a: token_swapped::A,
				pub input_asset: token_swapped::InputAsset,
				pub output_asset: token_swapped::OutputAsset,
				pub input_amount: token_swapped::InputAmount,
				pub min_output_amount: token_swapped::MinOutputAmount,
				pub balances: token_swapped::Balances,
				pub total_supply: token_swapped::TotalSupply,
				pub output_amount: token_swapped::OutputAmount,
			}
			pub mod token_swapped {
				use super::runtime_types;
				pub type Swapper = ::subxt::utils::AccountId32;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type InputAsset = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type OutputAsset = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type InputAmount = ::core::primitive::u128;
				pub type MinOutputAmount = ::core::primitive::u128;
				pub type Balances = ::std::vec::Vec<::core::primitive::u128>;
				pub type TotalSupply = ::core::primitive::u128;
				pub type OutputAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for TokenSwapped {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "TokenSwapped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RedeemedProportion {
				pub redeemer: redeemed_proportion::Redeemer,
				pub pool_id: redeemed_proportion::PoolId,
				pub a: redeemed_proportion::A,
				pub input_amount: redeemed_proportion::InputAmount,
				pub min_output_amounts: redeemed_proportion::MinOutputAmounts,
				pub balances: redeemed_proportion::Balances,
				pub total_supply: redeemed_proportion::TotalSupply,
				pub fee_amount: redeemed_proportion::FeeAmount,
				pub output_amounts: redeemed_proportion::OutputAmounts,
			}
			pub mod redeemed_proportion {
				use super::runtime_types;
				pub type Redeemer = ::subxt::utils::AccountId32;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type InputAmount = ::core::primitive::u128;
				pub type MinOutputAmounts = ::std::vec::Vec<::core::primitive::u128>;
				pub type Balances = ::std::vec::Vec<::core::primitive::u128>;
				pub type TotalSupply = ::core::primitive::u128;
				pub type FeeAmount = ::core::primitive::u128;
				pub type OutputAmounts = ::std::vec::Vec<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for RedeemedProportion {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "RedeemedProportion";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RedeemedSingle {
				pub redeemer: redeemed_single::Redeemer,
				pub pool_id: redeemed_single::PoolId,
				pub a: redeemed_single::A,
				pub input_amount: redeemed_single::InputAmount,
				pub output_asset: redeemed_single::OutputAsset,
				pub min_output_amount: redeemed_single::MinOutputAmount,
				pub balances: redeemed_single::Balances,
				pub total_supply: redeemed_single::TotalSupply,
				pub fee_amount: redeemed_single::FeeAmount,
				pub output_amount: redeemed_single::OutputAmount,
			}
			pub mod redeemed_single {
				use super::runtime_types;
				pub type Redeemer = ::subxt::utils::AccountId32;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type InputAmount = ::core::primitive::u128;
				pub type OutputAsset = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type MinOutputAmount = ::core::primitive::u128;
				pub type Balances = ::std::vec::Vec<::core::primitive::u128>;
				pub type TotalSupply = ::core::primitive::u128;
				pub type FeeAmount = ::core::primitive::u128;
				pub type OutputAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for RedeemedSingle {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "RedeemedSingle";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RedeemedMulti {
				pub redeemer: redeemed_multi::Redeemer,
				pub pool_id: redeemed_multi::PoolId,
				pub a: redeemed_multi::A,
				pub output_amounts: redeemed_multi::OutputAmounts,
				pub max_input_amount: redeemed_multi::MaxInputAmount,
				pub balances: redeemed_multi::Balances,
				pub total_supply: redeemed_multi::TotalSupply,
				pub fee_amount: redeemed_multi::FeeAmount,
				pub input_amount: redeemed_multi::InputAmount,
			}
			pub mod redeemed_multi {
				use super::runtime_types;
				pub type Redeemer = ::subxt::utils::AccountId32;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type OutputAmounts = ::std::vec::Vec<::core::primitive::u128>;
				pub type MaxInputAmount = ::core::primitive::u128;
				pub type Balances = ::std::vec::Vec<::core::primitive::u128>;
				pub type TotalSupply = ::core::primitive::u128;
				pub type FeeAmount = ::core::primitive::u128;
				pub type InputAmount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for RedeemedMulti {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "RedeemedMulti";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BalanceUpdated {
				pub pool_id: balance_updated::PoolId,
				pub old_balances: balance_updated::OldBalances,
				pub new_balances: balance_updated::NewBalances,
			}
			pub mod balance_updated {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type OldBalances = ::std::vec::Vec<::core::primitive::u128>;
				pub type NewBalances = ::std::vec::Vec<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for BalanceUpdated {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "BalanceUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct YieldCollected {
				pub pool_id: yield_collected::PoolId,
				pub a: yield_collected::A,
				pub old_total_supply: yield_collected::OldTotalSupply,
				pub new_total_supply: yield_collected::NewTotalSupply,
				pub who: yield_collected::Who,
				pub amount: yield_collected::Amount,
			}
			pub mod yield_collected {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type OldTotalSupply = ::core::primitive::u128;
				pub type NewTotalSupply = ::core::primitive::u128;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for YieldCollected {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "YieldCollected";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FeeCollected {
				pub pool_id: fee_collected::PoolId,
				pub a: fee_collected::A,
				pub old_balances: fee_collected::OldBalances,
				pub new_balances: fee_collected::NewBalances,
				pub old_total_supply: fee_collected::OldTotalSupply,
				pub new_total_supply: fee_collected::NewTotalSupply,
				pub who: fee_collected::Who,
				pub amount: fee_collected::Amount,
			}
			pub mod fee_collected {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type A = ::core::primitive::u128;
				pub type OldBalances = ::std::vec::Vec<::core::primitive::u128>;
				pub type NewBalances = ::std::vec::Vec<::core::primitive::u128>;
				pub type OldTotalSupply = ::core::primitive::u128;
				pub type NewTotalSupply = ::core::primitive::u128;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for FeeCollected {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "FeeCollected";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AModified {
				pub pool_id: a_modified::PoolId,
				pub value: a_modified::Value,
				pub time: a_modified::Time,
			}
			pub mod a_modified {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type Value = ::core::primitive::u128;
				pub type Time = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for AModified {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "AModified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FeeModified {
				pub pool_id: fee_modified::PoolId,
				pub mint_fee: fee_modified::MintFee,
				pub swap_fee: fee_modified::SwapFee,
				pub redeem_fee: fee_modified::RedeemFee,
			}
			pub mod fee_modified {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type MintFee = ::core::primitive::u128;
				pub type SwapFee = ::core::primitive::u128;
				pub type RedeemFee = ::core::primitive::u128;
			}
			impl ::subxt::events::StaticEvent for FeeModified {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "FeeModified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RecipientModified {
				pub pool_id: recipient_modified::PoolId,
				pub fee_recipient: recipient_modified::FeeRecipient,
				pub yield_recipient: recipient_modified::YieldRecipient,
			}
			pub mod recipient_modified {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type FeeRecipient = ::subxt::utils::AccountId32;
				pub type YieldRecipient = ::subxt::utils::AccountId32;
			}
			impl ::subxt::events::StaticEvent for RecipientModified {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "RecipientModified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TokenRateSet {
				pub pool_id: token_rate_set::PoolId,
				pub token_rate: token_rate_set::TokenRate,
			}
			pub mod token_rate_set {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
				pub type TokenRate = ::std::vec::Vec<(
					runtime_types::tangle_primitives::currency::CurrencyId,
					(::core::primitive::u128, ::core::primitive::u128),
				)>;
			}
			impl ::subxt::events::StaticEvent for TokenRateSet {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "TokenRateSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TokenRateHardcapConfigured {
				pub Lst: token_rate_hardcap_configured::Lst,
				pub hardcap: token_rate_hardcap_configured::Hardcap,
			}
			pub mod token_rate_hardcap_configured {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Hardcap = runtime_types::sp_arithmetic::per_things::Permill;
			}
			impl ::subxt::events::StaticEvent for TokenRateHardcapConfigured {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "TokenRateHardcapConfigured";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TokenRateHardcapRemoved {
				pub Lst: token_rate_hardcap_removed::Lst,
			}
			pub mod token_rate_hardcap_removed {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for TokenRateHardcapRemoved {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "TokenRateHardcapRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TokenRateRefreshFailed {
				pub pool_id: token_rate_refresh_failed::PoolId,
			}
			pub mod token_rate_refresh_failed {
				use super::runtime_types;
				pub type PoolId = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for TokenRateRefreshFailed {
				const PALLET: &'static str = "StableAsset";
				const EVENT: &'static str = "TokenRateRefreshFailed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod pool_count {
					use super::runtime_types;
					pub type PoolCount = ::core::primitive::u32;
				}
				pub mod pools {
					use super::runtime_types;
					pub type Pools = runtime_types::tangle_stable_asset::StableAssetPoolInfo<
						runtime_types::tangle_primitives::currency::CurrencyId,
						::core::primitive::u128,
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod token_rate_caches {
					use super::runtime_types;
					pub type TokenRateCaches = (::core::primitive::u128, ::core::primitive::u128);
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod token_rate_hardcap {
					use super::runtime_types;
					pub type TokenRateHardcap = runtime_types::sp_arithmetic::per_things::Permill;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn pool_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pool_count::PoolCount,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"PoolCount",
						vec![],
						[
							223u8, 69u8, 243u8, 7u8, 16u8, 186u8, 1u8, 110u8, 127u8, 237u8, 187u8,
							46u8, 75u8, 64u8, 143u8, 10u8, 61u8, 112u8, 205u8, 193u8, 222u8, 204u8,
							85u8, 251u8, 18u8, 149u8, 125u8, 119u8, 238u8, 174u8, 217u8, 190u8,
						],
					)
				}
				pub fn pools_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pools::Pools,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"Pools",
						vec![],
						[
							39u8, 213u8, 189u8, 10u8, 31u8, 45u8, 46u8, 104u8, 205u8, 33u8, 95u8,
							242u8, 37u8, 113u8, 230u8, 34u8, 144u8, 57u8, 200u8, 40u8, 109u8, 29u8,
							225u8, 239u8, 76u8, 92u8, 75u8, 148u8, 180u8, 113u8, 253u8, 247u8,
						],
					)
				}
				pub fn pools(
					&self,
					_0: impl ::std::borrow::Borrow<types::pools::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pools::Pools,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"Pools",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							39u8, 213u8, 189u8, 10u8, 31u8, 45u8, 46u8, 104u8, 205u8, 33u8, 95u8,
							242u8, 37u8, 113u8, 230u8, 34u8, 144u8, 57u8, 200u8, 40u8, 109u8, 29u8,
							225u8, 239u8, 76u8, 92u8, 75u8, 148u8, 180u8, 113u8, 253u8, 247u8,
						],
					)
				}
				pub fn token_rate_caches_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_rate_caches::TokenRateCaches,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"TokenRateCaches",
						vec![],
						[
							161u8, 255u8, 202u8, 40u8, 241u8, 230u8, 33u8, 48u8, 46u8, 190u8, 19u8,
							191u8, 35u8, 189u8, 30u8, 22u8, 241u8, 251u8, 35u8, 107u8, 218u8,
							180u8, 171u8, 113u8, 72u8, 83u8, 167u8, 133u8, 89u8, 155u8, 251u8,
							126u8,
						],
					)
				}
				pub fn token_rate_caches_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_rate_caches::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_rate_caches::TokenRateCaches,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"TokenRateCaches",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							161u8, 255u8, 202u8, 40u8, 241u8, 230u8, 33u8, 48u8, 46u8, 190u8, 19u8,
							191u8, 35u8, 189u8, 30u8, 22u8, 241u8, 251u8, 35u8, 107u8, 218u8,
							180u8, 171u8, 113u8, 72u8, 83u8, 167u8, 133u8, 89u8, 155u8, 251u8,
							126u8,
						],
					)
				}
				pub fn token_rate_caches(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_rate_caches::Param0>,
					_1: impl ::std::borrow::Borrow<types::token_rate_caches::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_rate_caches::TokenRateCaches,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"TokenRateCaches",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							161u8, 255u8, 202u8, 40u8, 241u8, 230u8, 33u8, 48u8, 46u8, 190u8, 19u8,
							191u8, 35u8, 189u8, 30u8, 22u8, 241u8, 251u8, 35u8, 107u8, 218u8,
							180u8, 171u8, 113u8, 72u8, 83u8, 167u8, 133u8, 89u8, 155u8, 251u8,
							126u8,
						],
					)
				}
				pub fn token_rate_hardcap_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_rate_hardcap::TokenRateHardcap,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"TokenRateHardcap",
						vec![],
						[
							81u8, 110u8, 218u8, 248u8, 145u8, 136u8, 16u8, 209u8, 211u8, 110u8,
							74u8, 17u8, 223u8, 49u8, 81u8, 72u8, 41u8, 142u8, 102u8, 40u8, 108u8,
							12u8, 246u8, 145u8, 108u8, 11u8, 173u8, 76u8, 83u8, 115u8, 96u8, 1u8,
						],
					)
				}
				pub fn token_rate_hardcap(
					&self,
					_0: impl ::std::borrow::Borrow<types::token_rate_hardcap::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::token_rate_hardcap::TokenRateHardcap,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"StableAsset",
						"TokenRateHardcap",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							81u8, 110u8, 218u8, 248u8, 145u8, 136u8, 16u8, 209u8, 211u8, 110u8,
							74u8, 17u8, 223u8, 49u8, 81u8, 72u8, 41u8, 142u8, 102u8, 40u8, 108u8,
							12u8, 246u8, 145u8, 108u8, 11u8, 173u8, 76u8, 83u8, 115u8, 96u8, 1u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"StableAsset",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				pub fn fee_precision(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"StableAsset",
						"FeePrecision",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				pub fn swap_exact_over_amount(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"StableAsset",
						"SwapExactOverAmount",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				pub fn a_precision(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"StableAsset",
						"APrecision",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				pub fn pool_asset_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"StableAsset",
						"PoolAssetLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod stable_pool {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_stable_pool::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_stable_pool::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::create_pool`]."]
				pub struct CreatePool {
					pub assets: create_pool::Assets,
					pub precisions: create_pool::Precisions,
					pub mint_fee: create_pool::MintFee,
					pub swap_fee: create_pool::SwapFee,
					pub redeem_fee: create_pool::RedeemFee,
					pub initial_a: create_pool::InitialA,
					pub fee_recipient: create_pool::FeeRecipient,
					pub yield_recipient: create_pool::YieldRecipient,
					pub precision: create_pool::Precision,
				}
				pub mod create_pool {
					use super::runtime_types;
					pub type Assets =
						::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>;
					pub type Precisions = ::std::vec::Vec<::core::primitive::u128>;
					pub type MintFee = ::core::primitive::u128;
					pub type SwapFee = ::core::primitive::u128;
					pub type RedeemFee = ::core::primitive::u128;
					pub type InitialA = ::core::primitive::u128;
					pub type FeeRecipient = ::subxt::utils::AccountId32;
					pub type YieldRecipient = ::subxt::utils::AccountId32;
					pub type Precision = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for CreatePool {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "create_pool";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_liquidity`]."]
				pub struct AddLiquidity {
					pub pool_id: add_liquidity::PoolId,
					pub amounts: add_liquidity::Amounts,
					pub min_mint_amount: add_liquidity::MinMintAmount,
				}
				pub mod add_liquidity {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type Amounts = ::std::vec::Vec<::core::primitive::u128>;
					pub type MinMintAmount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddLiquidity {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "add_liquidity";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::swap`]."]
				pub struct Swap {
					pub pool_id: swap::PoolId,
					pub i: swap::I,
					pub j: swap::J,
					pub dx: swap::Dx,
					pub min_dy: swap::MinDy,
				}
				pub mod swap {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type I = ::core::primitive::u32;
					pub type J = ::core::primitive::u32;
					pub type Dx = ::core::primitive::u128;
					pub type MinDy = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for Swap {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "swap";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::redeem_proportion`]."]
				pub struct RedeemProportion {
					pub pool_id: redeem_proportion::PoolId,
					pub amount: redeem_proportion::Amount,
					pub min_redeem_amounts: redeem_proportion::MinRedeemAmounts,
				}
				pub mod redeem_proportion {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type Amount = ::core::primitive::u128;
					pub type MinRedeemAmounts = ::std::vec::Vec<::core::primitive::u128>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RedeemProportion {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "redeem_proportion";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::redeem_single`]."]
				pub struct RedeemSingle {
					pub pool_id: redeem_single::PoolId,
					pub amount: redeem_single::Amount,
					pub i: redeem_single::I,
					pub min_redeem_amount: redeem_single::MinRedeemAmount,
					pub asset_length: redeem_single::AssetLength,
				}
				pub mod redeem_single {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type Amount = ::core::primitive::u128;
					pub type I = ::core::primitive::u32;
					pub type MinRedeemAmount = ::core::primitive::u128;
					pub type AssetLength = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for RedeemSingle {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "redeem_single";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::redeem_multi`]."]
				pub struct RedeemMulti {
					pub pool_id: redeem_multi::PoolId,
					pub amounts: redeem_multi::Amounts,
					pub max_redeem_amount: redeem_multi::MaxRedeemAmount,
				}
				pub mod redeem_multi {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type Amounts = ::std::vec::Vec<::core::primitive::u128>;
					pub type MaxRedeemAmount = ::core::primitive::u128;
				}
				impl ::subxt::blocks::StaticExtrinsic for RedeemMulti {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "redeem_multi";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::modify_a`]."]
				pub struct ModifyA {
					pub pool_id: modify_a::PoolId,
					pub a: modify_a::A,
					pub future_a_block: modify_a::FutureABlock,
				}
				pub mod modify_a {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type A = ::core::primitive::u128;
					pub type FutureABlock = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for ModifyA {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "modify_a";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::modify_fees`]."]
				pub struct ModifyFees {
					pub pool_id: modify_fees::PoolId,
					pub mint_fee: modify_fees::MintFee,
					pub swap_fee: modify_fees::SwapFee,
					pub redeem_fee: modify_fees::RedeemFee,
				}
				pub mod modify_fees {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type MintFee = ::core::option::Option<::core::primitive::u128>;
					pub type SwapFee = ::core::option::Option<::core::primitive::u128>;
					pub type RedeemFee = ::core::option::Option<::core::primitive::u128>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ModifyFees {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "modify_fees";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::modify_recipients`]."]
				pub struct ModifyRecipients {
					pub pool_id: modify_recipients::PoolId,
					pub fee_recipient: modify_recipients::FeeRecipient,
					pub yield_recipient: modify_recipients::YieldRecipient,
				}
				pub mod modify_recipients {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type FeeRecipient = ::core::option::Option<::subxt::utils::AccountId32>;
					pub type YieldRecipient = ::core::option::Option<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ModifyRecipients {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "modify_recipients";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::edit_token_rate`]."]
				pub struct EditTokenRate {
					pub pool_id: edit_token_rate::PoolId,
					pub token_rate_info: edit_token_rate::TokenRateInfo,
				}
				pub mod edit_token_rate {
					use super::runtime_types;
					pub type PoolId = ::core::primitive::u32;
					pub type TokenRateInfo = ::std::vec::Vec<(
						runtime_types::tangle_primitives::currency::CurrencyId,
						(::core::primitive::u128, ::core::primitive::u128),
					)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for EditTokenRate {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "edit_token_rate";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::config_Lst_auto_refresh`]."]
				pub struct ConfigLstAutoRefresh {
					pub Lst: config_Lst_auto_refresh::Lst,
					pub hardcap: config_Lst_auto_refresh::Hardcap,
				}
				pub mod config_Lst_auto_refresh {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Hardcap = runtime_types::sp_arithmetic::per_things::Permill;
				}
				impl ::subxt::blocks::StaticExtrinsic for ConfigLstAutoRefresh {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "config_Lst_auto_refresh";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_Lst_auto_refresh`]."]
				pub struct RemoveLstAutoRefresh {
					pub Lst: remove_Lst_auto_refresh::Lst,
				}
				pub mod remove_Lst_auto_refresh {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveLstAutoRefresh {
					const PALLET: &'static str = "StablePool";
					const CALL: &'static str = "remove_Lst_auto_refresh";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::create_pool`]."]
				pub fn create_pool(
					&self,
					assets: types::create_pool::Assets,
					precisions: types::create_pool::Precisions,
					mint_fee: types::create_pool::MintFee,
					swap_fee: types::create_pool::SwapFee,
					redeem_fee: types::create_pool::RedeemFee,
					initial_a: types::create_pool::InitialA,
					fee_recipient: types::create_pool::FeeRecipient,
					yield_recipient: types::create_pool::YieldRecipient,
					precision: types::create_pool::Precision,
				) -> ::subxt::tx::Payload<types::CreatePool> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"create_pool",
						types::CreatePool {
							assets,
							precisions,
							mint_fee,
							swap_fee,
							redeem_fee,
							initial_a,
							fee_recipient,
							yield_recipient,
							precision,
						},
						[
							103u8, 51u8, 123u8, 47u8, 174u8, 154u8, 127u8, 196u8, 146u8, 31u8,
							112u8, 179u8, 39u8, 28u8, 166u8, 222u8, 216u8, 152u8, 196u8, 22u8,
							128u8, 218u8, 86u8, 239u8, 30u8, 167u8, 59u8, 207u8, 225u8, 201u8,
							175u8, 125u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_liquidity`]."]
				pub fn add_liquidity(
					&self,
					pool_id: types::add_liquidity::PoolId,
					amounts: types::add_liquidity::Amounts,
					min_mint_amount: types::add_liquidity::MinMintAmount,
				) -> ::subxt::tx::Payload<types::AddLiquidity> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"add_liquidity",
						types::AddLiquidity { pool_id, amounts, min_mint_amount },
						[
							225u8, 65u8, 14u8, 13u8, 29u8, 143u8, 77u8, 233u8, 232u8, 237u8, 49u8,
							124u8, 113u8, 143u8, 148u8, 94u8, 43u8, 157u8, 91u8, 84u8, 249u8,
							125u8, 241u8, 42u8, 251u8, 24u8, 99u8, 245u8, 146u8, 87u8, 25u8, 44u8,
						],
					)
				}
				#[doc = "See [`Pallet::swap`]."]
				pub fn swap(
					&self,
					pool_id: types::swap::PoolId,
					i: types::swap::I,
					j: types::swap::J,
					dx: types::swap::Dx,
					min_dy: types::swap::MinDy,
				) -> ::subxt::tx::Payload<types::Swap> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"swap",
						types::Swap { pool_id, i, j, dx, min_dy },
						[
							83u8, 86u8, 74u8, 103u8, 100u8, 213u8, 244u8, 58u8, 85u8, 199u8, 237u8,
							66u8, 47u8, 131u8, 160u8, 20u8, 84u8, 167u8, 128u8, 102u8, 98u8, 92u8,
							123u8, 87u8, 210u8, 138u8, 76u8, 184u8, 65u8, 178u8, 108u8, 12u8,
						],
					)
				}
				#[doc = "See [`Pallet::redeem_proportion`]."]
				pub fn redeem_proportion(
					&self,
					pool_id: types::redeem_proportion::PoolId,
					amount: types::redeem_proportion::Amount,
					min_redeem_amounts: types::redeem_proportion::MinRedeemAmounts,
				) -> ::subxt::tx::Payload<types::RedeemProportion> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"redeem_proportion",
						types::RedeemProportion { pool_id, amount, min_redeem_amounts },
						[
							14u8, 216u8, 65u8, 111u8, 135u8, 45u8, 216u8, 233u8, 3u8, 24u8, 202u8,
							30u8, 221u8, 58u8, 65u8, 25u8, 187u8, 161u8, 55u8, 121u8, 82u8, 44u8,
							98u8, 60u8, 200u8, 50u8, 211u8, 51u8, 5u8, 125u8, 23u8, 218u8,
						],
					)
				}
				#[doc = "See [`Pallet::redeem_single`]."]
				pub fn redeem_single(
					&self,
					pool_id: types::redeem_single::PoolId,
					amount: types::redeem_single::Amount,
					i: types::redeem_single::I,
					min_redeem_amount: types::redeem_single::MinRedeemAmount,
					asset_length: types::redeem_single::AssetLength,
				) -> ::subxt::tx::Payload<types::RedeemSingle> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"redeem_single",
						types::RedeemSingle { pool_id, amount, i, min_redeem_amount, asset_length },
						[
							204u8, 56u8, 192u8, 168u8, 127u8, 47u8, 225u8, 137u8, 46u8, 161u8,
							219u8, 243u8, 218u8, 24u8, 85u8, 13u8, 196u8, 54u8, 54u8, 159u8, 39u8,
							199u8, 84u8, 176u8, 193u8, 43u8, 122u8, 156u8, 47u8, 118u8, 132u8,
							120u8,
						],
					)
				}
				#[doc = "See [`Pallet::redeem_multi`]."]
				pub fn redeem_multi(
					&self,
					pool_id: types::redeem_multi::PoolId,
					amounts: types::redeem_multi::Amounts,
					max_redeem_amount: types::redeem_multi::MaxRedeemAmount,
				) -> ::subxt::tx::Payload<types::RedeemMulti> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"redeem_multi",
						types::RedeemMulti { pool_id, amounts, max_redeem_amount },
						[
							102u8, 162u8, 69u8, 24u8, 85u8, 57u8, 35u8, 201u8, 7u8, 102u8, 97u8,
							192u8, 159u8, 187u8, 22u8, 65u8, 240u8, 82u8, 235u8, 39u8, 196u8, 19u8,
							153u8, 251u8, 81u8, 229u8, 42u8, 221u8, 2u8, 24u8, 236u8, 159u8,
						],
					)
				}
				#[doc = "See [`Pallet::modify_a`]."]
				pub fn modify_a(
					&self,
					pool_id: types::modify_a::PoolId,
					a: types::modify_a::A,
					future_a_block: types::modify_a::FutureABlock,
				) -> ::subxt::tx::Payload<types::ModifyA> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"modify_a",
						types::ModifyA { pool_id, a, future_a_block },
						[
							158u8, 105u8, 85u8, 182u8, 22u8, 0u8, 97u8, 223u8, 155u8, 81u8, 213u8,
							88u8, 71u8, 35u8, 211u8, 30u8, 17u8, 181u8, 71u8, 36u8, 60u8, 155u8,
							215u8, 229u8, 163u8, 82u8, 115u8, 2u8, 136u8, 229u8, 20u8, 237u8,
						],
					)
				}
				#[doc = "See [`Pallet::modify_fees`]."]
				pub fn modify_fees(
					&self,
					pool_id: types::modify_fees::PoolId,
					mint_fee: types::modify_fees::MintFee,
					swap_fee: types::modify_fees::SwapFee,
					redeem_fee: types::modify_fees::RedeemFee,
				) -> ::subxt::tx::Payload<types::ModifyFees> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"modify_fees",
						types::ModifyFees { pool_id, mint_fee, swap_fee, redeem_fee },
						[
							36u8, 94u8, 120u8, 73u8, 25u8, 238u8, 115u8, 141u8, 206u8, 152u8,
							168u8, 181u8, 255u8, 23u8, 206u8, 173u8, 28u8, 119u8, 14u8, 53u8,
							117u8, 149u8, 34u8, 158u8, 118u8, 18u8, 234u8, 15u8, 1u8, 76u8, 33u8,
							67u8,
						],
					)
				}
				#[doc = "See [`Pallet::modify_recipients`]."]
				pub fn modify_recipients(
					&self,
					pool_id: types::modify_recipients::PoolId,
					fee_recipient: types::modify_recipients::FeeRecipient,
					yield_recipient: types::modify_recipients::YieldRecipient,
				) -> ::subxt::tx::Payload<types::ModifyRecipients> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"modify_recipients",
						types::ModifyRecipients { pool_id, fee_recipient, yield_recipient },
						[
							98u8, 133u8, 6u8, 185u8, 72u8, 171u8, 71u8, 247u8, 80u8, 6u8, 139u8,
							0u8, 93u8, 226u8, 0u8, 178u8, 232u8, 141u8, 136u8, 49u8, 209u8, 49u8,
							162u8, 78u8, 41u8, 192u8, 9u8, 20u8, 204u8, 215u8, 225u8, 161u8,
						],
					)
				}
				#[doc = "See [`Pallet::edit_token_rate`]."]
				pub fn edit_token_rate(
					&self,
					pool_id: types::edit_token_rate::PoolId,
					token_rate_info: types::edit_token_rate::TokenRateInfo,
				) -> ::subxt::tx::Payload<types::EditTokenRate> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"edit_token_rate",
						types::EditTokenRate { pool_id, token_rate_info },
						[
							239u8, 113u8, 196u8, 110u8, 41u8, 11u8, 221u8, 19u8, 91u8, 1u8, 252u8,
							167u8, 133u8, 36u8, 35u8, 182u8, 32u8, 61u8, 28u8, 79u8, 223u8, 245u8,
							98u8, 121u8, 30u8, 213u8, 178u8, 2u8, 27u8, 8u8, 104u8, 68u8,
						],
					)
				}
				#[doc = "See [`Pallet::config_Lst_auto_refresh`]."]
				pub fn config_Lst_auto_refresh(
					&self,
					Lst: types::config_Lst_auto_refresh::Lst,
					hardcap: types::config_Lst_auto_refresh::Hardcap,
				) -> ::subxt::tx::Payload<types::ConfigLstAutoRefresh> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"config_Lst_auto_refresh",
						types::ConfigLstAutoRefresh { Lst, hardcap },
						[
							30u8, 44u8, 71u8, 159u8, 74u8, 151u8, 245u8, 90u8, 80u8, 189u8, 212u8,
							57u8, 18u8, 216u8, 22u8, 133u8, 91u8, 204u8, 238u8, 212u8, 53u8, 34u8,
							63u8, 199u8, 74u8, 66u8, 114u8, 98u8, 20u8, 225u8, 28u8, 205u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_Lst_auto_refresh`]."]
				pub fn remove_Lst_auto_refresh(
					&self,
					Lst: types::remove_Lst_auto_refresh::Lst,
				) -> ::subxt::tx::Payload<types::RemoveLstAutoRefresh> {
					::subxt::tx::Payload::new_static(
						"StablePool",
						"remove_Lst_auto_refresh",
						types::RemoveLstAutoRefresh { Lst },
						[
							2u8, 126u8, 22u8, 194u8, 152u8, 164u8, 46u8, 216u8, 156u8, 112u8,
							231u8, 4u8, 249u8, 247u8, 187u8, 185u8, 104u8, 67u8, 15u8, 191u8, 77u8,
							27u8, 211u8, 46u8, 97u8, 131u8, 50u8, 52u8, 140u8, 8u8, 164u8, 186u8,
						],
					)
				}
			}
		}
	}
	pub mod Lst_voting {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::tangle_Lst_voting::pallet::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::tangle_Lst_voting::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::vote`]."]
				pub struct Vote {
					pub Lst: vote::Lst,
					#[codec(compact)]
					pub poll_index: vote::PollIndex,
					pub Lst_vote: vote::LstVote,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type PollIndex = ::core::primitive::u32;
					pub type LstVote = runtime_types::tangle_Lst_voting::vote::AccountVote<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::unlock`]."]
				pub struct Unlock {
					pub Lst: unlock::Lst,
					#[codec(compact)]
					pub poll_index: unlock::PollIndex,
				}
				pub mod unlock {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type PollIndex = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for Unlock {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "unlock";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_delegator_vote`]."]
				pub struct RemoveDelegatorVote {
					pub Lst: remove_delegator_vote::Lst,
					#[codec(compact)]
					pub poll_index: remove_delegator_vote::PollIndex,
					#[codec(compact)]
					pub derivative_index: remove_delegator_vote::DerivativeIndex,
				}
				pub mod remove_delegator_vote {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type PollIndex = ::core::primitive::u32;
					pub type DerivativeIndex = ::core::primitive::u16;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveDelegatorVote {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "remove_delegator_vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::kill_referendum`]."]
				pub struct KillReferendum {
					pub Lst: kill_referendum::Lst,
					#[codec(compact)]
					pub poll_index: kill_referendum::PollIndex,
				}
				pub mod kill_referendum {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type PollIndex = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for KillReferendum {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "kill_referendum";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_delegator`]."]
				pub struct AddDelegator {
					pub Lst: add_delegator::Lst,
					#[codec(compact)]
					pub derivative_index: add_delegator::DerivativeIndex,
				}
				pub mod add_delegator {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type DerivativeIndex = ::core::primitive::u16;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddDelegator {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "add_delegator";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_referendum_status`]."]
				pub struct SetReferendumStatus {
					pub Lst: set_referendum_status::Lst,
					#[codec(compact)]
					pub poll_index: set_referendum_status::PollIndex,
					pub info: set_referendum_status::Info,
				}
				pub mod set_referendum_status {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type PollIndex = ::core::primitive::u32;
					pub type Info = runtime_types::tangle_Lst_voting::vote::ReferendumInfo<
						::core::primitive::u32,
						runtime_types::tangle_Lst_voting::vote::Tally<::core::primitive::u128>,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetReferendumStatus {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "set_referendum_status";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_vote_locking_period`]."]
				pub struct SetVoteLockingPeriod {
					pub Lst: set_vote_locking_period::Lst,
					pub locking_period: set_vote_locking_period::LockingPeriod,
				}
				pub mod set_vote_locking_period {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type LockingPeriod = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetVoteLockingPeriod {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "set_vote_locking_period";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_undeciding_timeout`]."]
				pub struct SetUndecidingTimeout {
					pub Lst: set_undeciding_timeout::Lst,
					pub undeciding_timeout: set_undeciding_timeout::UndecidingTimeout,
				}
				pub mod set_undeciding_timeout {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type UndecidingTimeout = ::core::primitive::u32;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetUndecidingTimeout {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "set_undeciding_timeout";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::notify_vote`]."]
				pub struct NotifyVote {
					pub query_id: notify_vote::QueryId,
					pub response: notify_vote::Response,
				}
				pub mod notify_vote {
					use super::runtime_types;
					pub type QueryId = ::core::primitive::u64;
					pub type Response = runtime_types::xcm::v3::Response;
				}
				impl ::subxt::blocks::StaticExtrinsic for NotifyVote {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "notify_vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::notify_remove_delegator_vote`]."]
				pub struct NotifyRemoveDelegatorVote {
					pub query_id: notify_remove_delegator_vote::QueryId,
					pub response: notify_remove_delegator_vote::Response,
				}
				pub mod notify_remove_delegator_vote {
					use super::runtime_types;
					pub type QueryId = ::core::primitive::u64;
					pub type Response = runtime_types::xcm::v3::Response;
				}
				impl ::subxt::blocks::StaticExtrinsic for NotifyRemoveDelegatorVote {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "notify_remove_delegator_vote";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_vote_cap_ratio`]."]
				pub struct SetVoteCapRatio {
					pub Lst: set_vote_cap_ratio::Lst,
					pub vote_cap_ratio: set_vote_cap_ratio::VoteCapRatio,
				}
				pub mod set_vote_cap_ratio {
					use super::runtime_types;
					pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type VoteCapRatio = runtime_types::sp_arithmetic::per_things::Perbill;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetVoteCapRatio {
					const PALLET: &'static str = "LstVoting";
					const CALL: &'static str = "set_vote_cap_ratio";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::vote`]."]
				pub fn vote(
					&self,
					Lst: types::vote::Lst,
					poll_index: types::vote::PollIndex,
					Lst_vote: types::vote::LstVote,
				) -> ::subxt::tx::Payload<types::Vote> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"vote",
						types::Vote { Lst, poll_index, Lst_vote },
						[
							196u8, 16u8, 247u8, 10u8, 227u8, 117u8, 86u8, 86u8, 205u8, 221u8,
							217u8, 34u8, 155u8, 30u8, 39u8, 216u8, 157u8, 58u8, 173u8, 174u8,
							159u8, 138u8, 237u8, 117u8, 162u8, 6u8, 101u8, 195u8, 105u8, 26u8,
							175u8, 42u8,
						],
					)
				}
				#[doc = "See [`Pallet::unlock`]."]
				pub fn unlock(
					&self,
					Lst: types::unlock::Lst,
					poll_index: types::unlock::PollIndex,
				) -> ::subxt::tx::Payload<types::Unlock> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"unlock",
						types::Unlock { Lst, poll_index },
						[
							83u8, 150u8, 104u8, 121u8, 133u8, 246u8, 69u8, 27u8, 84u8, 69u8, 252u8,
							140u8, 154u8, 107u8, 54u8, 93u8, 122u8, 132u8, 101u8, 131u8, 212u8,
							210u8, 220u8, 150u8, 236u8, 35u8, 240u8, 154u8, 66u8, 72u8, 219u8,
							76u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_delegator_vote`]."]
				pub fn remove_delegator_vote(
					&self,
					Lst: types::remove_delegator_vote::Lst,
					poll_index: types::remove_delegator_vote::PollIndex,
					derivative_index: types::remove_delegator_vote::DerivativeIndex,
				) -> ::subxt::tx::Payload<types::RemoveDelegatorVote> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"remove_delegator_vote",
						types::RemoveDelegatorVote { Lst, poll_index, derivative_index },
						[
							192u8, 174u8, 178u8, 15u8, 94u8, 28u8, 182u8, 204u8, 134u8, 42u8, 78u8,
							193u8, 252u8, 142u8, 249u8, 244u8, 145u8, 165u8, 250u8, 73u8, 187u8,
							227u8, 210u8, 13u8, 62u8, 81u8, 101u8, 106u8, 137u8, 229u8, 190u8, 5u8,
						],
					)
				}
				#[doc = "See [`Pallet::kill_referendum`]."]
				pub fn kill_referendum(
					&self,
					Lst: types::kill_referendum::Lst,
					poll_index: types::kill_referendum::PollIndex,
				) -> ::subxt::tx::Payload<types::KillReferendum> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"kill_referendum",
						types::KillReferendum { Lst, poll_index },
						[
							90u8, 153u8, 31u8, 87u8, 140u8, 88u8, 184u8, 2u8, 232u8, 105u8, 60u8,
							215u8, 238u8, 39u8, 72u8, 175u8, 150u8, 122u8, 107u8, 56u8, 96u8,
							150u8, 111u8, 239u8, 166u8, 13u8, 65u8, 239u8, 7u8, 56u8, 247u8, 108u8,
						],
					)
				}
				#[doc = "See [`Pallet::add_delegator`]."]
				pub fn add_delegator(
					&self,
					Lst: types::add_delegator::Lst,
					derivative_index: types::add_delegator::DerivativeIndex,
				) -> ::subxt::tx::Payload<types::AddDelegator> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"add_delegator",
						types::AddDelegator { Lst, derivative_index },
						[
							54u8, 207u8, 242u8, 225u8, 46u8, 197u8, 88u8, 9u8, 3u8, 108u8, 61u8,
							203u8, 6u8, 45u8, 44u8, 220u8, 123u8, 4u8, 183u8, 137u8, 76u8, 29u8,
							254u8, 9u8, 112u8, 34u8, 1u8, 203u8, 92u8, 28u8, 78u8, 151u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_referendum_status`]."]
				pub fn set_referendum_status(
					&self,
					Lst: types::set_referendum_status::Lst,
					poll_index: types::set_referendum_status::PollIndex,
					info: types::set_referendum_status::Info,
				) -> ::subxt::tx::Payload<types::SetReferendumStatus> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"set_referendum_status",
						types::SetReferendumStatus { Lst, poll_index, info },
						[
							108u8, 153u8, 103u8, 105u8, 190u8, 9u8, 179u8, 200u8, 96u8, 53u8,
							185u8, 126u8, 82u8, 162u8, 164u8, 114u8, 227u8, 252u8, 186u8, 52u8,
							60u8, 26u8, 232u8, 11u8, 59u8, 239u8, 225u8, 105u8, 123u8, 185u8, 18u8,
							178u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_vote_locking_period`]."]
				pub fn set_vote_locking_period(
					&self,
					Lst: types::set_vote_locking_period::Lst,
					locking_period: types::set_vote_locking_period::LockingPeriod,
				) -> ::subxt::tx::Payload<types::SetVoteLockingPeriod> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"set_vote_locking_period",
						types::SetVoteLockingPeriod { Lst, locking_period },
						[
							149u8, 223u8, 217u8, 198u8, 116u8, 218u8, 174u8, 214u8, 155u8, 192u8,
							76u8, 77u8, 103u8, 155u8, 88u8, 50u8, 16u8, 234u8, 84u8, 63u8, 193u8,
							79u8, 69u8, 125u8, 248u8, 81u8, 242u8, 15u8, 251u8, 230u8, 235u8,
							196u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_undeciding_timeout`]."]
				pub fn set_undeciding_timeout(
					&self,
					Lst: types::set_undeciding_timeout::Lst,
					undeciding_timeout: types::set_undeciding_timeout::UndecidingTimeout,
				) -> ::subxt::tx::Payload<types::SetUndecidingTimeout> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"set_undeciding_timeout",
						types::SetUndecidingTimeout { Lst, undeciding_timeout },
						[
							183u8, 46u8, 238u8, 37u8, 235u8, 47u8, 150u8, 69u8, 122u8, 229u8,
							231u8, 28u8, 165u8, 33u8, 126u8, 198u8, 0u8, 242u8, 70u8, 11u8, 43u8,
							138u8, 196u8, 149u8, 21u8, 106u8, 106u8, 33u8, 212u8, 209u8, 19u8,
							88u8,
						],
					)
				}
				#[doc = "See [`Pallet::notify_vote`]."]
				pub fn notify_vote(
					&self,
					query_id: types::notify_vote::QueryId,
					response: types::notify_vote::Response,
				) -> ::subxt::tx::Payload<types::NotifyVote> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"notify_vote",
						types::NotifyVote { query_id, response },
						[
							117u8, 239u8, 217u8, 177u8, 130u8, 107u8, 210u8, 60u8, 55u8, 19u8,
							67u8, 160u8, 66u8, 79u8, 205u8, 86u8, 157u8, 222u8, 17u8, 131u8, 187u8,
							15u8, 254u8, 63u8, 37u8, 81u8, 231u8, 96u8, 57u8, 197u8, 186u8, 165u8,
						],
					)
				}
				#[doc = "See [`Pallet::notify_remove_delegator_vote`]."]
				pub fn notify_remove_delegator_vote(
					&self,
					query_id: types::notify_remove_delegator_vote::QueryId,
					response: types::notify_remove_delegator_vote::Response,
				) -> ::subxt::tx::Payload<types::NotifyRemoveDelegatorVote> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"notify_remove_delegator_vote",
						types::NotifyRemoveDelegatorVote { query_id, response },
						[
							130u8, 118u8, 190u8, 57u8, 62u8, 137u8, 163u8, 203u8, 104u8, 197u8,
							233u8, 84u8, 146u8, 238u8, 187u8, 157u8, 131u8, 153u8, 115u8, 196u8,
							123u8, 230u8, 185u8, 40u8, 133u8, 250u8, 249u8, 72u8, 7u8, 90u8, 42u8,
							214u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_vote_cap_ratio`]."]
				pub fn set_vote_cap_ratio(
					&self,
					Lst: types::set_vote_cap_ratio::Lst,
					vote_cap_ratio: types::set_vote_cap_ratio::VoteCapRatio,
				) -> ::subxt::tx::Payload<types::SetVoteCapRatio> {
					::subxt::tx::Payload::new_static(
						"LstVoting",
						"set_vote_cap_ratio",
						types::SetVoteCapRatio { Lst, vote_cap_ratio },
						[
							6u8, 196u8, 88u8, 192u8, 41u8, 66u8, 228u8, 219u8, 204u8, 141u8, 119u8,
							132u8, 6u8, 190u8, 106u8, 38u8, 89u8, 151u8, 30u8, 138u8, 88u8, 232u8,
							145u8, 118u8, 62u8, 232u8, 59u8, 39u8, 76u8, 198u8, 68u8, 162u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::tangle_Lst_voting::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Voted {
				pub who: voted::Who,
				pub Lst: voted::Lst,
				pub poll_index: voted::PollIndex,
				pub token_vote: voted::TokenVote,
				pub delegator_vote: voted::DelegatorVote,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type PollIndex = ::core::primitive::u32;
				pub type TokenVote =
					runtime_types::tangle_Lst_voting::vote::AccountVote<::core::primitive::u128>;
				pub type DelegatorVote =
					runtime_types::tangle_Lst_voting::vote::AccountVote<::core::primitive::u128>;
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unlocked {
				pub who: unlocked::Who,
				pub Lst: unlocked::Lst,
				pub poll_index: unlocked::PollIndex,
			}
			pub mod unlocked {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type PollIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for Unlocked {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "Unlocked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorVoteRemoved {
				pub who: delegator_vote_removed::Who,
				pub Lst: delegator_vote_removed::Lst,
				pub derivative_index: delegator_vote_removed::DerivativeIndex,
			}
			pub mod delegator_vote_removed {
				use super::runtime_types;
				pub type Who = ::subxt::utils::AccountId32;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DerivativeIndex = ::core::primitive::u16;
			}
			impl ::subxt::events::StaticEvent for DelegatorVoteRemoved {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "DelegatorVoteRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorAdded {
				pub Lst: delegator_added::Lst,
				pub derivative_index: delegator_added::DerivativeIndex,
			}
			pub mod delegator_added {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type DerivativeIndex = ::core::primitive::u16;
			}
			impl ::subxt::events::StaticEvent for DelegatorAdded {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "DelegatorAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReferendumInfoCreated {
				pub Lst: referendum_info_created::Lst,
				pub poll_index: referendum_info_created::PollIndex,
				pub info: referendum_info_created::Info,
			}
			pub mod referendum_info_created {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type PollIndex = ::core::primitive::u32;
				pub type Info = runtime_types::tangle_Lst_voting::vote::ReferendumInfo<
					::core::primitive::u32,
					runtime_types::tangle_Lst_voting::vote::Tally<::core::primitive::u128>,
				>;
			}
			impl ::subxt::events::StaticEvent for ReferendumInfoCreated {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "ReferendumInfoCreated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReferendumInfoSet {
				pub Lst: referendum_info_set::Lst,
				pub poll_index: referendum_info_set::PollIndex,
				pub info: referendum_info_set::Info,
			}
			pub mod referendum_info_set {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type PollIndex = ::core::primitive::u32;
				pub type Info = runtime_types::tangle_Lst_voting::vote::ReferendumInfo<
					::core::primitive::u32,
					runtime_types::tangle_Lst_voting::vote::Tally<::core::primitive::u128>,
				>;
			}
			impl ::subxt::events::StaticEvent for ReferendumInfoSet {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "ReferendumInfoSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct VoteLockingPeriodSet {
				pub Lst: vote_locking_period_set::Lst,
				pub locking_period: vote_locking_period_set::LockingPeriod,
			}
			pub mod vote_locking_period_set {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type LockingPeriod = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for VoteLockingPeriodSet {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "VoteLockingPeriodSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UndecidingTimeoutSet {
				pub Lst: undeciding_timeout_set::Lst,
				pub undeciding_timeout: undeciding_timeout_set::UndecidingTimeout,
			}
			pub mod undeciding_timeout_set {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type UndecidingTimeout = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for UndecidingTimeoutSet {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "UndecidingTimeoutSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReferendumKilled {
				pub Lst: referendum_killed::Lst,
				pub poll_index: referendum_killed::PollIndex,
			}
			pub mod referendum_killed {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type PollIndex = ::core::primitive::u32;
			}
			impl ::subxt::events::StaticEvent for ReferendumKilled {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "ReferendumKilled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct VoteNotified {
				pub Lst: vote_notified::Lst,
				pub poll_index: vote_notified::PollIndex,
				pub success: vote_notified::Success,
			}
			pub mod vote_notified {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type PollIndex = ::core::primitive::u32;
				pub type Success = ::core::primitive::bool;
			}
			impl ::subxt::events::StaticEvent for VoteNotified {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "VoteNotified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DelegatorVoteRemovedNotified {
				pub Lst: delegator_vote_removed_notified::Lst,
				pub poll_index: delegator_vote_removed_notified::PollIndex,
				pub success: delegator_vote_removed_notified::Success,
			}
			pub mod delegator_vote_removed_notified {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type PollIndex = ::core::primitive::u32;
				pub type Success = ::core::primitive::bool;
			}
			impl ::subxt::events::StaticEvent for DelegatorVoteRemovedNotified {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "DelegatorVoteRemovedNotified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ResponseReceived {
				pub responder: response_received::Responder,
				pub query_id: response_received::QueryId,
				pub response: response_received::Response,
			}
			pub mod response_received {
				use super::runtime_types;
				pub type Responder = runtime_types::staging_xcm::v3::multilocation::MultiLocation;
				pub type QueryId = ::core::primitive::u64;
				pub type Response = runtime_types::xcm::v3::Response;
			}
			impl ::subxt::events::StaticEvent for ResponseReceived {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "ResponseReceived";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct VoteCapRatioSet {
				pub Lst: vote_cap_ratio_set::Lst,
				pub vote_cap_ratio: vote_cap_ratio_set::VoteCapRatio,
			}
			pub mod vote_cap_ratio_set {
				use super::runtime_types;
				pub type Lst = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type VoteCapRatio = runtime_types::sp_arithmetic::per_things::Perbill;
			}
			impl ::subxt::events::StaticEvent for VoteCapRatioSet {
				const PALLET: &'static str = "LstVoting";
				const EVENT: &'static str = "VoteCapRatioSet";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod referendum_info_for {
					use super::runtime_types;
					pub type ReferendumInfoFor =
						runtime_types::tangle_Lst_voting::vote::ReferendumInfo<
							::core::primitive::u32,
							runtime_types::tangle_Lst_voting::vote::Tally<::core::primitive::u128>,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod voting_for {
					use super::runtime_types;
					pub type VotingFor = runtime_types::tangle_Lst_voting::vote::Voting<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod class_locks_for {
					use super::runtime_types;
					pub type ClassLocksFor =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							::core::primitive::u128,
						)>;
					pub type Param0 = ::subxt::utils::AccountId32;
				}
				pub mod pending_referendum_info {
					use super::runtime_types;
					pub type PendingReferendumInfo = (
						runtime_types::tangle_primitives::currency::CurrencyId,
						::core::primitive::u32,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod pending_voting_info {
					use super::runtime_types;
					pub type PendingVotingInfo = (
						runtime_types::tangle_primitives::currency::CurrencyId,
						::core::primitive::u32,
						::core::primitive::u16,
						::subxt::utils::AccountId32,
						::core::option::Option<(
							runtime_types::tangle_Lst_voting::vote::AccountVote<
								::core::primitive::u128,
							>,
							::core::primitive::u128,
						)>,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod pending_remove_delegator_vote {
					use super::runtime_types;
					pub type PendingRemoveDelegatorVote = (
						runtime_types::tangle_primitives::currency::CurrencyId,
						::core::primitive::u32,
						::core::primitive::u16,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod vote_locking_period {
					use super::runtime_types;
					pub type VoteLockingPeriod = ::core::primitive::u32;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod undeciding_timeout {
					use super::runtime_types;
					pub type UndecidingTimeout = ::core::primitive::u32;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod delegators {
					use super::runtime_types;
					pub type Delegators =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u16,
						>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod vote_cap_ratio {
					use super::runtime_types;
					pub type VoteCapRatio = runtime_types::sp_arithmetic::per_things::Perbill;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod delegator_votes {
					use super::runtime_types;
					pub type DelegatorVotes =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u16,
							runtime_types::tangle_Lst_voting::vote::AccountVote<
								::core::primitive::u128,
							>,
						)>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod pending_delegator_votes {
					use super::runtime_types;
					pub type PendingDelegatorVotes =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u16,
							runtime_types::tangle_Lst_voting::vote::AccountVote<
								::core::primitive::u128,
							>,
						)>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod referendum_timeout {
					use super::runtime_types;
					pub type ReferendumTimeout =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							::core::primitive::u32,
						)>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod vote_delegator_for {
					use super::runtime_types;
					pub type VoteDelegatorFor = ::core::primitive::u16;
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param2 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_for::ReferendumInfoFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"ReferendumInfoFor",
						vec![],
						[
							115u8, 217u8, 39u8, 24u8, 59u8, 77u8, 144u8, 94u8, 152u8, 208u8, 187u8,
							5u8, 176u8, 94u8, 76u8, 155u8, 133u8, 251u8, 11u8, 2u8, 179u8, 50u8,
							169u8, 161u8, 254u8, 166u8, 196u8, 146u8, 40u8, 56u8, 45u8, 208u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::referendum_info_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_for::ReferendumInfoFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"ReferendumInfoFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							115u8, 217u8, 39u8, 24u8, 59u8, 77u8, 144u8, 94u8, 152u8, 208u8, 187u8,
							5u8, 176u8, 94u8, 76u8, 155u8, 133u8, 251u8, 11u8, 2u8, 179u8, 50u8,
							169u8, 161u8, 254u8, 166u8, 196u8, 146u8, 40u8, 56u8, 45u8, 208u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::referendum_info_for::Param0>,
					_1: impl ::std::borrow::Borrow<types::referendum_info_for::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_info_for::ReferendumInfoFor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"ReferendumInfoFor",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							115u8, 217u8, 39u8, 24u8, 59u8, 77u8, 144u8, 94u8, 152u8, 208u8, 187u8,
							5u8, 176u8, 94u8, 76u8, 155u8, 133u8, 251u8, 11u8, 2u8, 179u8, 50u8,
							169u8, 161u8, 254u8, 166u8, 196u8, 146u8, 40u8, 56u8, 45u8, 208u8,
						],
					)
				}
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_for::VotingFor,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VotingFor",
						vec![],
						[
							16u8, 97u8, 211u8, 245u8, 236u8, 38u8, 242u8, 181u8, 191u8, 195u8,
							212u8, 47u8, 171u8, 111u8, 129u8, 148u8, 114u8, 65u8, 97u8, 99u8,
							132u8, 9u8, 53u8, 131u8, 247u8, 17u8, 64u8, 118u8, 1u8, 185u8, 95u8,
							185u8,
						],
					)
				}
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::voting_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::voting_for::VotingFor,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VotingFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							16u8, 97u8, 211u8, 245u8, 236u8, 38u8, 242u8, 181u8, 191u8, 195u8,
							212u8, 47u8, 171u8, 111u8, 129u8, 148u8, 114u8, 65u8, 97u8, 99u8,
							132u8, 9u8, 53u8, 131u8, 247u8, 17u8, 64u8, 118u8, 1u8, 185u8, 95u8,
							185u8,
						],
					)
				}
				#[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
				#[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
				#[doc = " this list."]
				pub fn class_locks_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::class_locks_for::ClassLocksFor,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"ClassLocksFor",
						vec![],
						[
							215u8, 235u8, 31u8, 121u8, 88u8, 119u8, 43u8, 209u8, 43u8, 250u8, 46u8,
							109u8, 38u8, 238u8, 94u8, 116u8, 19u8, 96u8, 40u8, 34u8, 166u8, 68u8,
							239u8, 66u8, 44u8, 123u8, 182u8, 185u8, 251u8, 58u8, 125u8, 140u8,
						],
					)
				}
				#[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
				#[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
				#[doc = " this list."]
				pub fn class_locks_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::class_locks_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::class_locks_for::ClassLocksFor,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"ClassLocksFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							215u8, 235u8, 31u8, 121u8, 88u8, 119u8, 43u8, 209u8, 43u8, 250u8, 46u8,
							109u8, 38u8, 238u8, 94u8, 116u8, 19u8, 96u8, 40u8, 34u8, 166u8, 68u8,
							239u8, 66u8, 44u8, 123u8, 182u8, 185u8, 251u8, 58u8, 125u8, 140u8,
						],
					)
				}
				pub fn pending_referendum_info_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_referendum_info::PendingReferendumInfo,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingReferendumInfo",
						vec![],
						[
							31u8, 147u8, 149u8, 203u8, 131u8, 71u8, 247u8, 184u8, 13u8, 132u8,
							171u8, 78u8, 162u8, 205u8, 144u8, 197u8, 137u8, 244u8, 147u8, 14u8,
							212u8, 222u8, 186u8, 48u8, 217u8, 27u8, 118u8, 224u8, 99u8, 86u8,
							199u8, 244u8,
						],
					)
				}
				pub fn pending_referendum_info(
					&self,
					_0: impl ::std::borrow::Borrow<types::pending_referendum_info::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_referendum_info::PendingReferendumInfo,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingReferendumInfo",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							31u8, 147u8, 149u8, 203u8, 131u8, 71u8, 247u8, 184u8, 13u8, 132u8,
							171u8, 78u8, 162u8, 205u8, 144u8, 197u8, 137u8, 244u8, 147u8, 14u8,
							212u8, 222u8, 186u8, 48u8, 217u8, 27u8, 118u8, 224u8, 99u8, 86u8,
							199u8, 244u8,
						],
					)
				}
				pub fn pending_voting_info_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_voting_info::PendingVotingInfo,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingVotingInfo",
						vec![],
						[
							149u8, 111u8, 247u8, 202u8, 201u8, 149u8, 21u8, 5u8, 143u8, 163u8,
							130u8, 165u8, 179u8, 186u8, 98u8, 57u8, 149u8, 75u8, 80u8, 156u8,
							204u8, 185u8, 151u8, 33u8, 116u8, 108u8, 158u8, 154u8, 167u8, 110u8,
							94u8, 176u8,
						],
					)
				}
				pub fn pending_voting_info(
					&self,
					_0: impl ::std::borrow::Borrow<types::pending_voting_info::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_voting_info::PendingVotingInfo,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingVotingInfo",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							149u8, 111u8, 247u8, 202u8, 201u8, 149u8, 21u8, 5u8, 143u8, 163u8,
							130u8, 165u8, 179u8, 186u8, 98u8, 57u8, 149u8, 75u8, 80u8, 156u8,
							204u8, 185u8, 151u8, 33u8, 116u8, 108u8, 158u8, 154u8, 167u8, 110u8,
							94u8, 176u8,
						],
					)
				}
				pub fn pending_remove_delegator_vote_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_remove_delegator_vote::PendingRemoveDelegatorVote,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingRemoveDelegatorVote",
						vec![],
						[
							171u8, 226u8, 23u8, 61u8, 6u8, 95u8, 181u8, 143u8, 160u8, 47u8, 200u8,
							208u8, 38u8, 243u8, 8u8, 91u8, 198u8, 212u8, 187u8, 231u8, 142u8,
							212u8, 207u8, 200u8, 254u8, 243u8, 103u8, 57u8, 156u8, 165u8, 153u8,
							12u8,
						],
					)
				}
				pub fn pending_remove_delegator_vote(
					&self,
					_0: impl ::std::borrow::Borrow<types::pending_remove_delegator_vote::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_remove_delegator_vote::PendingRemoveDelegatorVote,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingRemoveDelegatorVote",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							171u8, 226u8, 23u8, 61u8, 6u8, 95u8, 181u8, 143u8, 160u8, 47u8, 200u8,
							208u8, 38u8, 243u8, 8u8, 91u8, 198u8, 212u8, 187u8, 231u8, 142u8,
							212u8, 207u8, 200u8, 254u8, 243u8, 103u8, 57u8, 156u8, 165u8, 153u8,
							12u8,
						],
					)
				}
				pub fn vote_locking_period_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_locking_period::VoteLockingPeriod,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteLockingPeriod",
						vec![],
						[
							237u8, 180u8, 180u8, 188u8, 185u8, 71u8, 168u8, 0u8, 178u8, 73u8, 82u8,
							199u8, 119u8, 0u8, 46u8, 75u8, 174u8, 79u8, 120u8, 176u8, 163u8, 131u8,
							178u8, 225u8, 40u8, 239u8, 4u8, 173u8, 205u8, 158u8, 229u8, 253u8,
						],
					)
				}
				pub fn vote_locking_period(
					&self,
					_0: impl ::std::borrow::Borrow<types::vote_locking_period::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_locking_period::VoteLockingPeriod,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteLockingPeriod",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							237u8, 180u8, 180u8, 188u8, 185u8, 71u8, 168u8, 0u8, 178u8, 73u8, 82u8,
							199u8, 119u8, 0u8, 46u8, 75u8, 174u8, 79u8, 120u8, 176u8, 163u8, 131u8,
							178u8, 225u8, 40u8, 239u8, 4u8, 173u8, 205u8, 158u8, 229u8, 253u8,
						],
					)
				}
				pub fn undeciding_timeout_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::undeciding_timeout::UndecidingTimeout,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"UndecidingTimeout",
						vec![],
						[
							49u8, 12u8, 163u8, 92u8, 110u8, 107u8, 193u8, 217u8, 149u8, 35u8,
							138u8, 77u8, 178u8, 105u8, 113u8, 120u8, 87u8, 164u8, 162u8, 135u8,
							98u8, 13u8, 113u8, 159u8, 201u8, 186u8, 171u8, 189u8, 159u8, 52u8,
							130u8, 17u8,
						],
					)
				}
				pub fn undeciding_timeout(
					&self,
					_0: impl ::std::borrow::Borrow<types::undeciding_timeout::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::undeciding_timeout::UndecidingTimeout,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"UndecidingTimeout",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							49u8, 12u8, 163u8, 92u8, 110u8, 107u8, 193u8, 217u8, 149u8, 35u8,
							138u8, 77u8, 178u8, 105u8, 113u8, 120u8, 87u8, 164u8, 162u8, 135u8,
							98u8, 13u8, 113u8, 159u8, 201u8, 186u8, 171u8, 189u8, 159u8, 52u8,
							130u8, 17u8,
						],
					)
				}
				pub fn delegators_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators::Delegators,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"Delegators",
						vec![],
						[
							221u8, 218u8, 27u8, 190u8, 34u8, 106u8, 136u8, 29u8, 224u8, 225u8,
							137u8, 5u8, 178u8, 167u8, 84u8, 97u8, 166u8, 50u8, 242u8, 30u8, 70u8,
							95u8, 89u8, 159u8, 156u8, 207u8, 220u8, 172u8, 120u8, 236u8, 242u8,
							16u8,
						],
					)
				}
				pub fn delegators(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegators::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegators::Delegators,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"Delegators",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							221u8, 218u8, 27u8, 190u8, 34u8, 106u8, 136u8, 29u8, 224u8, 225u8,
							137u8, 5u8, 178u8, 167u8, 84u8, 97u8, 166u8, 50u8, 242u8, 30u8, 70u8,
							95u8, 89u8, 159u8, 156u8, 207u8, 220u8, 172u8, 120u8, 236u8, 242u8,
							16u8,
						],
					)
				}
				pub fn vote_cap_ratio_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_cap_ratio::VoteCapRatio,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteCapRatio",
						vec![],
						[
							172u8, 196u8, 142u8, 113u8, 76u8, 140u8, 247u8, 187u8, 255u8, 85u8,
							23u8, 189u8, 240u8, 205u8, 5u8, 15u8, 224u8, 61u8, 193u8, 81u8, 104u8,
							129u8, 118u8, 65u8, 86u8, 36u8, 42u8, 49u8, 254u8, 105u8, 90u8, 5u8,
						],
					)
				}
				pub fn vote_cap_ratio(
					&self,
					_0: impl ::std::borrow::Borrow<types::vote_cap_ratio::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_cap_ratio::VoteCapRatio,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteCapRatio",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							172u8, 196u8, 142u8, 113u8, 76u8, 140u8, 247u8, 187u8, 255u8, 85u8,
							23u8, 189u8, 240u8, 205u8, 5u8, 15u8, 224u8, 61u8, 193u8, 81u8, 104u8,
							129u8, 118u8, 65u8, 86u8, 36u8, 42u8, 49u8, 254u8, 105u8, 90u8, 5u8,
						],
					)
				}
				pub fn delegator_votes_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_votes::DelegatorVotes,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"DelegatorVotes",
						vec![],
						[
							237u8, 163u8, 181u8, 41u8, 73u8, 140u8, 221u8, 181u8, 187u8, 153u8,
							98u8, 14u8, 28u8, 79u8, 16u8, 160u8, 116u8, 15u8, 41u8, 1u8, 81u8,
							94u8, 29u8, 102u8, 229u8, 145u8, 11u8, 228u8, 53u8, 120u8, 22u8, 101u8,
						],
					)
				}
				pub fn delegator_votes_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_votes::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_votes::DelegatorVotes,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"DelegatorVotes",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							237u8, 163u8, 181u8, 41u8, 73u8, 140u8, 221u8, 181u8, 187u8, 153u8,
							98u8, 14u8, 28u8, 79u8, 16u8, 160u8, 116u8, 15u8, 41u8, 1u8, 81u8,
							94u8, 29u8, 102u8, 229u8, 145u8, 11u8, 228u8, 53u8, 120u8, 22u8, 101u8,
						],
					)
				}
				pub fn delegator_votes(
					&self,
					_0: impl ::std::borrow::Borrow<types::delegator_votes::Param0>,
					_1: impl ::std::borrow::Borrow<types::delegator_votes::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::delegator_votes::DelegatorVotes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"DelegatorVotes",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							237u8, 163u8, 181u8, 41u8, 73u8, 140u8, 221u8, 181u8, 187u8, 153u8,
							98u8, 14u8, 28u8, 79u8, 16u8, 160u8, 116u8, 15u8, 41u8, 1u8, 81u8,
							94u8, 29u8, 102u8, 229u8, 145u8, 11u8, 228u8, 53u8, 120u8, 22u8, 101u8,
						],
					)
				}
				pub fn pending_delegator_votes_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_delegator_votes::PendingDelegatorVotes,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingDelegatorVotes",
						vec![],
						[
							98u8, 150u8, 104u8, 44u8, 3u8, 223u8, 31u8, 243u8, 30u8, 22u8, 10u8,
							50u8, 172u8, 207u8, 112u8, 131u8, 245u8, 195u8, 153u8, 60u8, 67u8,
							47u8, 39u8, 88u8, 159u8, 236u8, 70u8, 168u8, 19u8, 184u8, 246u8, 174u8,
						],
					)
				}
				pub fn pending_delegator_votes_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::pending_delegator_votes::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_delegator_votes::PendingDelegatorVotes,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingDelegatorVotes",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							98u8, 150u8, 104u8, 44u8, 3u8, 223u8, 31u8, 243u8, 30u8, 22u8, 10u8,
							50u8, 172u8, 207u8, 112u8, 131u8, 245u8, 195u8, 153u8, 60u8, 67u8,
							47u8, 39u8, 88u8, 159u8, 236u8, 70u8, 168u8, 19u8, 184u8, 246u8, 174u8,
						],
					)
				}
				pub fn pending_delegator_votes(
					&self,
					_0: impl ::std::borrow::Borrow<types::pending_delegator_votes::Param0>,
					_1: impl ::std::borrow::Borrow<types::pending_delegator_votes::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::pending_delegator_votes::PendingDelegatorVotes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"PendingDelegatorVotes",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							98u8, 150u8, 104u8, 44u8, 3u8, 223u8, 31u8, 243u8, 30u8, 22u8, 10u8,
							50u8, 172u8, 207u8, 112u8, 131u8, 245u8, 195u8, 153u8, 60u8, 67u8,
							47u8, 39u8, 88u8, 159u8, 236u8, 70u8, 168u8, 19u8, 184u8, 246u8, 174u8,
						],
					)
				}
				pub fn referendum_timeout_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_timeout::ReferendumTimeout,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"ReferendumTimeout",
						vec![],
						[
							190u8, 116u8, 50u8, 133u8, 88u8, 177u8, 179u8, 108u8, 99u8, 250u8,
							208u8, 170u8, 54u8, 239u8, 222u8, 130u8, 124u8, 40u8, 238u8, 215u8,
							105u8, 180u8, 40u8, 147u8, 141u8, 131u8, 115u8, 39u8, 52u8, 141u8,
							236u8, 209u8,
						],
					)
				}
				pub fn referendum_timeout(
					&self,
					_0: impl ::std::borrow::Borrow<types::referendum_timeout::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::referendum_timeout::ReferendumTimeout,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"ReferendumTimeout",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							190u8, 116u8, 50u8, 133u8, 88u8, 177u8, 179u8, 108u8, 99u8, 250u8,
							208u8, 170u8, 54u8, 239u8, 222u8, 130u8, 124u8, 40u8, 238u8, 215u8,
							105u8, 180u8, 40u8, 147u8, 141u8, 131u8, 115u8, 39u8, 52u8, 141u8,
							236u8, 209u8,
						],
					)
				}
				pub fn vote_delegator_for_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_delegator_for::VoteDelegatorFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteDelegatorFor",
						vec![],
						[
							92u8, 215u8, 211u8, 181u8, 32u8, 160u8, 181u8, 79u8, 216u8, 235u8,
							201u8, 202u8, 174u8, 55u8, 133u8, 212u8, 54u8, 128u8, 128u8, 82u8,
							199u8, 7u8, 24u8, 27u8, 120u8, 100u8, 44u8, 250u8, 87u8, 12u8, 41u8,
							86u8,
						],
					)
				}
				pub fn vote_delegator_for_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::vote_delegator_for::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_delegator_for::VoteDelegatorFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteDelegatorFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							92u8, 215u8, 211u8, 181u8, 32u8, 160u8, 181u8, 79u8, 216u8, 235u8,
							201u8, 202u8, 174u8, 55u8, 133u8, 212u8, 54u8, 128u8, 128u8, 82u8,
							199u8, 7u8, 24u8, 27u8, 120u8, 100u8, 44u8, 250u8, 87u8, 12u8, 41u8,
							86u8,
						],
					)
				}
				pub fn vote_delegator_for_iter2(
					&self,
					_0: impl ::std::borrow::Borrow<types::vote_delegator_for::Param0>,
					_1: impl ::std::borrow::Borrow<types::vote_delegator_for::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_delegator_for::VoteDelegatorFor,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteDelegatorFor",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							92u8, 215u8, 211u8, 181u8, 32u8, 160u8, 181u8, 79u8, 216u8, 235u8,
							201u8, 202u8, 174u8, 55u8, 133u8, 212u8, 54u8, 128u8, 128u8, 82u8,
							199u8, 7u8, 24u8, 27u8, 120u8, 100u8, 44u8, 250u8, 87u8, 12u8, 41u8,
							86u8,
						],
					)
				}
				pub fn vote_delegator_for(
					&self,
					_0: impl ::std::borrow::Borrow<types::vote_delegator_for::Param0>,
					_1: impl ::std::borrow::Borrow<types::vote_delegator_for::Param1>,
					_2: impl ::std::borrow::Borrow<types::vote_delegator_for::Param2>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::vote_delegator_for::VoteDelegatorFor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"LstVoting",
						"VoteDelegatorFor",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
						],
						[
							92u8, 215u8, 211u8, 181u8, 32u8, 160u8, 181u8, 79u8, 216u8, 235u8,
							201u8, 202u8, 174u8, 55u8, 133u8, 212u8, 54u8, 128u8, 128u8, 82u8,
							199u8, 7u8, 24u8, 27u8, 120u8, 100u8, 44u8, 250u8, 87u8, 12u8, 41u8,
							86u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn parachain_id(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::polkadot_parachain_primitives::primitives::Id,
				> {
					::subxt::constants::Address::new_static(
						"LstVoting",
						"ParachainId",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " The maximum number of concurrent votes an account may have."]
				pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstVoting",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn query_timeout(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstVoting",
						"QueryTimeout",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn referendum_check_interval(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"LstVoting",
						"ReferendumCheckInterval",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod prices {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_prices::pallet::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_price`]."]
				pub struct SetPrice {
					pub asset_id: set_price::AssetId,
					pub price: set_price::Price,
				}
				pub mod set_price {
					use super::runtime_types;
					pub type AssetId = runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Price = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetPrice {
					const PALLET: &'static str = "Prices";
					const CALL: &'static str = "set_price";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reset_price`]."]
				pub struct ResetPrice {
					pub asset_id: reset_price::AssetId,
				}
				pub mod reset_price {
					use super::runtime_types;
					pub type AssetId = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				impl ::subxt::blocks::StaticExtrinsic for ResetPrice {
					const PALLET: &'static str = "Prices";
					const CALL: &'static str = "reset_price";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_foreign_asset`]."]
				pub struct SetForeignAsset {
					pub foreign_asset_id: set_foreign_asset::ForeignAssetId,
					pub asset_id: set_foreign_asset::AssetId,
				}
				pub mod set_foreign_asset {
					use super::runtime_types;
					pub type ForeignAssetId =
						runtime_types::tangle_primitives::currency::CurrencyId;
					pub type AssetId = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetForeignAsset {
					const PALLET: &'static str = "Prices";
					const CALL: &'static str = "set_foreign_asset";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::set_price`]."]
				pub fn set_price(
					&self,
					asset_id: types::set_price::AssetId,
					price: types::set_price::Price,
				) -> ::subxt::tx::Payload<types::SetPrice> {
					::subxt::tx::Payload::new_static(
						"Prices",
						"set_price",
						types::SetPrice { asset_id, price },
						[
							165u8, 187u8, 237u8, 20u8, 232u8, 213u8, 110u8, 116u8, 128u8, 166u8,
							10u8, 102u8, 98u8, 11u8, 196u8, 129u8, 198u8, 84u8, 150u8, 18u8, 170u8,
							120u8, 202u8, 19u8, 130u8, 155u8, 40u8, 255u8, 233u8, 15u8, 155u8,
							104u8,
						],
					)
				}
				#[doc = "See [`Pallet::reset_price`]."]
				pub fn reset_price(
					&self,
					asset_id: types::reset_price::AssetId,
				) -> ::subxt::tx::Payload<types::ResetPrice> {
					::subxt::tx::Payload::new_static(
						"Prices",
						"reset_price",
						types::ResetPrice { asset_id },
						[
							93u8, 226u8, 94u8, 230u8, 173u8, 191u8, 118u8, 19u8, 13u8, 117u8,
							247u8, 163u8, 56u8, 55u8, 41u8, 19u8, 148u8, 56u8, 45u8, 237u8, 183u8,
							26u8, 219u8, 54u8, 79u8, 11u8, 24u8, 253u8, 191u8, 183u8, 245u8, 188u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_foreign_asset`]."]
				pub fn set_foreign_asset(
					&self,
					foreign_asset_id: types::set_foreign_asset::ForeignAssetId,
					asset_id: types::set_foreign_asset::AssetId,
				) -> ::subxt::tx::Payload<types::SetForeignAsset> {
					::subxt::tx::Payload::new_static(
						"Prices",
						"set_foreign_asset",
						types::SetForeignAsset { foreign_asset_id, asset_id },
						[
							29u8, 110u8, 96u8, 132u8, 84u8, 237u8, 118u8, 56u8, 224u8, 251u8,
							121u8, 76u8, 135u8, 64u8, 203u8, 103u8, 205u8, 205u8, 234u8, 45u8,
							158u8, 13u8, 237u8, 100u8, 88u8, 165u8, 6u8, 167u8, 251u8, 212u8,
							139u8, 36u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_prices::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Set emergency price. \\[asset_id, price_detail\\]"]
			pub struct SetPrice(pub set_price::Field0, pub set_price::Field1);
			pub mod set_price {
				use super::runtime_types;
				pub type Field0 = runtime_types::tangle_primitives::currency::CurrencyId;
				pub type Field1 = runtime_types::sp_arithmetic::fixed_point::FixedU128;
			}
			impl ::subxt::events::StaticEvent for SetPrice {
				const PALLET: &'static str = "Prices";
				const EVENT: &'static str = "SetPrice";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Reset emergency price. \\[asset_id\\]"]
			pub struct ResetPrice(pub reset_price::Field0);
			pub mod reset_price {
				use super::runtime_types;
				pub type Field0 = runtime_types::tangle_primitives::currency::CurrencyId;
			}
			impl ::subxt::events::StaticEvent for ResetPrice {
				const PALLET: &'static str = "Prices";
				const EVENT: &'static str = "ResetPrice";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod emergency_price {
					use super::runtime_types;
					pub type EmergencyPrice = runtime_types::sp_arithmetic::fixed_point::FixedU128;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod foreign_to_native_asset {
					use super::runtime_types;
					pub type ForeignToNativeAsset =
						runtime_types::tangle_primitives::currency::CurrencyId;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Mapping from currency id to it's emergency price"]
				pub fn emergency_price_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::emergency_price::EmergencyPrice,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Prices",
						"EmergencyPrice",
						vec![],
						[
							131u8, 244u8, 207u8, 239u8, 204u8, 253u8, 158u8, 101u8, 51u8, 101u8,
							24u8, 76u8, 235u8, 103u8, 56u8, 77u8, 150u8, 168u8, 17u8, 172u8, 223u8,
							187u8, 102u8, 66u8, 174u8, 88u8, 35u8, 159u8, 231u8, 151u8, 50u8,
							224u8,
						],
					)
				}
				#[doc = " Mapping from currency id to it's emergency price"]
				pub fn emergency_price(
					&self,
					_0: impl ::std::borrow::Borrow<types::emergency_price::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::emergency_price::EmergencyPrice,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Prices",
						"EmergencyPrice",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							131u8, 244u8, 207u8, 239u8, 204u8, 253u8, 158u8, 101u8, 51u8, 101u8,
							24u8, 76u8, 235u8, 103u8, 56u8, 77u8, 150u8, 168u8, 17u8, 172u8, 223u8,
							187u8, 102u8, 66u8, 174u8, 88u8, 35u8, 159u8, 231u8, 151u8, 50u8,
							224u8,
						],
					)
				}
				#[doc = " Mapping from foreign vault token to our's vault token"]
				pub fn foreign_to_native_asset_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_to_native_asset::ForeignToNativeAsset,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Prices",
						"ForeignToNativeAsset",
						vec![],
						[
							44u8, 250u8, 143u8, 11u8, 208u8, 17u8, 158u8, 155u8, 65u8, 206u8,
							214u8, 205u8, 15u8, 249u8, 211u8, 158u8, 68u8, 218u8, 98u8, 173u8,
							32u8, 253u8, 123u8, 129u8, 94u8, 94u8, 113u8, 174u8, 149u8, 123u8,
							45u8, 46u8,
						],
					)
				}
				#[doc = " Mapping from foreign vault token to our's vault token"]
				pub fn foreign_to_native_asset(
					&self,
					_0: impl ::std::borrow::Borrow<types::foreign_to_native_asset::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::foreign_to_native_asset::ForeignToNativeAsset,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Prices",
						"ForeignToNativeAsset",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							44u8, 250u8, 143u8, 11u8, 208u8, 17u8, 158u8, 155u8, 65u8, 206u8,
							214u8, 205u8, 15u8, 249u8, 211u8, 158u8, 68u8, 218u8, 98u8, 173u8,
							32u8, 253u8, 123u8, 129u8, 94u8, 94u8, 113u8, 174u8, 149u8, 123u8,
							45u8, 46u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Relay currency"]
				pub fn relay_currency(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::tangle_primitives::currency::CurrencyId,
				> {
					::subxt::constants::Address::new_static(
						"Prices",
						"RelayCurrency",
						[
							0u8, 142u8, 146u8, 232u8, 120u8, 214u8, 141u8, 122u8, 106u8, 238u8,
							244u8, 172u8, 42u8, 28u8, 151u8, 105u8, 14u8, 234u8, 196u8, 156u8,
							103u8, 83u8, 72u8, 226u8, 166u8, 84u8, 244u8, 226u8, 248u8, 176u8,
							92u8, 22u8,
						],
					)
				}
			}
		}
	}
	pub mod oracle {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::orml_oracle::module::Error;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::orml_oracle::module::Call;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::feed_values`]."]
				pub struct FeedValues {
					pub values: feed_values::Values,
				}
				pub mod feed_values {
					use super::runtime_types;
					pub type Values =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						)>;
				}
				impl ::subxt::blocks::StaticExtrinsic for FeedValues {
					const PALLET: &'static str = "Oracle";
					const CALL: &'static str = "feed_values";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::feed_values`]."]
				pub fn feed_values(
					&self,
					values: types::feed_values::Values,
				) -> ::subxt::tx::Payload<types::FeedValues> {
					::subxt::tx::Payload::new_static(
						"Oracle",
						"feed_values",
						types::FeedValues { values },
						[
							76u8, 136u8, 84u8, 42u8, 57u8, 104u8, 132u8, 100u8, 237u8, 82u8, 53u8,
							128u8, 64u8, 231u8, 74u8, 9u8, 39u8, 46u8, 188u8, 63u8, 226u8, 180u8,
							107u8, 243u8, 142u8, 4u8, 79u8, 131u8, 161u8, 107u8, 78u8, 27u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::orml_oracle::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "New feed data is submitted."]
			pub struct NewFeedData {
				pub sender: new_feed_data::Sender,
				pub values: new_feed_data::Values,
			}
			pub mod new_feed_data {
				use super::runtime_types;
				pub type Sender = ::subxt::utils::AccountId32;
				pub type Values = ::std::vec::Vec<(
					runtime_types::tangle_primitives::currency::CurrencyId,
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				)>;
			}
			impl ::subxt::events::StaticEvent for NewFeedData {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "NewFeedData";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod raw_values {
					use super::runtime_types;
					pub type RawValues = runtime_types::orml_oracle::module::TimestampedValue<
						runtime_types::sp_arithmetic::fixed_point::FixedU128,
						::core::primitive::u64,
					>;
					pub type Param0 = ::subxt::utils::AccountId32;
					pub type Param1 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod values {
					use super::runtime_types;
					pub type Values = runtime_types::orml_oracle::module::TimestampedValue<
						runtime_types::sp_arithmetic::fixed_point::FixedU128,
						::core::primitive::u64,
					>;
					pub type Param0 = runtime_types::tangle_primitives::currency::CurrencyId;
				}
				pub mod has_dispatched {
					use super::runtime_types;
					pub type HasDispatched = runtime_types::orml_utilities::ordered_set::OrderedSet<
						::subxt::utils::AccountId32,
					>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Raw values for each oracle operators"]
				pub fn raw_values_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::raw_values::RawValues,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Oracle",
						"RawValues",
						vec![],
						[
							249u8, 184u8, 205u8, 81u8, 192u8, 112u8, 227u8, 61u8, 168u8, 160u8,
							191u8, 194u8, 4u8, 184u8, 238u8, 36u8, 226u8, 79u8, 0u8, 67u8, 58u8,
							155u8, 254u8, 183u8, 16u8, 52u8, 99u8, 157u8, 128u8, 249u8, 25u8,
							188u8,
						],
					)
				}
				#[doc = " Raw values for each oracle operators"]
				pub fn raw_values_iter1(
					&self,
					_0: impl ::std::borrow::Borrow<types::raw_values::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::raw_values::RawValues,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Oracle",
						"RawValues",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							249u8, 184u8, 205u8, 81u8, 192u8, 112u8, 227u8, 61u8, 168u8, 160u8,
							191u8, 194u8, 4u8, 184u8, 238u8, 36u8, 226u8, 79u8, 0u8, 67u8, 58u8,
							155u8, 254u8, 183u8, 16u8, 52u8, 99u8, 157u8, 128u8, 249u8, 25u8,
							188u8,
						],
					)
				}
				#[doc = " Raw values for each oracle operators"]
				pub fn raw_values(
					&self,
					_0: impl ::std::borrow::Borrow<types::raw_values::Param0>,
					_1: impl ::std::borrow::Borrow<types::raw_values::Param1>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::raw_values::RawValues,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Oracle",
						"RawValues",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							249u8, 184u8, 205u8, 81u8, 192u8, 112u8, 227u8, 61u8, 168u8, 160u8,
							191u8, 194u8, 4u8, 184u8, 238u8, 36u8, 226u8, 79u8, 0u8, 67u8, 58u8,
							155u8, 254u8, 183u8, 16u8, 52u8, 99u8, 157u8, 128u8, 249u8, 25u8,
							188u8,
						],
					)
				}
				#[doc = " Up to date combined value from Raw Values"]
				pub fn values_iter(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::values::Values,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Oracle",
						"Values",
						vec![],
						[
							253u8, 13u8, 204u8, 224u8, 129u8, 152u8, 99u8, 72u8, 159u8, 134u8,
							147u8, 8u8, 228u8, 192u8, 47u8, 131u8, 166u8, 213u8, 94u8, 157u8, 33u8,
							162u8, 16u8, 128u8, 201u8, 41u8, 87u8, 0u8, 84u8, 211u8, 222u8, 223u8,
						],
					)
				}
				#[doc = " Up to date combined value from Raw Values"]
				pub fn values(
					&self,
					_0: impl ::std::borrow::Borrow<types::values::Param0>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::values::Values,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Oracle",
						"Values",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							253u8, 13u8, 204u8, 224u8, 129u8, 152u8, 99u8, 72u8, 159u8, 134u8,
							147u8, 8u8, 228u8, 192u8, 47u8, 131u8, 166u8, 213u8, 94u8, 157u8, 33u8,
							162u8, 16u8, 128u8, 201u8, 41u8, 87u8, 0u8, 84u8, 211u8, 222u8, 223u8,
						],
					)
				}
				#[doc = " If an oracle operator has fed a value in this block"]
				pub fn has_dispatched(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::has_dispatched::HasDispatched,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Oracle",
						"HasDispatched",
						vec![],
						[
							86u8, 143u8, 165u8, 88u8, 160u8, 239u8, 65u8, 190u8, 215u8, 245u8,
							110u8, 118u8, 227u8, 89u8, 203u8, 78u8, 175u8, 121u8, 81u8, 40u8,
							142u8, 99u8, 207u8, 13u8, 156u8, 245u8, 166u8, 158u8, 36u8, 243u8,
							164u8, 21u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The root operator account id, record all sudo feeds on this account."]
				pub fn root_operator_account_id(
					&self,
				) -> ::subxt::constants::Address<::subxt::utils::AccountId32> {
					::subxt::constants::Address::new_static(
						"Oracle",
						"RootOperatorAccountId",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
				#[doc = " Maximum size of HasDispatched"]
				pub fn max_has_dispatched_size(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Oracle",
						"MaxHasDispatchedSize",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum size the vector used for feed values"]
				pub fn max_feed_values(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Oracle",
						"MaxFeedValues",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod oracle_membership {
		use super::root_mod;
		use super::runtime_types;
		#[doc = "The `Error` enum of this pallet."]
		pub type Error = runtime_types::pallet_membership::pallet::Error3;
		#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
		pub type Call = runtime_types::pallet_membership::pallet::Call3;
		pub mod calls {
			use super::root_mod;
			use super::runtime_types;
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::add_member`]."]
				pub struct AddMember {
					pub who: add_member::Who,
				}
				pub mod add_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for AddMember {
					const PALLET: &'static str = "OracleMembership";
					const CALL: &'static str = "add_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::remove_member`]."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "OracleMembership";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::swap_member`]."]
				pub struct SwapMember {
					pub remove: swap_member::Remove,
					pub add: swap_member::Add,
				}
				pub mod swap_member {
					use super::runtime_types;
					pub type Remove = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Add = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SwapMember {
					const PALLET: &'static str = "OracleMembership";
					const CALL: &'static str = "swap_member";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::reset_members`]."]
				pub struct ResetMembers {
					pub members: reset_members::Members,
				}
				pub mod reset_members {
					use super::runtime_types;
					pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ResetMembers {
					const PALLET: &'static str = "OracleMembership";
					const CALL: &'static str = "reset_members";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::change_key`]."]
				pub struct ChangeKey {
					pub new: change_key::New,
				}
				pub mod change_key {
					use super::runtime_types;
					pub type New = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for ChangeKey {
					const PALLET: &'static str = "OracleMembership";
					const CALL: &'static str = "change_key";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::set_prime`]."]
				pub struct SetPrime {
					pub who: set_prime::Who,
				}
				pub mod set_prime {
					use super::runtime_types;
					pub type Who = ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::blocks::StaticExtrinsic for SetPrime {
					const PALLET: &'static str = "OracleMembership";
					const CALL: &'static str = "set_prime";
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "See [`Pallet::clear_prime`]."]
				pub struct ClearPrime;
				impl ::subxt::blocks::StaticExtrinsic for ClearPrime {
					const PALLET: &'static str = "OracleMembership";
					const CALL: &'static str = "clear_prime";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "See [`Pallet::add_member`]."]
				pub fn add_member(
					&self,
					who: types::add_member::Who,
				) -> ::subxt::tx::Payload<types::AddMember> {
					::subxt::tx::Payload::new_static(
						"OracleMembership",
						"add_member",
						types::AddMember { who },
						[
							237u8, 212u8, 114u8, 106u8, 42u8, 1u8, 28u8, 244u8, 161u8, 140u8, 80u8,
							251u8, 217u8, 116u8, 9u8, 155u8, 234u8, 94u8, 3u8, 156u8, 5u8, 68u8,
							197u8, 90u8, 47u8, 223u8, 235u8, 200u8, 194u8, 195u8, 90u8, 70u8,
						],
					)
				}
				#[doc = "See [`Pallet::remove_member`]."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
				) -> ::subxt::tx::Payload<types::RemoveMember> {
					::subxt::tx::Payload::new_static(
						"OracleMembership",
						"remove_member",
						types::RemoveMember { who },
						[
							182u8, 80u8, 149u8, 27u8, 252u8, 160u8, 231u8, 23u8, 208u8, 93u8,
							116u8, 252u8, 5u8, 28u8, 162u8, 221u8, 14u8, 150u8, 62u8, 65u8, 169u8,
							164u8, 226u8, 53u8, 152u8, 237u8, 37u8, 171u8, 209u8, 52u8, 235u8,
							11u8,
						],
					)
				}
				#[doc = "See [`Pallet::swap_member`]."]
				pub fn swap_member(
					&self,
					remove: types::swap_member::Remove,
					add: types::swap_member::Add,
				) -> ::subxt::tx::Payload<types::SwapMember> {
					::subxt::tx::Payload::new_static(
						"OracleMembership",
						"swap_member",
						types::SwapMember { remove, add },
						[
							11u8, 68u8, 57u8, 232u8, 242u8, 45u8, 34u8, 178u8, 250u8, 195u8, 254u8,
							22u8, 13u8, 164u8, 86u8, 193u8, 47u8, 198u8, 164u8, 143u8, 66u8, 245u8,
							222u8, 24u8, 240u8, 97u8, 241u8, 166u8, 198u8, 236u8, 148u8, 195u8,
						],
					)
				}
				#[doc = "See [`Pallet::reset_members`]."]
				pub fn reset_members(
					&self,
					members: types::reset_members::Members,
				) -> ::subxt::tx::Payload<types::ResetMembers> {
					::subxt::tx::Payload::new_static(
						"OracleMembership",
						"reset_members",
						types::ResetMembers { members },
						[
							212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
							8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
							99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
						],
					)
				}
				#[doc = "See [`Pallet::change_key`]."]
				pub fn change_key(
					&self,
					new: types::change_key::New,
				) -> ::subxt::tx::Payload<types::ChangeKey> {
					::subxt::tx::Payload::new_static(
						"OracleMembership",
						"change_key",
						types::ChangeKey { new },
						[
							189u8, 13u8, 214u8, 17u8, 2u8, 171u8, 123u8, 104u8, 227u8, 136u8,
							198u8, 88u8, 216u8, 105u8, 246u8, 70u8, 25u8, 19u8, 244u8, 19u8, 112u8,
							105u8, 14u8, 16u8, 75u8, 183u8, 85u8, 183u8, 131u8, 186u8, 129u8,
							231u8,
						],
					)
				}
				#[doc = "See [`Pallet::set_prime`]."]
				pub fn set_prime(
					&self,
					who: types::set_prime::Who,
				) -> ::subxt::tx::Payload<types::SetPrime> {
					::subxt::tx::Payload::new_static(
						"OracleMembership",
						"set_prime",
						types::SetPrime { who },
						[
							76u8, 172u8, 20u8, 105u8, 143u8, 253u8, 234u8, 255u8, 138u8, 98u8,
							81u8, 183u8, 147u8, 232u8, 49u8, 234u8, 17u8, 129u8, 20u8, 119u8,
							116u8, 214u8, 131u8, 112u8, 38u8, 21u8, 93u8, 139u8, 161u8, 242u8,
							88u8, 152u8,
						],
					)
				}
				#[doc = "See [`Pallet::clear_prime`]."]
				pub fn clear_prime(&self) -> ::subxt::tx::Payload<types::ClearPrime> {
					::subxt::tx::Payload::new_static(
						"OracleMembership",
						"clear_prime",
						types::ClearPrime {},
						[
							71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
							109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
							125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
						],
					)
				}
			}
		}
		#[doc = "The `Event` enum of this pallet"]
		pub type Event = runtime_types::pallet_membership::pallet::Event3;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "OracleMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "OracleMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "OracleMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "OracleMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "OracleMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::events::StaticEvent for Dummy {
				const PALLET: &'static str = "OracleMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod members {
					use super::runtime_types;
					pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::members::Members,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"OracleMembership",
						"Members",
						vec![],
						[
							109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
							80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
							223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
							193u8,
						],
					)
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					types::prime::Prime,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"OracleMembership",
						"Prime",
						vec![],
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
	}
	pub mod runtime_types {
		use super::runtime_types;
		pub mod bounded_collections {
			use super::runtime_types;
			pub mod bounded_vec {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
			}
			pub mod weak_bounded_vec {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
			}
		}
		pub mod cumulus_pallet_dmp_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::service_overweight`]."]
					service_overweight {
						index: ::core::primitive::u64,
						weight_limit: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The message index given is unknown."]
					Unknown,
					#[codec(index = 1)]
					#[doc = "The amount of weight given is possibly not enough for executing the message."]
					OverLimit,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Downward message is invalid XCM."]
					InvalidFormat { message_hash: [::core::primitive::u8; 32usize] },
					#[codec(index = 1)]
					#[doc = "Downward message is unsupported version of XCM."]
					UnsupportedVersion { message_hash: [::core::primitive::u8; 32usize] },
					#[codec(index = 2)]
					#[doc = "Downward message executed with the given outcome."]
					ExecutedDownward {
						message_hash: [::core::primitive::u8; 32usize],
						message_id: [::core::primitive::u8; 32usize],
						outcome: runtime_types::xcm::v3::traits::Outcome,
					},
					#[codec(index = 3)]
					#[doc = "The weight limit for handling downward messages was reached."]
					WeightExhausted {
						message_hash: [::core::primitive::u8; 32usize],
						message_id: [::core::primitive::u8; 32usize],
						remaining_weight: runtime_types::sp_weights::weight_v2::Weight,
						required_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 4)]
					#[doc = "Downward message is overweight and was placed in the overweight queue."]
					OverweightEnqueued {
						message_hash: [::core::primitive::u8; 32usize],
						message_id: [::core::primitive::u8; 32usize],
						overweight_index: ::core::primitive::u64,
						required_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 5)]
					#[doc = "Downward message from the overweight queue was executed."]
					OverweightServiced {
						overweight_index: ::core::primitive::u64,
						weight_used: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 6)]
					#[doc = "The maximum number of downward messages was reached."]
					MaxMessagesExhausted { message_hash: [::core::primitive::u8; 32usize] },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfigData {
				pub max_individual: runtime_types::sp_weights::weight_v2::Weight,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PageIndexData {
				pub begin_used: ::core::primitive::u32,
				pub end_used: ::core::primitive::u32,
				pub overweight_count: ::core::primitive::u64,
			}
		}
		pub mod cumulus_pallet_parachain_system {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					# [codec (index = 0)] # [doc = "See [`Pallet::set_validation_data`]."] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] # [doc = "See [`Pallet::sudo_send_upward_message`]."] sudo_send_upward_message { message : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] # [doc = "See [`Pallet::authorize_upgrade`]."] authorize_upgrade { code_hash : :: subxt :: utils :: H256 , check_version : :: core :: primitive :: bool , } , # [codec (index = 3)] # [doc = "See [`Pallet::enact_authorized_upgrade`]."] enact_authorized_upgrade { code : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , }
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Attempt to upgrade validation function while existing upgrade pending."]
					OverlappingUpgrades,
					#[codec(index = 1)]
					#[doc = "Polkadot currently prohibits this parachain from upgrading its validation function."]
					ProhibitedByPolkadot,
					#[codec(index = 2)]
					#[doc = "The supplied validation function has compiled into a blob larger than Polkadot is"]
					#[doc = "willing to run."]
					TooBig,
					#[codec(index = 3)]
					#[doc = "The inherent which supplies the validation data did not run this block."]
					ValidationDataNotAvailable,
					#[codec(index = 4)]
					#[doc = "The inherent which supplies the host configuration did not run this block."]
					HostConfigurationNotAvailable,
					#[codec(index = 5)]
					#[doc = "No validation function upgrade is currently scheduled."]
					NotScheduled,
					#[codec(index = 6)]
					#[doc = "No code upgrade has been authorized."]
					NothingAuthorized,
					#[codec(index = 7)]
					#[doc = "The given code upgrade has not been authorized."]
					Unauthorized,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The validation function has been scheduled to apply."]
					ValidationFunctionStored,
					#[codec(index = 1)]
					#[doc = "The validation function was applied as of the contained relay chain block number."]
					ValidationFunctionApplied { relay_chain_block_num: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "The relay-chain aborted the upgrade process."]
					ValidationFunctionDiscarded,
					#[codec(index = 3)]
					#[doc = "An upgrade has been authorized."]
					UpgradeAuthorized { code_hash: ::subxt::utils::H256 },
					#[codec(index = 4)]
					#[doc = "Some downward messages have been received and will be processed."]
					DownwardMessagesReceived { count: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "Downward messages were processed using the given weight."]
					DownwardMessagesProcessed {
						weight_used: runtime_types::sp_weights::weight_v2::Weight,
						dmq_head: ::subxt::utils::H256,
					},
					#[codec(index = 6)]
					#[doc = "An upward message was sent to the relay chain."]
					UpwardMessageSent {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			pub mod relay_state_snapshot {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MessagingStateSnapshot { pub dmq_mqc_head : :: subxt :: utils :: H256 , pub relay_dispatch_queue_remaining_capacity : runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: RelayDispatchQueueRemainingCapacity , pub ingress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: polkadot_primitives :: v6 :: AbridgedHrmpChannel ,) > , pub egress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: polkadot_primitives :: v6 :: AbridgedHrmpChannel ,) > , }
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct RelayDispatchQueueRemainingCapacity {
					pub remaining_count: ::core::primitive::u32,
					pub remaining_size: ::core::primitive::u32,
				}
			}
			pub mod unincluded_segment {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Ancestor < _0 > { pub used_bandwidth : runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: UsedBandwidth , pub para_head_hash : :: core :: option :: Option < _0 > , pub consumed_go_ahead_signal : :: core :: option :: Option < runtime_types :: polkadot_primitives :: v6 :: UpgradeGoAhead > , }
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct HrmpChannelUpdate {
					pub msg_count: ::core::primitive::u32,
					pub total_bytes: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SegmentTracker < _0 > { pub used_bandwidth : runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: UsedBandwidth , pub hrmp_watermark : :: core :: option :: Option < :: core :: primitive :: u32 > , pub consumed_go_ahead_signal : :: core :: option :: Option < runtime_types :: polkadot_primitives :: v6 :: UpgradeGoAhead > , # [codec (skip)] pub __ignore : :: core :: marker :: PhantomData < _0 > }
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct UsedBandwidth { pub ump_msg_count : :: core :: primitive :: u32 , pub ump_total_bytes : :: core :: primitive :: u32 , pub hrmp_outgoing : :: subxt :: utils :: KeyedVec < runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: HrmpChannelUpdate > , }
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CodeUpgradeAuthorization {
				pub code_hash: ::subxt::utils::H256,
				pub check_version: ::core::primitive::bool,
			}
		}
		pub mod cumulus_pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Downward message is invalid XCM."]
					#[doc = "\\[ id \\]"]
					InvalidFormat([::core::primitive::u8; 32usize]),
					#[codec(index = 1)]
					#[doc = "Downward message is unsupported version of XCM."]
					#[doc = "\\[ id \\]"]
					UnsupportedVersion([::core::primitive::u8; 32usize]),
					#[codec(index = 2)]
					#[doc = "Downward message executed with the given outcome."]
					#[doc = "\\[ id, outcome \\]"]
					ExecutedDownward(
						[::core::primitive::u8; 32usize],
						runtime_types::xcm::v3::traits::Outcome,
					),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Origin {
					#[codec(index = 0)]
					Relay,
					#[codec(index = 1)]
					SiblingParachain(runtime_types::polkadot_parachain_primitives::primitives::Id),
				}
			}
		}
		pub mod cumulus_pallet_xcmp_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::service_overweight`]."]
					service_overweight {
						index: ::core::primitive::u64,
						weight_limit: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::suspend_xcm_execution`]."]
					suspend_xcm_execution,
					#[codec(index = 2)]
					#[doc = "See [`Pallet::resume_xcm_execution`]."]
					resume_xcm_execution,
					#[codec(index = 3)]
					#[doc = "See [`Pallet::update_suspend_threshold`]."]
					update_suspend_threshold { new: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::update_drop_threshold`]."]
					update_drop_threshold { new: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::update_resume_threshold`]."]
					update_resume_threshold { new: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "See [`Pallet::update_threshold_weight`]."]
					update_threshold_weight { new: runtime_types::sp_weights::weight_v2::Weight },
					#[codec(index = 7)]
					#[doc = "See [`Pallet::update_weight_restrict_decay`]."]
					update_weight_restrict_decay {
						new: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::update_xcmp_max_individual_weight`]."]
					update_xcmp_max_individual_weight {
						new: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Failed to send XCM message."]
					FailedToSend,
					#[codec(index = 1)]
					#[doc = "Bad XCM origin."]
					BadXcmOrigin,
					#[codec(index = 2)]
					#[doc = "Bad XCM data."]
					BadXcm,
					#[codec(index = 3)]
					#[doc = "Bad overweight index."]
					BadOverweightIndex,
					#[codec(index = 4)]
					#[doc = "Provided weight is possibly not enough to execute the message."]
					WeightOverLimit,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Some XCM was executed ok."]
					Success {
						message_hash: [::core::primitive::u8; 32usize],
						message_id: [::core::primitive::u8; 32usize],
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 1)]
					#[doc = "Some XCM failed."]
					Fail {
						message_hash: [::core::primitive::u8; 32usize],
						message_id: [::core::primitive::u8; 32usize],
						error: runtime_types::xcm::v3::traits::Error,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 2)]
					#[doc = "Bad XCM version used."]
					BadVersion { message_hash: [::core::primitive::u8; 32usize] },
					#[codec(index = 3)]
					#[doc = "Bad XCM format used."]
					BadFormat { message_hash: [::core::primitive::u8; 32usize] },
					#[codec(index = 4)]
					#[doc = "An HRMP message was sent to a sibling parachain."]
					XcmpMessageSent { message_hash: [::core::primitive::u8; 32usize] },
					#[codec(index = 5)]
					#[doc = "An XCM exceeded the individual message weight budget."]
					OverweightEnqueued {
						sender: runtime_types::polkadot_parachain_primitives::primitives::Id,
						sent_at: ::core::primitive::u32,
						index: ::core::primitive::u64,
						required: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 6)]
					#[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
					OverweightServiced {
						index: ::core::primitive::u64,
						used: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InboundChannelDetails {
				pub sender: runtime_types::polkadot_parachain_primitives::primitives::Id,
				pub state: runtime_types::cumulus_pallet_xcmp_queue::InboundState,
				pub message_metadata: ::std::vec::Vec<(
					::core::primitive::u32,
					runtime_types::polkadot_parachain_primitives::primitives::XcmpMessageFormat,
				)>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum InboundState {
				#[codec(index = 0)]
				Ok,
				#[codec(index = 1)]
				Suspended,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OutboundChannelDetails {
				pub recipient: runtime_types::polkadot_parachain_primitives::primitives::Id,
				pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
				pub signals_exist: ::core::primitive::bool,
				pub first_index: ::core::primitive::u16,
				pub last_index: ::core::primitive::u16,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum OutboundState {
				#[codec(index = 0)]
				Ok,
				#[codec(index = 1)]
				Suspended,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct QueueConfigData {
				pub suspend_threshold: ::core::primitive::u32,
				pub drop_threshold: ::core::primitive::u32,
				pub resume_threshold: ::core::primitive::u32,
				pub threshold_weight: runtime_types::sp_weights::weight_v2::Weight,
				pub weight_restrict_decay: runtime_types::sp_weights::weight_v2::Weight,
				pub xcmp_max_individual_weight: runtime_types::sp_weights::weight_v2::Weight,
			}
		}
		pub mod cumulus_primitives_core {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CollationInfo {
				pub upward_messages: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				pub horizontal_messages: ::std::vec::Vec<
					runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
						runtime_types::polkadot_parachain_primitives::primitives::Id,
					>,
				>,
				pub new_validation_code: ::core::option::Option<
					runtime_types::polkadot_parachain_primitives::primitives::ValidationCode,
				>,
				pub processed_downward_messages: ::core::primitive::u32,
				pub hrmp_watermark: ::core::primitive::u32,
				pub head_data: runtime_types::polkadot_parachain_primitives::primitives::HeadData,
			}
		}
		pub mod cumulus_primitives_parachain_inherent {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MessageQueueChain(pub ::subxt::utils::H256);
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ParachainInherentData {
				pub validation_data:
					runtime_types::polkadot_primitives::v6::PersistedValidationData<
						::subxt::utils::H256,
						::core::primitive::u32,
					>,
				pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
				pub downward_messages: ::std::vec::Vec<
					runtime_types::polkadot_core_primitives::InboundDownwardMessage<
						::core::primitive::u32,
					>,
				>,
				pub horizontal_messages: ::subxt::utils::KeyedVec<
					runtime_types::polkadot_parachain_primitives::primitives::Id,
					::std::vec::Vec<
						runtime_types::polkadot_core_primitives::InboundHrmpMessage<
							::core::primitive::u32,
						>,
					>,
				>,
			}
		}
		pub mod frame_support {
			use super::runtime_types;
			pub mod dispatch {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum DispatchClass {
					#[codec(index = 0)]
					Normal,
					#[codec(index = 1)]
					Operational,
					#[codec(index = 2)]
					Mandatory,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DispatchInfo {
					pub weight: runtime_types::sp_weights::weight_v2::Weight,
					pub class: runtime_types::frame_support::dispatch::DispatchClass,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Pays {
					#[codec(index = 0)]
					Yes,
					#[codec(index = 1)]
					No,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PerDispatchClass<_0> {
					pub normal: _0,
					pub operational: _0,
					pub mandatory: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PostDispatchInfo {
					pub actual_weight:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum RawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
					#[codec(index = 2)]
					None,
				}
			}
			pub mod traits {
				use super::runtime_types;
				pub mod preimages {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Bounded<_0, _1> {
						#[codec(index = 0)]
						Legacy {
							hash: ::subxt::utils::H256,
						},
						#[codec(index = 1)]
						Inline(
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 2)]
						Lookup {
							hash: ::subxt::utils::H256,
							len: ::core::primitive::u32,
						},
						__Ignore(::core::marker::PhantomData<(_0, _1)>),
					}
				}
				pub mod schedule {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum DispatchTime<_0> {
						#[codec(index = 0)]
						At(_0),
						#[codec(index = 1)]
						After(_0),
					}
				}
				pub mod tokens {
					use super::runtime_types;
					pub mod fungible {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: codec :: CompactAs,
							:: subxt :: ext :: codec :: Decode,
							:: subxt :: ext :: codec :: Encode,
							:: subxt :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: codec)]
						#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
						#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
						pub struct HoldConsideration(pub ::core::primitive::u128);
					}
					pub mod misc {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: codec :: Decode,
							:: subxt :: ext :: codec :: Encode,
							:: subxt :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: codec)]
						#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
						#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
						pub enum BalanceStatus {
							#[codec(index = 0)]
							Free,
							#[codec(index = 1)]
							Reserved,
						}
					}
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PalletId(pub [::core::primitive::u8; 8usize]);
		}
		pub mod frame_system {
			use super::runtime_types;
			pub mod extensions {
				use super::runtime_types;
				pub mod check_genesis {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckGenesis;
				}
				pub mod check_mortality {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
				}
				pub mod check_non_zero_sender {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckNonZeroSender;
				}
				pub mod check_nonce {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
				}
				pub mod check_spec_version {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckSpecVersion;
				}
				pub mod check_tx_version {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckTxVersion;
				}
				pub mod check_weight {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckWeight;
				}
			}
			pub mod limits {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BlockLength {
					pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
						::core::primitive::u32,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BlockWeights {
					pub base_block: runtime_types::sp_weights::weight_v2::Weight,
					pub max_block: runtime_types::sp_weights::weight_v2::Weight,
					pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::frame_system::limits::WeightsPerClass,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct WeightsPerClass {
					pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
					pub max_extrinsic:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub max_total:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub reserved:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::remark`]."]
					remark { remark: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					#[doc = "See [`Pallet::set_heap_pages`]."]
					set_heap_pages { pages: ::core::primitive::u64 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::set_code`]."]
					set_code { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 3)]
					#[doc = "See [`Pallet::set_code_without_checks`]."]
					set_code_without_checks { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::set_storage`]."]
					set_storage {
						items: ::std::vec::Vec<(
							::std::vec::Vec<::core::primitive::u8>,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::kill_storage`]."]
					kill_storage { keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>> },
					#[codec(index = 6)]
					#[doc = "See [`Pallet::kill_prefix`]."]
					kill_prefix {
						prefix: ::std::vec::Vec<::core::primitive::u8>,
						subkeys: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::remark_with_event`]."]
					remark_with_event { remark: ::std::vec::Vec<::core::primitive::u8> },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Error for the System pallet"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The name of specification does not match between the current runtime"]
					#[doc = "and the new runtime."]
					InvalidSpecName,
					#[codec(index = 1)]
					#[doc = "The specification version is not allowed to decrease between the current runtime"]
					#[doc = "and the new runtime."]
					SpecVersionNeedsToIncrease,
					#[codec(index = 2)]
					#[doc = "Failed to extract the runtime version from the new runtime."]
					#[doc = ""]
					#[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
					FailedToExtractRuntimeVersion,
					#[codec(index = 3)]
					#[doc = "Suicide called when the account has non-default composite data."]
					NonDefaultComposite,
					#[codec(index = 4)]
					#[doc = "There is a non-zero reference count preventing the account from being purged."]
					NonZeroRefCount,
					#[codec(index = 5)]
					#[doc = "The origin filter prevent the call to be dispatched."]
					CallFiltered,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Event for the System pallet."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An extrinsic completed successfully."]
					ExtrinsicSuccess {
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 1)]
					#[doc = "An extrinsic failed."]
					ExtrinsicFailed {
						dispatch_error: runtime_types::sp_runtime::DispatchError,
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 2)]
					#[doc = "`:code` was updated."]
					CodeUpdated,
					#[codec(index = 3)]
					#[doc = "A new account was created."]
					NewAccount { account: ::subxt::utils::AccountId32 },
					#[codec(index = 4)]
					#[doc = "An account was reaped."]
					KilledAccount { account: ::subxt::utils::AccountId32 },
					#[codec(index = 5)]
					#[doc = "On on-chain remark happened."]
					Remarked { sender: ::subxt::utils::AccountId32, hash: ::subxt::utils::H256 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AccountInfo<_0, _1> {
				pub nonce: _0,
				pub consumers: ::core::primitive::u32,
				pub providers: ::core::primitive::u32,
				pub sufficients: ::core::primitive::u32,
				pub data: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct EventRecord<_0, _1> {
				pub phase: runtime_types::frame_system::Phase,
				pub event: _0,
				pub topics: ::std::vec::Vec<_1>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct LastRuntimeUpgradeInfo {
				#[codec(compact)]
				pub spec_version: ::core::primitive::u32,
				pub spec_name: ::std::string::String,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Phase {
				#[codec(index = 0)]
				ApplyExtrinsic(::core::primitive::u32),
				#[codec(index = 1)]
				Finalization,
				#[codec(index = 2)]
				Initialization,
			}
		}
		pub mod merkle_distributor {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::add_to_create_whitelist`]."]
					add_to_create_whitelist { account: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					#[doc = "See [`Pallet::remove_from_create_whitelist`]."]
					remove_from_create_whitelist { account: ::subxt::utils::AccountId32 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::create_merkle_distributor`]."]
					create_merkle_distributor {
						merkle_root: ::subxt::utils::H256,
						description: ::std::vec::Vec<::core::primitive::u8>,
						distribute_currency: runtime_types::tangle_primitives::currency::CurrencyId,
						distribute_amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::claim`]."]
					claim {
						merkle_distributor_id: ::core::primitive::u32,
						index: ::core::primitive::u32,
						account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						amount: ::core::primitive::u128,
						merkle_proof: ::std::vec::Vec<::subxt::utils::H256>,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::charge`]."]
					charge { merkle_distributor_id: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::emergency_withdraw`]."]
					emergency_withdraw {
						merkle_distributor_id: ::core::primitive::u32,
						recipient: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						amount: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Invalid metadata given."]
					BadDescription,
					#[codec(index = 1)]
					#[doc = "The id is not exist."]
					InvalidMerkleDistributorId,
					#[codec(index = 2)]
					#[doc = "The proof is invalid"]
					MerkleVerifyFailed,
					#[codec(index = 3)]
					#[doc = "The reward is already distributed."]
					Claimed,
					#[codec(index = 4)]
					#[doc = "The reward is already charged."]
					Charged,
					#[codec(index = 5)]
					#[doc = "Withdraw amount exceed charge amount."]
					WithdrawAmountExceed,
					#[codec(index = 6)]
					#[doc = ""]
					BadChargeAccount,
					#[codec(index = 7)]
					#[doc = "Account has already in the set who can create merkle distributor"]
					AlreadyInWhiteList,
					#[codec(index = 8)]
					#[doc = "Account is no in the set who can create merkle distributor"]
					NotInWhiteList,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "create a merkle distributor. \\ [merkle distributor id, merkle tree root, total reward"]
					#[doc = "balance]"]
					Create(::core::primitive::u32, ::subxt::utils::H256, ::core::primitive::u128),
					#[codec(index = 1)]
					#[doc = "claim reward. \\[merkle distributor id, account, balance]"]
					Claim(
						::core::primitive::u32,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					),
					#[codec(index = 2)]
					#[doc = "withdraw reward. \\ [merkle distributor id, account, balance]"]
					Withdraw(
						::core::primitive::u32,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					),
					#[codec(index = 3)]
					#[doc = "add account who can create merkle distributor. \\ [account]"]
					AddToWhiteList(::subxt::utils::AccountId32),
					#[codec(index = 4)]
					#[doc = "remove account from the set who can create merkle distributor. \\ [account]"]
					RemoveFromWhiteList(::subxt::utils::AccountId32),
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MerkleMetadata<_0, _1, _2, _3> {
				pub merkle_root: ::subxt::utils::H256,
				pub description: _3,
				pub distribute_currency: _1,
				pub distribute_amount: _0,
				pub distribute_holder: _2,
				pub charged: ::core::primitive::bool,
			}
		}
		pub mod orml_oracle {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::feed_values`]."]
					feed_values {
						values: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						)>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Sender does not have permission"]
					NoPermission,
					#[codec(index = 1)]
					#[doc = "Feeder has already feeded at this block"]
					AlreadyFeeded,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New feed data is submitted."]
					NewFeedData {
						sender: ::subxt::utils::AccountId32,
						values: ::std::vec::Vec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						)>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct TimestampedValue<_0, _1> {
					pub value: _0,
					pub timestamp: _1,
				}
			}
		}
		pub mod orml_tokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::transfer`]."]
					transfer {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::transfer_all`]."]
					transfer_all {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::transfer_keep_alive`]."]
					transfer_keep_alive {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::force_transfer`]."]
					force_transfer {
						source: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::set_balance`]."]
					set_balance {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						new_reserved: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The balance is too low"]
					BalanceTooLow,
					#[codec(index = 1)]
					#[doc = "Cannot convert Amount into Balance type"]
					AmountIntoBalanceFailed,
					#[codec(index = 2)]
					#[doc = "Failed because liquidity restrictions due to locking"]
					LiquidityRestrictions,
					#[codec(index = 3)]
					#[doc = "Failed because the maximum locks was exceeded"]
					MaxLocksExceeded,
					#[codec(index = 4)]
					#[doc = "Transfer/payment would kill account"]
					KeepAlive,
					#[codec(index = 5)]
					#[doc = "Value too low to create account due to existential deposit"]
					ExistentialDeposit,
					#[codec(index = 6)]
					#[doc = "Beneficiary account must pre-exist"]
					DeadAccount,
					#[codec(index = 7)]
					TooManyReserves,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account was created with some free balance."]
					Endowed {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An account was removed whose balance was non-zero but below"]
					#[doc = "ExistentialDeposit, resulting in an outright loss."]
					DustLost {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Transfer succeeded."]
					Transfer {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Some balance was reserved (moved from free to reserved)."]
					Reserved {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some balance was unreserved (moved from reserved to free)."]
					Unreserved {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Some reserved balance was repatriated (moved from reserved to"]
					#[doc = "another account)."]
					ReserveRepatriated {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 6)]
					#[doc = "A balance was set by root."]
					BalanceSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						free: ::core::primitive::u128,
						reserved: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "The total issuance of an currency has been set"]
					TotalIssuanceSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
					Withdrawn {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
					Slashed {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						free_amount: ::core::primitive::u128,
						reserved_amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "Deposited some balance into an account"]
					Deposited {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "Some funds are locked"]
					LockSet {
						lock_id: [::core::primitive::u8; 8usize],
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "Some locked funds were unlocked"]
					LockRemoved {
						lock_id: [::core::primitive::u8; 8usize],
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
					},
					#[codec(index = 13)]
					#[doc = "Some free balance was locked."]
					Locked {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					#[doc = "Some locked balance was freed."]
					Unlocked {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 15)]
					Issued {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 16)]
					Rescinded {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AccountData<_0> {
				pub free: _0,
				pub reserved: _0,
				pub frozen: _0,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BalanceLock<_0> {
				pub id: [::core::primitive::u8; 8usize],
				pub amount: _0,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReserveData<_0, _1> {
				pub id: _0,
				pub amount: _1,
			}
		}
		pub mod orml_unknown_tokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The balance is too low."]
					BalanceTooLow,
					#[codec(index = 1)]
					#[doc = "The operation will cause balance to overflow."]
					BalanceOverflow,
					#[codec(index = 2)]
					#[doc = "Unhandled asset."]
					UnhandledAsset,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Deposit success."]
					Deposited {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						who: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 1)]
					#[doc = "Withdraw success."]
					Withdrawn {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						who: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
				}
			}
		}
		pub mod orml_utilities {
			use super::runtime_types;
			pub mod ordered_set {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct OrderedSet<_0>(
					pub runtime_types::bounded_collections::bounded_vec::BoundedVec<_0>,
				);
			}
		}
		pub mod orml_xcm {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::send_as_sovereign`]."]
					send_as_sovereign {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The message and destination combination was not recognized as being"]
					#[doc = "reachable."]
					Unreachable,
					#[codec(index = 1)]
					#[doc = "The message and destination was recognized as being reachable but"]
					#[doc = "the operation could not be completed."]
					SendFailure,
					#[codec(index = 2)]
					#[doc = "The version of the `Versioned` value used is not able to be"]
					#[doc = "interpreted."]
					BadVersion,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "XCM message sent. \\[to, message\\]"]
					Sent {
						to: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						message: runtime_types::xcm::v3::Xcm,
					},
				}
			}
		}
		pub mod orml_xtokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::transfer`]."]
					transfer {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::transfer_multiasset`]."]
					transfer_multiasset {
						asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::transfer_with_fee`]."]
					transfer_with_fee {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::transfer_multiasset_with_fee`]."]
					transfer_multiasset_with_fee {
						asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
						fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::transfer_multicurrencies`]."]
					transfer_multicurrencies {
						currencies: ::std::vec::Vec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							::core::primitive::u128,
						)>,
						fee_item: ::core::primitive::u32,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::transfer_multiassets`]."]
					transfer_multiassets {
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_item: ::core::primitive::u32,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Asset has no reserve location."]
					AssetHasNoReserve,
					#[codec(index = 1)]
					#[doc = "Not cross-chain transfer."]
					NotCrossChainTransfer,
					#[codec(index = 2)]
					#[doc = "Invalid transfer destination."]
					InvalidDest,
					#[codec(index = 3)]
					#[doc = "Currency is not cross-chain transferable."]
					NotCrossChainTransferableCurrency,
					#[codec(index = 4)]
					#[doc = "The message's weight could not be determined."]
					UnweighableMessage,
					#[codec(index = 5)]
					#[doc = "XCM execution failed."]
					XcmExecutionFailed,
					#[codec(index = 6)]
					#[doc = "Could not re-anchor the assets to declare the fees for the"]
					#[doc = "destination chain."]
					CannotReanchor,
					#[codec(index = 7)]
					#[doc = "Could not get ancestry of asset reserve location."]
					InvalidAncestry,
					#[codec(index = 8)]
					#[doc = "The MultiAsset is invalid."]
					InvalidAsset,
					#[codec(index = 9)]
					#[doc = "The destination `MultiLocation` provided cannot be inverted."]
					DestinationNotInvertible,
					#[codec(index = 10)]
					#[doc = "The version of the `Versioned` value used is not able to be"]
					#[doc = "interpreted."]
					BadVersion,
					#[codec(index = 11)]
					#[doc = "We tried sending distinct asset and fee but they have different"]
					#[doc = "reserve chains."]
					DistinctReserveForAssetAndFee,
					#[codec(index = 12)]
					#[doc = "The fee is zero."]
					ZeroFee,
					#[codec(index = 13)]
					#[doc = "The transfering asset amount is zero."]
					ZeroAmount,
					#[codec(index = 14)]
					#[doc = "The number of assets to be sent is over the maximum."]
					TooManyAssetsBeingSent,
					#[codec(index = 15)]
					#[doc = "The specified index does not exist in a MultiAssets struct."]
					AssetIndexNonExistent,
					#[codec(index = 16)]
					#[doc = "Fee is not enough."]
					FeeNotEnough,
					#[codec(index = 17)]
					#[doc = "Not supported MultiLocation"]
					NotSupportedMultiLocation,
					#[codec(index = 18)]
					#[doc = "MinXcmFee not registered for certain reserve location"]
					MinXcmFeeNotDefined,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Transferred `MultiAsset` with fee."]
					TransferredMultiAssets {
						sender: ::subxt::utils::AccountId32,
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						fee: runtime_types::xcm::v3::multiasset::MultiAsset,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
				}
			}
		}
		pub mod pallet_balances {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::transfer_allow_death`]."]
					transfer_allow_death {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::force_transfer`]."]
					force_transfer {
						source: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::transfer_keep_alive`]."]
					transfer_keep_alive {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::transfer_all`]."]
					transfer_all {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::force_unreserve`]."]
					force_unreserve {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::upgrade_accounts`]."]
					upgrade_accounts { who: ::std::vec::Vec<::subxt::utils::AccountId32> },
					#[codec(index = 8)]
					#[doc = "See [`Pallet::force_set_balance`]."]
					force_set_balance {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Vesting balance too high to send value."]
					VestingBalance,
					#[codec(index = 1)]
					#[doc = "Account liquidity restrictions prevent withdrawal."]
					LiquidityRestrictions,
					#[codec(index = 2)]
					#[doc = "Balance too low to send value."]
					InsufficientBalance,
					#[codec(index = 3)]
					#[doc = "Value too low to create account due to existential deposit."]
					ExistentialDeposit,
					#[codec(index = 4)]
					#[doc = "Transfer/payment would kill account."]
					Expendability,
					#[codec(index = 5)]
					#[doc = "A vesting schedule already exists for this account."]
					ExistingVestingSchedule,
					#[codec(index = 6)]
					#[doc = "Beneficiary account must pre-exist."]
					DeadAccount,
					#[codec(index = 7)]
					#[doc = "Number of named reserves exceed `MaxReserves`."]
					TooManyReserves,
					#[codec(index = 8)]
					#[doc = "Number of holds exceed `MaxHolds`."]
					TooManyHolds,
					#[codec(index = 9)]
					#[doc = "Number of freezes exceed `MaxFreezes`."]
					TooManyFreezes,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account was created with some free balance."]
					Endowed {
						account: ::subxt::utils::AccountId32,
						free_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
					#[doc = "resulting in an outright loss."]
					DustLost {
						account: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Transfer succeeded."]
					Transfer {
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A balance was set by root."]
					BalanceSet { who: ::subxt::utils::AccountId32, free: ::core::primitive::u128 },
					#[codec(index = 4)]
					#[doc = "Some balance was reserved (moved from free to reserved)."]
					Reserved { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 5)]
					#[doc = "Some balance was unreserved (moved from reserved to free)."]
					Unreserved { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 6)]
					#[doc = "Some balance was moved from the reserve of the first account to the second account."]
					#[doc = "Final argument indicates the destination balance type."]
					ReserveRepatriated {
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						destination_status:
							runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 7)]
					#[doc = "Some amount was deposited (e.g. for transaction fees)."]
					Deposit { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 8)]
					#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
					Withdraw { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 9)]
					#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
					Slashed { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 10)]
					#[doc = "Some amount was minted into an account."]
					Minted { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 11)]
					#[doc = "Some amount was burned from an account."]
					Burned { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 12)]
					#[doc = "Some amount was suspended from an account (it can be restored later)."]
					Suspended { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 13)]
					#[doc = "Some amount was restored into an account."]
					Restored { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 14)]
					#[doc = "An account was upgraded."]
					Upgraded { who: ::subxt::utils::AccountId32 },
					#[codec(index = 15)]
					#[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
					Issued { amount: ::core::primitive::u128 },
					#[codec(index = 16)]
					#[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
					Rescinded { amount: ::core::primitive::u128 },
					#[codec(index = 17)]
					#[doc = "Some balance was locked."]
					Locked { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 18)]
					#[doc = "Some balance was unlocked."]
					Unlocked { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 19)]
					#[doc = "Some balance was frozen."]
					Frozen { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 20)]
					#[doc = "Some balance was thawed."]
					Thawed { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AccountData<_0> {
					pub free: _0,
					pub reserved: _0,
					pub frozen: _0,
					pub flags: runtime_types::pallet_balances::types::ExtraFlags,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BalanceLock<_0> {
					pub id: [::core::primitive::u8; 8usize],
					pub amount: _0,
					pub reasons: runtime_types::pallet_balances::types::Reasons,
				}
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ExtraFlags(pub ::core::primitive::u128);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct IdAmount<_0, _1> {
					pub id: _0,
					pub amount: _1,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Reasons {
					#[codec(index = 0)]
					Fee,
					#[codec(index = 1)]
					Misc,
					#[codec(index = 2)]
					All,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ReserveData<_0, _1> {
					pub id: _0,
					pub amount: _1,
				}
			}
		}
		pub mod pallet_bounties {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::propose_bounty`]."]
					propose_bounty {
						#[codec(compact)]
						value: ::core::primitive::u128,
						description: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::approve_bounty`]."]
					approve_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::propose_curator`]."]
					propose_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						curator: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::unassign_curator`]."]
					unassign_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::accept_curator`]."]
					accept_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::award_bounty`]."]
					award_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::claim_bounty`]."]
					claim_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::close_bounty`]."]
					close_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::extend_bounty_expiry`]."]
					extend_bounty_expiry {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						remark: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Proposer's balance is too low."]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					#[doc = "No proposal or bounty at that index."]
					InvalidIndex,
					#[codec(index = 2)]
					#[doc = "The reason given is just too big."]
					ReasonTooBig,
					#[codec(index = 3)]
					#[doc = "The bounty status is unexpected."]
					UnexpectedStatus,
					#[codec(index = 4)]
					#[doc = "Require bounty curator."]
					RequireCurator,
					#[codec(index = 5)]
					#[doc = "Invalid bounty value."]
					InvalidValue,
					#[codec(index = 6)]
					#[doc = "Invalid bounty fee."]
					InvalidFee,
					#[codec(index = 7)]
					#[doc = "A bounty payout is pending."]
					#[doc = "To cancel the bounty, you must unassign and slash the curator."]
					PendingPayout,
					#[codec(index = 8)]
					#[doc = "The bounties cannot be claimed/closed because it's still in the countdown period."]
					Premature,
					#[codec(index = 9)]
					#[doc = "The bounty cannot be closed because it has active child bounties."]
					HasActiveChildBounty,
					#[codec(index = 10)]
					#[doc = "Too many approvals are already queued."]
					TooManyQueued,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New bounty proposal."]
					BountyProposed { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "A bounty proposal was rejected; funds were slashed."]
					BountyRejected { index: ::core::primitive::u32, bond: ::core::primitive::u128 },
					#[codec(index = 2)]
					#[doc = "A bounty proposal is funded and became active."]
					BountyBecameActive { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "A bounty is awarded to a beneficiary."]
					BountyAwarded {
						index: ::core::primitive::u32,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 4)]
					#[doc = "A bounty is claimed by beneficiary."]
					BountyClaimed {
						index: ::core::primitive::u32,
						payout: ::core::primitive::u128,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 5)]
					#[doc = "A bounty is cancelled."]
					BountyCanceled { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "A bounty expiry is extended."]
					BountyExtended { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A bounty is approved."]
					BountyApproved { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					#[doc = "A bounty curator is proposed."]
					CuratorProposed {
						bounty_id: ::core::primitive::u32,
						curator: ::subxt::utils::AccountId32,
					},
					#[codec(index = 9)]
					#[doc = "A bounty curator is unassigned."]
					CuratorUnassigned { bounty_id: ::core::primitive::u32 },
					#[codec(index = 10)]
					#[doc = "A bounty curator is accepted."]
					CuratorAccepted {
						bounty_id: ::core::primitive::u32,
						curator: ::subxt::utils::AccountId32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Bounty<_0, _1, _2> {
				pub proposer: _0,
				pub value: _1,
				pub fee: _1,
				pub curator_deposit: _1,
				pub bond: _1,
				pub status: runtime_types::pallet_bounties::BountyStatus<_0, _2>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum BountyStatus<_0, _1> {
				#[codec(index = 0)]
				Proposed,
				#[codec(index = 1)]
				Approved,
				#[codec(index = 2)]
				Funded,
				#[codec(index = 3)]
				CuratorProposed { curator: _0 },
				#[codec(index = 4)]
				Active { curator: _0, update_due: _1 },
				#[codec(index = 5)]
				PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
			}
		}
		pub mod pallet_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::set_members`]."]
					set_members {
						new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
						prime: ::core::option::Option<::subxt::utils::AccountId32>,
						old_count: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::execute`]."]
					execute {
						proposal:
							::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::propose`]."]
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal:
							::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::vote`]."]
					vote {
						proposal: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::disapprove_proposal`]."]
					disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 6)]
					#[doc = "See [`Pallet::close`]."]
					close {
						proposal_hash: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call2 {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::set_members`]."]
					set_members {
						new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
						prime: ::core::option::Option<::subxt::utils::AccountId32>,
						old_count: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::execute`]."]
					execute {
						proposal:
							::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::propose`]."]
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal:
							::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::vote`]."]
					vote {
						proposal: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::disapprove_proposal`]."]
					disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 6)]
					#[doc = "See [`Pallet::close`]."]
					close {
						proposal_hash: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Account is not a member"]
					NotMember,
					#[codec(index = 1)]
					#[doc = "Duplicate proposals not allowed"]
					DuplicateProposal,
					#[codec(index = 2)]
					#[doc = "Proposal must exist"]
					ProposalMissing,
					#[codec(index = 3)]
					#[doc = "Mismatched index"]
					WrongIndex,
					#[codec(index = 4)]
					#[doc = "Duplicate vote ignored"]
					DuplicateVote,
					#[codec(index = 5)]
					#[doc = "Members are already initialized!"]
					AlreadyInitialized,
					#[codec(index = 6)]
					#[doc = "The close call was made too early, before the end of the voting."]
					TooEarly,
					#[codec(index = 7)]
					#[doc = "There can only be a maximum of `MaxProposals` active proposals."]
					TooManyProposals,
					#[codec(index = 8)]
					#[doc = "The given weight bound for the proposal was too low."]
					WrongProposalWeight,
					#[codec(index = 9)]
					#[doc = "The given length bound for the proposal was too low."]
					WrongProposalLength,
					#[codec(index = 10)]
					#[doc = "Prime account is not a member"]
					PrimeAccountNotMember,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error2 {
					#[codec(index = 0)]
					#[doc = "Account is not a member"]
					NotMember,
					#[codec(index = 1)]
					#[doc = "Duplicate proposals not allowed"]
					DuplicateProposal,
					#[codec(index = 2)]
					#[doc = "Proposal must exist"]
					ProposalMissing,
					#[codec(index = 3)]
					#[doc = "Mismatched index"]
					WrongIndex,
					#[codec(index = 4)]
					#[doc = "Duplicate vote ignored"]
					DuplicateVote,
					#[codec(index = 5)]
					#[doc = "Members are already initialized!"]
					AlreadyInitialized,
					#[codec(index = 6)]
					#[doc = "The close call was made too early, before the end of the voting."]
					TooEarly,
					#[codec(index = 7)]
					#[doc = "There can only be a maximum of `MaxProposals` active proposals."]
					TooManyProposals,
					#[codec(index = 8)]
					#[doc = "The given weight bound for the proposal was too low."]
					WrongProposalWeight,
					#[codec(index = 9)]
					#[doc = "The given length bound for the proposal was too low."]
					WrongProposalLength,
					#[codec(index = 10)]
					#[doc = "Prime account is not a member"]
					PrimeAccountNotMember,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
					#[doc = "`MemberCount`)."]
					Proposed {
						account: ::subxt::utils::AccountId32,
						proposal_index: ::core::primitive::u32,
						proposal_hash: ::subxt::utils::H256,
						threshold: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A motion (given hash) has been voted on by given account, leaving"]
					#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
					Voted {
						account: ::subxt::utils::AccountId32,
						proposal_hash: ::subxt::utils::H256,
						voted: ::core::primitive::bool,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "A motion was approved by the required threshold."]
					Approved { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 3)]
					#[doc = "A motion was not approved by the required threshold."]
					Disapproved { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 4)]
					#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
					Executed {
						proposal_hash: ::subxt::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 5)]
					#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
					MemberExecuted {
						proposal_hash: ::subxt::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 6)]
					#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
					Closed {
						proposal_hash: ::subxt::utils::H256,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event2 {
					#[codec(index = 0)]
					#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
					#[doc = "`MemberCount`)."]
					Proposed {
						account: ::subxt::utils::AccountId32,
						proposal_index: ::core::primitive::u32,
						proposal_hash: ::subxt::utils::H256,
						threshold: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A motion (given hash) has been voted on by given account, leaving"]
					#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
					Voted {
						account: ::subxt::utils::AccountId32,
						proposal_hash: ::subxt::utils::H256,
						voted: ::core::primitive::bool,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "A motion was approved by the required threshold."]
					Approved { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 3)]
					#[doc = "A motion was not approved by the required threshold."]
					Disapproved { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 4)]
					#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
					Executed {
						proposal_hash: ::subxt::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 5)]
					#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
					MemberExecuted {
						proposal_hash: ::subxt::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 6)]
					#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
					Closed {
						proposal_hash: ::subxt::utils::H256,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RawOrigin<_0> {
				#[codec(index = 0)]
				Members(::core::primitive::u32, ::core::primitive::u32),
				#[codec(index = 1)]
				Member(_0),
				#[codec(index = 2)]
				_Phantom,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Votes<_0, _1> {
				pub index: ::core::primitive::u32,
				pub threshold: ::core::primitive::u32,
				pub ayes: ::std::vec::Vec<_0>,
				pub nays: ::std::vec::Vec<_0>,
				pub end: _1,
			}
		}
		pub mod pallet_conviction_voting {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::vote`]."]
					vote {
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::delegate`]."]
					delegate {
						class: ::core::primitive::u16,
						to: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::undelegate`]."]
					undelegate { class: ::core::primitive::u16 },
					#[codec(index = 3)]
					#[doc = "See [`Pallet::unlock`]."]
					unlock {
						class: ::core::primitive::u16,
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::remove_vote`]."]
					remove_vote {
						class: ::core::option::Option<::core::primitive::u16>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::remove_other_vote`]."]
					remove_other_vote {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						class: ::core::primitive::u16,
						index: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Poll is not ongoing."]
					NotOngoing,
					#[codec(index = 1)]
					#[doc = "The given account did not vote on the poll."]
					NotVoter,
					#[codec(index = 2)]
					#[doc = "The actor has no permission to conduct the action."]
					NoPermission,
					#[codec(index = 3)]
					#[doc = "The actor has no permission to conduct the action right now but will do in the future."]
					NoPermissionYet,
					#[codec(index = 4)]
					#[doc = "The account is already delegating."]
					AlreadyDelegating,
					#[codec(index = 5)]
					#[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
					#[doc = "these are removed, either through `unvote` or `reap_vote`."]
					AlreadyVoting,
					#[codec(index = 6)]
					#[doc = "Too high a balance was provided that the account cannot afford."]
					InsufficientFunds,
					#[codec(index = 7)]
					#[doc = "The account is not currently delegating."]
					NotDelegating,
					#[codec(index = 8)]
					#[doc = "Delegation to oneself makes no sense."]
					Nonsense,
					#[codec(index = 9)]
					#[doc = "Maximum number of votes reached."]
					MaxVotesReached,
					#[codec(index = 10)]
					#[doc = "The class must be supplied since it is not easily determinable from the state."]
					ClassNeeded,
					#[codec(index = 11)]
					#[doc = "The class ID supplied is invalid."]
					BadClass,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
					Delegated(::subxt::utils::AccountId32, ::subxt::utils::AccountId32),
					#[codec(index = 1)]
					#[doc = "An \\[account\\] has cancelled a previous delegation operation."]
					Undelegated(::subxt::utils::AccountId32),
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub support: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard {
						vote: runtime_types::pallet_conviction_voting::vote::Vote,
						balance: _0,
					},
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
					#[codec(index = 2)]
					SplitAbstain { aye: _0, nay: _0, abstain: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Casting<_0, _1, _2> {
					pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_1,
						runtime_types::pallet_conviction_voting::vote::AccountVote<_0>,
					)>,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_1, _0>,
					#[codec(skip)]
					pub __ignore: ::core::marker::PhantomData<_2>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegating<_0, _1, _2> {
					pub balance: _0,
					pub target: _1,
					pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_2, _0>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Voting<_0, _1, _2, _3> {
					#[codec(index = 0)]
					Casting(runtime_types::pallet_conviction_voting::vote::Casting<_0, _2, _2>),
					#[codec(index = 1)]
					Delegating(
						runtime_types::pallet_conviction_voting::vote::Delegating<_0, _1, _2>,
					),
					__Ignore(::core::marker::PhantomData<_3>),
				}
			}
		}
		pub mod pallet_democracy {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::propose`]."]
					propose {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::second`]."]
					second {
						#[codec(compact)]
						proposal: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::vote`]."]
					vote {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::emergency_cancel`]."]
					emergency_cancel { ref_index: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::external_propose`]."]
					external_propose {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::external_propose_majority`]."]
					external_propose_majority {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::external_propose_default`]."]
					external_propose_default {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::fast_track`]."]
					fast_track {
						proposal_hash: ::subxt::utils::H256,
						voting_period: ::core::primitive::u32,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::veto_external`]."]
					veto_external { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 9)]
					#[doc = "See [`Pallet::cancel_referendum`]."]
					cancel_referendum {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::delegate`]."]
					delegate {
						to: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "See [`Pallet::undelegate`]."]
					undelegate,
					#[codec(index = 12)]
					#[doc = "See [`Pallet::clear_public_proposals`]."]
					clear_public_proposals,
					#[codec(index = 13)]
					#[doc = "See [`Pallet::unlock`]."]
					unlock {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					#[doc = "See [`Pallet::remove_vote`]."]
					remove_vote { index: ::core::primitive::u32 },
					#[codec(index = 15)]
					#[doc = "See [`Pallet::remove_other_vote`]."]
					remove_other_vote {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 16)]
					#[doc = "See [`Pallet::blacklist`]."]
					blacklist {
						proposal_hash: ::subxt::utils::H256,
						maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 17)]
					#[doc = "See [`Pallet::cancel_proposal`]."]
					cancel_proposal {
						#[codec(compact)]
						prop_index: ::core::primitive::u32,
					},
					#[codec(index = 18)]
					#[doc = "See [`Pallet::set_metadata`]."]
					set_metadata {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						maybe_hash: ::core::option::Option<::subxt::utils::H256>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Value too low"]
					ValueLow,
					#[codec(index = 1)]
					#[doc = "Proposal does not exist"]
					ProposalMissing,
					#[codec(index = 2)]
					#[doc = "Cannot cancel the same proposal twice"]
					AlreadyCanceled,
					#[codec(index = 3)]
					#[doc = "Proposal already made"]
					DuplicateProposal,
					#[codec(index = 4)]
					#[doc = "Proposal still blacklisted"]
					ProposalBlacklisted,
					#[codec(index = 5)]
					#[doc = "Next external proposal not simple majority"]
					NotSimpleMajority,
					#[codec(index = 6)]
					#[doc = "Invalid hash"]
					InvalidHash,
					#[codec(index = 7)]
					#[doc = "No external proposal"]
					NoProposal,
					#[codec(index = 8)]
					#[doc = "Identity may not veto a proposal twice"]
					AlreadyVetoed,
					#[codec(index = 9)]
					#[doc = "Vote given for invalid referendum"]
					ReferendumInvalid,
					#[codec(index = 10)]
					#[doc = "No proposals waiting"]
					NoneWaiting,
					#[codec(index = 11)]
					#[doc = "The given account did not vote on the referendum."]
					NotVoter,
					#[codec(index = 12)]
					#[doc = "The actor has no permission to conduct the action."]
					NoPermission,
					#[codec(index = 13)]
					#[doc = "The account is already delegating."]
					AlreadyDelegating,
					#[codec(index = 14)]
					#[doc = "Too high a balance was provided that the account cannot afford."]
					InsufficientFunds,
					#[codec(index = 15)]
					#[doc = "The account is not currently delegating."]
					NotDelegating,
					#[codec(index = 16)]
					#[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
					#[doc = "these are removed, either through `unvote` or `reap_vote`."]
					VotesExist,
					#[codec(index = 17)]
					#[doc = "The instant referendum origin is currently disallowed."]
					InstantNotAllowed,
					#[codec(index = 18)]
					#[doc = "Delegation to oneself makes no sense."]
					Nonsense,
					#[codec(index = 19)]
					#[doc = "Invalid upper bound."]
					WrongUpperBound,
					#[codec(index = 20)]
					#[doc = "Maximum number of votes reached."]
					MaxVotesReached,
					#[codec(index = 21)]
					#[doc = "Maximum number of items reached."]
					TooMany,
					#[codec(index = 22)]
					#[doc = "Voting period too low"]
					VotingPeriodLow,
					#[codec(index = 23)]
					#[doc = "The preimage does not exist."]
					PreimageNotExist,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion has been proposed by a public account."]
					Proposed {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "A public proposal has been tabled for referendum vote."]
					Tabled {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "An external proposal has been tabled."]
					ExternalTabled,
					#[codec(index = 3)]
					#[doc = "A referendum has begun."]
					Started {
						ref_index: ::core::primitive::u32,
						threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					},
					#[codec(index = 4)]
					#[doc = "A proposal has been approved by referendum."]
					Passed { ref_index: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "A proposal has been rejected by referendum."]
					NotPassed { ref_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "A referendum has been cancelled."]
					Cancelled { ref_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "An account has delegated their vote to another account."]
					Delegated {
						who: ::subxt::utils::AccountId32,
						target: ::subxt::utils::AccountId32,
					},
					#[codec(index = 8)]
					#[doc = "An account has cancelled a previous delegation operation."]
					Undelegated { account: ::subxt::utils::AccountId32 },
					#[codec(index = 9)]
					#[doc = "An external proposal has been vetoed."]
					Vetoed {
						who: ::subxt::utils::AccountId32,
						proposal_hash: ::subxt::utils::H256,
						until: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "A proposal_hash has been blacklisted permanently."]
					Blacklisted { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 11)]
					#[doc = "An account has voted in a referendum"]
					Voted {
						voter: ::subxt::utils::AccountId32,
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 12)]
					#[doc = "An account has secconded a proposal"]
					Seconded {
						seconder: ::subxt::utils::AccountId32,
						prop_index: ::core::primitive::u32,
					},
					#[codec(index = 13)]
					#[doc = "A proposal got canceled."]
					ProposalCanceled { prop_index: ::core::primitive::u32 },
					#[codec(index = 14)]
					#[doc = "Metadata for a proposal or a referendum has been set."]
					MetadataSet {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::utils::H256,
					},
					#[codec(index = 15)]
					#[doc = "Metadata for a proposal or a referendum has been cleared."]
					MetadataCleared {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::utils::H256,
					},
					#[codec(index = 16)]
					#[doc = "Metadata has been transferred to new owner."]
					MetadataTransferred {
						prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::utils::H256,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum MetadataOwner {
					#[codec(index = 0)]
					External,
					#[codec(index = 1)]
					Proposal(::core::primitive::u32),
					#[codec(index = 2)]
					Referendum(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ReferendumInfo<_0, _1, _2> {
					#[codec(index = 0)]
					Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
					#[codec(index = 1)]
					Finished { approved: ::core::primitive::bool, end: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ReferendumStatus<_0, _1, _2> {
					pub end: _0,
					pub proposal: _1,
					pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					pub delay: _0,
					pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub turnout: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard { vote: runtime_types::pallet_democracy::vote::Vote, balance: _0 },
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Voting<_0, _1, _2> {
					#[codec(index = 0)]
					Direct {
						votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							_2,
							runtime_types::pallet_democracy::vote::AccountVote<_0>,
						)>,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
					#[codec(index = 1)]
					Delegating {
						balance: _0,
						target: _1,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
				}
			}
			pub mod vote_threshold {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum VoteThreshold {
					#[codec(index = 0)]
					SuperMajorityApprove,
					#[codec(index = 1)]
					SuperMajorityAgainst,
					#[codec(index = 2)]
					SimpleMajority,
				}
			}
		}
		pub mod pallet_elections_phragmen {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::vote`]."]
					vote {
						votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::remove_voter`]."]
					remove_voter,
					#[codec(index = 2)]
					#[doc = "See [`Pallet::submit_candidacy`]."]
					submit_candidacy {
						#[codec(compact)]
						candidate_count: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::renounce_candidacy`]."]
					renounce_candidacy {
						renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::remove_member`]."]
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						slash_bond: ::core::primitive::bool,
						rerun_election: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::clean_defunct_voters`]."]
					clean_defunct_voters {
						num_voters: ::core::primitive::u32,
						num_defunct: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Cannot vote when no candidates or members exist."]
					UnableToVote,
					#[codec(index = 1)]
					#[doc = "Must vote for at least one candidate."]
					NoVotes,
					#[codec(index = 2)]
					#[doc = "Cannot vote more than candidates."]
					TooManyVotes,
					#[codec(index = 3)]
					#[doc = "Cannot vote more than maximum allowed."]
					MaximumVotesExceeded,
					#[codec(index = 4)]
					#[doc = "Cannot vote with stake less than minimum balance."]
					LowBalance,
					#[codec(index = 5)]
					#[doc = "Voter can not pay voting bond."]
					UnableToPayBond,
					#[codec(index = 6)]
					#[doc = "Must be a voter."]
					MustBeVoter,
					#[codec(index = 7)]
					#[doc = "Duplicated candidate submission."]
					DuplicatedCandidate,
					#[codec(index = 8)]
					#[doc = "Too many candidates have been created."]
					TooManyCandidates,
					#[codec(index = 9)]
					#[doc = "Member cannot re-submit candidacy."]
					MemberSubmit,
					#[codec(index = 10)]
					#[doc = "Runner cannot re-submit candidacy."]
					RunnerUpSubmit,
					#[codec(index = 11)]
					#[doc = "Candidate does not have enough funds."]
					InsufficientCandidateFunds,
					#[codec(index = 12)]
					#[doc = "Not a member."]
					NotMember,
					#[codec(index = 13)]
					#[doc = "The provided count of number of candidates is incorrect."]
					InvalidWitnessData,
					#[codec(index = 14)]
					#[doc = "The provided count of number of votes is incorrect."]
					InvalidVoteCount,
					#[codec(index = 15)]
					#[doc = "The renouncing origin presented a wrong `Renouncing` parameter."]
					InvalidRenouncing,
					#[codec(index = 16)]
					#[doc = "Prediction regarding replacement after member removal is wrong."]
					InvalidReplacement,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
					#[doc = "the election, not that enough have has been elected. The inner value must be examined"]
					#[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
					#[doc = "slashed and none were elected, whiLst `EmptyTerm` means that no candidates existed to"]
					#[doc = "begin with."]
					NewTerm {
						new_members:
							::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
					},
					#[codec(index = 1)]
					#[doc = "No (or not enough) candidates existed for this round. This is different from"]
					#[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
					EmptyTerm,
					#[codec(index = 2)]
					#[doc = "Internal error happened while trying to perform election."]
					ElectionError,
					#[codec(index = 3)]
					#[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
					#[doc = "`EmptyTerm`."]
					MemberKicked { member: ::subxt::utils::AccountId32 },
					#[codec(index = 4)]
					#[doc = "Someone has renounced their candidacy."]
					Renounced { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 5)]
					#[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
					#[doc = "runner-up."]
					#[doc = ""]
					#[doc = "Note that old members and runners-up are also candidates."]
					CandidateSlashed {
						candidate: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
					SeatHolderSlashed {
						seat_holder: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Renouncing {
				#[codec(index = 0)]
				Member,
				#[codec(index = 1)]
				RunnerUp,
				#[codec(index = 2)]
				Candidate(#[codec(compact)] ::core::primitive::u32),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SeatHolder<_0, _1> {
				pub who: _0,
				pub stake: _1,
				pub deposit: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Voter<_0, _1> {
				pub votes: ::std::vec::Vec<_0>,
				pub stake: _1,
				pub deposit: _1,
			}
		}
		pub mod pallet_identity {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Identity pallet declaration."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::add_registrar`]."]
					add_registrar {
						account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::set_identity`]."]
					set_identity {
						info:
							::std::boxed::Box<runtime_types::pallet_identity::simple::IdentityInfo>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::set_subs`]."]
					set_subs {
						subs: ::std::vec::Vec<(
							::subxt::utils::AccountId32,
							runtime_types::pallet_identity::types::Data,
						)>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::clear_identity`]."]
					clear_identity,
					#[codec(index = 4)]
					#[doc = "See [`Pallet::request_judgement`]."]
					request_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						#[codec(compact)]
						max_fee: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::cancel_request`]."]
					cancel_request { reg_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "See [`Pallet::set_fee`]."]
					set_fee {
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::set_account_id`]."]
					set_account_id {
						#[codec(compact)]
						index: ::core::primitive::u32,
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::set_fields`]."]
					set_fields {
						#[codec(compact)]
						index: ::core::primitive::u32,
						fields: runtime_types::pallet_identity::types::BitFlags<
							runtime_types::pallet_identity::simple::IdentityField,
						>,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::provide_judgement`]."]
					provide_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						judgement: runtime_types::pallet_identity::types::Judgement<
							::core::primitive::u128,
						>,
						identity: ::subxt::utils::H256,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::kill_identity`]."]
					kill_identity {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 11)]
					#[doc = "See [`Pallet::add_sub`]."]
					add_sub {
						sub: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 12)]
					#[doc = "See [`Pallet::rename_sub`]."]
					rename_sub {
						sub: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 13)]
					#[doc = "See [`Pallet::remove_sub`]."]
					remove_sub {
						sub: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					#[doc = "See [`Pallet::quit_sub`]."]
					quit_sub,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many subs-accounts."]
					TooManySubAccounts,
					#[codec(index = 1)]
					#[doc = "Account isn't found."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Account isn't named."]
					NotNamed,
					#[codec(index = 3)]
					#[doc = "Empty index."]
					EmptyIndex,
					#[codec(index = 4)]
					#[doc = "Fee is changed."]
					FeeChanged,
					#[codec(index = 5)]
					#[doc = "No identity found."]
					NoIdentity,
					#[codec(index = 6)]
					#[doc = "Sticky judgement."]
					StickyJudgement,
					#[codec(index = 7)]
					#[doc = "Judgement given."]
					JudgementGiven,
					#[codec(index = 8)]
					#[doc = "Invalid judgement."]
					InvalidJudgement,
					#[codec(index = 9)]
					#[doc = "The index is invalid."]
					InvalidIndex,
					#[codec(index = 10)]
					#[doc = "The target is invalid."]
					InvalidTarget,
					#[codec(index = 11)]
					#[doc = "Too many additional fields."]
					TooManyFields,
					#[codec(index = 12)]
					#[doc = "Maximum amount of registrars reached. Cannot add any more."]
					TooManyRegistrars,
					#[codec(index = 13)]
					#[doc = "Account ID is already named."]
					AlreadyClaimed,
					#[codec(index = 14)]
					#[doc = "Sender is not a sub-account."]
					NotSub,
					#[codec(index = 15)]
					#[doc = "Sub-account isn't owned by sender."]
					NotOwned,
					#[codec(index = 16)]
					#[doc = "The provided judgement was for a different identity."]
					JudgementForDifferentIdentity,
					#[codec(index = 17)]
					#[doc = "Error that occurs when there is an issue paying for judgement."]
					JudgementPaymentFailed,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A name was set or reset (which will remove all judgements)."]
					IdentitySet { who: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					#[doc = "A name was cleared, and the given balance returned."]
					IdentityCleared {
						who: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "A name was removed and the given balance slashed."]
					IdentityKilled {
						who: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A judgement was asked from a registrar."]
					JudgementRequested {
						who: ::subxt::utils::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A judgement request was retracted."]
					JudgementUnrequested {
						who: ::subxt::utils::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "A judgement was given by a registrar."]
					JudgementGiven {
						target: ::subxt::utils::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "A registrar was added."]
					RegistrarAdded { registrar_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A sub-identity was added to an identity and the deposit paid."]
					SubIdentityAdded {
						sub: ::subxt::utils::AccountId32,
						main: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "A sub-identity was removed from an identity and the deposit freed."]
					SubIdentityRemoved {
						sub: ::subxt::utils::AccountId32,
						main: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
					#[doc = "main identity account to the sub-identity account."]
					SubIdentityRevoked {
						sub: ::subxt::utils::AccountId32,
						main: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			pub mod simple {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum IdentityField {
					#[codec(index = 0)]
					Display,
					#[codec(index = 1)]
					Legal,
					#[codec(index = 2)]
					Web,
					#[codec(index = 3)]
					Riot,
					#[codec(index = 4)]
					Email,
					#[codec(index = 5)]
					PgpFingerprint,
					#[codec(index = 6)]
					Image,
					#[codec(index = 7)]
					Twitter,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct IdentityInfo {
					pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						runtime_types::pallet_identity::types::Data,
						runtime_types::pallet_identity::types::Data,
					)>,
					pub display: runtime_types::pallet_identity::types::Data,
					pub legal: runtime_types::pallet_identity::types::Data,
					pub web: runtime_types::pallet_identity::types::Data,
					pub riot: runtime_types::pallet_identity::types::Data,
					pub email: runtime_types::pallet_identity::types::Data,
					pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
					pub image: runtime_types::pallet_identity::types::Data,
					pub twitter: runtime_types::pallet_identity::types::Data,
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BitFlags<_0>(
					pub ::core::primitive::u64,
					#[codec(skip)] pub ::core::marker::PhantomData<_0>,
				);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Data {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Raw0([::core::primitive::u8; 0usize]),
					#[codec(index = 2)]
					Raw1([::core::primitive::u8; 1usize]),
					#[codec(index = 3)]
					Raw2([::core::primitive::u8; 2usize]),
					#[codec(index = 4)]
					Raw3([::core::primitive::u8; 3usize]),
					#[codec(index = 5)]
					Raw4([::core::primitive::u8; 4usize]),
					#[codec(index = 6)]
					Raw5([::core::primitive::u8; 5usize]),
					#[codec(index = 7)]
					Raw6([::core::primitive::u8; 6usize]),
					#[codec(index = 8)]
					Raw7([::core::primitive::u8; 7usize]),
					#[codec(index = 9)]
					Raw8([::core::primitive::u8; 8usize]),
					#[codec(index = 10)]
					Raw9([::core::primitive::u8; 9usize]),
					#[codec(index = 11)]
					Raw10([::core::primitive::u8; 10usize]),
					#[codec(index = 12)]
					Raw11([::core::primitive::u8; 11usize]),
					#[codec(index = 13)]
					Raw12([::core::primitive::u8; 12usize]),
					#[codec(index = 14)]
					Raw13([::core::primitive::u8; 13usize]),
					#[codec(index = 15)]
					Raw14([::core::primitive::u8; 14usize]),
					#[codec(index = 16)]
					Raw15([::core::primitive::u8; 15usize]),
					#[codec(index = 17)]
					Raw16([::core::primitive::u8; 16usize]),
					#[codec(index = 18)]
					Raw17([::core::primitive::u8; 17usize]),
					#[codec(index = 19)]
					Raw18([::core::primitive::u8; 18usize]),
					#[codec(index = 20)]
					Raw19([::core::primitive::u8; 19usize]),
					#[codec(index = 21)]
					Raw20([::core::primitive::u8; 20usize]),
					#[codec(index = 22)]
					Raw21([::core::primitive::u8; 21usize]),
					#[codec(index = 23)]
					Raw22([::core::primitive::u8; 22usize]),
					#[codec(index = 24)]
					Raw23([::core::primitive::u8; 23usize]),
					#[codec(index = 25)]
					Raw24([::core::primitive::u8; 24usize]),
					#[codec(index = 26)]
					Raw25([::core::primitive::u8; 25usize]),
					#[codec(index = 27)]
					Raw26([::core::primitive::u8; 26usize]),
					#[codec(index = 28)]
					Raw27([::core::primitive::u8; 27usize]),
					#[codec(index = 29)]
					Raw28([::core::primitive::u8; 28usize]),
					#[codec(index = 30)]
					Raw29([::core::primitive::u8; 29usize]),
					#[codec(index = 31)]
					Raw30([::core::primitive::u8; 30usize]),
					#[codec(index = 32)]
					Raw31([::core::primitive::u8; 31usize]),
					#[codec(index = 33)]
					Raw32([::core::primitive::u8; 32usize]),
					#[codec(index = 34)]
					BlakeTwo256([::core::primitive::u8; 32usize]),
					#[codec(index = 35)]
					Sha256([::core::primitive::u8; 32usize]),
					#[codec(index = 36)]
					Keccak256([::core::primitive::u8; 32usize]),
					#[codec(index = 37)]
					ShaThree256([::core::primitive::u8; 32usize]),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Judgement<_0> {
					#[codec(index = 0)]
					Unknown,
					#[codec(index = 1)]
					FeePaid(_0),
					#[codec(index = 2)]
					Reasonable,
					#[codec(index = 3)]
					KnownGood,
					#[codec(index = 4)]
					OutOfDate,
					#[codec(index = 5)]
					LowQuality,
					#[codec(index = 6)]
					Erroneous,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct RegistrarInfo<_0, _1, _2> {
					pub account: _1,
					pub fee: _0,
					pub fields: runtime_types::pallet_identity::types::BitFlags<_2>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Registration<_0, _2> {
					pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						runtime_types::pallet_identity::types::Judgement<_0>,
					)>,
					pub deposit: _0,
					pub info: _2,
				}
			}
		}
		pub mod pallet_indices {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::claim`]."]
					claim { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "See [`Pallet::transfer`]."]
					transfer {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::free`]."]
					free { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "See [`Pallet::force_transfer`]."]
					force_transfer {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
						freeze: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::freeze`]."]
					freeze { index: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The index was not already assigned."]
					NotAssigned,
					#[codec(index = 1)]
					#[doc = "The index is assigned to another account."]
					NotOwner,
					#[codec(index = 2)]
					#[doc = "The index was not available."]
					InUse,
					#[codec(index = 3)]
					#[doc = "The source and destination accounts are identical."]
					NotTransfer,
					#[codec(index = 4)]
					#[doc = "The index is permanent and may not be freed/changed."]
					Permanent,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A account index was assigned."]
					IndexAssigned {
						who: ::subxt::utils::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A account index has been freed up (unassigned)."]
					IndexFreed { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "A account index has been frozen to its current account ID."]
					IndexFrozen { index: ::core::primitive::u32, who: ::subxt::utils::AccountId32 },
				}
			}
		}
		pub mod pallet_membership {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::add_member`]."]
					add_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::remove_member`]."]
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::swap_member`]."]
					swap_member {
						remove: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						add: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::reset_members`]."]
					reset_members { members: ::std::vec::Vec<::subxt::utils::AccountId32> },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::change_key`]."]
					change_key {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::set_prime`]."]
					set_prime {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::clear_prime`]."]
					clear_prime,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call2 {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::add_member`]."]
					add_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::remove_member`]."]
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::swap_member`]."]
					swap_member {
						remove: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						add: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::reset_members`]."]
					reset_members { members: ::std::vec::Vec<::subxt::utils::AccountId32> },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::change_key`]."]
					change_key {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::set_prime`]."]
					set_prime {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::clear_prime`]."]
					clear_prime,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call3 {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::add_member`]."]
					add_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::remove_member`]."]
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::swap_member`]."]
					swap_member {
						remove: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						add: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::reset_members`]."]
					reset_members { members: ::std::vec::Vec<::subxt::utils::AccountId32> },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::change_key`]."]
					change_key {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::set_prime`]."]
					set_prime {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::clear_prime`]."]
					clear_prime,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Already a member."]
					AlreadyMember,
					#[codec(index = 1)]
					#[doc = "Not a member."]
					NotMember,
					#[codec(index = 2)]
					#[doc = "Too many members."]
					TooManyMembers,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error2 {
					#[codec(index = 0)]
					#[doc = "Already a member."]
					AlreadyMember,
					#[codec(index = 1)]
					#[doc = "Not a member."]
					NotMember,
					#[codec(index = 2)]
					#[doc = "Too many members."]
					TooManyMembers,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error3 {
					#[codec(index = 0)]
					#[doc = "Already a member."]
					AlreadyMember,
					#[codec(index = 1)]
					#[doc = "Not a member."]
					NotMember,
					#[codec(index = 2)]
					#[doc = "Too many members."]
					TooManyMembers,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The given member was added; see the transaction for who."]
					MemberAdded,
					#[codec(index = 1)]
					#[doc = "The given member was removed; see the transaction for who."]
					MemberRemoved,
					#[codec(index = 2)]
					#[doc = "Two members were swapped; see the transaction for who."]
					MembersSwapped,
					#[codec(index = 3)]
					#[doc = "The membership was reset; see the transaction for who the new set is."]
					MembersReset,
					#[codec(index = 4)]
					#[doc = "One of the members' keys changed."]
					KeyChanged,
					#[codec(index = 5)]
					#[doc = "Phantom member, never used."]
					Dummy,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event2 {
					#[codec(index = 0)]
					#[doc = "The given member was added; see the transaction for who."]
					MemberAdded,
					#[codec(index = 1)]
					#[doc = "The given member was removed; see the transaction for who."]
					MemberRemoved,
					#[codec(index = 2)]
					#[doc = "Two members were swapped; see the transaction for who."]
					MembersSwapped,
					#[codec(index = 3)]
					#[doc = "The membership was reset; see the transaction for who the new set is."]
					MembersReset,
					#[codec(index = 4)]
					#[doc = "One of the members' keys changed."]
					KeyChanged,
					#[codec(index = 5)]
					#[doc = "Phantom member, never used."]
					Dummy,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event3 {
					#[codec(index = 0)]
					#[doc = "The given member was added; see the transaction for who."]
					MemberAdded,
					#[codec(index = 1)]
					#[doc = "The given member was removed; see the transaction for who."]
					MemberRemoved,
					#[codec(index = 2)]
					#[doc = "Two members were swapped; see the transaction for who."]
					MembersSwapped,
					#[codec(index = 3)]
					#[doc = "The membership was reset; see the transaction for who the new set is."]
					MembersReset,
					#[codec(index = 4)]
					#[doc = "One of the members' keys changed."]
					KeyChanged,
					#[codec(index = 5)]
					#[doc = "Phantom member, never used."]
					Dummy,
				}
			}
		}
		pub mod pallet_multisig {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::as_multi_threshold_1`]."]
					as_multi_threshold_1 {
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::as_multi`]."]
					as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::approve_as_multi`]."]
					approve_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call_hash: [::core::primitive::u8; 32usize],
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::cancel_as_multi`]."]
					cancel_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Threshold must be 2 or greater."]
					MinimumThreshold,
					#[codec(index = 1)]
					#[doc = "Call is already approved by this signatory."]
					AlreadyApproved,
					#[codec(index = 2)]
					#[doc = "Call doesn't need any (more) approvals."]
					NoApprovalsNeeded,
					#[codec(index = 3)]
					#[doc = "There are too few signatories in the list."]
					TooFewSignatories,
					#[codec(index = 4)]
					#[doc = "There are too many signatories in the list."]
					TooManySignatories,
					#[codec(index = 5)]
					#[doc = "The signatories were provided out of order; they should be ordered."]
					SignatoriesOutOfOrder,
					#[codec(index = 6)]
					#[doc = "The sender was contained in the other signatories; it shouldn't be."]
					SenderInSignatories,
					#[codec(index = 7)]
					#[doc = "Multisig operation not found when attempting to cancel."]
					NotFound,
					#[codec(index = 8)]
					#[doc = "Only the account that originally created the multisig is able to cancel it."]
					NotOwner,
					#[codec(index = 9)]
					#[doc = "No timepoint was given, yet the multisig operation is already underway."]
					NoTimepoint,
					#[codec(index = 10)]
					#[doc = "A different timepoint was given to the multisig operation that is underway."]
					WrongTimepoint,
					#[codec(index = 11)]
					#[doc = "A timepoint was given, yet no multisig operation is underway."]
					UnexpectedTimepoint,
					#[codec(index = 12)]
					#[doc = "The maximum weight information provided was too low."]
					MaxWeightTooLow,
					#[codec(index = 13)]
					#[doc = "The data to be stored is already stored."]
					AlreadyStored,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new multisig operation has begun."]
					NewMultisig {
						approving: ::subxt::utils::AccountId32,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 1)]
					#[doc = "A multisig operation has been approved by someone."]
					MultisigApproval {
						approving: ::subxt::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					#[doc = "A multisig operation has been executed."]
					MultisigExecuted {
						approving: ::subxt::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "A multisig operation has been cancelled."]
					MultisigCancelled {
						cancelling: ::subxt::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Multisig<_0, _1, _2> {
				pub when: runtime_types::pallet_multisig::Timepoint<_0>,
				pub deposit: _1,
				pub depositor: _2,
				pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Timepoint<_0> {
				pub height: _0,
				pub index: ::core::primitive::u32,
			}
		}
		pub mod pallet_preimage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::note_preimage`]."]
					note_preimage { bytes: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					#[doc = "See [`Pallet::unnote_preimage`]."]
					unnote_preimage { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::request_preimage`]."]
					request_preimage { hash: ::subxt::utils::H256 },
					#[codec(index = 3)]
					#[doc = "See [`Pallet::unrequest_preimage`]."]
					unrequest_preimage { hash: ::subxt::utils::H256 },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::ensure_updated`]."]
					ensure_updated { hashes: ::std::vec::Vec<::subxt::utils::H256> },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Preimage is too large to store on-chain."]
					TooBig,
					#[codec(index = 1)]
					#[doc = "Preimage has already been noted on-chain."]
					AlreadyNoted,
					#[codec(index = 2)]
					#[doc = "The user is not authorized to perform this action."]
					NotAuthorized,
					#[codec(index = 3)]
					#[doc = "The preimage cannot be removed since it has not yet been noted."]
					NotNoted,
					#[codec(index = 4)]
					#[doc = "A preimage may not be removed when there are outstanding requests."]
					Requested,
					#[codec(index = 5)]
					#[doc = "The preimage request cannot be removed since no outstanding requests exist."]
					NotRequested,
					#[codec(index = 6)]
					#[doc = "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."]
					TooMany,
					#[codec(index = 7)]
					#[doc = "Too few hashes were requested to be upgraded (i.e. zero)."]
					TooFew,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A preimage has been noted."]
					Noted { hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					#[doc = "A preimage has been requested."]
					Requested { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					#[doc = "A preimage has ben cleared."]
					Cleared { hash: ::subxt::utils::H256 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum HoldReason {
					#[codec(index = 0)]
					Preimage,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum OldRequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested { deposit: (_0, _1), len: ::core::primitive::u32 },
				#[codec(index = 1)]
				Requested {
					deposit: ::core::option::Option<(_0, _1)>,
					count: ::core::primitive::u32,
					len: ::core::option::Option<::core::primitive::u32>,
				},
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested { ticket: (_0, _1), len: ::core::primitive::u32 },
				#[codec(index = 1)]
				Requested {
					maybe_ticket: ::core::option::Option<(_0, _1)>,
					count: ::core::primitive::u32,
					maybe_len: ::core::option::Option<::core::primitive::u32>,
				},
			}
		}
		pub mod pallet_prices {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::set_price`]."]
					set_price {
						asset_id: runtime_types::tangle_primitives::currency::CurrencyId,
						price: runtime_types::sp_arithmetic::fixed_point::FixedU128,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::reset_price`]."]
					reset_price { asset_id: runtime_types::tangle_primitives::currency::CurrencyId },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::set_foreign_asset`]."]
					set_foreign_asset {
						foreign_asset_id: runtime_types::tangle_primitives::currency::CurrencyId,
						asset_id: runtime_types::tangle_primitives::currency::CurrencyId,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Set emergency price. \\[asset_id, price_detail\\]"]
					SetPrice(
						runtime_types::tangle_primitives::currency::CurrencyId,
						runtime_types::sp_arithmetic::fixed_point::FixedU128,
					),
					#[codec(index = 1)]
					#[doc = "Reset emergency price. \\[asset_id\\]"]
					ResetPrice(runtime_types::tangle_primitives::currency::CurrencyId),
				}
			}
		}
		pub mod pallet_proxy {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::proxy`]."]
					proxy {
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						force_proxy_type:
							::core::option::Option<runtime_types::tangle_kusama_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::add_proxy`]."]
					add_proxy {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::tangle_kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::remove_proxy`]."]
					remove_proxy {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::tangle_kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::remove_proxies`]."]
					remove_proxies,
					#[codec(index = 4)]
					#[doc = "See [`Pallet::create_pure`]."]
					create_pure {
						proxy_type: runtime_types::tangle_kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
						index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::kill_pure`]."]
					kill_pure {
						spawner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::tangle_kusama_runtime::ProxyType,
						index: ::core::primitive::u16,
						#[codec(compact)]
						height: ::core::primitive::u32,
						#[codec(compact)]
						ext_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::announce`]."]
					announce {
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::remove_announcement`]."]
					remove_announcement {
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::reject_announcement`]."]
					reject_announcement {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::proxy_announced`]."]
					proxy_announced {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						force_proxy_type:
							::core::option::Option<runtime_types::tangle_kusama_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "There are too many proxies registered or too many announcements pending."]
					TooMany,
					#[codec(index = 1)]
					#[doc = "Proxy registration not found."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Sender is not a proxy of the account to be proxied."]
					NotProxy,
					#[codec(index = 3)]
					#[doc = "A call which is incompatible with the proxy type's filter was attempted."]
					Unproxyable,
					#[codec(index = 4)]
					#[doc = "Account is already a proxy."]
					Duplicate,
					#[codec(index = 5)]
					#[doc = "Call may not be made by proxy because it may escalate its privileges."]
					NoPermission,
					#[codec(index = 6)]
					#[doc = "Announcement, if made at all, was made too recently."]
					Unannounced,
					#[codec(index = 7)]
					#[doc = "Cannot add self as proxy."]
					NoSelfProxy,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A proxy was executed correctly, with the given."]
					ProxyExecuted {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					#[doc = "A pure account has been created by new proxy with given"]
					#[doc = "disambiguation index and proxy type."]
					PureCreated {
						pure: ::subxt::utils::AccountId32,
						who: ::subxt::utils::AccountId32,
						proxy_type: runtime_types::tangle_kusama_runtime::ProxyType,
						disambiguation_index: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					#[doc = "An announcement was placed to make a call in the future."]
					Announced {
						real: ::subxt::utils::AccountId32,
						proxy: ::subxt::utils::AccountId32,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 3)]
					#[doc = "A proxy was added."]
					ProxyAdded {
						delegator: ::subxt::utils::AccountId32,
						delegatee: ::subxt::utils::AccountId32,
						proxy_type: runtime_types::tangle_kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A proxy was removed."]
					ProxyRemoved {
						delegator: ::subxt::utils::AccountId32,
						delegatee: ::subxt::utils::AccountId32,
						proxy_type: runtime_types::tangle_kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Announcement<_0, _1, _2> {
				pub real: _0,
				pub call_hash: _1,
				pub height: _2,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProxyDefinition<_0, _1, _2> {
				pub delegate: _0,
				pub proxy_type: _1,
				pub delay: _2,
			}
		}
		pub mod pallet_ranked_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::add_member`]."]
					add_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::promote_member`]."]
					promote_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::demote_member`]."]
					demote_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::remove_member`]."]
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						min_rank: ::core::primitive::u16,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::vote`]."]
					vote { poll: ::core::primitive::u32, aye: ::core::primitive::bool },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::cleanup_poll`]."]
					cleanup_poll { poll_index: ::core::primitive::u32, max: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Account is already a member."]
					AlreadyMember,
					#[codec(index = 1)]
					#[doc = "Account is not a member."]
					NotMember,
					#[codec(index = 2)]
					#[doc = "The given poll index is unknown or has closed."]
					NotPolling,
					#[codec(index = 3)]
					#[doc = "The given poll is still ongoing."]
					Ongoing,
					#[codec(index = 4)]
					#[doc = "There are no further records to be removed."]
					NoneRemaining,
					#[codec(index = 5)]
					#[doc = "Unexpected error in state."]
					Corruption,
					#[codec(index = 6)]
					#[doc = "The member's rank is too low to vote."]
					RankTooLow,
					#[codec(index = 7)]
					#[doc = "The information provided is incorrect."]
					InvalidWitness,
					#[codec(index = 8)]
					#[doc = "The origin is not sufficiently privileged to do the operation."]
					NoPermission,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A member `who` has been added."]
					MemberAdded { who: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					#[doc = "The member `who`se rank has been changed to the given `rank`."]
					RankChanged { who: ::subxt::utils::AccountId32, rank: ::core::primitive::u16 },
					#[codec(index = 2)]
					#[doc = "The member `who` of given `rank` has been removed from the collective."]
					MemberRemoved { who: ::subxt::utils::AccountId32, rank: ::core::primitive::u16 },
					#[codec(index = 3)]
					#[doc = "The member `who` has voted for the `poll` with the given `vote` leading to an updated"]
					#[doc = "`tally`."]
					Voted {
						who: ::subxt::utils::AccountId32,
						poll: ::core::primitive::u32,
						vote: runtime_types::pallet_ranked_collective::VoteRecord,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MemberRecord {
				pub rank: ::core::primitive::u16,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Tally {
				pub bare_ayes: ::core::primitive::u32,
				pub ayes: ::core::primitive::u32,
				pub nays: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VoteRecord {
				#[codec(index = 0)]
				Aye(::core::primitive::u32),
				#[codec(index = 1)]
				Nay(::core::primitive::u32),
			}
		}
		pub mod pallet_referenda {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::submit`]."]
					submit {
						proposal_origin:
							::std::boxed::Box<runtime_types::tangle_kusama_runtime::OriginCaller>,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						enactment_moment:
							runtime_types::frame_support::traits::schedule::DispatchTime<
								::core::primitive::u32,
							>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::place_decision_deposit`]."]
					place_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::refund_decision_deposit`]."]
					refund_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "See [`Pallet::cancel`]."]
					cancel { index: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::kill`]."]
					kill { index: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::nudge_referendum`]."]
					nudge_referendum { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "See [`Pallet::one_fewer_deciding`]."]
					one_fewer_deciding { track: ::core::primitive::u16 },
					#[codec(index = 7)]
					#[doc = "See [`Pallet::refund_submission_deposit`]."]
					refund_submission_deposit { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					#[doc = "See [`Pallet::set_metadata`]."]
					set_metadata {
						index: ::core::primitive::u32,
						maybe_hash: ::core::option::Option<::subxt::utils::H256>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call2 {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::submit`]."]
					submit {
						proposal_origin:
							::std::boxed::Box<runtime_types::tangle_kusama_runtime::OriginCaller>,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						enactment_moment:
							runtime_types::frame_support::traits::schedule::DispatchTime<
								::core::primitive::u32,
							>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::place_decision_deposit`]."]
					place_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::refund_decision_deposit`]."]
					refund_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "See [`Pallet::cancel`]."]
					cancel { index: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::kill`]."]
					kill { index: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::nudge_referendum`]."]
					nudge_referendum { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "See [`Pallet::one_fewer_deciding`]."]
					one_fewer_deciding { track: ::core::primitive::u16 },
					#[codec(index = 7)]
					#[doc = "See [`Pallet::refund_submission_deposit`]."]
					refund_submission_deposit { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					#[doc = "See [`Pallet::set_metadata`]."]
					set_metadata {
						index: ::core::primitive::u32,
						maybe_hash: ::core::option::Option<::subxt::utils::H256>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Referendum is not ongoing."]
					NotOngoing,
					#[codec(index = 1)]
					#[doc = "Referendum's decision deposit is already paid."]
					HasDeposit,
					#[codec(index = 2)]
					#[doc = "The track identifier given was invalid."]
					BadTrack,
					#[codec(index = 3)]
					#[doc = "There are already a full complement of referenda in progress for this track."]
					Full,
					#[codec(index = 4)]
					#[doc = "The queue of the track is empty."]
					QueueEmpty,
					#[codec(index = 5)]
					#[doc = "The referendum index provided is invalid in this context."]
					BadReferendum,
					#[codec(index = 6)]
					#[doc = "There was nothing to do in the advancement."]
					NothingToDo,
					#[codec(index = 7)]
					#[doc = "No track exists for the proposal origin."]
					NoTrack,
					#[codec(index = 8)]
					#[doc = "Any deposit cannot be refunded until after the decision is over."]
					Unfinished,
					#[codec(index = 9)]
					#[doc = "The deposit refunder is not the depositor."]
					NoPermission,
					#[codec(index = 10)]
					#[doc = "The deposit cannot be refunded since none was made."]
					NoDeposit,
					#[codec(index = 11)]
					#[doc = "The referendum status is invalid for this operation."]
					BadStatus,
					#[codec(index = 12)]
					#[doc = "The preimage does not exist."]
					PreimageNotExist,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error2 {
					#[codec(index = 0)]
					#[doc = "Referendum is not ongoing."]
					NotOngoing,
					#[codec(index = 1)]
					#[doc = "Referendum's decision deposit is already paid."]
					HasDeposit,
					#[codec(index = 2)]
					#[doc = "The track identifier given was invalid."]
					BadTrack,
					#[codec(index = 3)]
					#[doc = "There are already a full complement of referenda in progress for this track."]
					Full,
					#[codec(index = 4)]
					#[doc = "The queue of the track is empty."]
					QueueEmpty,
					#[codec(index = 5)]
					#[doc = "The referendum index provided is invalid in this context."]
					BadReferendum,
					#[codec(index = 6)]
					#[doc = "There was nothing to do in the advancement."]
					NothingToDo,
					#[codec(index = 7)]
					#[doc = "No track exists for the proposal origin."]
					NoTrack,
					#[codec(index = 8)]
					#[doc = "Any deposit cannot be refunded until after the decision is over."]
					Unfinished,
					#[codec(index = 9)]
					#[doc = "The deposit refunder is not the depositor."]
					NoPermission,
					#[codec(index = 10)]
					#[doc = "The deposit cannot be refunded since none was made."]
					NoDeposit,
					#[codec(index = 11)]
					#[doc = "The referendum status is invalid for this operation."]
					BadStatus,
					#[codec(index = 12)]
					#[doc = "The preimage does not exist."]
					PreimageNotExist,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A referendum has been submitted."]
					Submitted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					},
					#[codec(index = 1)]
					#[doc = "The decision deposit has been placed."]
					DecisionDepositPlaced {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "The decision deposit has been refunded."]
					DecisionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A deposit has been slashaed."]
					DepositSlashed {
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "A referendum has moved into the deciding phase."]
					DecisionStarted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 5)]
					ConfirmStarted { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					ConfirmAborted { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A referendum has ended its confirmation phase and is ready for approval."]
					Confirmed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 8)]
					#[doc = "A referendum has been approved and its proposal has been scheduled."]
					Approved { index: ::core::primitive::u32 },
					#[codec(index = 9)]
					#[doc = "A proposal has been rejected by referendum."]
					Rejected {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 10)]
					#[doc = "A referendum has been timed out without being decided."]
					TimedOut {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 11)]
					#[doc = "A referendum has been cancelled."]
					Cancelled {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 12)]
					#[doc = "A referendum has been killed."]
					Killed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 13)]
					#[doc = "The submission deposit has been refunded."]
					SubmissionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					#[doc = "Metadata for a referendum has been set."]
					MetadataSet { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
					#[codec(index = 15)]
					#[doc = "Metadata for a referendum has been cleared."]
					MetadataCleared { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event2 {
					#[codec(index = 0)]
					#[doc = "A referendum has been submitted."]
					Submitted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					},
					#[codec(index = 1)]
					#[doc = "The decision deposit has been placed."]
					DecisionDepositPlaced {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "The decision deposit has been refunded."]
					DecisionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A deposit has been slashaed."]
					DepositSlashed {
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "A referendum has moved into the deciding phase."]
					DecisionStarted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::tangle_kusama_runtime::RuntimeCall,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 5)]
					ConfirmStarted { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					ConfirmAborted { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A referendum has ended its confirmation phase and is ready for approval."]
					Confirmed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 8)]
					#[doc = "A referendum has been approved and its proposal has been scheduled."]
					Approved { index: ::core::primitive::u32 },
					#[codec(index = 9)]
					#[doc = "A proposal has been rejected by referendum."]
					Rejected {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 10)]
					#[doc = "A referendum has been timed out without being decided."]
					TimedOut {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 11)]
					#[doc = "A referendum has been cancelled."]
					Cancelled {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 12)]
					#[doc = "A referendum has been killed."]
					Killed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 13)]
					#[doc = "The submission deposit has been refunded."]
					SubmissionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					#[doc = "Metadata for a referendum has been set."]
					MetadataSet { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
					#[codec(index = 15)]
					#[doc = "Metadata for a referendum has been cleared."]
					MetadataCleared { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Curve {
					#[codec(index = 0)]
					LinearDecreasing {
						length: runtime_types::sp_arithmetic::per_things::Perbill,
						floor: runtime_types::sp_arithmetic::per_things::Perbill,
						ceil: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 1)]
					SteppedDecreasing {
						begin: runtime_types::sp_arithmetic::per_things::Perbill,
						end: runtime_types::sp_arithmetic::per_things::Perbill,
						step: runtime_types::sp_arithmetic::per_things::Perbill,
						period: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 2)]
					Reciprocal {
						factor: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						x_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						y_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DecidingStatus<_0> {
					pub since: _0,
					pub confirming: ::core::option::Option<_0>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Deposit<_0, _1> {
					pub who: _0,
					pub amount: _1,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ReferendumInfo<_0, _1, _2, _3, _4, _5, _6, _7> {
					#[codec(index = 0)]
					Ongoing(
						runtime_types::pallet_referenda::types::ReferendumStatus<
							_0,
							_1,
							_2,
							_3,
							_4,
							_5,
							_6,
							_7,
						>,
					),
					#[codec(index = 1)]
					Approved(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 2)]
					Rejected(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 3)]
					Cancelled(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 4)]
					TimedOut(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 5)]
					Killed(_2),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ReferendumStatus<_0, _1, _2, _3, _4, _5, _6, _7> {
					pub track: _0,
					pub origin: _1,
					pub proposal: _3,
					pub enactment: runtime_types::frame_support::traits::schedule::DispatchTime<_2>,
					pub submitted: _2,
					pub submission_deposit: runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					pub decision_deposit: ::core::option::Option<
						runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					>,
					pub deciding: ::core::option::Option<
						runtime_types::pallet_referenda::types::DecidingStatus<_2>,
					>,
					pub tally: _5,
					pub in_queue: ::core::primitive::bool,
					pub alarm: ::core::option::Option<(_2, _7)>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct TrackInfo<_0, _1> {
					pub name: ::std::string::String,
					pub max_deciding: ::core::primitive::u32,
					pub decision_deposit: _0,
					pub prepare_period: _1,
					pub decision_period: _1,
					pub confirm_period: _1,
					pub min_enactment_period: _1,
					pub min_approval: runtime_types::pallet_referenda::types::Curve,
					pub min_support: runtime_types::pallet_referenda::types::Curve,
				}
			}
		}
		pub mod pallet_scheduler {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::schedule`]."]
					schedule {
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::cancel`]."]
					cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::schedule_named`]."]
					schedule_named {
						id: [::core::primitive::u8; 32usize],
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::cancel_named`]."]
					cancel_named { id: [::core::primitive::u8; 32usize] },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::schedule_after`]."]
					schedule_after {
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::schedule_named_after`]."]
					schedule_named_after {
						id: [::core::primitive::u8; 32usize],
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Failed to schedule a call"]
					FailedToSchedule,
					#[codec(index = 1)]
					#[doc = "Cannot find the scheduled call."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Given target block number is in the past."]
					TargetBlockNumberInPast,
					#[codec(index = 3)]
					#[doc = "Reschedule failed because it does not change scheduled time."]
					RescheduleNoChange,
					#[codec(index = 4)]
					#[doc = "Attempt to use a non-named function on a named task."]
					Named,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Events type."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Scheduled some task."]
					Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "Canceled some task."]
					Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Dispatched some task."]
					Dispatched {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "The call for the provided hash was not found so the task has been aborted."]
					CallUnavailable {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 4)]
					#[doc = "The given task was unable to be renewed since the agenda is full at that block."]
					PeriodicFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 5)]
					#[doc = "The given task can never be executed since it is overweight."]
					PermanentlyOverweight {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Scheduled<_0, _1, _2, _3, _4> {
				pub maybe_id: ::core::option::Option<_0>,
				pub priority: ::core::primitive::u8,
				pub call: _1,
				pub maybe_periodic: ::core::option::Option<(_2, _2)>,
				pub origin: _3,
				#[codec(skip)]
				pub __ignore: ::core::marker::PhantomData<_4>,
			}
		}
		pub mod pallet_session {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::set_keys`]."]
					set_keys {
						keys: runtime_types::tangle_kusama_runtime::SessionKeys,
						proof: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::purge_keys`]."]
					purge_keys,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Error for the session pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Invalid ownership proof."]
					InvalidProof,
					#[codec(index = 1)]
					#[doc = "No associated validator ID for account."]
					NoAssociatedValidatorId,
					#[codec(index = 2)]
					#[doc = "Registered duplicate key."]
					DuplicatedKey,
					#[codec(index = 3)]
					#[doc = "No keys are associated with this account."]
					NoKeys,
					#[codec(index = 4)]
					#[doc = "Key setting account is not live, so it's impossible to associate keys."]
					NoAccount,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New session has happened. Note that the argument is the session index, not the"]
					#[doc = "block number as the type might suggest."]
					NewSession { session_index: ::core::primitive::u32 },
				}
			}
		}
		pub mod pallet_timestamp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::set`]."]
					set {
						#[codec(compact)]
						now: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_tips {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::report_awesome`]."]
					report_awesome {
						reason: ::std::vec::Vec<::core::primitive::u8>,
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::retract_tip`]."]
					retract_tip { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::tip_new`]."]
					tip_new {
						reason: ::std::vec::Vec<::core::primitive::u8>,
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						tip_value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::tip`]."]
					tip {
						hash: ::subxt::utils::H256,
						#[codec(compact)]
						tip_value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::close_tip`]."]
					close_tip { hash: ::subxt::utils::H256 },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::slash_tip`]."]
					slash_tip { hash: ::subxt::utils::H256 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The reason given is just too big."]
					ReasonTooBig,
					#[codec(index = 1)]
					#[doc = "The tip was already found/started."]
					AlreadyKnown,
					#[codec(index = 2)]
					#[doc = "The tip hash is unknown."]
					UnknownTip,
					#[codec(index = 3)]
					#[doc = "The tip given was too generous."]
					MaxTipAmountExceeded,
					#[codec(index = 4)]
					#[doc = "The account attempting to retract the tip is not the finder of the tip."]
					NotFinder,
					#[codec(index = 5)]
					#[doc = "The tip cannot be claimed/closed because there are not enough tippers yet."]
					StillOpen,
					#[codec(index = 6)]
					#[doc = "The tip cannot be claimed/closed because it's still in the countdown period."]
					Premature,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new tip suggestion has been opened."]
					NewTip { tip_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					#[doc = "A tip suggestion has reached threshold and is closing."]
					TipClosing { tip_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					#[doc = "A tip suggestion has been closed."]
					TipClosed {
						tip_hash: ::subxt::utils::H256,
						who: ::subxt::utils::AccountId32,
						payout: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A tip suggestion has been retracted."]
					TipRetracted { tip_hash: ::subxt::utils::H256 },
					#[codec(index = 4)]
					#[doc = "A tip suggestion has been slashed."]
					TipSlashed {
						tip_hash: ::subxt::utils::H256,
						finder: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OpenTip<_0, _1, _2, _3> {
				pub reason: _3,
				pub who: _0,
				pub finder: _0,
				pub deposit: _1,
				pub closes: ::core::option::Option<_2>,
				pub tips: ::std::vec::Vec<(_0, _1)>,
				pub finders_fee: ::core::primitive::bool,
			}
		}
		pub mod pallet_transaction_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
					#[doc = "has been paid by `who`."]
					TransactionFeePaid {
						who: ::subxt::utils::AccountId32,
						actual_fee: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct FeeDetails<_0> {
					pub inclusion_fee: ::core::option::Option<
						runtime_types::pallet_transaction_payment::types::InclusionFee<_0>,
					>,
					pub tip: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct InclusionFee<_0> {
					pub base_fee: _0,
					pub len_fee: _0,
					pub adjusted_weight_fee: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct RuntimeDispatchInfo<_0, _1> {
					pub weight: _1,
					pub class: runtime_types::frame_support::dispatch::DispatchClass,
					pub partial_fee: _0,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Releases {
				#[codec(index = 0)]
				V1Ancient,
				#[codec(index = 1)]
				V2,
			}
		}
		pub mod pallet_treasury {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::propose_spend`]."]
					propose_spend {
						#[codec(compact)]
						value: ::core::primitive::u128,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::reject_proposal`]."]
					reject_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::approve_proposal`]."]
					approve_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::spend_local`]."]
					spend_local {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::remove_approval`]."]
					remove_approval {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::spend`]."]
					spend {
						asset_kind: ::std::boxed::Box<()>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary: ::std::boxed::Box<::subxt::utils::AccountId32>,
						valid_from: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::payout`]."]
					payout { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "See [`Pallet::check_status`]."]
					check_status { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					#[doc = "See [`Pallet::void_spend`]."]
					void_spend { index: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Error for the treasury pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Proposer's balance is too low."]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					#[doc = "No proposal, bounty or spend at that index."]
					InvalidIndex,
					#[codec(index = 2)]
					#[doc = "Too many approvals in the queue."]
					TooManyApprovals,
					#[codec(index = 3)]
					#[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
					#[doc = "amount to be spent."]
					InsufficientPermission,
					#[codec(index = 4)]
					#[doc = "Proposal has not been approved."]
					ProposalNotApproved,
					#[codec(index = 5)]
					#[doc = "The balance of the asset kind is not convertible to the balance of the native asset."]
					FailedToConvertBalance,
					#[codec(index = 6)]
					#[doc = "The spend has expired and cannot be claimed."]
					SpendExpired,
					#[codec(index = 7)]
					#[doc = "The spend is not yet eligible for payout."]
					EarlyPayout,
					#[codec(index = 8)]
					#[doc = "The payment has already been attempted."]
					AlreadyAttempted,
					#[codec(index = 9)]
					#[doc = "There was some issue with the mechanism of payment."]
					PayoutError,
					#[codec(index = 10)]
					#[doc = "The payout was not yet attempted/claimed."]
					NotAttempted,
					#[codec(index = 11)]
					#[doc = "The payment has neither failed nor succeeded yet."]
					Inconclusive,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New proposal."]
					Proposed { proposal_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "We have ended a spend period and will now allocate funds."]
					Spending { budget_remaining: ::core::primitive::u128 },
					#[codec(index = 2)]
					#[doc = "Some funds have been allocated."]
					Awarded {
						proposal_index: ::core::primitive::u32,
						award: ::core::primitive::u128,
						account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "A proposal was rejected; funds were slashed."]
					Rejected {
						proposal_index: ::core::primitive::u32,
						slashed: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some of our funds have been burnt."]
					Burnt { burnt_funds: ::core::primitive::u128 },
					#[codec(index = 5)]
					#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
					Rollover { rollover_balance: ::core::primitive::u128 },
					#[codec(index = 6)]
					#[doc = "Some funds have been deposited."]
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 7)]
					#[doc = "A new spend proposal has been approved."]
					SpendApproved {
						proposal_index: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 8)]
					#[doc = "The inactive funds of the pallet have been updated."]
					UpdatedInactive {
						reactivated: ::core::primitive::u128,
						deactivated: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "A new asset spend proposal has been approved."]
					AssetSpendApproved {
						index: ::core::primitive::u32,
						asset_kind: (),
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::utils::AccountId32,
						valid_from: ::core::primitive::u32,
						expire_at: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "An approved spend was voided."]
					AssetSpendVoided { index: ::core::primitive::u32 },
					#[codec(index = 11)]
					#[doc = "A payment happened."]
					Paid { index: ::core::primitive::u32, payment_id: () },
					#[codec(index = 12)]
					#[doc = "A payment failed and can be retried."]
					PaymentFailed { index: ::core::primitive::u32, payment_id: () },
					#[codec(index = 13)]
					#[doc = "A spend was processed and removed from the storage. It might have been successfully"]
					#[doc = "paid or it may have expired."]
					SpendProcessed { index: ::core::primitive::u32 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum PaymentState<_0> {
				#[codec(index = 0)]
				Pending,
				#[codec(index = 1)]
				Attempted { id: _0 },
				#[codec(index = 2)]
				Failed,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Proposal<_0, _1> {
				pub proposer: _0,
				pub value: _1,
				pub beneficiary: _0,
				pub bond: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SpendStatus<_0, _1, _2, _3, _4> {
				pub asset_kind: _0,
				pub amount: _1,
				pub beneficiary: _2,
				pub valid_from: _3,
				pub expire_at: _3,
				pub status: runtime_types::pallet_treasury::PaymentState<_0>,
				#[codec(skip)]
				pub __ignore: ::core::marker::PhantomData<_4>,
			}
		}
		pub mod pallet_utility {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::batch`]."]
					batch {
						calls: ::std::vec::Vec<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::as_derivative`]."]
					as_derivative {
						index: ::core::primitive::u16,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::batch_all`]."]
					batch_all {
						calls: ::std::vec::Vec<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::dispatch_as`]."]
					dispatch_as {
						as_origin:
							::std::boxed::Box<runtime_types::tangle_kusama_runtime::OriginCaller>,
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::force_batch`]."]
					force_batch {
						calls: ::std::vec::Vec<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::with_weight`]."]
					with_weight {
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many calls batched."]
					TooManyCalls,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
					#[doc = "well as the error."]
					BatchInterrupted {
						index: ::core::primitive::u32,
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 1)]
					#[doc = "Batch of dispatches completed fully with no error."]
					BatchCompleted,
					#[codec(index = 2)]
					#[doc = "Batch of dispatches completed but has errors."]
					BatchCompletedWithErrors,
					#[codec(index = 3)]
					#[doc = "A single item within a Batch of dispatches has completed with no error."]
					ItemCompleted,
					#[codec(index = 4)]
					#[doc = "A single item within a Batch of dispatches has completed with error."]
					ItemFailed { error: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 5)]
					#[doc = "A call was dispatched."]
					DispatchedAs {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_whitelist {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::whitelist_call`]."]
					whitelist_call { call_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					#[doc = "See [`Pallet::remove_whitelisted_call`]."]
					remove_whitelisted_call { call_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::dispatch_whitelisted_call`]."]
					dispatch_whitelisted_call {
						call_hash: ::subxt::utils::H256,
						call_encoded_len: ::core::primitive::u32,
						call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."]
					dispatch_whitelisted_call_with_preimage {
						call: ::std::boxed::Box<runtime_types::tangle_kusama_runtime::RuntimeCall>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The preimage of the call hash could not be loaded."]
					UnavailablePreImage,
					#[codec(index = 1)]
					#[doc = "The call could not be decoded."]
					UndecodableCall,
					#[codec(index = 2)]
					#[doc = "The weight of the decoded call was higher than the witness."]
					InvalidCallWeightWitness,
					#[codec(index = 3)]
					#[doc = "The call was not whitelisted."]
					CallIsNotWhitelisted,
					#[codec(index = 4)]
					#[doc = "The call was already whitelisted; No-Op."]
					CallAlreadyWhitelisted,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					CallWhitelisted { call_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					WhitelistedCallRemoved { call_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					WhitelistedCallDispatched {
						call_hash: ::subxt::utils::H256,
						result: ::core::result::Result<
							runtime_types::frame_support::dispatch::PostDispatchInfo,
							runtime_types::sp_runtime::DispatchErrorWithPostInfo<
								runtime_types::frame_support::dispatch::PostDispatchInfo,
							>,
						>,
					},
				}
			}
		}
		pub mod pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::send`]."]
					send {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::teleport_assets`]."]
					teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::reserve_transfer_assets`]."]
					reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::execute`]."]
					execute {
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm2>,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::force_xcm_version`]."]
					force_xcm_version {
						location: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						version: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::force_default_xcm_version`]."]
					force_default_xcm_version {
						maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::force_subscribe_version_notify`]."]
					force_subscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::force_unsubscribe_version_notify`]."]
					force_unsubscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::limited_reserve_transfer_assets`]."]
					limited_reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::limited_teleport_assets`]."]
					limited_teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::force_suspension`]."]
					force_suspension { suspended: ::core::primitive::bool },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
					#[doc = "to it."]
					Unreachable,
					#[codec(index = 1)]
					#[doc = "There was some other issue (i.e. not to do with routing) in sending the message."]
					#[doc = "Perhaps a lack of space for buffering the message."]
					SendFailure,
					#[codec(index = 2)]
					#[doc = "The message execution fails the filter."]
					Filtered,
					#[codec(index = 3)]
					#[doc = "The message's weight could not be determined."]
					UnweighableMessage,
					#[codec(index = 4)]
					#[doc = "The destination `MultiLocation` provided cannot be inverted."]
					DestinationNotInvertible,
					#[codec(index = 5)]
					#[doc = "The assets to be sent are empty."]
					Empty,
					#[codec(index = 6)]
					#[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
					CannotReanchor,
					#[codec(index = 7)]
					#[doc = "Too many assets have been attempted for transfer."]
					TooManyAssets,
					#[codec(index = 8)]
					#[doc = "Origin is invalid for sending."]
					InvalidOrigin,
					#[codec(index = 9)]
					#[doc = "The version of the `Versioned` value used is not able to be interpreted."]
					BadVersion,
					#[codec(index = 10)]
					#[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
					#[doc = "desired version of XCM)."]
					BadLocation,
					#[codec(index = 11)]
					#[doc = "The referenced subscription could not be found."]
					NoSubscription,
					#[codec(index = 12)]
					#[doc = "The location is invalid since it already has a subscription from us."]
					AlreadySubscribed,
					#[codec(index = 13)]
					#[doc = "Invalid asset for the operation."]
					InvalidAsset,
					#[codec(index = 14)]
					#[doc = "The owner does not own (all) of the asset that they wish to do the operation on."]
					LowBalance,
					#[codec(index = 15)]
					#[doc = "The asset owner has too many locks on the asset."]
					TooManyLocks,
					#[codec(index = 16)]
					#[doc = "The given account is not an identifiable sovereign account for any location."]
					AccountNotSovereign,
					#[codec(index = 17)]
					#[doc = "The operation required fees to be paid which the initiator could not meet."]
					FeesNotMet,
					#[codec(index = 18)]
					#[doc = "A remote lock with the corresponding data could not be found."]
					LockNotFound,
					#[codec(index = 19)]
					#[doc = "The unlock operation cannot succeed because there are still consumers of the lock."]
					InUse,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Execution of an XCM message was attempted."]
					Attempted { outcome: runtime_types::xcm::v3::traits::Outcome },
					#[codec(index = 1)]
					#[doc = "A XCM message was sent."]
					Sent {
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						message: runtime_types::xcm::v3::Xcm,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					#[doc = "Query response received which does not match a registered query. This may be because a"]
					#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
					#[doc = "because the query timed out."]
					UnexpectedResponse {
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
					#[doc = "no registered notification call."]
					ResponseReady {
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
					},
					#[codec(index = 4)]
					#[doc = "Query response has been received and query is removed. The registered notification has"]
					#[doc = "been dispatched and executed successfully."]
					Notified {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
					},
					#[codec(index = 5)]
					#[doc = "Query response has been received and query is removed. The registered notification"]
					#[doc = "could not be dispatched because the dispatch weight is greater than the maximum weight"]
					#[doc = "originally budgeted by this runtime for the query result."]
					NotifyOverweight {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
						actual_weight: runtime_types::sp_weights::weight_v2::Weight,
						max_budgeted_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 6)]
					#[doc = "Query response has been received and query is removed. There was a general error with"]
					#[doc = "dispatching the notification call."]
					NotifyDispatchError {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
					},
					#[codec(index = 7)]
					#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
					#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
					#[doc = "is not `(origin, QueryId, Response)`."]
					NotifyDecodeFailed {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
					},
					#[codec(index = 8)]
					#[doc = "Expected query response has been received but the origin location of the response does"]
					#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
					#[doc = "be received and acted upon."]
					InvalidResponder {
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						query_id: ::core::primitive::u64,
						expected_location: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 9)]
					#[doc = "Expected query response has been received but the expected origin location placed in"]
					#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
					#[doc = ""]
					#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
					#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
					#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
					#[doc = "needed."]
					InvalidResponderVersion {
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 10)]
					#[doc = "Received query response has been read and removed."]
					ResponseTaken { query_id: ::core::primitive::u64 },
					#[codec(index = 11)]
					#[doc = "Some assets have been placed in an asset trap."]
					AssetsTrapped {
						hash: ::subxt::utils::H256,
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						assets: runtime_types::xcm::VersionedMultiAssets,
					},
					#[codec(index = 12)]
					#[doc = "An XCM version change notification message has been attempted to be sent."]
					#[doc = ""]
					#[doc = "The cost of sending it (borne by the chain) is included."]
					VersionChangeNotified {
						destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						result: ::core::primitive::u32,
						cost: runtime_types::xcm::v3::multiasset::MultiAssets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 13)]
					#[doc = "The supported version of a location has been changed. This might be through an"]
					#[doc = "automatic notification or a manual intervention."]
					SupportedVersionChanged {
						location: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						version: ::core::primitive::u32,
					},
					#[codec(index = 14)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "sending the notification to it."]
					NotifyTargetSendFail {
						location: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						query_id: ::core::primitive::u64,
						error: runtime_types::xcm::v3::traits::Error,
					},
					#[codec(index = 15)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "migrating the location to our new XCM format."]
					NotifyTargetMigrationFail {
						location: runtime_types::xcm::VersionedMultiLocation,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 16)]
					#[doc = "Expected query response has been received but the expected querier location placed in"]
					#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
					#[doc = ""]
					#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
					#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
					#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
					#[doc = "needed."]
					InvalidQuerierVersion {
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 17)]
					#[doc = "Expected query response has been received but the querier location of the response does"]
					#[doc = "not match the expected. The query remains registered for a later, valid, response to"]
					#[doc = "be received and acted upon."]
					InvalidQuerier {
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						query_id: ::core::primitive::u64,
						expected_querier:
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						maybe_actual_querier: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 18)]
					#[doc = "A remote has requested XCM version change notification from us and we have honored it."]
					#[doc = "A version information message is sent to them and its cost is included."]
					VersionNotifyStarted {
						destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						cost: runtime_types::xcm::v3::multiasset::MultiAssets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 19)]
					#[doc = "We have requested that a remote chain send us XCM version change notifications."]
					VersionNotifyRequested {
						destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						cost: runtime_types::xcm::v3::multiasset::MultiAssets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 20)]
					#[doc = "We have requested that a remote chain stops sending us XCM version change"]
					#[doc = "notifications."]
					VersionNotifyUnrequested {
						destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						cost: runtime_types::xcm::v3::multiasset::MultiAssets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 21)]
					#[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
					FeesPaid {
						paying: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						fees: runtime_types::xcm::v3::multiasset::MultiAssets,
					},
					#[codec(index = 22)]
					#[doc = "Some assets have been claimed from an asset trap"]
					AssetsClaimed {
						hash: ::subxt::utils::H256,
						origin: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						assets: runtime_types::xcm::VersionedMultiAssets,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Origin {
					#[codec(index = 0)]
					Xcm(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
					#[codec(index = 1)]
					Response(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum QueryStatus<_0> {
					#[codec(index = 0)]
					Pending {
						responder: runtime_types::xcm::VersionedMultiLocation,
						maybe_match_querier:
							::core::option::Option<runtime_types::xcm::VersionedMultiLocation>,
						maybe_notify:
							::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
						timeout: _0,
					},
					#[codec(index = 1)]
					VersionNotifier {
						origin: runtime_types::xcm::VersionedMultiLocation,
						is_active: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					Ready { response: runtime_types::xcm::VersionedResponse, at: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct RemoteLockedFungibleRecord<_0> {
					pub amount: ::core::primitive::u128,
					pub owner: runtime_types::xcm::VersionedMultiLocation,
					pub locker: runtime_types::xcm::VersionedMultiLocation,
					pub consumers: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_0,
						::core::primitive::u128,
					)>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum VersionMigrationStage {
					#[codec(index = 0)]
					MigrateSupportedVersion,
					#[codec(index = 1)]
					MigrateVersionNotifiers,
					#[codec(index = 2)]
					NotifyCurrentTargets(
						::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					),
					#[codec(index = 3)]
					MigrateAndNotifyOldTargets,
				}
			}
		}
		pub mod polkadot_core_primitives {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InboundDownwardMessage<_0> {
				pub sent_at: _0,
				pub msg: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InboundHrmpMessage<_0> {
				pub sent_at: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OutboundHrmpMessage<_0> {
				pub recipient: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod polkadot_parachain_primitives {
			use super::runtime_types;
			pub mod primitives {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Id(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ValidationCode(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum XcmpMessageFormat {
					#[codec(index = 0)]
					ConcatenatedVersionedXcm,
					#[codec(index = 1)]
					ConcatenatedEncodedBlob,
					#[codec(index = 2)]
					Signals,
				}
			}
		}
		pub mod polkadot_primitives {
			use super::runtime_types;
			pub mod v6 {
				use super::runtime_types;
				pub mod async_backing {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct AsyncBackingParams {
						pub max_candidate_depth: ::core::primitive::u32,
						pub allowed_ancestry_len: ::core::primitive::u32,
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AbridgedHostConfiguration {
					pub max_code_size: ::core::primitive::u32,
					pub max_head_data_size: ::core::primitive::u32,
					pub max_upward_queue_count: ::core::primitive::u32,
					pub max_upward_queue_size: ::core::primitive::u32,
					pub max_upward_message_size: ::core::primitive::u32,
					pub max_upward_message_num_per_candidate: ::core::primitive::u32,
					pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
					pub validation_upgrade_cooldown: ::core::primitive::u32,
					pub validation_upgrade_delay: ::core::primitive::u32,
					pub async_backing_params:
						runtime_types::polkadot_primitives::v6::async_backing::AsyncBackingParams,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AbridgedHrmpChannel {
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
					pub max_message_size: ::core::primitive::u32,
					pub msg_count: ::core::primitive::u32,
					pub total_size: ::core::primitive::u32,
					pub mqc_head: ::core::option::Option<::subxt::utils::H256>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PersistedValidationData<_0, _1> {
					pub parent_head:
						runtime_types::polkadot_parachain_primitives::primitives::HeadData,
					pub relay_parent_number: _1,
					pub relay_parent_storage_root: _0,
					pub max_pov_size: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum UpgradeGoAhead {
					#[codec(index = 0)]
					Abort,
					#[codec(index = 1)]
					GoAhead,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum UpgradeRestriction {
					#[codec(index = 0)]
					Present,
				}
			}
		}
		pub mod primitive_types {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct U256(pub [::core::primitive::u64; 4usize]);
		}
		pub mod sp_arithmetic {
			use super::runtime_types;
			pub mod fixed_point {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct FixedI64(pub ::core::primitive::i64);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct FixedU128(pub ::core::primitive::u128);
			}
			pub mod per_things {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Perbill(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Percent(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Permill(pub ::core::primitive::u32);
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ArithmeticError {
				#[codec(index = 0)]
				Underflow,
				#[codec(index = 1)]
				Overflow,
				#[codec(index = 2)]
				DivisionByZero,
			}
		}
		pub mod sp_consensus_aura {
			use super::runtime_types;
			pub mod sr25519 {
				use super::runtime_types;
				pub mod app_sr25519 {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
				}
			}
		}
		pub mod sp_consensus_slots {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Slot(pub ::core::primitive::u64);
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SlotDuration(pub ::core::primitive::u64);
		}
		pub mod sp_core {
			use super::runtime_types;
			pub mod crypto {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
			}
			pub mod ecdsa {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Signature(pub [::core::primitive::u8; 65usize]);
			}
			pub mod ed25519 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			pub mod sr25519 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OpaqueMetadata(pub ::std::vec::Vec<::core::primitive::u8>);
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Void {}
		}
		pub mod sp_inherents {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CheckInherentsResult {
				pub okay: ::core::primitive::bool,
				pub fatal_error: ::core::primitive::bool,
				pub errors: runtime_types::sp_inherents::InherentData,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InherentData {
				pub data: ::subxt::utils::KeyedVec<
					[::core::primitive::u8; 8usize],
					::std::vec::Vec<::core::primitive::u8>,
				>,
			}
		}
		pub mod sp_runtime {
			use super::runtime_types;
			pub mod generic {
				use super::runtime_types;
				pub mod block {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Block<_0, _1> {
						pub header: _0,
						pub extrinsics: ::std::vec::Vec<_1>,
					}
				}
				pub mod digest {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Digest {
						pub logs:
							::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum DigestItem {
						#[codec(index = 6)]
						PreRuntime(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 4)]
						Consensus(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 5)]
						Seal(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 0)]
						Other(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						RuntimeEnvironmentUpdated,
					}
				}
				pub mod era {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Era {
						#[codec(index = 0)]
						Immortal,
						#[codec(index = 1)]
						Mortal1(::core::primitive::u8),
						#[codec(index = 2)]
						Mortal2(::core::primitive::u8),
						#[codec(index = 3)]
						Mortal3(::core::primitive::u8),
						#[codec(index = 4)]
						Mortal4(::core::primitive::u8),
						#[codec(index = 5)]
						Mortal5(::core::primitive::u8),
						#[codec(index = 6)]
						Mortal6(::core::primitive::u8),
						#[codec(index = 7)]
						Mortal7(::core::primitive::u8),
						#[codec(index = 8)]
						Mortal8(::core::primitive::u8),
						#[codec(index = 9)]
						Mortal9(::core::primitive::u8),
						#[codec(index = 10)]
						Mortal10(::core::primitive::u8),
						#[codec(index = 11)]
						Mortal11(::core::primitive::u8),
						#[codec(index = 12)]
						Mortal12(::core::primitive::u8),
						#[codec(index = 13)]
						Mortal13(::core::primitive::u8),
						#[codec(index = 14)]
						Mortal14(::core::primitive::u8),
						#[codec(index = 15)]
						Mortal15(::core::primitive::u8),
						#[codec(index = 16)]
						Mortal16(::core::primitive::u8),
						#[codec(index = 17)]
						Mortal17(::core::primitive::u8),
						#[codec(index = 18)]
						Mortal18(::core::primitive::u8),
						#[codec(index = 19)]
						Mortal19(::core::primitive::u8),
						#[codec(index = 20)]
						Mortal20(::core::primitive::u8),
						#[codec(index = 21)]
						Mortal21(::core::primitive::u8),
						#[codec(index = 22)]
						Mortal22(::core::primitive::u8),
						#[codec(index = 23)]
						Mortal23(::core::primitive::u8),
						#[codec(index = 24)]
						Mortal24(::core::primitive::u8),
						#[codec(index = 25)]
						Mortal25(::core::primitive::u8),
						#[codec(index = 26)]
						Mortal26(::core::primitive::u8),
						#[codec(index = 27)]
						Mortal27(::core::primitive::u8),
						#[codec(index = 28)]
						Mortal28(::core::primitive::u8),
						#[codec(index = 29)]
						Mortal29(::core::primitive::u8),
						#[codec(index = 30)]
						Mortal30(::core::primitive::u8),
						#[codec(index = 31)]
						Mortal31(::core::primitive::u8),
						#[codec(index = 32)]
						Mortal32(::core::primitive::u8),
						#[codec(index = 33)]
						Mortal33(::core::primitive::u8),
						#[codec(index = 34)]
						Mortal34(::core::primitive::u8),
						#[codec(index = 35)]
						Mortal35(::core::primitive::u8),
						#[codec(index = 36)]
						Mortal36(::core::primitive::u8),
						#[codec(index = 37)]
						Mortal37(::core::primitive::u8),
						#[codec(index = 38)]
						Mortal38(::core::primitive::u8),
						#[codec(index = 39)]
						Mortal39(::core::primitive::u8),
						#[codec(index = 40)]
						Mortal40(::core::primitive::u8),
						#[codec(index = 41)]
						Mortal41(::core::primitive::u8),
						#[codec(index = 42)]
						Mortal42(::core::primitive::u8),
						#[codec(index = 43)]
						Mortal43(::core::primitive::u8),
						#[codec(index = 44)]
						Mortal44(::core::primitive::u8),
						#[codec(index = 45)]
						Mortal45(::core::primitive::u8),
						#[codec(index = 46)]
						Mortal46(::core::primitive::u8),
						#[codec(index = 47)]
						Mortal47(::core::primitive::u8),
						#[codec(index = 48)]
						Mortal48(::core::primitive::u8),
						#[codec(index = 49)]
						Mortal49(::core::primitive::u8),
						#[codec(index = 50)]
						Mortal50(::core::primitive::u8),
						#[codec(index = 51)]
						Mortal51(::core::primitive::u8),
						#[codec(index = 52)]
						Mortal52(::core::primitive::u8),
						#[codec(index = 53)]
						Mortal53(::core::primitive::u8),
						#[codec(index = 54)]
						Mortal54(::core::primitive::u8),
						#[codec(index = 55)]
						Mortal55(::core::primitive::u8),
						#[codec(index = 56)]
						Mortal56(::core::primitive::u8),
						#[codec(index = 57)]
						Mortal57(::core::primitive::u8),
						#[codec(index = 58)]
						Mortal58(::core::primitive::u8),
						#[codec(index = 59)]
						Mortal59(::core::primitive::u8),
						#[codec(index = 60)]
						Mortal60(::core::primitive::u8),
						#[codec(index = 61)]
						Mortal61(::core::primitive::u8),
						#[codec(index = 62)]
						Mortal62(::core::primitive::u8),
						#[codec(index = 63)]
						Mortal63(::core::primitive::u8),
						#[codec(index = 64)]
						Mortal64(::core::primitive::u8),
						#[codec(index = 65)]
						Mortal65(::core::primitive::u8),
						#[codec(index = 66)]
						Mortal66(::core::primitive::u8),
						#[codec(index = 67)]
						Mortal67(::core::primitive::u8),
						#[codec(index = 68)]
						Mortal68(::core::primitive::u8),
						#[codec(index = 69)]
						Mortal69(::core::primitive::u8),
						#[codec(index = 70)]
						Mortal70(::core::primitive::u8),
						#[codec(index = 71)]
						Mortal71(::core::primitive::u8),
						#[codec(index = 72)]
						Mortal72(::core::primitive::u8),
						#[codec(index = 73)]
						Mortal73(::core::primitive::u8),
						#[codec(index = 74)]
						Mortal74(::core::primitive::u8),
						#[codec(index = 75)]
						Mortal75(::core::primitive::u8),
						#[codec(index = 76)]
						Mortal76(::core::primitive::u8),
						#[codec(index = 77)]
						Mortal77(::core::primitive::u8),
						#[codec(index = 78)]
						Mortal78(::core::primitive::u8),
						#[codec(index = 79)]
						Mortal79(::core::primitive::u8),
						#[codec(index = 80)]
						Mortal80(::core::primitive::u8),
						#[codec(index = 81)]
						Mortal81(::core::primitive::u8),
						#[codec(index = 82)]
						Mortal82(::core::primitive::u8),
						#[codec(index = 83)]
						Mortal83(::core::primitive::u8),
						#[codec(index = 84)]
						Mortal84(::core::primitive::u8),
						#[codec(index = 85)]
						Mortal85(::core::primitive::u8),
						#[codec(index = 86)]
						Mortal86(::core::primitive::u8),
						#[codec(index = 87)]
						Mortal87(::core::primitive::u8),
						#[codec(index = 88)]
						Mortal88(::core::primitive::u8),
						#[codec(index = 89)]
						Mortal89(::core::primitive::u8),
						#[codec(index = 90)]
						Mortal90(::core::primitive::u8),
						#[codec(index = 91)]
						Mortal91(::core::primitive::u8),
						#[codec(index = 92)]
						Mortal92(::core::primitive::u8),
						#[codec(index = 93)]
						Mortal93(::core::primitive::u8),
						#[codec(index = 94)]
						Mortal94(::core::primitive::u8),
						#[codec(index = 95)]
						Mortal95(::core::primitive::u8),
						#[codec(index = 96)]
						Mortal96(::core::primitive::u8),
						#[codec(index = 97)]
						Mortal97(::core::primitive::u8),
						#[codec(index = 98)]
						Mortal98(::core::primitive::u8),
						#[codec(index = 99)]
						Mortal99(::core::primitive::u8),
						#[codec(index = 100)]
						Mortal100(::core::primitive::u8),
						#[codec(index = 101)]
						Mortal101(::core::primitive::u8),
						#[codec(index = 102)]
						Mortal102(::core::primitive::u8),
						#[codec(index = 103)]
						Mortal103(::core::primitive::u8),
						#[codec(index = 104)]
						Mortal104(::core::primitive::u8),
						#[codec(index = 105)]
						Mortal105(::core::primitive::u8),
						#[codec(index = 106)]
						Mortal106(::core::primitive::u8),
						#[codec(index = 107)]
						Mortal107(::core::primitive::u8),
						#[codec(index = 108)]
						Mortal108(::core::primitive::u8),
						#[codec(index = 109)]
						Mortal109(::core::primitive::u8),
						#[codec(index = 110)]
						Mortal110(::core::primitive::u8),
						#[codec(index = 111)]
						Mortal111(::core::primitive::u8),
						#[codec(index = 112)]
						Mortal112(::core::primitive::u8),
						#[codec(index = 113)]
						Mortal113(::core::primitive::u8),
						#[codec(index = 114)]
						Mortal114(::core::primitive::u8),
						#[codec(index = 115)]
						Mortal115(::core::primitive::u8),
						#[codec(index = 116)]
						Mortal116(::core::primitive::u8),
						#[codec(index = 117)]
						Mortal117(::core::primitive::u8),
						#[codec(index = 118)]
						Mortal118(::core::primitive::u8),
						#[codec(index = 119)]
						Mortal119(::core::primitive::u8),
						#[codec(index = 120)]
						Mortal120(::core::primitive::u8),
						#[codec(index = 121)]
						Mortal121(::core::primitive::u8),
						#[codec(index = 122)]
						Mortal122(::core::primitive::u8),
						#[codec(index = 123)]
						Mortal123(::core::primitive::u8),
						#[codec(index = 124)]
						Mortal124(::core::primitive::u8),
						#[codec(index = 125)]
						Mortal125(::core::primitive::u8),
						#[codec(index = 126)]
						Mortal126(::core::primitive::u8),
						#[codec(index = 127)]
						Mortal127(::core::primitive::u8),
						#[codec(index = 128)]
						Mortal128(::core::primitive::u8),
						#[codec(index = 129)]
						Mortal129(::core::primitive::u8),
						#[codec(index = 130)]
						Mortal130(::core::primitive::u8),
						#[codec(index = 131)]
						Mortal131(::core::primitive::u8),
						#[codec(index = 132)]
						Mortal132(::core::primitive::u8),
						#[codec(index = 133)]
						Mortal133(::core::primitive::u8),
						#[codec(index = 134)]
						Mortal134(::core::primitive::u8),
						#[codec(index = 135)]
						Mortal135(::core::primitive::u8),
						#[codec(index = 136)]
						Mortal136(::core::primitive::u8),
						#[codec(index = 137)]
						Mortal137(::core::primitive::u8),
						#[codec(index = 138)]
						Mortal138(::core::primitive::u8),
						#[codec(index = 139)]
						Mortal139(::core::primitive::u8),
						#[codec(index = 140)]
						Mortal140(::core::primitive::u8),
						#[codec(index = 141)]
						Mortal141(::core::primitive::u8),
						#[codec(index = 142)]
						Mortal142(::core::primitive::u8),
						#[codec(index = 143)]
						Mortal143(::core::primitive::u8),
						#[codec(index = 144)]
						Mortal144(::core::primitive::u8),
						#[codec(index = 145)]
						Mortal145(::core::primitive::u8),
						#[codec(index = 146)]
						Mortal146(::core::primitive::u8),
						#[codec(index = 147)]
						Mortal147(::core::primitive::u8),
						#[codec(index = 148)]
						Mortal148(::core::primitive::u8),
						#[codec(index = 149)]
						Mortal149(::core::primitive::u8),
						#[codec(index = 150)]
						Mortal150(::core::primitive::u8),
						#[codec(index = 151)]
						Mortal151(::core::primitive::u8),
						#[codec(index = 152)]
						Mortal152(::core::primitive::u8),
						#[codec(index = 153)]
						Mortal153(::core::primitive::u8),
						#[codec(index = 154)]
						Mortal154(::core::primitive::u8),
						#[codec(index = 155)]
						Mortal155(::core::primitive::u8),
						#[codec(index = 156)]
						Mortal156(::core::primitive::u8),
						#[codec(index = 157)]
						Mortal157(::core::primitive::u8),
						#[codec(index = 158)]
						Mortal158(::core::primitive::u8),
						#[codec(index = 159)]
						Mortal159(::core::primitive::u8),
						#[codec(index = 160)]
						Mortal160(::core::primitive::u8),
						#[codec(index = 161)]
						Mortal161(::core::primitive::u8),
						#[codec(index = 162)]
						Mortal162(::core::primitive::u8),
						#[codec(index = 163)]
						Mortal163(::core::primitive::u8),
						#[codec(index = 164)]
						Mortal164(::core::primitive::u8),
						#[codec(index = 165)]
						Mortal165(::core::primitive::u8),
						#[codec(index = 166)]
						Mortal166(::core::primitive::u8),
						#[codec(index = 167)]
						Mortal167(::core::primitive::u8),
						#[codec(index = 168)]
						Mortal168(::core::primitive::u8),
						#[codec(index = 169)]
						Mortal169(::core::primitive::u8),
						#[codec(index = 170)]
						Mortal170(::core::primitive::u8),
						#[codec(index = 171)]
						Mortal171(::core::primitive::u8),
						#[codec(index = 172)]
						Mortal172(::core::primitive::u8),
						#[codec(index = 173)]
						Mortal173(::core::primitive::u8),
						#[codec(index = 174)]
						Mortal174(::core::primitive::u8),
						#[codec(index = 175)]
						Mortal175(::core::primitive::u8),
						#[codec(index = 176)]
						Mortal176(::core::primitive::u8),
						#[codec(index = 177)]
						Mortal177(::core::primitive::u8),
						#[codec(index = 178)]
						Mortal178(::core::primitive::u8),
						#[codec(index = 179)]
						Mortal179(::core::primitive::u8),
						#[codec(index = 180)]
						Mortal180(::core::primitive::u8),
						#[codec(index = 181)]
						Mortal181(::core::primitive::u8),
						#[codec(index = 182)]
						Mortal182(::core::primitive::u8),
						#[codec(index = 183)]
						Mortal183(::core::primitive::u8),
						#[codec(index = 184)]
						Mortal184(::core::primitive::u8),
						#[codec(index = 185)]
						Mortal185(::core::primitive::u8),
						#[codec(index = 186)]
						Mortal186(::core::primitive::u8),
						#[codec(index = 187)]
						Mortal187(::core::primitive::u8),
						#[codec(index = 188)]
						Mortal188(::core::primitive::u8),
						#[codec(index = 189)]
						Mortal189(::core::primitive::u8),
						#[codec(index = 190)]
						Mortal190(::core::primitive::u8),
						#[codec(index = 191)]
						Mortal191(::core::primitive::u8),
						#[codec(index = 192)]
						Mortal192(::core::primitive::u8),
						#[codec(index = 193)]
						Mortal193(::core::primitive::u8),
						#[codec(index = 194)]
						Mortal194(::core::primitive::u8),
						#[codec(index = 195)]
						Mortal195(::core::primitive::u8),
						#[codec(index = 196)]
						Mortal196(::core::primitive::u8),
						#[codec(index = 197)]
						Mortal197(::core::primitive::u8),
						#[codec(index = 198)]
						Mortal198(::core::primitive::u8),
						#[codec(index = 199)]
						Mortal199(::core::primitive::u8),
						#[codec(index = 200)]
						Mortal200(::core::primitive::u8),
						#[codec(index = 201)]
						Mortal201(::core::primitive::u8),
						#[codec(index = 202)]
						Mortal202(::core::primitive::u8),
						#[codec(index = 203)]
						Mortal203(::core::primitive::u8),
						#[codec(index = 204)]
						Mortal204(::core::primitive::u8),
						#[codec(index = 205)]
						Mortal205(::core::primitive::u8),
						#[codec(index = 206)]
						Mortal206(::core::primitive::u8),
						#[codec(index = 207)]
						Mortal207(::core::primitive::u8),
						#[codec(index = 208)]
						Mortal208(::core::primitive::u8),
						#[codec(index = 209)]
						Mortal209(::core::primitive::u8),
						#[codec(index = 210)]
						Mortal210(::core::primitive::u8),
						#[codec(index = 211)]
						Mortal211(::core::primitive::u8),
						#[codec(index = 212)]
						Mortal212(::core::primitive::u8),
						#[codec(index = 213)]
						Mortal213(::core::primitive::u8),
						#[codec(index = 214)]
						Mortal214(::core::primitive::u8),
						#[codec(index = 215)]
						Mortal215(::core::primitive::u8),
						#[codec(index = 216)]
						Mortal216(::core::primitive::u8),
						#[codec(index = 217)]
						Mortal217(::core::primitive::u8),
						#[codec(index = 218)]
						Mortal218(::core::primitive::u8),
						#[codec(index = 219)]
						Mortal219(::core::primitive::u8),
						#[codec(index = 220)]
						Mortal220(::core::primitive::u8),
						#[codec(index = 221)]
						Mortal221(::core::primitive::u8),
						#[codec(index = 222)]
						Mortal222(::core::primitive::u8),
						#[codec(index = 223)]
						Mortal223(::core::primitive::u8),
						#[codec(index = 224)]
						Mortal224(::core::primitive::u8),
						#[codec(index = 225)]
						Mortal225(::core::primitive::u8),
						#[codec(index = 226)]
						Mortal226(::core::primitive::u8),
						#[codec(index = 227)]
						Mortal227(::core::primitive::u8),
						#[codec(index = 228)]
						Mortal228(::core::primitive::u8),
						#[codec(index = 229)]
						Mortal229(::core::primitive::u8),
						#[codec(index = 230)]
						Mortal230(::core::primitive::u8),
						#[codec(index = 231)]
						Mortal231(::core::primitive::u8),
						#[codec(index = 232)]
						Mortal232(::core::primitive::u8),
						#[codec(index = 233)]
						Mortal233(::core::primitive::u8),
						#[codec(index = 234)]
						Mortal234(::core::primitive::u8),
						#[codec(index = 235)]
						Mortal235(::core::primitive::u8),
						#[codec(index = 236)]
						Mortal236(::core::primitive::u8),
						#[codec(index = 237)]
						Mortal237(::core::primitive::u8),
						#[codec(index = 238)]
						Mortal238(::core::primitive::u8),
						#[codec(index = 239)]
						Mortal239(::core::primitive::u8),
						#[codec(index = 240)]
						Mortal240(::core::primitive::u8),
						#[codec(index = 241)]
						Mortal241(::core::primitive::u8),
						#[codec(index = 242)]
						Mortal242(::core::primitive::u8),
						#[codec(index = 243)]
						Mortal243(::core::primitive::u8),
						#[codec(index = 244)]
						Mortal244(::core::primitive::u8),
						#[codec(index = 245)]
						Mortal245(::core::primitive::u8),
						#[codec(index = 246)]
						Mortal246(::core::primitive::u8),
						#[codec(index = 247)]
						Mortal247(::core::primitive::u8),
						#[codec(index = 248)]
						Mortal248(::core::primitive::u8),
						#[codec(index = 249)]
						Mortal249(::core::primitive::u8),
						#[codec(index = 250)]
						Mortal250(::core::primitive::u8),
						#[codec(index = 251)]
						Mortal251(::core::primitive::u8),
						#[codec(index = 252)]
						Mortal252(::core::primitive::u8),
						#[codec(index = 253)]
						Mortal253(::core::primitive::u8),
						#[codec(index = 254)]
						Mortal254(::core::primitive::u8),
						#[codec(index = 255)]
						Mortal255(::core::primitive::u8),
					}
				}
				pub mod header {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Header<_0> {
						pub parent_hash: ::subxt::utils::H256,
						#[codec(compact)]
						pub number: _0,
						pub state_root: ::subxt::utils::H256,
						pub extrinsics_root: ::subxt::utils::H256,
						pub digest: runtime_types::sp_runtime::generic::digest::Digest,
					}
				}
			}
			pub mod traits {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BlakeTwo256;
			}
			pub mod transaction_validity {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum InvalidTransaction {
					#[codec(index = 0)]
					Call,
					#[codec(index = 1)]
					Payment,
					#[codec(index = 2)]
					Future,
					#[codec(index = 3)]
					Stale,
					#[codec(index = 4)]
					BadProof,
					#[codec(index = 5)]
					AncientBirthBlock,
					#[codec(index = 6)]
					ExhaustsResources,
					#[codec(index = 7)]
					Custom(::core::primitive::u8),
					#[codec(index = 8)]
					BadMandatory,
					#[codec(index = 9)]
					MandatoryValidation,
					#[codec(index = 10)]
					BadSigner,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum TransactionSource {
					#[codec(index = 0)]
					InBlock,
					#[codec(index = 1)]
					Local,
					#[codec(index = 2)]
					External,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum TransactionValidityError {
					#[codec(index = 0)]
					Invalid(runtime_types::sp_runtime::transaction_validity::InvalidTransaction),
					#[codec(index = 1)]
					Unknown(runtime_types::sp_runtime::transaction_validity::UnknownTransaction),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum UnknownTransaction {
					#[codec(index = 0)]
					CannotLookup,
					#[codec(index = 1)]
					NoUnsignedValidator,
					#[codec(index = 2)]
					Custom(::core::primitive::u8),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ValidTransaction {
					pub priority: ::core::primitive::u64,
					pub requires: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
					pub provides: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
					pub longevity: ::core::primitive::u64,
					pub propagate: ::core::primitive::bool,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum DispatchError {
				#[codec(index = 0)]
				Other,
				#[codec(index = 1)]
				CannotLookup,
				#[codec(index = 2)]
				BadOrigin,
				#[codec(index = 3)]
				Module(runtime_types::sp_runtime::ModuleError),
				#[codec(index = 4)]
				ConsumerRemaining,
				#[codec(index = 5)]
				NoProviders,
				#[codec(index = 6)]
				TooManyConsumers,
				#[codec(index = 7)]
				Token(runtime_types::sp_runtime::TokenError),
				#[codec(index = 8)]
				Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
				#[codec(index = 9)]
				Transactional(runtime_types::sp_runtime::TransactionalError),
				#[codec(index = 10)]
				Exhausted,
				#[codec(index = 11)]
				Corruption,
				#[codec(index = 12)]
				Unavailable,
				#[codec(index = 13)]
				RootNotAllowed,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DispatchErrorWithPostInfo<_0> {
				pub post_info: _0,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ModuleError {
				pub index: ::core::primitive::u8,
				pub error: [::core::primitive::u8; 4usize],
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum MultiSignature {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Signature),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Signature),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Signature),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum TokenError {
				#[codec(index = 0)]
				FundsUnavailable,
				#[codec(index = 1)]
				OnlyProvider,
				#[codec(index = 2)]
				BelowMinimum,
				#[codec(index = 3)]
				CannotCreate,
				#[codec(index = 4)]
				UnknownAsset,
				#[codec(index = 5)]
				Frozen,
				#[codec(index = 6)]
				Unsupported,
				#[codec(index = 7)]
				CannotCreateHold,
				#[codec(index = 8)]
				NotExpendable,
				#[codec(index = 9)]
				Blocked,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum TransactionalError {
				#[codec(index = 0)]
				LimitReached,
				#[codec(index = 1)]
				NoLayer,
			}
		}
		pub mod sp_trie {
			use super::runtime_types;
			pub mod storage_proof {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct StorageProof {
					pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				}
			}
		}
		pub mod sp_version {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RuntimeVersion {
				pub spec_name: ::std::string::String,
				pub impl_name: ::std::string::String,
				pub authoring_version: ::core::primitive::u32,
				pub spec_version: ::core::primitive::u32,
				pub impl_version: ::core::primitive::u32,
				pub apis:
					::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
				pub transaction_version: ::core::primitive::u32,
				pub state_version: ::core::primitive::u8,
			}
		}
		pub mod sp_weights {
			use super::runtime_types;
			pub mod weight_v2 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Weight {
					#[codec(compact)]
					pub ref_time: ::core::primitive::u64,
					#[codec(compact)]
					pub proof_size: ::core::primitive::u64,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RuntimeDbWeight {
				pub read: ::core::primitive::u64,
				pub write: ::core::primitive::u64,
			}
		}
		pub mod staging_parachain_info {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {}
			}
		}
		pub mod staging_xcm {
			use super::runtime_types;
			pub mod v3 {
				use super::runtime_types;
				pub mod multilocation {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v3::junctions::Junctions,
					}
				}
			}
		}
		pub mod tangle_asset_registry {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AssetMetadata<_0> {
					pub name: ::std::vec::Vec<::core::primitive::u8>,
					pub symbol: ::std::vec::Vec<::core::primitive::u8>,
					pub decimals: ::core::primitive::u8,
					pub minimal_balance: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::register_native_asset`]."]
					register_native_asset {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						metadata: ::std::boxed::Box<
							runtime_types::tangle_asset_registry::pallet::AssetMetadata<
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::update_native_asset`]."]
					update_native_asset {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						metadata: ::std::boxed::Box<
							runtime_types::tangle_asset_registry::pallet::AssetMetadata<
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::register_token_metadata`]."]
					register_token_metadata {
						metadata: ::std::boxed::Box<
							runtime_types::tangle_asset_registry::pallet::AssetMetadata<
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::register_lst_metadata`]."]
					register_lst_metadata { token_id: ::core::primitive::u8 },
					#[codec(index = 4)]
					#[doc = "See [`Pallet::register_vstoken_metadata`]."]
					register_vstoken_metadata { token_id: ::core::primitive::u8 },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::register_vsbond_metadata`]."]
					register_vsbond_metadata {
						token_id: ::core::primitive::u8,
						para_id: ::core::primitive::u32,
						first_slot: ::core::primitive::u32,
						last_slot: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::register_multilocation`]."]
					register_multilocation {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::force_set_multilocation`]."]
					force_set_multilocation {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
					#[doc = "desired version of XCM)."]
					BadLocation,
					#[codec(index = 1)]
					#[doc = "MultiLocation existed"]
					MultiLocationExisted,
					#[codec(index = 2)]
					#[doc = "AssetId not exists"]
					AssetIdNotExists,
					#[codec(index = 3)]
					#[doc = "AssetId exists"]
					AssetIdExisted,
					#[codec(index = 4)]
					#[doc = "CurrencyId not exists"]
					CurrencyIdNotExists,
					#[codec(index = 5)]
					#[doc = "CurrencyId exists"]
					CurrencyIdExisted,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The asset registered."]
					AssetRegistered {
						asset_id: runtime_types::tangle_primitives::currency::AssetIds,
						metadata: runtime_types::tangle_asset_registry::pallet::AssetMetadata<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					#[doc = "The asset updated."]
					AssetUpdated {
						asset_id: runtime_types::tangle_primitives::currency::AssetIds,
						metadata: runtime_types::tangle_asset_registry::pallet::AssetMetadata<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 2)]
					#[doc = "The CurrencyId registered."]
					CurrencyIdRegistered {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						metadata: runtime_types::tangle_asset_registry::pallet::AssetMetadata<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					#[doc = "MultiLocation Force set."]
					MultiLocationSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						location: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
			}
		}
		pub mod tangle_currencies {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::transfer`]."]
					transfer {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::transfer_native_currency`]."]
					transfer_native_currency {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::update_balance`]."]
					update_balance {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::i128,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Unable to convert the Amount type into Balance."]
					AmountIntoBalanceFailed,
					#[codec(index = 1)]
					#[doc = "Balance is too low."]
					BalanceTooLow,
					#[codec(index = 2)]
					#[doc = "Deposit result is not expected"]
					DepositFailed,
				}
			}
		}
		pub mod tangle_kusama_runtime {
			use super::runtime_types;
			pub mod governance {
				use super::runtime_types;
				pub mod origins {
					use super::runtime_types;
					pub mod custom_origins {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: codec :: Decode,
							:: subxt :: ext :: codec :: Encode,
							:: subxt :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: codec)]
						#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
						#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
						pub enum Origin {
							#[codec(index = 0)]
							WhitelistedCaller,
							#[codec(index = 1)]
							FellowshipAdmin,
							#[codec(index = 2)]
							ReferendumCanceller,
							#[codec(index = 3)]
							ReferendumKiller,
							#[codec(index = 4)]
							LiquidStaking,
							#[codec(index = 5)]
							SALPAdmin,
							#[codec(index = 6)]
							FellowshipInitiates,
							#[codec(index = 7)]
							Fellows,
							#[codec(index = 8)]
							FellowshipExperts,
							#[codec(index = 9)]
							FellowshipMasters,
							#[codec(index = 10)]
							Fellowship1Dan,
							#[codec(index = 11)]
							Fellowship2Dan,
							#[codec(index = 12)]
							Fellowship3Dan,
							#[codec(index = 13)]
							Fellowship4Dan,
							#[codec(index = 14)]
							Fellowship5Dan,
							#[codec(index = 15)]
							Fellowship6Dan,
							#[codec(index = 16)]
							Fellowship7Dan,
							#[codec(index = 17)]
							Fellowship8Dan,
							#[codec(index = 18)]
							Fellowship9Dan,
							#[codec(index = 19)]
							TechAdmin,
							#[codec(index = 20)]
							CoreAdmin,
							#[codec(index = 21)]
							TreasurySpend,
						}
					}
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum OriginCaller {
				# [codec (index = 0)] system (runtime_types :: frame_support :: dispatch :: RawOrigin < :: subxt :: utils :: AccountId32 > ,) , # [codec (index = 31)] Council (runtime_types :: pallet_collective :: RawOrigin < :: subxt :: utils :: AccountId32 > ,) , # [codec (index = 32)] TechnicalCommittee (runtime_types :: pallet_collective :: RawOrigin < :: subxt :: utils :: AccountId32 > ,) , # [codec (index = 38)] Origins (runtime_types :: tangle_kusama_runtime :: governance :: origins :: custom_origins :: Origin ,) , # [codec (index = 41)] PolkadotXcm (runtime_types :: pallet_xcm :: pallet :: Origin ,) , # [codec (index = 42)] CumulusXcm (runtime_types :: cumulus_pallet_xcm :: pallet :: Origin ,) , # [codec (index = 6)] Void (runtime_types :: sp_core :: Void ,) , }
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ProxyType {
				#[codec(index = 0)]
				Any,
				#[codec(index = 1)]
				NonTransfer,
				#[codec(index = 2)]
				Governance,
				#[codec(index = 3)]
				CancelProxy,
				#[codec(index = 4)]
				IdentityJudgement,
				#[codec(index = 5)]
				Staking,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Runtime;
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RuntimeCall {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Call),
				#[codec(index = 1)]
				Timestamp(runtime_types::pallet_timestamp::pallet::Call),
				#[codec(index = 2)]
				Indices(runtime_types::pallet_indices::pallet::Call),
				#[codec(index = 5)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
				#[codec(index = 6)]
				ParachainInfo(runtime_types::staging_parachain_info::pallet::Call),
				#[codec(index = 10)]
				Balances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Call),
				#[codec(index = 25)]
				ParachainStaking(runtime_types::tangle_parachain_staking::pallet::Call),
				#[codec(index = 30)]
				Democracy(runtime_types::pallet_democracy::pallet::Call),
				#[codec(index = 31)]
				Council(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 32)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Call2),
				#[codec(index = 33)]
				PhragmenElection(runtime_types::pallet_elections_phragmen::pallet::Call),
				#[codec(index = 34)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Call),
				#[codec(index = 35)]
				TechnicalMembership(runtime_types::pallet_membership::pallet::Call2),
				#[codec(index = 36)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Call),
				#[codec(index = 37)]
				Referenda(runtime_types::pallet_referenda::pallet::Call),
				#[codec(index = 39)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Call),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
				#[codec(index = 41)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Call),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Call),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Call),
				#[codec(index = 50)]
				Utility(runtime_types::pallet_utility::pallet::Call),
				#[codec(index = 51)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Call),
				#[codec(index = 52)]
				Proxy(runtime_types::pallet_proxy::pallet::Call),
				#[codec(index = 53)]
				Multisig(runtime_types::pallet_multisig::pallet::Call),
				#[codec(index = 54)]
				Identity(runtime_types::pallet_identity::pallet::Call),
				#[codec(index = 61)]
				Treasury(runtime_types::pallet_treasury::pallet::Call),
				#[codec(index = 62)]
				Bounties(runtime_types::pallet_bounties::pallet::Call),
				#[codec(index = 63)]
				Tips(runtime_types::pallet_tips::pallet::Call),
				#[codec(index = 64)]
				Preimage(runtime_types::pallet_preimage::pallet::Call),
				#[codec(index = 70)]
				XTokens(runtime_types::orml_xtokens::module::Call),
				#[codec(index = 71)]
				Tokens(runtime_types::orml_tokens::module::Call),
				#[codec(index = 72)]
				Currencies(runtime_types::tangle_currencies::module::Call),
				#[codec(index = 74)]
				OrmlXcm(runtime_types::orml_xcm::module::Call),
				#[codec(index = 80)]
				ZenlinkProtocol(runtime_types::zenlink_protocol::pallet::Call),
				#[codec(index = 81)]
				MerkleDistributor(runtime_types::merkle_distributor::pallet::Call),
				#[codec(index = 82)]
				ZenlinkStableAMM(runtime_types::zenlink_stable_amm::pallet::Call),
				#[codec(index = 83)]
				ZenlinkSwapRouter(runtime_types::zenlink_swap_router::pallet::Call),
				#[codec(index = 109)]
				TokenIssuer(runtime_types::tangle_token_issuer::pallet::Call),
				#[codec(index = 114)]
				AssetRegistry(runtime_types::tangle_asset_registry::pallet::Call),
				#[codec(index = 115)]
				LstMinting(runtime_types::tangle_Lst_minting::pallet::Call),
				#[codec(index = 116)]
				Slp(runtime_types::tangle_slp::pallet::Call),
				#[codec(index = 117)]
				XcmInterface(runtime_types::tangle_xcm_interface::pallet::Call),
				#[codec(index = 125)]
				Slpx(runtime_types::tangle_slpx::pallet::Call),
				#[codec(index = 126)]
				FellowshipCollective(runtime_types::pallet_ranked_collective::pallet::Call),
				#[codec(index = 127)]
				FellowshipReferenda(runtime_types::pallet_referenda::pallet::Call2),
				#[codec(index = 129)]
				StablePool(runtime_types::tangle_stable_pool::pallet::Call),
				#[codec(index = 130)]
				LstVoting(runtime_types::tangle_Lst_voting::pallet::Call),
				#[codec(index = 132)]
				Prices(runtime_types::pallet_prices::pallet::Call),
				#[codec(index = 133)]
				Oracle(runtime_types::orml_oracle::module::Call),
				#[codec(index = 134)]
				OracleMembership(runtime_types::pallet_membership::pallet::Call3),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RuntimeError {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Error),
				#[codec(index = 2)]
				Indices(runtime_types::pallet_indices::pallet::Error),
				#[codec(index = 5)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Error),
				#[codec(index = 10)]
				Balances(runtime_types::pallet_balances::pallet::Error),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Error),
				#[codec(index = 25)]
				ParachainStaking(runtime_types::tangle_parachain_staking::pallet::Error),
				#[codec(index = 30)]
				Democracy(runtime_types::pallet_democracy::pallet::Error),
				#[codec(index = 31)]
				Council(runtime_types::pallet_collective::pallet::Error),
				#[codec(index = 32)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Error2),
				#[codec(index = 33)]
				PhragmenElection(runtime_types::pallet_elections_phragmen::pallet::Error),
				#[codec(index = 34)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Error),
				#[codec(index = 35)]
				TechnicalMembership(runtime_types::pallet_membership::pallet::Error2),
				#[codec(index = 36)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Error),
				#[codec(index = 37)]
				Referenda(runtime_types::pallet_referenda::pallet::Error),
				#[codec(index = 39)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Error),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Error),
				#[codec(index = 41)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Error),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Error),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Error),
				#[codec(index = 50)]
				Utility(runtime_types::pallet_utility::pallet::Error),
				#[codec(index = 51)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Error),
				#[codec(index = 52)]
				Proxy(runtime_types::pallet_proxy::pallet::Error),
				#[codec(index = 53)]
				Multisig(runtime_types::pallet_multisig::pallet::Error),
				#[codec(index = 54)]
				Identity(runtime_types::pallet_identity::pallet::Error),
				#[codec(index = 61)]
				Treasury(runtime_types::pallet_treasury::pallet::Error),
				#[codec(index = 62)]
				Bounties(runtime_types::pallet_bounties::pallet::Error),
				#[codec(index = 63)]
				Tips(runtime_types::pallet_tips::pallet::Error),
				#[codec(index = 64)]
				Preimage(runtime_types::pallet_preimage::pallet::Error),
				#[codec(index = 70)]
				XTokens(runtime_types::orml_xtokens::module::Error),
				#[codec(index = 71)]
				Tokens(runtime_types::orml_tokens::module::Error),
				#[codec(index = 72)]
				Currencies(runtime_types::tangle_currencies::module::Error),
				#[codec(index = 73)]
				UnknownTokens(runtime_types::orml_unknown_tokens::module::Error),
				#[codec(index = 74)]
				OrmlXcm(runtime_types::orml_xcm::module::Error),
				#[codec(index = 80)]
				ZenlinkProtocol(runtime_types::zenlink_protocol::pallet::Error),
				#[codec(index = 81)]
				MerkleDistributor(runtime_types::merkle_distributor::pallet::Error),
				#[codec(index = 82)]
				ZenlinkStableAMM(runtime_types::zenlink_stable_amm::pallet::Error),
				#[codec(index = 83)]
				ZenlinkSwapRouter(runtime_types::zenlink_swap_router::pallet::Error),
				#[codec(index = 109)]
				TokenIssuer(runtime_types::tangle_token_issuer::pallet::Error),
				#[codec(index = 114)]
				AssetRegistry(runtime_types::tangle_asset_registry::pallet::Error),
				#[codec(index = 115)]
				LstMinting(runtime_types::tangle_Lst_minting::pallet::Error),
				#[codec(index = 116)]
				Slp(runtime_types::tangle_slp::pallet::Error),
				#[codec(index = 117)]
				XcmInterface(runtime_types::tangle_xcm_interface::pallet::Error),
				#[codec(index = 125)]
				Slpx(runtime_types::tangle_slpx::pallet::Error),
				#[codec(index = 126)]
				FellowshipCollective(runtime_types::pallet_ranked_collective::pallet::Error),
				#[codec(index = 127)]
				FellowshipReferenda(runtime_types::pallet_referenda::pallet::Error2),
				#[codec(index = 128)]
				StableAsset(runtime_types::tangle_stable_asset::pallet::Error),
				#[codec(index = 129)]
				StablePool(runtime_types::tangle_stable_pool::pallet::Error),
				#[codec(index = 130)]
				LstVoting(runtime_types::tangle_Lst_voting::pallet::Error),
				#[codec(index = 133)]
				Oracle(runtime_types::orml_oracle::module::Error),
				#[codec(index = 134)]
				OracleMembership(runtime_types::pallet_membership::pallet::Error3),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RuntimeEvent {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Event),
				#[codec(index = 2)]
				Indices(runtime_types::pallet_indices::pallet::Event),
				#[codec(index = 5)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
				#[codec(index = 10)]
				Balances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 11)]
				TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Event),
				#[codec(index = 25)]
				ParachainStaking(runtime_types::tangle_parachain_staking::pallet::Event),
				#[codec(index = 30)]
				Democracy(runtime_types::pallet_democracy::pallet::Event),
				#[codec(index = 31)]
				Council(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 32)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Event2),
				#[codec(index = 33)]
				PhragmenElection(runtime_types::pallet_elections_phragmen::pallet::Event),
				#[codec(index = 34)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Event),
				#[codec(index = 35)]
				TechnicalMembership(runtime_types::pallet_membership::pallet::Event2),
				#[codec(index = 36)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Event),
				#[codec(index = 37)]
				Referenda(runtime_types::pallet_referenda::pallet::Event),
				#[codec(index = 39)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Event),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
				#[codec(index = 41)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Event),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Event),
				#[codec(index = 50)]
				Utility(runtime_types::pallet_utility::pallet::Event),
				#[codec(index = 51)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Event),
				#[codec(index = 52)]
				Proxy(runtime_types::pallet_proxy::pallet::Event),
				#[codec(index = 53)]
				Multisig(runtime_types::pallet_multisig::pallet::Event),
				#[codec(index = 54)]
				Identity(runtime_types::pallet_identity::pallet::Event),
				#[codec(index = 61)]
				Treasury(runtime_types::pallet_treasury::pallet::Event),
				#[codec(index = 62)]
				Bounties(runtime_types::pallet_bounties::pallet::Event),
				#[codec(index = 63)]
				Tips(runtime_types::pallet_tips::pallet::Event),
				#[codec(index = 64)]
				Preimage(runtime_types::pallet_preimage::pallet::Event),
				#[codec(index = 70)]
				XTokens(runtime_types::orml_xtokens::module::Event),
				#[codec(index = 71)]
				Tokens(runtime_types::orml_tokens::module::Event),
				#[codec(index = 73)]
				UnknownTokens(runtime_types::orml_unknown_tokens::module::Event),
				#[codec(index = 74)]
				OrmlXcm(runtime_types::orml_xcm::module::Event),
				#[codec(index = 80)]
				ZenlinkProtocol(runtime_types::zenlink_protocol::pallet::Event),
				#[codec(index = 81)]
				MerkleDistributor(runtime_types::merkle_distributor::pallet::Event),
				#[codec(index = 82)]
				ZenlinkStableAMM(runtime_types::zenlink_stable_amm::pallet::Event),
				#[codec(index = 83)]
				ZenlinkSwapRouter(runtime_types::zenlink_swap_router::pallet::Event),
				#[codec(index = 109)]
				TokenIssuer(runtime_types::tangle_token_issuer::pallet::Event),
				#[codec(index = 114)]
				AssetRegistry(runtime_types::tangle_asset_registry::pallet::Event),
				#[codec(index = 115)]
				LstMinting(runtime_types::tangle_Lst_minting::pallet::Event),
				#[codec(index = 116)]
				Slp(runtime_types::tangle_slp::pallet::Event),
				#[codec(index = 117)]
				XcmInterface(runtime_types::tangle_xcm_interface::pallet::Event),
				#[codec(index = 125)]
				Slpx(runtime_types::tangle_slpx::pallet::Event),
				#[codec(index = 126)]
				FellowshipCollective(runtime_types::pallet_ranked_collective::pallet::Event),
				#[codec(index = 127)]
				FellowshipReferenda(runtime_types::pallet_referenda::pallet::Event2),
				#[codec(index = 128)]
				StableAsset(runtime_types::tangle_stable_asset::pallet::Event),
				#[codec(index = 130)]
				LstVoting(runtime_types::tangle_Lst_voting::pallet::Event),
				#[codec(index = 132)]
				Prices(runtime_types::pallet_prices::pallet::Event),
				#[codec(index = 133)]
				Oracle(runtime_types::orml_oracle::module::Event),
				#[codec(index = 134)]
				OracleMembership(runtime_types::pallet_membership::pallet::Event3),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RuntimeHoldReason {
				#[codec(index = 64)]
				Preimage(runtime_types::pallet_preimage::pallet::HoldReason),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SessionKeys {
				pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
			}
		}
		pub mod tangle_Lst_minting {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::mint`]."]
					mint {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						remark: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						channel_id: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::redeem`]."]
					redeem {
						Lst_id: runtime_types::tangle_primitives::currency::CurrencyId,
						Lst_amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::rebond`]."]
					rebond {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::rebond_by_unlock_id`]."]
					rebond_by_unlock_id {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						unlock_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::set_unlock_duration`]."]
					set_unlock_duration {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						unlock_duration: runtime_types::tangle_primitives::TimeUnit,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::set_minimum_mint`]."]
					set_minimum_mint {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::set_minimum_redeem`]."]
					set_minimum_redeem {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::add_support_rebond_token`]."]
					add_support_rebond_token {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::remove_support_rebond_token`]."]
					remove_support_rebond_token {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::set_fees`]."]
					set_fees {
						mint_fee: runtime_types::sp_arithmetic::per_things::Permill,
						redeem_fee: runtime_types::sp_arithmetic::per_things::Permill,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::set_hook_iteration_limit`]."]
					set_hook_iteration_limit { limit: ::core::primitive::u32 },
					#[codec(index = 11)]
					#[doc = "See [`Pallet::set_unlocking_total`]."]
					set_unlocking_total {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "See [`Pallet::set_min_time_unit`]."]
					set_min_time_unit {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						time_unit: runtime_types::tangle_primitives::TimeUnit,
					},
					#[codec(index = 13)]
					#[doc = "See [`Pallet::recreate_currency_ongoing_time_unit`]."]
					recreate_currency_ongoing_time_unit {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						time_unit: runtime_types::tangle_primitives::TimeUnit,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					BelowMinimumMint,
					#[codec(index = 1)]
					BelowMinimumRedeem,
					#[codec(index = 2)]
					#[doc = "Invalid token to rebond."]
					InvalidRebondToken,
					#[codec(index = 3)]
					#[doc = "Token type not support."]
					NotSupportTokenType,
					#[codec(index = 4)]
					NotEnoughBalanceToUnlock,
					#[codec(index = 5)]
					TokenToRebondNotZero,
					#[codec(index = 6)]
					OngoingTimeUnitNotSet,
					#[codec(index = 7)]
					TokenUnlockLedgerNotFound,
					#[codec(index = 8)]
					UserUnlockLedgerNotFound,
					#[codec(index = 9)]
					TimeUnitUnlockLedgerNotFound,
					#[codec(index = 10)]
					UnlockDurationNotFound,
					#[codec(index = 11)]
					Unexpected,
					#[codec(index = 12)]
					CalculationOverflow,
					#[codec(index = 13)]
					ExceedMaximumUnlockId,
					#[codec(index = 14)]
					TooManyRedeems,
					#[codec(index = 15)]
					CanNotRedeem,
					#[codec(index = 16)]
					CanNotRebond,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					Minted {
						address: ::subxt::utils::AccountId32,
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						Lst_amount: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						remark: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 1)]
					Redeemed {
						address: ::subxt::utils::AccountId32,
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						Lst_amount: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						unlock_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					RedeemSuccess {
						unlock_id: ::core::primitive::u32,
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						to: ::subxt::utils::AccountId32,
						token_amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					Rebonded {
						address: ::subxt::utils::AccountId32,
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						Lst_amount: ::core::primitive::u128,
						fee: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					RebondedByUnlockId {
						address: ::subxt::utils::AccountId32,
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						Lst_amount: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						unlock_id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					UnlockDurationSet {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						unlock_duration: runtime_types::tangle_primitives::TimeUnit,
					},
					#[codec(index = 6)]
					MinimumMintSet {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					MinimumRedeemSet {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					SupportRebondTokenAdded {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
					},
					#[codec(index = 9)]
					SupportRebondTokenRemoved {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
					},
					#[codec(index = 10)]
					#[doc = "Several fees has been set."]
					FeeSet {
						mint_fee: runtime_types::sp_arithmetic::per_things::Permill,
						redeem_fee: runtime_types::sp_arithmetic::per_things::Permill,
					},
					#[codec(index = 11)]
					HookIterationLimitSet { limit: ::core::primitive::u32 },
					#[codec(index = 12)]
					UnlockingTotalSet {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 13)]
					MinTimeUnitSet {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						time_unit: runtime_types::tangle_primitives::TimeUnit,
					},
					#[codec(index = 14)]
					FastRedeemFailed { err: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 15)]
					CurrencyTimeUnitRecreated {
						token_id: runtime_types::tangle_primitives::currency::CurrencyId,
						time_unit: runtime_types::tangle_primitives::TimeUnit,
					},
				}
			}
		}
		pub mod tangle_Lst_voting {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::vote`]."]
					vote {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						Lst_vote: runtime_types::tangle_Lst_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::unlock`]."]
					unlock {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::remove_delegator_vote`]."]
					remove_delegator_vote {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						#[codec(compact)]
						derivative_index: ::core::primitive::u16,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::kill_referendum`]."]
					kill_referendum {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::add_delegator`]."]
					add_delegator {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						derivative_index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::set_referendum_status`]."]
					set_referendum_status {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						info: runtime_types::tangle_Lst_voting::vote::ReferendumInfo<
							::core::primitive::u32,
							runtime_types::tangle_Lst_voting::vote::Tally<::core::primitive::u128>,
						>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::set_vote_locking_period`]."]
					set_vote_locking_period {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						locking_period: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::set_undeciding_timeout`]."]
					set_undeciding_timeout {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						undeciding_timeout: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::notify_vote`]."]
					notify_vote {
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::notify_remove_delegator_vote`]."]
					notify_remove_delegator_vote {
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
					},
					#[codec(index = 11)]
					#[doc = "See [`Pallet::set_vote_cap_ratio`]."]
					set_vote_cap_ratio {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						vote_cap_ratio: runtime_types::sp_arithmetic::per_things::Perbill,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "XCM execution Failure"]
					XcmFailure,
					#[codec(index = 1)]
					#[doc = "The given currency is not supported."]
					LstNotSupport,
					#[codec(index = 2)]
					#[doc = "Derivative index occupied."]
					DerivativeIndexOccupied,
					#[codec(index = 3)]
					#[doc = "Another vote is pending."]
					PendingVote,
					#[codec(index = 4)]
					#[doc = "Another update referendum status is pending."]
					PendingUpdateReferendumStatus,
					#[codec(index = 5)]
					#[doc = "No data available in storage."]
					NoData,
					#[codec(index = 6)]
					#[doc = "Poll is not ongoing."]
					NotOngoing,
					#[codec(index = 7)]
					#[doc = "Poll is not completed."]
					NotCompleted,
					#[codec(index = 8)]
					#[doc = "Poll is not killed."]
					NotKilled,
					#[codec(index = 9)]
					#[doc = "Poll is not expired."]
					NotExpired,
					#[codec(index = 10)]
					#[doc = "The given account did not vote on the poll."]
					NotVoter,
					#[codec(index = 11)]
					#[doc = "The actor has no permission to conduct the action."]
					NoPermission,
					#[codec(index = 12)]
					#[doc = "The actor has no permission to conduct the action right now but will do in the future."]
					NoPermissionYet,
					#[codec(index = 13)]
					#[doc = "The account is already delegating."]
					AlreadyDelegating,
					#[codec(index = 14)]
					#[doc = "Too high a balance was provided that the account cannot afford."]
					InsufficientFunds,
					#[codec(index = 15)]
					#[doc = "Maximum number of votes reached."]
					MaxVotesReached,
					#[codec(index = 16)]
					#[doc = "Maximum number of items reached."]
					TooMany,
					#[codec(index = 17)]
					#[doc = "The given vote is not Standard vote."]
					NotStandardVote,
					#[codec(index = 18)]
					#[doc = "The given conviction is not valid."]
					InvalidConviction,
					#[codec(index = 19)]
					#[doc = "The given value is out of range."]
					OutOfRange,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					Voted {
						who: ::subxt::utils::AccountId32,
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						poll_index: ::core::primitive::u32,
						token_vote: runtime_types::tangle_Lst_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
						delegator_vote: runtime_types::tangle_Lst_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					Unlocked {
						who: ::subxt::utils::AccountId32,
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						poll_index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					DelegatorVoteRemoved {
						who: ::subxt::utils::AccountId32,
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						derivative_index: ::core::primitive::u16,
					},
					#[codec(index = 3)]
					DelegatorAdded {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						derivative_index: ::core::primitive::u16,
					},
					#[codec(index = 4)]
					ReferendumInfoCreated {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						poll_index: ::core::primitive::u32,
						info: runtime_types::tangle_Lst_voting::vote::ReferendumInfo<
							::core::primitive::u32,
							runtime_types::tangle_Lst_voting::vote::Tally<::core::primitive::u128>,
						>,
					},
					#[codec(index = 5)]
					ReferendumInfoSet {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						poll_index: ::core::primitive::u32,
						info: runtime_types::tangle_Lst_voting::vote::ReferendumInfo<
							::core::primitive::u32,
							runtime_types::tangle_Lst_voting::vote::Tally<::core::primitive::u128>,
						>,
					},
					#[codec(index = 6)]
					VoteLockingPeriodSet {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						locking_period: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					UndecidingTimeoutSet {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						undeciding_timeout: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					ReferendumKilled {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						poll_index: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					VoteNotified {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						poll_index: ::core::primitive::u32,
						success: ::core::primitive::bool,
					},
					#[codec(index = 10)]
					DelegatorVoteRemovedNotified {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						poll_index: ::core::primitive::u32,
						success: ::core::primitive::bool,
					},
					#[codec(index = 11)]
					ResponseReceived {
						responder: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
					},
					#[codec(index = 12)]
					VoteCapRatioSet {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						vote_cap_ratio: runtime_types::sp_arithmetic::per_things::Perbill,
					},
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard {
						vote: runtime_types::pallet_conviction_voting::vote::Vote,
						balance: _0,
					},
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
					#[codec(index = 2)]
					SplitAbstain { aye: _0, nay: _0, abstain: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Casting<_0, _1, _2> {
					pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_1,
						runtime_types::tangle_Lst_voting::vote::AccountVote<_0>,
						::core::primitive::u16,
						_0,
					)>,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::tangle_Lst_voting::vote::PriorLock<_1, _0>,
					#[codec(skip)]
					pub __ignore: ::core::marker::PhantomData<_2>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegating<_0, _1, _2> {
					pub balance: _0,
					pub target: _1,
					pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::tangle_Lst_voting::vote::PriorLock<_2, _0>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ReferendumInfo<_0, _1> {
					#[codec(index = 0)]
					Ongoing(runtime_types::tangle_Lst_voting::vote::ReferendumStatus<_0, _1>),
					#[codec(index = 1)]
					Completed(_0),
					#[codec(index = 2)]
					Killed(_0),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ReferendumStatus<_0, _1> {
					pub submitted: ::core::option::Option<_0>,
					pub tally: _1,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub support: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Voting<_0, _1, _2, _3> {
					#[codec(index = 0)]
					Casting(runtime_types::tangle_Lst_voting::vote::Casting<_0, _2, _2>),
					#[codec(index = 1)]
					Delegating(runtime_types::tangle_Lst_voting::vote::Delegating<_0, _1, _2>),
					__Ignore(::core::marker::PhantomData<_3>),
				}
			}
		}
		pub mod tangle_parachain_staking {
			use super::runtime_types;
			pub mod delegation_requests {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CancelledScheduledRequest < _0 > { pub when_executable : :: core :: primitive :: u32 , pub action : runtime_types :: tangle_parachain_staking :: delegation_requests :: DelegationAction < _0 > , }
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum DelegationAction<_0> {
					#[codec(index = 0)]
					Revoke(_0),
					#[codec(index = 1)]
					Decrease(_0),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ScheduledRequest < _0 , _1 > { pub delegator : _0 , pub when_executable : :: core :: primitive :: u32 , pub action : runtime_types :: tangle_parachain_staking :: delegation_requests :: DelegationAction < _1 > , }
			}
			pub mod inflation {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct InflationInfo<_0> {
					pub expect: runtime_types::tangle_parachain_staking::inflation::Range<_0>,
					pub annual: runtime_types::tangle_parachain_staking::inflation::Range<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
					pub round: runtime_types::tangle_parachain_staking::inflation::Range<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Range<_0> {
					pub min: _0,
					pub ideal: _0,
					pub max: _0,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::set_staking_expectations`]."]
					set_staking_expectations {
						expectations: runtime_types::tangle_parachain_staking::inflation::Range<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::set_inflation`]."]
					set_inflation {
						schedule: runtime_types::tangle_parachain_staking::inflation::Range<
							runtime_types::sp_arithmetic::per_things::Perbill,
						>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::set_parachain_bond_account`]."]
					set_parachain_bond_account { new: ::subxt::utils::AccountId32 },
					#[codec(index = 3)]
					#[doc = "See [`Pallet::set_parachain_bond_reserve_percent`]."]
					set_parachain_bond_reserve_percent {
						new: runtime_types::sp_arithmetic::per_things::Percent,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::set_total_selected`]."]
					set_total_selected { new: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "See [`Pallet::set_collator_commission`]."]
					set_collator_commission {
						new: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::set_blocks_per_round`]."]
					set_blocks_per_round { new: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "See [`Pallet::join_candidates`]."]
					join_candidates {
						bond: ::core::primitive::u128,
						candidate_count: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::schedule_leave_candidates`]."]
					schedule_leave_candidates { candidate_count: ::core::primitive::u32 },
					#[codec(index = 9)]
					#[doc = "See [`Pallet::execute_leave_candidates`]."]
					execute_leave_candidates {
						candidate: ::subxt::utils::AccountId32,
						candidate_delegation_count: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::cancel_leave_candidates`]."]
					cancel_leave_candidates { candidate_count: ::core::primitive::u32 },
					#[codec(index = 11)]
					#[doc = "See [`Pallet::go_offline`]."]
					go_offline,
					#[codec(index = 12)]
					#[doc = "See [`Pallet::go_online`]."]
					go_online,
					#[codec(index = 13)]
					#[doc = "See [`Pallet::candidate_bond_more`]."]
					candidate_bond_more { more: ::core::primitive::u128 },
					#[codec(index = 14)]
					#[doc = "See [`Pallet::schedule_candidate_bond_less`]."]
					schedule_candidate_bond_less { less: ::core::primitive::u128 },
					#[codec(index = 15)]
					#[doc = "See [`Pallet::execute_candidate_bond_less`]."]
					execute_candidate_bond_less { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 16)]
					#[doc = "See [`Pallet::cancel_candidate_bond_less`]."]
					cancel_candidate_bond_less,
					#[codec(index = 17)]
					#[doc = "See [`Pallet::delegate`]."]
					delegate {
						candidate: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						candidate_delegation_count: ::core::primitive::u32,
						delegation_count: ::core::primitive::u32,
					},
					#[codec(index = 18)]
					#[doc = "See [`Pallet::schedule_leave_delegators`]."]
					schedule_leave_delegators,
					#[codec(index = 19)]
					#[doc = "See [`Pallet::execute_leave_delegators`]."]
					execute_leave_delegators {
						delegator: ::subxt::utils::AccountId32,
						delegation_count: ::core::primitive::u32,
					},
					#[codec(index = 20)]
					#[doc = "See [`Pallet::cancel_leave_delegators`]."]
					cancel_leave_delegators,
					#[codec(index = 21)]
					#[doc = "See [`Pallet::schedule_revoke_delegation`]."]
					schedule_revoke_delegation { collator: ::subxt::utils::AccountId32 },
					#[codec(index = 22)]
					#[doc = "See [`Pallet::delegator_bond_more`]."]
					delegator_bond_more {
						candidate: ::subxt::utils::AccountId32,
						more: ::core::primitive::u128,
					},
					#[codec(index = 23)]
					#[doc = "See [`Pallet::schedule_delegator_bond_less`]."]
					schedule_delegator_bond_less {
						candidate: ::subxt::utils::AccountId32,
						less: ::core::primitive::u128,
					},
					#[codec(index = 24)]
					#[doc = "See [`Pallet::execute_delegation_request`]."]
					execute_delegation_request {
						delegator: ::subxt::utils::AccountId32,
						candidate: ::subxt::utils::AccountId32,
					},
					#[codec(index = 25)]
					#[doc = "See [`Pallet::cancel_delegation_request`]."]
					cancel_delegation_request { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 26)]
					#[doc = "See [`Pallet::hotfix_remove_delegation_requests_exited_candidates`]."]
					hotfix_remove_delegation_requests_exited_candidates {
						candidates: ::std::vec::Vec<::subxt::utils::AccountId32>,
					},
					#[codec(index = 27)]
					#[doc = "See [`Pallet::hotfix_migrate_delegators_from_reserve_to_locks`]."]
					hotfix_migrate_delegators_from_reserve_to_locks {
						delegators: ::std::vec::Vec<::subxt::utils::AccountId32>,
					},
					#[codec(index = 28)]
					#[doc = "See [`Pallet::hotfix_migrate_collators_from_reserve_to_locks`]."]
					hotfix_migrate_collators_from_reserve_to_locks {
						collators: ::std::vec::Vec<::subxt::utils::AccountId32>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					DelegatorDNE,
					#[codec(index = 1)]
					DelegatorDNEinTopNorBottom,
					#[codec(index = 2)]
					DelegatorDNEInDelegatorSet,
					#[codec(index = 3)]
					CandidateDNE,
					#[codec(index = 4)]
					DelegationDNE,
					#[codec(index = 5)]
					DelegatorExists,
					#[codec(index = 6)]
					CandidateExists,
					#[codec(index = 7)]
					CandidateBondBelowMin,
					#[codec(index = 8)]
					InsufficientBalance,
					#[codec(index = 9)]
					DelegatorBondBelowMin,
					#[codec(index = 10)]
					DelegationBelowMin,
					#[codec(index = 11)]
					AlreadyOffline,
					#[codec(index = 12)]
					AlreadyActive,
					#[codec(index = 13)]
					DelegatorAlreadyLeaving,
					#[codec(index = 14)]
					DelegatorNotLeaving,
					#[codec(index = 15)]
					DelegatorCannotLeaveYet,
					#[codec(index = 16)]
					CannotDelegateIfLeaving,
					#[codec(index = 17)]
					CandidateAlreadyLeaving,
					#[codec(index = 18)]
					CandidateNotLeaving,
					#[codec(index = 19)]
					CandidateCannotLeaveYet,
					#[codec(index = 20)]
					CannotGoOnlineIfLeaving,
					#[codec(index = 21)]
					ExceedMaxDelegationsPerDelegator,
					#[codec(index = 22)]
					AlreadyDelegatedCandidate,
					#[codec(index = 23)]
					InvalidSchedule,
					#[codec(index = 24)]
					CannotSetBelowMin,
					#[codec(index = 25)]
					RoundLengthMustBeAtLeastTotalSelectedCollators,
					#[codec(index = 26)]
					NoWritingSameValue,
					#[codec(index = 27)]
					TooLowCandidateCountWeightHintJoinCandidates,
					#[codec(index = 28)]
					TooLowCandidateCountWeightHintCancelLeaveCandidates,
					#[codec(index = 29)]
					TooLowCandidateCountToLeaveCandidates,
					#[codec(index = 30)]
					TooLowDelegationCountToDelegate,
					#[codec(index = 31)]
					TooLowCandidateDelegationCountToDelegate,
					#[codec(index = 32)]
					TooLowCandidateDelegationCountToLeaveCandidates,
					#[codec(index = 33)]
					TooLowDelegationCountToLeaveDelegators,
					#[codec(index = 34)]
					PendingCandidateRequestsDNE,
					#[codec(index = 35)]
					PendingCandidateRequestAlreadyExists,
					#[codec(index = 36)]
					PendingCandidateRequestNotDueYet,
					#[codec(index = 37)]
					PendingDelegationRequestDNE,
					#[codec(index = 38)]
					PendingDelegationRequestAlreadyExists,
					#[codec(index = 39)]
					PendingDelegationRequestNotDueYet,
					#[codec(index = 40)]
					CannotDelegateLessThanOrEqualToLowestBottomWhenFull,
					#[codec(index = 41)]
					PendingDelegationRevoke,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					# [codec (index = 0)] # [doc = "Started new round."] NewRound { starting_block : :: core :: primitive :: u32 , round : :: core :: primitive :: u32 , selected_collators_number : :: core :: primitive :: u32 , total_balance : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "Account joined the set of collator candidates."] JoinedCollatorCandidates { account : :: subxt :: utils :: AccountId32 , amount_locked : :: core :: primitive :: u128 , new_total_amt_locked : :: core :: primitive :: u128 , } , # [codec (index = 2)] # [doc = "Candidate selected for collators. Total Exposed Amount includes all delegations."] CollatorChosen { round : :: core :: primitive :: u32 , collator_account : :: subxt :: utils :: AccountId32 , total_exposed_amount : :: core :: primitive :: u128 , } , # [codec (index = 3)] # [doc = "Candidate requested to decrease a self bond."] CandidateBondLessRequested { candidate : :: subxt :: utils :: AccountId32 , amount_to_decrease : :: core :: primitive :: u128 , execute_round : :: core :: primitive :: u32 , } , # [codec (index = 4)] # [doc = "Candidate has increased a self bond."] CandidateBondedMore { candidate : :: subxt :: utils :: AccountId32 , amount : :: core :: primitive :: u128 , new_total_bond : :: core :: primitive :: u128 , } , # [codec (index = 5)] # [doc = "Candidate has decreased a self bond."] CandidateBondedLess { candidate : :: subxt :: utils :: AccountId32 , amount : :: core :: primitive :: u128 , new_bond : :: core :: primitive :: u128 , } , # [codec (index = 6)] # [doc = "Candidate temporarily leave the set of collator candidates without unbonding."] CandidateWentOffline { candidate : :: subxt :: utils :: AccountId32 , } , # [codec (index = 7)] # [doc = "Candidate rejoins the set of collator candidates."] CandidateBackOnline { candidate : :: subxt :: utils :: AccountId32 , } , # [codec (index = 8)] # [doc = "Candidate has requested to leave the set of candidates."] CandidateScheduledExit { exit_allowed_round : :: core :: primitive :: u32 , candidate : :: subxt :: utils :: AccountId32 , scheduled_exit : :: core :: primitive :: u32 , } , # [codec (index = 9)] # [doc = "Cancelled request to leave the set of candidates."] CancelledCandidateExit { candidate : :: subxt :: utils :: AccountId32 , } , # [codec (index = 10)] # [doc = "Cancelled request to decrease candidate's bond."] CancelledCandidateBondLess { candidate : :: subxt :: utils :: AccountId32 , amount : :: core :: primitive :: u128 , execute_round : :: core :: primitive :: u32 , } , # [codec (index = 11)] # [doc = "Candidate has left the set of candidates."] CandidateLeft { ex_candidate : :: subxt :: utils :: AccountId32 , unlocked_amount : :: core :: primitive :: u128 , new_total_amt_locked : :: core :: primitive :: u128 , } , # [codec (index = 12)] # [doc = "Delegator requested to decrease a bond for the collator candidate."] DelegationDecreaseScheduled { delegator : :: subxt :: utils :: AccountId32 , candidate : :: subxt :: utils :: AccountId32 , amount_to_decrease : :: core :: primitive :: u128 , execute_round : :: core :: primitive :: u32 , } , # [codec (index = 13)] DelegationIncreased { delegator : :: subxt :: utils :: AccountId32 , candidate : :: subxt :: utils :: AccountId32 , amount : :: core :: primitive :: u128 , in_top : :: core :: primitive :: bool , } , # [codec (index = 14)] DelegationDecreased { delegator : :: subxt :: utils :: AccountId32 , candidate : :: subxt :: utils :: AccountId32 , amount : :: core :: primitive :: u128 , in_top : :: core :: primitive :: bool , } , # [codec (index = 15)] # [doc = "Delegator requested to leave the set of delegators."] DelegatorExitScheduled { round : :: core :: primitive :: u32 , delegator : :: subxt :: utils :: AccountId32 , scheduled_exit : :: core :: primitive :: u32 , } , # [codec (index = 16)] # [doc = "Delegator requested to revoke delegation."] DelegationRevocationScheduled { round : :: core :: primitive :: u32 , delegator : :: subxt :: utils :: AccountId32 , candidate : :: subxt :: utils :: AccountId32 , scheduled_exit : :: core :: primitive :: u32 , } , # [codec (index = 17)] # [doc = "Delegator has left the set of delegators."] DelegatorLeft { delegator : :: subxt :: utils :: AccountId32 , unstaked_amount : :: core :: primitive :: u128 , } , # [codec (index = 18)] # [doc = "Delegation revoked."] DelegationRevoked { delegator : :: subxt :: utils :: AccountId32 , candidate : :: subxt :: utils :: AccountId32 , unstaked_amount : :: core :: primitive :: u128 , } , # [codec (index = 19)] # [doc = "Delegation kicked."] DelegationKicked { delegator : :: subxt :: utils :: AccountId32 , candidate : :: subxt :: utils :: AccountId32 , unstaked_amount : :: core :: primitive :: u128 , } , # [codec (index = 20)] # [doc = "Cancelled a pending request to exit the set of delegators."] DelegatorExitCancelled { delegator : :: subxt :: utils :: AccountId32 , } , # [codec (index = 21)] # [doc = "Cancelled request to change an existing delegation."] CancelledDelegationRequest { delegator : :: subxt :: utils :: AccountId32 , cancelled_request : runtime_types :: tangle_parachain_staking :: delegation_requests :: CancelledScheduledRequest < :: core :: primitive :: u128 > , collator : :: subxt :: utils :: AccountId32 , } , # [codec (index = 22)] # [doc = "New delegation (increase of the existing one)."] Delegation { delegator : :: subxt :: utils :: AccountId32 , locked_amount : :: core :: primitive :: u128 , candidate : :: subxt :: utils :: AccountId32 , delegator_position : runtime_types :: tangle_parachain_staking :: types :: DelegatorAdded < :: core :: primitive :: u128 > , } , # [codec (index = 23)] # [doc = "Delegation from candidate state has been remove."] DelegatorLeftCandidate { delegator : :: subxt :: utils :: AccountId32 , candidate : :: subxt :: utils :: AccountId32 , unstaked_amount : :: core :: primitive :: u128 , total_candidate_staked : :: core :: primitive :: u128 , } , # [codec (index = 24)] # [doc = "Paid the account (delegator or collator) the balance as liquid rewards."] Rewarded { account : :: subxt :: utils :: AccountId32 , rewards : :: core :: primitive :: u128 , } , # [codec (index = 25)] # [doc = "Transferred to account which holds funds reserved for parachain bond."] ReservedForParachainBond { account : :: subxt :: utils :: AccountId32 , value : :: core :: primitive :: u128 , } , # [codec (index = 26)] # [doc = "Account (re)set for parachain bond treasury."] ParachainBondAccountSet { old : :: subxt :: utils :: AccountId32 , new : :: subxt :: utils :: AccountId32 , } , # [codec (index = 27)] # [doc = "Percent of inflation reserved for parachain bond (re)set."] ParachainBondReservePercentSet { old : runtime_types :: sp_arithmetic :: per_things :: Percent , new : runtime_types :: sp_arithmetic :: per_things :: Percent , } , # [codec (index = 28)] # [doc = "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"] InflationSet { annual_min : runtime_types :: sp_arithmetic :: per_things :: Perbill , annual_ideal : runtime_types :: sp_arithmetic :: per_things :: Perbill , annual_max : runtime_types :: sp_arithmetic :: per_things :: Perbill , round_min : runtime_types :: sp_arithmetic :: per_things :: Perbill , round_ideal : runtime_types :: sp_arithmetic :: per_things :: Perbill , round_max : runtime_types :: sp_arithmetic :: per_things :: Perbill , } , # [codec (index = 29)] # [doc = "Staking expectations set."] StakeExpectationsSet { expect_min : :: core :: primitive :: u128 , expect_ideal : :: core :: primitive :: u128 , expect_max : :: core :: primitive :: u128 , } , # [codec (index = 30)] # [doc = "Set total selected candidates to this value."] TotalSelectedSet { old : :: core :: primitive :: u32 , new : :: core :: primitive :: u32 , } , # [codec (index = 31)] # [doc = "Set collator commission to this value."] CollatorCommissionSet { old : runtime_types :: sp_arithmetic :: per_things :: Perbill , new : runtime_types :: sp_arithmetic :: per_things :: Perbill , } , # [codec (index = 32)] # [doc = "Set blocks per round"] BlocksPerRoundSet { current_round : :: core :: primitive :: u32 , first_block : :: core :: primitive :: u32 , old : :: core :: primitive :: u32 , new : :: core :: primitive :: u32 , new_per_round_inflation_min : runtime_types :: sp_arithmetic :: per_things :: Perbill , new_per_round_inflation_ideal : runtime_types :: sp_arithmetic :: per_things :: Perbill , new_per_round_inflation_max : runtime_types :: sp_arithmetic :: per_things :: Perbill , } , }
			}
			pub mod set {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct OrderedSet<_0>(pub ::std::vec::Vec<_0>);
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Bond<_0, _1> {
					pub owner: _0,
					pub amount: _1,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CandidateBondLessRequest<_0> {
					pub amount: _0,
					pub when_executable: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CandidateMetadata<_0> {
					pub bond: _0,
					pub delegation_count: ::core::primitive::u32,
					pub total_counted: _0,
					pub lowest_top_delegation_amount: _0,
					pub highest_bottom_delegation_amount: _0,
					pub lowest_bottom_delegation_amount: _0,
					pub top_capacity:
						runtime_types::tangle_parachain_staking::types::CapacityStatus,
					pub bottom_capacity:
						runtime_types::tangle_parachain_staking::types::CapacityStatus,
					pub request: ::core::option::Option<
						runtime_types::tangle_parachain_staking::types::CandidateBondLessRequest<
							_0,
						>,
					>,
					pub status: runtime_types::tangle_parachain_staking::types::CollatorStatus,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum CapacityStatus {
					#[codec(index = 0)]
					Full,
					#[codec(index = 1)]
					Empty,
					#[codec(index = 2)]
					Partial,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CollatorSnapshot<_0, _1> {
					pub bond: _1,
					pub delegations: ::std::vec::Vec<
						runtime_types::tangle_parachain_staking::types::Bond<_0, _1>,
					>,
					pub total: _1,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum CollatorStatus {
					#[codec(index = 0)]
					Active,
					#[codec(index = 1)]
					Idle,
					#[codec(index = 2)]
					Leaving(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DelayedPayout<_0> {
					pub round_issuance: _0,
					pub total_staking_reward: _0,
					pub collator_commission: runtime_types::sp_arithmetic::per_things::Perbill,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegations<_0, _1> {
					pub delegations: ::std::vec::Vec<
						runtime_types::tangle_parachain_staking::types::Bond<_0, _1>,
					>,
					pub total: _1,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegator<_0, _1> {
					pub id: _0,
					pub delegations: runtime_types::tangle_parachain_staking::set::OrderedSet<
						runtime_types::tangle_parachain_staking::types::Bond<_0, _1>,
					>,
					pub total: _1,
					pub less_total: _1,
					pub status: runtime_types::tangle_parachain_staking::types::DelegatorStatus,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum DelegatorAdded<_0> {
					#[codec(index = 0)]
					AddedToTop { new_total: _0 },
					#[codec(index = 1)]
					AddedToBottom,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum DelegatorStatus {
					#[codec(index = 0)]
					Active,
					#[codec(index = 1)]
					Leaving(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ParachainBondConfig<_0, _1> {
					pub account: _0,
					pub percent: runtime_types::sp_arithmetic::per_things::Percent,
					pub payment_in_round: _1,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct RoundInfo<_0> {
					pub current: ::core::primitive::u32,
					pub first: _0,
					pub length: ::core::primitive::u32,
				}
			}
		}
		pub mod tangle_primitives {
			use super::runtime_types;
			pub mod currency {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AssetIds {
					#[codec(index = 0)]
					ForeignAssetId(::core::primitive::u32),
					#[codec(index = 1)]
					NativeAssetId(runtime_types::tangle_primitives::currency::CurrencyId),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum CurrencyId {
					#[codec(index = 0)]
					Native(runtime_types::tangle_primitives::currency::TokenSymbol),
					#[codec(index = 1)]
					Lst(runtime_types::tangle_primitives::currency::TokenSymbol),
					#[codec(index = 2)]
					Token(runtime_types::tangle_primitives::currency::TokenSymbol),
					#[codec(index = 3)]
					Stable(runtime_types::tangle_primitives::currency::TokenSymbol),
					#[codec(index = 4)]
					VSToken(runtime_types::tangle_primitives::currency::TokenSymbol),
					#[codec(index = 5)]
					VSBond(
						runtime_types::tangle_primitives::currency::TokenSymbol,
						::core::primitive::u32,
						::core::primitive::u32,
						::core::primitive::u32,
					),
					#[codec(index = 6)]
					LPToken(
						runtime_types::tangle_primitives::currency::TokenSymbol,
						::core::primitive::u8,
						runtime_types::tangle_primitives::currency::TokenSymbol,
						::core::primitive::u8,
					),
					#[codec(index = 7)]
					ForeignAsset(::core::primitive::u32),
					#[codec(index = 8)]
					Token2(::core::primitive::u8),
					#[codec(index = 9)]
					Lst2(::core::primitive::u8),
					#[codec(index = 10)]
					VSToken2(::core::primitive::u8),
					#[codec(index = 11)]
					VSBond2(
						::core::primitive::u8,
						::core::primitive::u32,
						::core::primitive::u32,
						::core::primitive::u32,
					),
					#[codec(index = 12)]
					StableLpToken(::core::primitive::u32),
					#[codec(index = 13)]
					BLP(::core::primitive::u32),
					#[codec(index = 14)]
					Lend(::core::primitive::u8),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum TokenSymbol {
					#[codec(index = 0)]
					ASG,
					#[codec(index = 1)]
					TNT,
					#[codec(index = 2)]
					KUSD,
					#[codec(index = 3)]
					DOT,
					#[codec(index = 4)]
					KSM,
					#[codec(index = 5)]
					ETH,
					#[codec(index = 6)]
					KAR,
					#[codec(index = 7)]
					ZLK,
					#[codec(index = 8)]
					PHA,
					#[codec(index = 9)]
					RMRK,
					#[codec(index = 10)]
					MOVR,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RedeemType<_0> {
				#[codec(index = 0)]
				Native,
				#[codec(index = 1)]
				Astar(_0),
				#[codec(index = 2)]
				Moonbeam(::subxt::utils::H160),
				#[codec(index = 3)]
				Hydradx(_0),
				#[codec(index = 4)]
				Interlay(_0),
				#[codec(index = 5)]
				Manta(_0),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum TimeUnit {
				#[codec(index = 0)]
				Era(#[codec(compact)] ::core::primitive::u32),
				#[codec(index = 1)]
				SlashingSpan(#[codec(compact)] ::core::primitive::u32),
				#[codec(index = 2)]
				Round(#[codec(compact)] ::core::primitive::u32),
				#[codec(index = 3)]
				Kblock(#[codec(compact)] ::core::primitive::u32),
				#[codec(index = 4)]
				Hour(#[codec(compact)] ::core::primitive::u32),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum XcmOperationType {
				#[codec(index = 0)]
				UmpContributeTransact,
				#[codec(index = 1)]
				StatemineTransfer,
				#[codec(index = 2)]
				Bond,
				#[codec(index = 3)]
				WithdrawUnbonded,
				#[codec(index = 4)]
				BondExtra,
				#[codec(index = 5)]
				Unbond,
				#[codec(index = 6)]
				Rebond,
				#[codec(index = 7)]
				Delegate,
				#[codec(index = 8)]
				Payout,
				#[codec(index = 9)]
				Liquidize,
				#[codec(index = 10)]
				TransferBack,
				#[codec(index = 11)]
				TransferTo,
				#[codec(index = 12)]
				Chill,
				#[codec(index = 13)]
				Undelegate,
				#[codec(index = 14)]
				CancelLeave,
				#[codec(index = 15)]
				XtokensTransferBack,
				#[codec(index = 16)]
				ExecuteLeave,
				#[codec(index = 17)]
				ConvertAsset,
				#[codec(index = 18)]
				Vote,
				#[codec(index = 19)]
				RemoveVote,
				#[codec(index = 20)]
				Any,
				#[codec(index = 21)]
				SupplementaryFee,
			}
		}
		pub mod tangle_slp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::initialize_delegator`]."]
					initialize_delegator {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_location: ::std::boxed::Box<
							::core::option::Option<
								runtime_types::staging_xcm::v3::multilocation::MultiLocation,
							>,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::bond`]."]
					bond {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::bond_extra`]."]
					bond_extra {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::unbond`]."]
					unbond {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::unbond_all`]."]
					unbond_all {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::rebond`]."]
					rebond {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						amount: ::core::option::Option<::core::primitive::u128>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::delegate`]."]
					delegate {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						targets: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::undelegate`]."]
					undelegate {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						targets: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::redelegate`]."]
					redelegate {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						targets: ::core::option::Option<
							::std::vec::Vec<
								runtime_types::staging_xcm::v3::multilocation::MultiLocation,
							>,
						>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::payout`]."]
					payout {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						validator: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						when: ::core::option::Option<runtime_types::tangle_primitives::TimeUnit>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::liquidize`]."]
					liquidize {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						when: ::core::option::Option<runtime_types::tangle_primitives::TimeUnit>,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						amount: ::core::option::Option<::core::primitive::u128>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 11)]
					#[doc = "See [`Pallet::chill`]."]
					chill {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 12)]
					#[doc = "See [`Pallet::transfer_back`]."]
					transfer_back {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						from: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						to: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 13)]
					#[doc = "See [`Pallet::transfer_to`]."]
					transfer_to {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						from: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						to: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					#[doc = "See [`Pallet::convert_asset`]."]
					convert_asset {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						if_from_currency: ::core::primitive::bool,
						weight_and_fee: ::core::option::Option<(
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 15)]
					#[doc = "See [`Pallet::increase_token_pool`]."]
					increase_token_pool {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 16)]
					#[doc = "See [`Pallet::decrease_token_pool`]."]
					decrease_token_pool {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 17)]
					#[doc = "See [`Pallet::update_ongoing_time_unit`]."]
					update_ongoing_time_unit {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						time_unit: runtime_types::tangle_primitives::TimeUnit,
					},
					#[codec(index = 18)]
					#[doc = "See [`Pallet::refund_currency_due_unbond`]."]
					refund_currency_due_unbond {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
					},
					#[codec(index = 19)]
					#[doc = "See [`Pallet::supplement_fee_reserve`]."]
					supplement_fee_reserve {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						dest: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 20)]
					#[doc = "See [`Pallet::charge_host_fee_and_tune_Lst_exchange_rate`]."]
					charge_host_fee_and_tune_Lst_exchange_rate {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						value: ::core::primitive::u128,
						who: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 22)]
					#[doc = "See [`Pallet::set_operate_origin`]."]
					set_operate_origin {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::core::option::Option<::subxt::utils::AccountId32>,
					},
					#[codec(index = 23)]
					#[doc = "See [`Pallet::set_fee_source`]."]
					set_fee_source {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who_and_fee: ::core::option::Option<(
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 24)]
					#[doc = "See [`Pallet::add_delegator`]."]
					add_delegator {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						index: ::core::primitive::u16,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 25)]
					#[doc = "See [`Pallet::remove_delegator`]."]
					remove_delegator {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 26)]
					#[doc = "See [`Pallet::add_validator`]."]
					add_validator {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 27)]
					#[doc = "See [`Pallet::remove_validator`]."]
					remove_validator {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 28)]
					#[doc = "See [`Pallet::set_validators_by_delegator`]."]
					set_validators_by_delegator {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						validators: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 29)]
					#[doc = "See [`Pallet::set_delegator_ledger`]."]
					set_delegator_ledger {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						ledger: ::std::boxed::Box<
							::core::option::Option<
								runtime_types::tangle_slp::primitives::Ledger<
									::core::primitive::u128,
								>,
							>,
						>,
					},
					#[codec(index = 30)]
					#[doc = "See [`Pallet::set_minimums_and_maximums`]."]
					set_minimums_and_maximums {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						constraints: ::core::option::Option<
							runtime_types::tangle_slp::primitives::MinimumsMaximums<
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 31)]
					#[doc = "See [`Pallet::set_currency_delays`]."]
					set_currency_delays {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						maybe_delays:
							::core::option::Option<runtime_types::tangle_slp::primitives::Delays>,
					},
					#[codec(index = 32)]
					#[doc = "See [`Pallet::set_hosting_fees`]."]
					set_hosting_fees {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						maybe_fee_set: ::core::option::Option<(
							runtime_types::sp_arithmetic::per_things::Permill,
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						)>,
					},
					#[codec(index = 33)]
					#[doc = "See [`Pallet::set_currency_tune_exchange_rate_limit`]."]
					set_currency_tune_exchange_rate_limit {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						maybe_tune_exchange_rate_limit: ::core::option::Option<(
							::core::primitive::u32,
							runtime_types::sp_arithmetic::per_things::Permill,
						)>,
					},
					#[codec(index = 34)]
					#[doc = "See [`Pallet::set_ongoing_time_unit_update_interval`]."]
					set_ongoing_time_unit_update_interval {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						maybe_interval: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 35)]
					#[doc = "See [`Pallet::add_supplement_fee_account_to_whitelist`]."]
					add_supplement_fee_account_to_whitelist {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 36)]
					#[doc = "See [`Pallet::remove_supplement_fee_account_from_whitelist`]."]
					remove_supplement_fee_account_from_whitelist {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 37)]
					#[doc = "See [`Pallet::confirm_delegator_ledger_query_response`]."]
					confirm_delegator_ledger_query_response {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 38)]
					#[doc = "See [`Pallet::fail_delegator_ledger_query_response`]."]
					fail_delegator_ledger_query_response {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 39)]
					#[doc = "See [`Pallet::confirm_validators_by_delegator_query_response`]."]
					confirm_validators_by_delegator_query_response {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 40)]
					#[doc = "See [`Pallet::fail_validators_by_delegator_query_response`]."]
					fail_validators_by_delegator_query_response {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 41)]
					#[doc = "See [`Pallet::confirm_delegator_ledger`]."]
					confirm_delegator_ledger {
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
					},
					#[codec(index = 42)]
					#[doc = "See [`Pallet::confirm_validators_by_delegator`]."]
					confirm_validators_by_delegator {
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
					},
					#[codec(index = 43)]
					#[doc = "See [`Pallet::reset_validators`]."]
					reset_validators {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validator_list: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 44)]
					#[doc = "See [`Pallet::set_validator_boost_list`]."]
					set_validator_boost_list {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validator_list: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 45)]
					#[doc = "See [`Pallet::add_to_validator_boost_list`]."]
					add_to_validator_boost_list {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 46)]
					#[doc = "See [`Pallet::remove_from_validator_boot_list`]."]
					remove_from_validator_boot_list {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: ::std::boxed::Box<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 47)]
					#[doc = "See [`Pallet::convert_treasury_Lst`]."]
					convert_treasury_Lst {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 48)]
					#[doc = "See [`Pallet::clean_outdated_validator_boost_list`]."]
					clean_outdated_validator_boost_list {
						token: runtime_types::tangle_primitives::currency::CurrencyId,
						page: ::core::primitive::u8,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					OperateOriginNotSet,
					#[codec(index = 1)]
					NotAuthorized,
					#[codec(index = 2)]
					NotSupportedCurrencyId,
					#[codec(index = 3)]
					FailToAddDelegator,
					#[codec(index = 4)]
					OverFlow,
					#[codec(index = 5)]
					UnderFlow,
					#[codec(index = 6)]
					NotExist,
					#[codec(index = 7)]
					LowerThanMinimum,
					#[codec(index = 8)]
					GreaterThanMaximum,
					#[codec(index = 9)]
					AlreadyBonded,
					#[codec(index = 10)]
					AccountNotExist,
					#[codec(index = 11)]
					DelegatorNotExist,
					#[codec(index = 12)]
					XcmFailure,
					#[codec(index = 13)]
					DelegatorNotBonded,
					#[codec(index = 14)]
					ExceedActiveMaximum,
					#[codec(index = 15)]
					ProblematicLedger,
					#[codec(index = 16)]
					NotEnoughToUnbond,
					#[codec(index = 17)]
					ExceedUnlockingRecords,
					#[codec(index = 18)]
					RebondExceedUnlockingAmount,
					#[codec(index = 19)]
					DecodingError,
					#[codec(index = 20)]
					EncodingError,
					#[codec(index = 21)]
					VectorEmpty,
					#[codec(index = 22)]
					ValidatorSetNotExist,
					#[codec(index = 23)]
					ValidatorNotExist,
					#[codec(index = 24)]
					InvalidTimeUnit,
					#[codec(index = 25)]
					AmountZero,
					#[codec(index = 26)]
					AmountNotZero,
					#[codec(index = 27)]
					AlreadyExist,
					#[codec(index = 28)]
					ValidatorStillInUse,
					#[codec(index = 29)]
					TimeUnitNotExist,
					#[codec(index = 30)]
					FeeSourceNotExist,
					#[codec(index = 31)]
					WeightAndFeeNotExists,
					#[codec(index = 32)]
					MinimumsAndMaximumsNotExist,
					#[codec(index = 33)]
					QueryNotExist,
					#[codec(index = 34)]
					DelaysNotExist,
					#[codec(index = 35)]
					Unexpected,
					#[codec(index = 36)]
					QueryResponseRemoveError,
					#[codec(index = 37)]
					InvalidHostingFee,
					#[codec(index = 38)]
					InvalidAccount,
					#[codec(index = 39)]
					IncreaseTokenPoolError,
					#[codec(index = 40)]
					TuneExchangeRateLimitNotSet,
					#[codec(index = 41)]
					CurrencyLatestTuneRecordNotExist,
					#[codec(index = 42)]
					InvalidTransferSource,
					#[codec(index = 43)]
					ValidatorNotProvided,
					#[codec(index = 44)]
					Unsupported,
					#[codec(index = 45)]
					ValidatorNotBonded,
					#[codec(index = 46)]
					AlreadyRequested,
					#[codec(index = 47)]
					RequestNotExist,
					#[codec(index = 48)]
					AlreadyLeaving,
					#[codec(index = 49)]
					DelegatorNotLeaving,
					#[codec(index = 50)]
					RequestNotDue,
					#[codec(index = 51)]
					LeavingNotDue,
					#[codec(index = 52)]
					DelegatorSetNotExist,
					#[codec(index = 53)]
					DelegatorLeaving,
					#[codec(index = 54)]
					DelegatorAlreadyLeaving,
					#[codec(index = 55)]
					ValidatorError,
					#[codec(index = 56)]
					AmountNone,
					#[codec(index = 57)]
					InvalidDelays,
					#[codec(index = 58)]
					OngoingTimeUnitUpdateIntervalNotExist,
					#[codec(index = 59)]
					LastTimeUpdatedOngoingTimeUnitNotExist,
					#[codec(index = 60)]
					TooFrequent,
					#[codec(index = 61)]
					DestAccountNotValid,
					#[codec(index = 62)]
					WhiteListNotExist,
					#[codec(index = 63)]
					DelegatorAlreadyTuned,
					#[codec(index = 64)]
					FeeTooHigh,
					#[codec(index = 65)]
					NotEnoughBalance,
					#[codec(index = 66)]
					VectorTooLong,
					#[codec(index = 67)]
					MultiCurrencyError,
					#[codec(index = 68)]
					NotDelegateValidator,
					#[codec(index = 69)]
					DividedByZero,
					#[codec(index = 70)]
					SharePriceNotValid,
					#[codec(index = 71)]
					InvalidAmount,
					#[codec(index = 72)]
					ValidatorMultilocationNotvalid,
					#[codec(index = 73)]
					AmountNotProvided,
					#[codec(index = 74)]
					FailToConvert,
					#[codec(index = 75)]
					ExceedMaxLengthLimit,
					#[codec(index = 76)]
					#[doc = "Transfer to failed"]
					TransferToError,
					#[codec(index = 77)]
					StablePoolNotFound,
					#[codec(index = 78)]
					StablePoolTokenIndexNotFound,
					#[codec(index = 79)]
					ExceedLimit,
					#[codec(index = 80)]
					InvalidPageNumber,
					#[codec(index = 81)]
					NoMoreValidatorBoostListForCurrency,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					DelegatorInitialized {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 1)]
					DelegatorBonded {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						bonded_amount: ::core::primitive::u128,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 2)]
					DelegatorBondExtra {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						extra_bonded_amount: ::core::primitive::u128,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 3)]
					DelegatorUnbond {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						unbond_amount: ::core::primitive::u128,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 4)]
					DelegatorUnbondAll {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
					},
					#[codec(index = 5)]
					DelegatorRebond {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						rebond_amount: ::core::option::Option<::core::primitive::u128>,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
						validator: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 6)]
					Delegated {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						targets: ::core::option::Option<
							::std::vec::Vec<
								runtime_types::staging_xcm::v3::multilocation::MultiLocation,
							>,
						>,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
					},
					#[codec(index = 7)]
					Undelegated {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						targets: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
					},
					#[codec(index = 8)]
					Payout {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validator: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						time_unit:
							::core::option::Option<runtime_types::tangle_primitives::TimeUnit>,
					},
					#[codec(index = 9)]
					Liquidize {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						time_unit:
							::core::option::Option<runtime_types::tangle_primitives::TimeUnit>,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
						amount: ::core::option::Option<::core::primitive::u128>,
					},
					#[codec(index = 10)]
					Chill {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						query_id_hash: ::subxt::utils::H256,
					},
					#[codec(index = 11)]
					TransferBack {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						from: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						to: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					TransferTo {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						from: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						to: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 13)]
					ConvertAsset {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					DelegatorAdded {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						index: ::core::primitive::u16,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 15)]
					DelegatorRemoved {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 16)]
					ValidatorsAdded {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 17)]
					ValidatorsRemoved {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 18)]
					Refund {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						time_unit: runtime_types::tangle_primitives::TimeUnit,
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 19)]
					FundMoveFromExitToEntrance {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 20)]
					TimeUnitUpdated {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						old: ::core::option::Option<runtime_types::tangle_primitives::TimeUnit>,
						new: runtime_types::tangle_primitives::TimeUnit,
					},
					#[codec(index = 21)]
					PoolTokenIncreased {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 22)]
					HostingFeeCharged {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 23)]
					PoolTokenDecreased {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 24)]
					FeeSupplemented {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						from: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						to: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					ValidatorsByDelegatorSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validators_list: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
						delegator_id: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 26)]
					OperateOriginSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						operator: ::core::option::Option<::subxt::utils::AccountId32>,
					},
					#[codec(index = 27)]
					FeeSourceSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who_and_fee: ::core::option::Option<(
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 28)]
					DelegatorLedgerSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delegator: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						ledger: ::core::option::Option<
							runtime_types::tangle_slp::primitives::Ledger<::core::primitive::u128>,
						>,
					},
					#[codec(index = 29)]
					DelegatorLedgerQueryResponseConfirmed {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						entry: runtime_types::tangle_slp::primitives::LedgerUpdateEntry<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 30)]
					DelegatorLedgerQueryResponseFailed {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 31)]
					ValidatorsByDelegatorQueryResponseConfirmed {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						entry:
							runtime_types::tangle_slp::primitives::ValidatorsByDelegatorUpdateEntry,
					},
					#[codec(index = 32)]
					ValidatorsByDelegatorQueryResponseFailed {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 33)]
					MinimumsMaximumsSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						minimums_and_maximums: ::core::option::Option<
							runtime_types::tangle_slp::primitives::MinimumsMaximums<
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 34)]
					CurrencyDelaysSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						delays:
							::core::option::Option<runtime_types::tangle_slp::primitives::Delays>,
					},
					#[codec(index = 35)]
					HostingFeesSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						fees: ::core::option::Option<(
							runtime_types::sp_arithmetic::per_things::Permill,
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						)>,
					},
					#[codec(index = 36)]
					CurrencyTuneExchangeRateLimitSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						tune_exchange_rate_limit: ::core::option::Option<(
							::core::primitive::u32,
							runtime_types::sp_arithmetic::per_things::Permill,
						)>,
					},
					#[codec(index = 37)]
					OngoingTimeUnitUpdateIntervalSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						interval: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 38)]
					SupplementFeeAccountWhitelistAdded {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 39)]
					SupplementFeeAccountWhitelistRemoved {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 40)]
					ValidatorsReset {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validator_list: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 41)]
					ValidatorBoostListSet {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						validator_boost_list: ::std::vec::Vec<(
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
							::core::primitive::u32,
						)>,
					},
					#[codec(index = 42)]
					ValidatorBoostListAdded {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						due_block_number: ::core::primitive::u32,
					},
					#[codec(index = 43)]
					RemovedFromBoostList {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						who: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 44)]
					OutdatedValidatorBoostListCleaned {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						page: ::core::primitive::u8,
						remove_num: ::core::primitive::u32,
						num_left: ::core::primitive::u32,
					},
					#[codec(index = 45)]
					BurnFeeFailed {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
				}
			}
			pub mod primitives {
				use super::runtime_types;
				pub mod filecoin_primitives {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct FilecoinLedger<_0> {
						pub account: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						pub initial_pledge: _0,
					}
				}
				pub mod parachain_staking_primitives {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum OneToManyDelegationAction<_0> {
						#[codec(index = 0)]
						Revoke(_0),
						#[codec(index = 1)]
						Decrease(_0),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum OneToManyDelegatorStatus {
						#[codec(index = 0)]
						Active,
						#[codec(index = 1)]
						Leaving(runtime_types::tangle_primitives::TimeUnit),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct OneToManyLedger < _0 > { pub account : runtime_types :: staging_xcm :: v3 :: multilocation :: MultiLocation , pub delegations : :: subxt :: utils :: KeyedVec < runtime_types :: staging_xcm :: v3 :: multilocation :: MultiLocation , _0 > , pub total : _0 , pub less_total : _0 , pub requests : :: std :: vec :: Vec < runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: OneToManyScheduledRequest < _0 > > , pub request_briefs : :: subxt :: utils :: KeyedVec < runtime_types :: staging_xcm :: v3 :: multilocation :: MultiLocation , (runtime_types :: tangle_primitives :: TimeUnit , _0 ,) > , pub status : runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: OneToManyDelegatorStatus , }
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct OneToManyScheduledRequest < _0 > { pub validator : runtime_types :: staging_xcm :: v3 :: multilocation :: MultiLocation , pub when_executable : runtime_types :: tangle_primitives :: TimeUnit , pub action : runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: OneToManyDelegationAction < _0 > , }
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct ParachainStakingLedgerUpdateEntry < _0 > { pub currency_id : runtime_types :: tangle_primitives :: currency :: CurrencyId , pub delegator_id : runtime_types :: staging_xcm :: v3 :: multilocation :: MultiLocation , pub validator_id : :: core :: option :: Option < runtime_types :: staging_xcm :: v3 :: multilocation :: MultiLocation > , pub update_operation : runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: ParachainStakingLedgerUpdateOperation , # [codec (compact)] pub amount : _0 , pub unlock_time : :: core :: option :: Option < runtime_types :: tangle_primitives :: TimeUnit > , }
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum ParachainStakingLedgerUpdateOperation {
						#[codec(index = 0)]
						Bond,
						#[codec(index = 1)]
						BondLess,
						#[codec(index = 2)]
						Revoke,
						#[codec(index = 3)]
						CancelRequest,
						#[codec(index = 4)]
						LeaveDelegator,
						#[codec(index = 5)]
						CancelLeave,
						#[codec(index = 6)]
						ExecuteLeave,
						#[codec(index = 7)]
						ExecuteRequest,
					}
				}
				pub mod phala_primitives {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct PhalaLedger<_0> {
						pub account: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						pub active_shares: _0,
						#[codec(compact)]
						pub unlocking_shares: _0,
						pub unlocking_time_unit:
							::core::option::Option<runtime_types::tangle_primitives::TimeUnit>,
						pub bonded_pool_id: ::core::option::Option<::core::primitive::u64>,
						pub bonded_pool_collection_id:
							::core::option::Option<::core::primitive::u32>,
						pub bonded_is_vault: ::core::option::Option<::core::primitive::bool>,
					}
				}
				pub mod polkadot_primitives {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct SubstrateLedger<_0> {
						pub account: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						#[codec(compact)]
						pub total: _0,
						#[codec(compact)]
						pub active: _0,
						pub unlocking: ::std::vec::Vec<
							runtime_types::tangle_slp::primitives::polkadot_primitives::UnlockChunk<
								_0,
							>,
						>,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct SubstrateLedgerUpdateEntry < _0 > { pub currency_id : runtime_types :: tangle_primitives :: currency :: CurrencyId , pub delegator_id : runtime_types :: staging_xcm :: v3 :: multilocation :: MultiLocation , pub update_operation : runtime_types :: tangle_slp :: primitives :: polkadot_primitives :: SubstrateLedgerUpdateOperation , # [codec (compact)] pub amount : _0 , pub unlock_time : :: core :: option :: Option < runtime_types :: tangle_primitives :: TimeUnit > , }
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum SubstrateLedgerUpdateOperation {
						#[codec(index = 0)]
						Bond,
						#[codec(index = 1)]
						Unlock,
						#[codec(index = 2)]
						Rebond,
						#[codec(index = 3)]
						Liquidize,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct SubstrateValidatorsByDelegatorUpdateEntry {
						pub currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						pub delegator_id:
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						pub validators: ::std::vec::Vec<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct UnlockChunk<_0> {
						#[codec(compact)]
						pub value: _0,
						pub unlock_time: runtime_types::tangle_primitives::TimeUnit,
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delays {
					pub unlock_delay: runtime_types::tangle_primitives::TimeUnit,
					pub leave_delegators_delay: runtime_types::tangle_primitives::TimeUnit,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Ledger<_0> {
					# [codec (index = 0)] Substrate (runtime_types :: tangle_slp :: primitives :: polkadot_primitives :: SubstrateLedger < _0 > ,) , # [codec (index = 1)] Moonbeam (runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: OneToManyLedger < _0 > ,) , # [codec (index = 2)] ParachainStaking (runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: OneToManyLedger < _0 > ,) , # [codec (index = 3)] Filecoin (runtime_types :: tangle_slp :: primitives :: filecoin_primitives :: FilecoinLedger < _0 > ,) , # [codec (index = 4)] Phala (runtime_types :: tangle_slp :: primitives :: phala_primitives :: PhalaLedger < _0 > ,) , }
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum LedgerUpdateEntry<_0> {
					# [codec (index = 0)] Substrate (runtime_types :: tangle_slp :: primitives :: polkadot_primitives :: SubstrateLedgerUpdateEntry < _0 > ,) , # [codec (index = 1)] Moonbeam (runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: ParachainStakingLedgerUpdateEntry < _0 > ,) , # [codec (index = 2)] ParachainStaking (runtime_types :: tangle_slp :: primitives :: parachain_staking_primitives :: ParachainStakingLedgerUpdateEntry < _0 > ,) , }
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MinimumsMaximums<_0> {
					#[codec(compact)]
					pub delegator_bonded_minimum: _0,
					#[codec(compact)]
					pub bond_extra_minimum: _0,
					#[codec(compact)]
					pub unbond_minimum: _0,
					#[codec(compact)]
					pub rebond_minimum: _0,
					#[codec(compact)]
					pub unbond_record_maximum: ::core::primitive::u32,
					#[codec(compact)]
					pub validators_back_maximum: ::core::primitive::u32,
					#[codec(compact)]
					pub delegator_active_staking_maximum: _0,
					#[codec(compact)]
					pub validators_reward_maximum: ::core::primitive::u32,
					#[codec(compact)]
					pub delegation_amount_minimum: _0,
					#[codec(compact)]
					pub delegators_maximum: ::core::primitive::u16,
					#[codec(compact)]
					pub validators_maximum: ::core::primitive::u16,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ValidatorsByDelegatorUpdateEntry {
					# [codec (index = 0)] Substrate (runtime_types :: tangle_slp :: primitives :: polkadot_primitives :: SubstrateValidatorsByDelegatorUpdateEntry ,) , }
			}
		}
		pub mod tangle_slpx {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::mint`]."]
					mint {
						evm_caller: ::subxt::utils::H160,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
						remark: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::zenlink_swap`]."]
					zenlink_swap {
						evm_caller: ::subxt::utils::H160,
						currency_id_in: runtime_types::tangle_primitives::currency::CurrencyId,
						currency_id_out: runtime_types::tangle_primitives::currency::CurrencyId,
						currency_id_out_min: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::redeem`]."]
					redeem {
						evm_caller: ::subxt::utils::H160,
						Lst_id: runtime_types::tangle_primitives::currency::CurrencyId,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::stable_pool_swap`]."]
					stable_pool_swap {
						evm_caller: ::subxt::utils::H160,
						pool_id: ::core::primitive::u32,
						currency_id_in: runtime_types::tangle_primitives::currency::CurrencyId,
						currency_id_out: runtime_types::tangle_primitives::currency::CurrencyId,
						min_dy: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::add_whitelist`]."]
					add_whitelist {
						support_chain: runtime_types::tangle_slpx::types::SupportChain,
						evm_contract_account_id: ::subxt::utils::AccountId32,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::remove_whitelist`]."]
					remove_whitelist {
						support_chain: runtime_types::tangle_slpx::types::SupportChain,
						evm_contract_account_id: ::subxt::utils::AccountId32,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::set_execution_fee`]."]
					set_execution_fee {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						execution_fee: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::set_transfer_to_fee`]."]
					set_transfer_to_fee {
						support_chain: runtime_types::tangle_slpx::types::SupportChain,
						transfer_to_fee: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::set_currency_ethereum_call_switch`]."]
					set_currency_ethereum_call_switch {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						is_support: ::core::primitive::bool,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::set_ethereum_call_configration`]."]
					set_ethereum_call_configration {
						xcm_fee: ::core::primitive::u128,
						xcm_weight: runtime_types::sp_weights::weight_v2::Weight,
						period: ::core::primitive::u32,
						contract: ::subxt::utils::H160,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::set_currency_support_xcm_fee`]."]
					set_currency_support_xcm_fee {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						is_support: ::core::primitive::bool,
					},
					#[codec(index = 11)]
					#[doc = "See [`Pallet::set_delay_block`]."]
					set_delay_block { delay_block: ::core::primitive::u32 },
					#[codec(index = 12)]
					#[doc = "See [`Pallet::force_add_order`]."]
					force_add_order {
						slpx_contract_derivative_account: ::subxt::utils::AccountId32,
						evm_caller: ::subxt::utils::H160,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
						remark: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						order_type: runtime_types::tangle_slpx::types::OrderType,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Token not found in Lst minting"]
					TokenNotFoundInLstMinting,
					#[codec(index = 1)]
					#[doc = "Token not found in zenlink"]
					TokenNotFoundInZenlink,
					#[codec(index = 2)]
					#[doc = "Contract Account already exists in the whitelist"]
					AccountIdAlreadyInWhitelist,
					#[codec(index = 3)]
					#[doc = "Contract Account is not in the whitelist"]
					AccountIdNotInWhitelist,
					#[codec(index = 4)]
					#[doc = "The maximum number of whitelist addresses is 10"]
					ExceededWhitelistMaxNumber,
					#[codec(index = 5)]
					#[doc = "Execution fee not set"]
					NotSetExecutionFee,
					#[codec(index = 6)]
					#[doc = "Insufficient balance to execute the fee"]
					FreeBalanceTooLow,
					#[codec(index = 7)]
					#[doc = "ArgumentsError"]
					ArgumentsError,
					#[codec(index = 8)]
					ErrorConvertLst,
					#[codec(index = 9)]
					ErrorValidating,
					#[codec(index = 10)]
					ErrorDelivering,
					#[codec(index = 11)]
					Unsupported,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					AddWhitelistAccountId {
						support_chain: runtime_types::tangle_slpx::types::SupportChain,
						evm_contract_account_id: ::subxt::utils::AccountId32,
					},
					#[codec(index = 1)]
					RemoveWhitelistAccountId {
						support_chain: runtime_types::tangle_slpx::types::SupportChain,
						evm_contract_account_id: ::subxt::utils::AccountId32,
					},
					#[codec(index = 2)]
					XcmMint {
						evm_caller: ::subxt::utils::H160,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 3)]
					XcmMintFailed {
						evm_caller: ::subxt::utils::H160,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 4)]
					XcmZenlinkSwap {
						evm_caller: ::subxt::utils::H160,
						currency_id_in: runtime_types::tangle_primitives::currency::CurrencyId,
						currency_id_out: runtime_types::tangle_primitives::currency::CurrencyId,
						currency_id_out_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 5)]
					XcmZenlinkSwapFailed {
						evm_caller: ::subxt::utils::H160,
						currency_id_in: runtime_types::tangle_primitives::currency::CurrencyId,
						currency_id_out: runtime_types::tangle_primitives::currency::CurrencyId,
						currency_id_in_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 6)]
					XcmStablePoolSwap {
						evm_caller: ::subxt::utils::H160,
						pool_token_index_in: ::core::primitive::u32,
						pool_token_index_out: ::core::primitive::u32,
						currency_id_out_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 7)]
					XcmStablePoolSwapFailed {
						evm_caller: ::subxt::utils::H160,
						pool_token_index_in: ::core::primitive::u32,
						pool_token_index_out: ::core::primitive::u32,
						currency_id_in_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 8)]
					XcmRedeem {
						evm_caller: ::subxt::utils::H160,
						Lst_id: runtime_types::tangle_primitives::currency::CurrencyId,
						Lst_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 9)]
					XcmRedeemFailed {
						evm_caller: ::subxt::utils::H160,
						Lst_id: runtime_types::tangle_primitives::currency::CurrencyId,
						Lst_amount: ::core::primitive::u128,
						target_chain: runtime_types::tangle_slpx::types::TargetChain<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 10)]
					SetTransferToFee {
						support_chain: runtime_types::tangle_slpx::types::SupportChain,
						transfer_to_fee: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					SetExecutionFee {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						execution_fee: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					SetCurrencyEthereumCallSwitch {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						is_support: ::core::primitive::bool,
					},
					#[codec(index = 13)]
					SetEthereumCallConfiguration {
						xcm_fee: ::core::primitive::u128,
						xcm_weight: runtime_types::sp_weights::weight_v2::Weight,
						period: ::core::primitive::u32,
						contract: ::subxt::utils::H160,
					},
					#[codec(index = 14)]
					XcmSetTokenAmount {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						token_amount: ::core::primitive::u128,
						vcurrency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						Lst_amount: ::core::primitive::u128,
					},
					#[codec(index = 15)]
					SetCurrencyToSupportXcmFee {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						is_support: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					SetDelayBlock { delay_block: ::core::primitive::u32 },
					#[codec(index = 17)]
					CreateOrder {
						order: runtime_types::tangle_slpx::types::Order<
							::subxt::utils::AccountId32,
							runtime_types::tangle_primitives::currency::CurrencyId,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 18)]
					OrderHandled {
						order: runtime_types::tangle_slpx::types::Order<
							::subxt::utils::AccountId32,
							runtime_types::tangle_primitives::currency::CurrencyId,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 19)]
					OrderFailed {
						order: runtime_types::tangle_slpx::types::Order<
							::subxt::utils::AccountId32,
							runtime_types::tangle_primitives::currency::CurrencyId,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 20)]
					InsufficientAssets,
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct EthereumCallConfiguration<_0> {
					pub xcm_fee: ::core::primitive::u128,
					pub xcm_weight: runtime_types::sp_weights::weight_v2::Weight,
					pub period: _0,
					pub last_block: _0,
					pub contract: ::subxt::utils::H160,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Order<_0, _1, _2, _3> {
					pub source_chain_caller: runtime_types::tangle_slpx::types::OrderCaller<_0>,
					pub tangle_chain_caller: _0,
					pub derivative_account: _0,
					pub create_block_number: _3,
					pub currency_id: _1,
					pub currency_amount: _2,
					pub order_type: runtime_types::tangle_slpx::types::OrderType,
					pub remark: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub target_chain: runtime_types::tangle_slpx::types::TargetChain<_0>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum OrderCaller<_0> {
					#[codec(index = 0)]
					Substrate(_0),
					#[codec(index = 1)]
					Evm(::subxt::utils::H160),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum OrderType {
					#[codec(index = 0)]
					Mint,
					#[codec(index = 1)]
					Redeem,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum SupportChain {
					#[codec(index = 0)]
					Astar,
					#[codec(index = 1)]
					Moonbeam,
					#[codec(index = 2)]
					Hydradx,
					#[codec(index = 3)]
					Interlay,
					#[codec(index = 4)]
					Manta,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum TargetChain<_0> {
					#[codec(index = 0)]
					Astar(::subxt::utils::H160),
					#[codec(index = 1)]
					Moonbeam(::subxt::utils::H160),
					#[codec(index = 2)]
					Hydradx(_0),
					#[codec(index = 3)]
					Interlay(_0),
					#[codec(index = 4)]
					Manta(_0),
				}
			}
		}
		pub mod tangle_stable_asset {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					InconsistentStorage,
					#[codec(index = 1)]
					InvalidPoolAsset,
					#[codec(index = 2)]
					ArgumentsMismatch,
					#[codec(index = 3)]
					ArgumentsError,
					#[codec(index = 4)]
					PoolNotFound,
					#[codec(index = 5)]
					Math,
					#[codec(index = 6)]
					InvalidPoolValue,
					#[codec(index = 7)]
					MintUnderMin,
					#[codec(index = 8)]
					SwapUnderMin,
					#[codec(index = 9)]
					RedeemUnderMin,
					#[codec(index = 10)]
					RedeemOverMax,
					#[codec(index = 11)]
					TokenRateNotCleared,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					CreatePool {
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						swap_id: ::subxt::utils::AccountId32,
						pallet_id: ::subxt::utils::AccountId32,
					},
					#[codec(index = 1)]
					LiquidityAdded {
						minter: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						input_amounts: ::std::vec::Vec<::core::primitive::u128>,
						min_output_amount: ::core::primitive::u128,
						balances: ::std::vec::Vec<::core::primitive::u128>,
						total_supply: ::core::primitive::u128,
						fee_amount: ::core::primitive::u128,
						output_amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					TokenSwapped {
						swapper: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						input_asset: runtime_types::tangle_primitives::currency::CurrencyId,
						output_asset: runtime_types::tangle_primitives::currency::CurrencyId,
						input_amount: ::core::primitive::u128,
						min_output_amount: ::core::primitive::u128,
						balances: ::std::vec::Vec<::core::primitive::u128>,
						total_supply: ::core::primitive::u128,
						output_amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					RedeemedProportion {
						redeemer: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						input_amount: ::core::primitive::u128,
						min_output_amounts: ::std::vec::Vec<::core::primitive::u128>,
						balances: ::std::vec::Vec<::core::primitive::u128>,
						total_supply: ::core::primitive::u128,
						fee_amount: ::core::primitive::u128,
						output_amounts: ::std::vec::Vec<::core::primitive::u128>,
					},
					#[codec(index = 4)]
					RedeemedSingle {
						redeemer: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						input_amount: ::core::primitive::u128,
						output_asset: runtime_types::tangle_primitives::currency::CurrencyId,
						min_output_amount: ::core::primitive::u128,
						balances: ::std::vec::Vec<::core::primitive::u128>,
						total_supply: ::core::primitive::u128,
						fee_amount: ::core::primitive::u128,
						output_amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					RedeemedMulti {
						redeemer: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						output_amounts: ::std::vec::Vec<::core::primitive::u128>,
						max_input_amount: ::core::primitive::u128,
						balances: ::std::vec::Vec<::core::primitive::u128>,
						total_supply: ::core::primitive::u128,
						fee_amount: ::core::primitive::u128,
						input_amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					BalanceUpdated {
						pool_id: ::core::primitive::u32,
						old_balances: ::std::vec::Vec<::core::primitive::u128>,
						new_balances: ::std::vec::Vec<::core::primitive::u128>,
					},
					#[codec(index = 7)]
					YieldCollected {
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						old_total_supply: ::core::primitive::u128,
						new_total_supply: ::core::primitive::u128,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					FeeCollected {
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						old_balances: ::std::vec::Vec<::core::primitive::u128>,
						new_balances: ::std::vec::Vec<::core::primitive::u128>,
						old_total_supply: ::core::primitive::u128,
						new_total_supply: ::core::primitive::u128,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					AModified {
						pool_id: ::core::primitive::u32,
						value: ::core::primitive::u128,
						time: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					FeeModified {
						pool_id: ::core::primitive::u32,
						mint_fee: ::core::primitive::u128,
						swap_fee: ::core::primitive::u128,
						redeem_fee: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					RecipientModified {
						pool_id: ::core::primitive::u32,
						fee_recipient: ::subxt::utils::AccountId32,
						yield_recipient: ::subxt::utils::AccountId32,
					},
					#[codec(index = 12)]
					TokenRateSet {
						pool_id: ::core::primitive::u32,
						token_rate: ::std::vec::Vec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							(::core::primitive::u128, ::core::primitive::u128),
						)>,
					},
					#[codec(index = 13)]
					TokenRateHardcapConfigured {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						hardcap: runtime_types::sp_arithmetic::per_things::Permill,
					},
					#[codec(index = 14)]
					TokenRateHardcapRemoved {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
					},
					#[codec(index = 15)]
					TokenRateRefreshFailed { pool_id: ::core::primitive::u32 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StableAssetPoolInfo<_0, _1, _2, _3, _4> {
				pub pool_id: ::core::primitive::u32,
				pub pool_asset: _0,
				pub assets: ::std::vec::Vec<_0>,
				pub precisions: ::std::vec::Vec<_1>,
				pub mint_fee: _1,
				pub swap_fee: _1,
				pub redeem_fee: _1,
				pub total_supply: _2,
				pub a: _1,
				pub a_block: _4,
				pub future_a: _1,
				pub future_a_block: _4,
				pub balances: ::std::vec::Vec<_1>,
				pub fee_recipient: _3,
				pub account_id: _3,
				pub yield_recipient: _3,
				pub precision: _1,
			}
		}
		pub mod tangle_stable_pool {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::create_pool`]."]
					create_pool {
						assets:
							::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>,
						precisions: ::std::vec::Vec<::core::primitive::u128>,
						mint_fee: ::core::primitive::u128,
						swap_fee: ::core::primitive::u128,
						redeem_fee: ::core::primitive::u128,
						initial_a: ::core::primitive::u128,
						fee_recipient: ::subxt::utils::AccountId32,
						yield_recipient: ::subxt::utils::AccountId32,
						precision: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::add_liquidity`]."]
					add_liquidity {
						pool_id: ::core::primitive::u32,
						amounts: ::std::vec::Vec<::core::primitive::u128>,
						min_mint_amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::swap`]."]
					swap {
						pool_id: ::core::primitive::u32,
						i: ::core::primitive::u32,
						j: ::core::primitive::u32,
						dx: ::core::primitive::u128,
						min_dy: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::redeem_proportion`]."]
					redeem_proportion {
						pool_id: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						min_redeem_amounts: ::std::vec::Vec<::core::primitive::u128>,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::redeem_single`]."]
					redeem_single {
						pool_id: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						i: ::core::primitive::u32,
						min_redeem_amount: ::core::primitive::u128,
						asset_length: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::redeem_multi`]."]
					redeem_multi {
						pool_id: ::core::primitive::u32,
						amounts: ::std::vec::Vec<::core::primitive::u128>,
						max_redeem_amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::modify_a`]."]
					modify_a {
						pool_id: ::core::primitive::u32,
						a: ::core::primitive::u128,
						future_a_block: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::modify_fees`]."]
					modify_fees {
						pool_id: ::core::primitive::u32,
						mint_fee: ::core::option::Option<::core::primitive::u128>,
						swap_fee: ::core::option::Option<::core::primitive::u128>,
						redeem_fee: ::core::option::Option<::core::primitive::u128>,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::modify_recipients`]."]
					modify_recipients {
						pool_id: ::core::primitive::u32,
						fee_recipient: ::core::option::Option<::subxt::utils::AccountId32>,
						yield_recipient: ::core::option::Option<::subxt::utils::AccountId32>,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::edit_token_rate`]."]
					edit_token_rate {
						pool_id: ::core::primitive::u32,
						token_rate_info: ::std::vec::Vec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							(::core::primitive::u128, ::core::primitive::u128),
						)>,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::config_Lst_auto_refresh`]."]
					config_Lst_auto_refresh {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
						hardcap: runtime_types::sp_arithmetic::per_things::Permill,
					},
					#[codec(index = 11)]
					#[doc = "See [`Pallet::remove_Lst_auto_refresh`]."]
					remove_Lst_auto_refresh {
						Lst: runtime_types::tangle_primitives::currency::CurrencyId,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					SwapUnderMin,
					#[codec(index = 1)]
					MintUnderMin,
					#[codec(index = 2)]
					CantMint,
					#[codec(index = 3)]
					RedeemOverMax,
					#[codec(index = 4)]
					TokenRateNotSet,
				}
			}
		}
		pub mod tangle_token_issuer {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::add_to_issue_whitelist`]."]
					add_to_issue_whitelist {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::remove_from_issue_whitelist`]."]
					remove_from_issue_whitelist {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 2)]
					#[doc = "See [`Pallet::add_to_transfer_whitelist`]."]
					add_to_transfer_whitelist {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::remove_from_transfer_whitelist`]."]
					remove_from_transfer_whitelist {
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::issue`]."]
					issue {
						dest: ::subxt::utils::AccountId32,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::transfer`]."]
					transfer {
						dest: ::subxt::utils::AccountId32,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The balance is not enough"]
					NotEnoughBalance,
					#[codec(index = 1)]
					#[doc = "The account doesn't exist in the whitelist."]
					NotExist,
					#[codec(index = 2)]
					#[doc = "The origin is not allowed to perform the operation."]
					NotAllowed,
					#[codec(index = 3)]
					#[doc = "Failed to convert vec to boundedVec"]
					ConvertError,
					#[codec(index = 4)]
					#[doc = "Excceed the max length limit of BoundedVec"]
					ExceedMaxLen,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Successful added a new account to the issue whitelist. \\[account, currency_id]\\"]
					AddedToIssueList(
						::subxt::utils::AccountId32,
						runtime_types::tangle_primitives::currency::CurrencyId,
					),
					#[codec(index = 1)]
					#[doc = "Successful remove an account from the issue whitelist. \\[account, currency_id]\\"]
					RemovedFromIssueList(
						::subxt::utils::AccountId32,
						runtime_types::tangle_primitives::currency::CurrencyId,
					),
					#[codec(index = 2)]
					#[doc = "Successful added a new account to the transfer whitelist. \\[account, currency_id]\\"]
					AddedToTransferList(
						::subxt::utils::AccountId32,
						runtime_types::tangle_primitives::currency::CurrencyId,
					),
					#[codec(index = 3)]
					#[doc = "Successful remove an account from the transfer whitelist. \\[account, currency_id]\\"]
					RemovedFromTransferList(
						::subxt::utils::AccountId32,
						runtime_types::tangle_primitives::currency::CurrencyId,
					),
					#[codec(index = 4)]
					#[doc = "Token issue success, \\[currency_id, dest, amount\\]"]
					Issued(
						::subxt::utils::AccountId32,
						runtime_types::tangle_primitives::currency::CurrencyId,
						::core::primitive::u128,
					),
					#[codec(index = 5)]
					#[doc = "Token transferred success, \\[origin, dest, currency_id, amount\\]"]
					Transferred(
						::subxt::utils::AccountId32,
						::subxt::utils::AccountId32,
						runtime_types::tangle_primitives::currency::CurrencyId,
						::core::primitive::u128,
					),
				}
			}
		}
		pub mod tangle_xcm_interface {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::update_xcm_dest_weight_and_fee`]."]
					update_xcm_dest_weight_and_fee {
						updates: ::std::vec::Vec<(
							runtime_types::tangle_primitives::currency::CurrencyId,
							runtime_types::tangle_primitives::XcmOperationType,
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::transfer_statemine_assets`]."]
					transfer_statemine_assets {
						amount: ::core::primitive::u128,
						asset_id: ::core::primitive::u32,
						dest: ::core::option::Option<::subxt::utils::AccountId32>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					FeeConvertFailed,
					#[codec(index = 1)]
					XcmExecutionFailed,
					#[codec(index = 2)]
					XcmSendFailed,
					#[codec(index = 3)]
					OperationWeightAndFeeNotExist,
					#[codec(index = 4)]
					FailToConvert,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					XcmDestWeightAndFeeUpdated(
						runtime_types::tangle_primitives::XcmOperationType,
						runtime_types::tangle_primitives::currency::CurrencyId,
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					),
					#[codec(index = 1)]
					TransferredStatemineMultiAsset(
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					),
				}
			}
		}
		pub mod xcm {
			use super::runtime_types;
			pub mod double_encoded {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DoubleEncoded {
					pub encoded: ::std::vec::Vec<::core::primitive::u8>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DoubleEncoded2 {
					pub encoded: ::std::vec::Vec<::core::primitive::u8>,
				}
			}
			pub mod v2 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network: runtime_types::xcm::v2::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network: runtime_types::xcm::v2::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network: runtime_types::xcm::v2::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey(
							runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v2::BodyId,
							part: runtime_types::xcm::v2::BodyPart,
						},
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
						#[codec(index = 6)]
						Blob(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v2::multiasset::AssetId,
						pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct MultiAssets(
						pub ::std::vec::Vec<runtime_types::xcm::v2::multiasset::MultiAsset>,
					);
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v2::multiasset::AssetId,
							fun: runtime_types::xcm::v2::multiasset::WildFungibility,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v2::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v2::multilocation::Junctions,
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						MultiLocationFull,
						#[codec(index = 5)]
						MultiLocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						UnhandledXcmVersion,
						#[codec(index = 23)]
						WeightLimitReached(::core::primitive::u64),
						#[codec(index = 24)]
						Barrier,
						#[codec(index = 25)]
						WeightNotComputable,
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum BodyId {
					#[codec(index = 0)]
					Unit,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Index(#[codec(compact)] ::core::primitive::u32),
					#[codec(index = 3)]
					Executive,
					#[codec(index = 4)]
					Technical,
					#[codec(index = 5)]
					Legislative,
					#[codec(index = 6)]
					Judicial,
					#[codec(index = 7)]
					Defense,
					#[codec(index = 8)]
					Administration,
					#[codec(index = 9)]
					Treasury,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum BodyPart {
					#[codec(index = 0)]
					Voice,
					#[codec(index = 1)]
					Members {
						#[codec(compact)]
						count: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					Fraction {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					AtLeastProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					MoreThanProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v2::Response,
						#[codec(compact)]
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v2::OriginKind,
						#[codec(compact)]
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
					#[codec(index = 12)]
					ReportError {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						receive: runtime_types::xcm::v2::multiasset::MultiAssets,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 18)]
					QueryHolding {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v2::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v2::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v2::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Instruction2 {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v2::Response,
						#[codec(compact)]
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v2::OriginKind,
						#[codec(compact)]
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded2,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
					#[codec(index = 12)]
					ReportError {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						receive: runtime_types::xcm::v2::multiasset::MultiAssets,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 18)]
					QueryHolding {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v2::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v2::Xcm2),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v2::Xcm2),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum NetworkId {
					#[codec(index = 0)]
					Any,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Polkadot,
					#[codec(index = 3)]
					Kusama,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum OriginKind {
					#[codec(index = 0)]
					Native,
					#[codec(index = 1)]
					SovereignAccount,
					#[codec(index = 2)]
					Superuser,
					#[codec(index = 3)]
					Xcm,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v2::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(#[codec(compact)] ::core::primitive::u64),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction2>);
			}
			pub mod v3 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum BodyId {
						#[codec(index = 0)]
						Unit,
						#[codec(index = 1)]
						Moniker([::core::primitive::u8; 4usize]),
						#[codec(index = 2)]
						Index(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						Executive,
						#[codec(index = 4)]
						Technical,
						#[codec(index = 5)]
						Legislative,
						#[codec(index = 6)]
						Judicial,
						#[codec(index = 7)]
						Defense,
						#[codec(index = 8)]
						Administration,
						#[codec(index = 9)]
						Treasury,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum BodyPart {
						#[codec(index = 0)]
						Voice,
						#[codec(index = 1)]
						Members {
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
						#[codec(index = 2)]
						Fraction {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						AtLeastProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						MoreThanProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey {
							length: ::core::primitive::u8,
							data: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v3::junction::BodyId,
							part: runtime_types::xcm::v3::junction::BodyPart,
						},
						#[codec(index = 9)]
						GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum NetworkId {
						#[codec(index = 0)]
						ByGenesis([::core::primitive::u8; 32usize]),
						#[codec(index = 1)]
						ByFork {
							block_number: ::core::primitive::u64,
							block_hash: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						Polkadot,
						#[codec(index = 3)]
						Kusama,
						#[codec(index = 4)]
						Westend,
						#[codec(index = 5)]
						Rococo,
						#[codec(index = 6)]
						Wococo,
						#[codec(index = 7)]
						Ethereum {
							#[codec(compact)]
							chain_id: ::core::primitive::u64,
						},
						#[codec(index = 8)]
						BitcoinCore,
						#[codec(index = 9)]
						BitcoinCash,
					}
				}
				pub mod junctions {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v3::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract([::core::primitive::u8; 32usize]),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v3::multiasset::AssetId,
						pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct MultiAssets(
						pub ::std::vec::Vec<runtime_types::xcm::v3::multiasset::MultiAsset>,
					);
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
						},
						#[codec(index = 2)]
						AllCounted(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						AllOfCounted {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						LocationFull,
						#[codec(index = 5)]
						LocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						ExpectationFalse,
						#[codec(index = 23)]
						PalletNotFound,
						#[codec(index = 24)]
						NameMismatch,
						#[codec(index = 25)]
						VersionIncompatible,
						#[codec(index = 26)]
						HoldingWouldOverflow,
						#[codec(index = 27)]
						ExportError,
						#[codec(index = 28)]
						ReanchorFailed,
						#[codec(index = 29)]
						NoDeal,
						#[codec(index = 30)]
						FeesNotMet,
						#[codec(index = 31)]
						LockError,
						#[codec(index = 32)]
						NoPermission,
						#[codec(index = 33)]
						Unanchored,
						#[codec(index = 34)]
						NotDepositable,
						#[codec(index = 35)]
						UnhandledXcmVersion,
						#[codec(index = 36)]
						WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
						#[codec(index = 37)]
						Barrier,
						#[codec(index = 38)]
						WeightNotComputable,
						#[codec(index = 39)]
						ExceedsStackLimit,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						:: subxt :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: codec)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Outcome {
						#[codec(index = 0)]
						Complete(runtime_types::sp_weights::weight_v2::Weight),
						#[codec(index = 1)]
						Incomplete(
							runtime_types::sp_weights::weight_v2::Weight,
							runtime_types::xcm::v3::traits::Error,
						),
						#[codec(index = 2)]
						Error(runtime_types::xcm::v3::traits::Error),
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
						querier: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_kind: runtime_types::xcm::v2::OriginKind,
						require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
					#[codec(index = 12)]
					ReportError(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						want: runtime_types::xcm::v3::multiasset::MultiAssets,
						maximal: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						reserve: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 18)]
					ReportHolding {
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v3::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v3::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v3::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						ticket: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
					#[codec(index = 28)]
					BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 29)]
					ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 30)]
					ExpectOrigin(
						::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 31)]
					ExpectError(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 32)]
					ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
					#[codec(index = 33)]
					QueryPallet {
						module_name: ::std::vec::Vec<::core::primitive::u8>,
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
					},
					#[codec(index = 34)]
					ExpectPallet {
						#[codec(compact)]
						index: ::core::primitive::u32,
						name: ::std::vec::Vec<::core::primitive::u8>,
						module_name: ::std::vec::Vec<::core::primitive::u8>,
						#[codec(compact)]
						crate_major: ::core::primitive::u32,
						#[codec(compact)]
						min_crate_minor: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 36)]
					ClearTransactStatus,
					#[codec(index = 37)]
					UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
					#[codec(index = 38)]
					ExportMessage {
						network: runtime_types::xcm::v3::junction::NetworkId,
						destination: runtime_types::xcm::v3::junctions::Junctions,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 39)]
					LockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						unlocker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 40)]
					UnlockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						target: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 41)]
					NoteUnlockable {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						owner: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 42)]
					RequestUnlock {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						locker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 43)]
					SetFeesMode { jit_withdraw: ::core::primitive::bool },
					#[codec(index = 44)]
					SetTopic([::core::primitive::u8; 32usize]),
					#[codec(index = 45)]
					ClearTopic,
					#[codec(index = 46)]
					AliasOrigin(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
					#[codec(index = 47)]
					UnpaidExecution {
						weight_limit: runtime_types::xcm::v3::WeightLimit,
						check_origin: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Instruction2 {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
						querier: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_kind: runtime_types::xcm::v2::OriginKind,
						require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
						call: runtime_types::xcm::double_encoded::DoubleEncoded2,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
					#[codec(index = 12)]
					ReportError(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						want: runtime_types::xcm::v3::multiasset::MultiAssets,
						maximal: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						reserve: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 18)]
					ReportHolding {
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v3::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v3::Xcm2),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v3::Xcm2),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						ticket: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
					#[codec(index = 28)]
					BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 29)]
					ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 30)]
					ExpectOrigin(
						::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 31)]
					ExpectError(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 32)]
					ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
					#[codec(index = 33)]
					QueryPallet {
						module_name: ::std::vec::Vec<::core::primitive::u8>,
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
					},
					#[codec(index = 34)]
					ExpectPallet {
						#[codec(compact)]
						index: ::core::primitive::u32,
						name: ::std::vec::Vec<::core::primitive::u8>,
						module_name: ::std::vec::Vec<::core::primitive::u8>,
						#[codec(compact)]
						crate_major: ::core::primitive::u32,
						#[codec(compact)]
						min_crate_minor: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 36)]
					ClearTransactStatus,
					#[codec(index = 37)]
					UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
					#[codec(index = 38)]
					ExportMessage {
						network: runtime_types::xcm::v3::junction::NetworkId,
						destination: runtime_types::xcm::v3::junctions::Junctions,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 39)]
					LockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						unlocker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 40)]
					UnlockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						target: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 41)]
					NoteUnlockable {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						owner: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 42)]
					RequestUnlock {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						locker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 43)]
					SetFeesMode { jit_withdraw: ::core::primitive::bool },
					#[codec(index = 44)]
					SetTopic([::core::primitive::u8; 32usize]),
					#[codec(index = 45)]
					ClearTopic,
					#[codec(index = 46)]
					AliasOrigin(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
					#[codec(index = 47)]
					UnpaidExecution {
						weight_limit: runtime_types::xcm::v3::WeightLimit,
						check_origin: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum MaybeErrorCode {
					#[codec(index = 0)]
					Success,
					#[codec(index = 1)]
					Error(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					TruncatedError(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PalletInfo {
					#[codec(compact)]
					pub index: ::core::primitive::u32,
					pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					#[codec(compact)]
					pub major: ::core::primitive::u32,
					#[codec(compact)]
					pub minor: ::core::primitive::u32,
					#[codec(compact)]
					pub patch: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct QueryResponseInfo {
					pub destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					#[codec(compact)]
					pub query_id: ::core::primitive::u64,
					pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
					#[codec(index = 4)]
					PalletsInfo(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::xcm::v3::PalletInfo,
						>,
					),
					#[codec(index = 5)]
					DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(runtime_types::sp_weights::weight_v2::Weight),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction>);
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction2>);
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VersionedAssetId {
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::AssetId),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VersionedMultiAsset {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multiasset::MultiAsset),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::MultiAsset),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VersionedMultiAssets {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multiasset::MultiAssets),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::MultiAssets),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VersionedMultiLocation {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multilocation::MultiLocation),
				#[codec(index = 3)]
				V3(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VersionedResponse {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Response),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Response),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VersionedXcm {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Xcm),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Xcm),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VersionedXcm2 {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Xcm2),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Xcm2),
			}
		}
		pub mod zenlink_protocol {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::set_fee_receiver`]."]
					set_fee_receiver {
						send_to: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
					},
					#[codec(index = 1)]
					#[doc = "See [`Pallet::set_fee_point`]."]
					set_fee_point { fee_point: ::core::primitive::u8 },
					#[codec(index = 2)]
					#[doc = "See [`Pallet::transfer`]."]
					transfer {
						asset_id: runtime_types::zenlink_protocol::primitives::AssetId,
						recipient: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "See [`Pallet::create_pair`]."]
					create_pair {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
					},
					#[codec(index = 4)]
					#[doc = "See [`Pallet::add_liquidity`]."]
					add_liquidity {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						#[codec(compact)]
						amount_0_desired: ::core::primitive::u128,
						#[codec(compact)]
						amount_1_desired: ::core::primitive::u128,
						#[codec(compact)]
						amount_0_min: ::core::primitive::u128,
						#[codec(compact)]
						amount_1_min: ::core::primitive::u128,
						#[codec(compact)]
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "See [`Pallet::remove_liquidity`]."]
					remove_liquidity {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						#[codec(compact)]
						liquidity: ::core::primitive::u128,
						#[codec(compact)]
						amount_0_min: ::core::primitive::u128,
						#[codec(compact)]
						amount_1_min: ::core::primitive::u128,
						recipient: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "See [`Pallet::swap_exact_assets_for_assets`]."]
					swap_exact_assets_for_assets {
						#[codec(compact)]
						amount_in: ::core::primitive::u128,
						#[codec(compact)]
						amount_out_min: ::core::primitive::u128,
						path: ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
						recipient: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "See [`Pallet::swap_assets_for_exact_assets`]."]
					swap_assets_for_exact_assets {
						#[codec(compact)]
						amount_out: ::core::primitive::u128,
						#[codec(compact)]
						amount_in_max: ::core::primitive::u128,
						path: ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
						recipient: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "See [`Pallet::bootstrap_create`]."]
					bootstrap_create {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						#[codec(compact)]
						target_supply_0: ::core::primitive::u128,
						#[codec(compact)]
						target_supply_1: ::core::primitive::u128,
						#[codec(compact)]
						capacity_supply_0: ::core::primitive::u128,
						#[codec(compact)]
						capacity_supply_1: ::core::primitive::u128,
						#[codec(compact)]
						end: ::core::primitive::u32,
						rewards:
							::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
						limits: ::std::vec::Vec<(
							runtime_types::zenlink_protocol::primitives::AssetId,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 9)]
					#[doc = "See [`Pallet::bootstrap_contribute`]."]
					bootstrap_contribute {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						#[codec(compact)]
						amount_0_contribute: ::core::primitive::u128,
						#[codec(compact)]
						amount_1_contribute: ::core::primitive::u128,
						#[codec(compact)]
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "See [`Pallet::bootstrap_claim`]."]
					bootstrap_claim {
						recipient: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						#[codec(compact)]
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 11)]
					#[doc = "See [`Pallet::bootstrap_end`]."]
					bootstrap_end {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
					},
					#[codec(index = 12)]
					#[doc = "See [`Pallet::bootstrap_update`]."]
					bootstrap_update {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						#[codec(compact)]
						target_supply_0: ::core::primitive::u128,
						#[codec(compact)]
						target_supply_1: ::core::primitive::u128,
						#[codec(compact)]
						capacity_supply_0: ::core::primitive::u128,
						#[codec(compact)]
						capacity_supply_1: ::core::primitive::u128,
						#[codec(compact)]
						end: ::core::primitive::u32,
						rewards:
							::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
						limits: ::std::vec::Vec<(
							runtime_types::zenlink_protocol::primitives::AssetId,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 13)]
					#[doc = "See [`Pallet::bootstrap_refund`]."]
					bootstrap_refund {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
					},
					#[codec(index = 14)]
					#[doc = "See [`Pallet::bootstrap_charge_reward`]."]
					bootstrap_charge_reward {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						charge_rewards: ::std::vec::Vec<(
							runtime_types::zenlink_protocol::primitives::AssetId,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 15)]
					#[doc = "See [`Pallet::bootstrap_withdraw_reward`]."]
					bootstrap_withdraw_reward {
						asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
						asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
						recipient: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Require the admin who can reset the admin and receiver of the protocol fee."]
					RequireProtocolAdmin,
					#[codec(index = 1)]
					#[doc = "Require the admin candidate who can become new admin after confirm."]
					RequireProtocolAdminCandidate,
					#[codec(index = 2)]
					#[doc = "Invalid fee_point"]
					InvalidFeePoint,
					#[codec(index = 3)]
					#[doc = "Unsupported AssetId by this ZenlinkProtocol Version."]
					UnsupportedAssetType,
					#[codec(index = 4)]
					#[doc = "Account balance must be greater than or equal to the transfer amount."]
					InsufficientAssetBalance,
					#[codec(index = 5)]
					#[doc = "Account native currency balance must be greater than ExistentialDeposit."]
					NativeBalanceTooLow,
					#[codec(index = 6)]
					#[doc = "Trading pair can't be created."]
					DeniedCreatePair,
					#[codec(index = 7)]
					#[doc = "Trading pair already exists."]
					PairAlreadyExists,
					#[codec(index = 8)]
					#[doc = "Trading pair does not exist."]
					PairNotExists,
					#[codec(index = 9)]
					#[doc = "Asset does not exist."]
					AssetNotExists,
					#[codec(index = 10)]
					#[doc = "Liquidity is not enough."]
					InsufficientLiquidity,
					#[codec(index = 11)]
					#[doc = "Trading pair does have enough foreign."]
					InsufficientPairReserve,
					#[codec(index = 12)]
					#[doc = "Get target amount is less than exception."]
					InsufficientTargetAmount,
					#[codec(index = 13)]
					#[doc = "Sold amount is more than exception."]
					ExcessiveSoldAmount,
					#[codec(index = 14)]
					#[doc = "Can't find pair though trading path."]
					InvalidPath,
					#[codec(index = 15)]
					#[doc = "Incorrect foreign amount range."]
					IncorrectAssetAmountRange,
					#[codec(index = 16)]
					#[doc = "Overflow."]
					Overflow,
					#[codec(index = 17)]
					#[doc = "Transaction block number is larger than the end block number."]
					Deadline,
					#[codec(index = 18)]
					#[doc = "Location given was invalid or unsupported."]
					AccountIdBadLocation,
					#[codec(index = 19)]
					#[doc = "XCM execution failed."]
					ExecutionFailed,
					#[codec(index = 20)]
					#[doc = "Transfer to self by XCM message."]
					DeniedTransferToSelf,
					#[codec(index = 21)]
					#[doc = "Not in ZenlinkRegistedParaChains."]
					TargetChainNotRegistered,
					#[codec(index = 22)]
					#[doc = "Can't pass the K value check"]
					InvariantCheckFailed,
					#[codec(index = 23)]
					#[doc = "Created pair can't create now"]
					PairCreateForbidden,
					#[codec(index = 24)]
					#[doc = "Pair is not in bootstrap"]
					NotInBootstrap,
					#[codec(index = 25)]
					#[doc = "Amount of contribution is invalid."]
					InvalidContributionAmount,
					#[codec(index = 26)]
					#[doc = "Amount of contribution is invalid."]
					UnqualifiedBootstrap,
					#[codec(index = 27)]
					#[doc = "Zero contribute in bootstrap"]
					ZeroContribute,
					#[codec(index = 28)]
					#[doc = "Bootstrap deny refund"]
					DenyRefund,
					#[codec(index = 29)]
					#[doc = "Bootstrap is disable"]
					DisableBootstrap,
					#[codec(index = 30)]
					#[doc = "Not eligible to contribute"]
					NotQualifiedAccount,
					#[codec(index = 31)]
					#[doc = "Reward of bootstrap is not set."]
					NoRewardTokens,
					#[codec(index = 32)]
					#[doc = "Charge bootstrap extrinsic args has error,"]
					ChargeRewardParamsError,
					#[codec(index = 33)]
					#[doc = "Exist some reward in bootstrap,"]
					ExistRewardsInBootstrap,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Foreign Asset"]
					#[doc = "Some assets were transferred. \\[asset_id, owner, target, amount\\]"]
					Transferred(
						runtime_types::zenlink_protocol::primitives::AssetId,
						::subxt::utils::AccountId32,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					),
					#[codec(index = 1)]
					#[doc = "Some assets were burned. \\[asset_id, owner, amount\\]"]
					Burned(
						runtime_types::zenlink_protocol::primitives::AssetId,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					),
					#[codec(index = 2)]
					#[doc = "Some assets were minted. \\[asset_id, owner, amount\\]"]
					Minted(
						runtime_types::zenlink_protocol::primitives::AssetId,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					),
					#[codec(index = 3)]
					#[doc = "Swap"]
					#[doc = "Create a trading pair. \\[asset_0, asset_1\\]"]
					PairCreated(
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
					),
					#[codec(index = 4)]
					#[doc = "Add liquidity. \\[owner, asset_0, asset_1, add_balance_0, add_balance_1,"]
					#[doc = "mint_balance_lp\\]"]
					LiquidityAdded(
						::subxt::utils::AccountId32,
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 5)]
					#[doc = "Remove liquidity. \\[owner, recipient, asset_0, asset_1, rm_balance_0, rm_balance_1,"]
					#[doc = "burn_balance_lp\\]"]
					LiquidityRemoved(
						::subxt::utils::AccountId32,
						::subxt::utils::AccountId32,
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 6)]
					#[doc = "Transact in trading \\[owner, recipient, swap_path, balances\\]"]
					AssetSwap(
						::subxt::utils::AccountId32,
						::subxt::utils::AccountId32,
						::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
						::std::vec::Vec<::core::primitive::u128>,
					),
					#[codec(index = 7)]
					#[doc = "Transfer by xcm"]
					#[doc = "Transferred to parachain. \\[asset_id, src, para_id, dest, amount, used_weight\\]"]
					TransferredToParachain(
						runtime_types::zenlink_protocol::primitives::AssetId,
						::subxt::utils::AccountId32,
						runtime_types::polkadot_parachain_primitives::primitives::Id,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u64,
					),
					#[codec(index = 8)]
					#[doc = "Contribute to bootstrap pair. \\[who, asset_0, asset_0_contribute, asset_1_contribute\\]"]
					BootstrapContribute(
						::subxt::utils::AccountId32,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
					),
					#[codec(index = 9)]
					#[doc = "A bootstrap pair end. \\[asset_0, asset_1, asset_0_amount, asset_1_amount,"]
					#[doc = "total_lp_supply]"]
					BootstrapEnd(
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 10)]
					#[doc = "Create a bootstrap pair. \\[bootstrap_pair_account, asset_0, asset_1,"]
					#[doc = "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1, end\\]"]
					BootstrapCreated(
						::subxt::utils::AccountId32,
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u32,
					),
					#[codec(index = 11)]
					#[doc = "Claim a bootstrap pair. \\[bootstrap_pair_account, claimer, receiver, asset_0, asset_1,"]
					#[doc = "asset_0_refund, asset_1_refund, lp_amount\\]"]
					BootstrapClaim(
						::subxt::utils::AccountId32,
						::subxt::utils::AccountId32,
						::subxt::utils::AccountId32,
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 12)]
					#[doc = "Update a bootstrap pair. \\[caller, asset_0, asset_1,"]
					#[doc = "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1\\]"]
					BootstrapUpdate(
						::subxt::utils::AccountId32,
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u32,
					),
					#[codec(index = 13)]
					#[doc = "Refund from disable bootstrap pair. \\[bootstrap_pair_account, caller, asset_0, asset_1,"]
					#[doc = "asset_0_refund, asset_1_refund\\]"]
					BootstrapRefund(
						::subxt::utils::AccountId32,
						::subxt::utils::AccountId32,
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 14)]
					#[doc = "Bootstrap distribute some rewards to contributors."]
					DistributeReward(
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::subxt::utils::AccountId32,
						::std::vec::Vec<(
							runtime_types::zenlink_protocol::primitives::AssetId,
							::core::primitive::u128,
						)>,
					),
					#[codec(index = 15)]
					#[doc = "Charge reward into a bootstrap."]
					ChargeReward(
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::subxt::utils::AccountId32,
						::std::vec::Vec<(
							runtime_types::zenlink_protocol::primitives::AssetId,
							::core::primitive::u128,
						)>,
					),
					#[codec(index = 16)]
					#[doc = "Withdraw all reward from a bootstrap."]
					WithdrawReward(
						runtime_types::zenlink_protocol::primitives::AssetId,
						runtime_types::zenlink_protocol::primitives::AssetId,
						::subxt::utils::AccountId32,
					),
				}
			}
			pub mod primitives {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AssetId {
					pub chain_id: ::core::primitive::u32,
					pub asset_type: ::core::primitive::u8,
					pub asset_index: ::core::primitive::u64,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BootstrapParameter<_0, _1, _2> {
					pub target_supply: (_0, _0),
					pub capacity_supply: (_0, _0),
					pub accumulated_supply: (_0, _0),
					pub end_block_number: _1,
					pub pair_account: _2,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PairMetadata<_0, _1> {
					pub pair_account: _1,
					pub total_supply: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum PairStatus<_0, _1, _2> {
					#[codec(index = 0)]
					Trading(runtime_types::zenlink_protocol::primitives::PairMetadata<_0, _2>),
					#[codec(index = 1)]
					Bootstrap(
						runtime_types::zenlink_protocol::primitives::BootstrapParameter<_0, _1, _2>,
					),
					#[codec(index = 2)]
					Disable,
				}
			}
		}
		pub mod zenlink_stable_amm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See `Pallet::create_base_pool`."]
					create_base_pool {
						currency_ids:
							::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>,
						currency_decimals: ::std::vec::Vec<::core::primitive::u32>,
						a: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						admin_fee: ::core::primitive::u128,
						admin_fee_receiver: ::subxt::utils::AccountId32,
						lp_currency_symbol: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "See `Pallet::create_meta_pool`."]
					create_meta_pool {
						currency_ids:
							::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>,
						currency_decimals: ::std::vec::Vec<::core::primitive::u32>,
						a: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						admin_fee: ::core::primitive::u128,
						admin_fee_receiver: ::subxt::utils::AccountId32,
						lp_currency_symbol: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 2)]
					#[doc = "See `Pallet::add_liquidity`."]
					add_liquidity {
						pool_id: ::core::primitive::u32,
						amounts: ::std::vec::Vec<::core::primitive::u128>,
						min_mint_amount: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "See `Pallet::swap`."]
					swap {
						poo_id: ::core::primitive::u32,
						from_index: ::core::primitive::u32,
						to_index: ::core::primitive::u32,
						in_amount: ::core::primitive::u128,
						min_out_amount: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "See `Pallet::remove_liquidity`."]
					remove_liquidity {
						poo_id: ::core::primitive::u32,
						lp_amount: ::core::primitive::u128,
						min_amounts: ::std::vec::Vec<::core::primitive::u128>,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "See `Pallet::remove_liquidity_one_currency`."]
					remove_liquidity_one_currency {
						poo_id: ::core::primitive::u32,
						lp_amount: ::core::primitive::u128,
						index: ::core::primitive::u32,
						min_amount: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "See `Pallet::remove_liquidity_imbalance`."]
					remove_liquidity_imbalance {
						pool_id: ::core::primitive::u32,
						amounts: ::std::vec::Vec<::core::primitive::u128>,
						max_burn_amount: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "See `Pallet::add_pool_and_base_pool_liquidity`."]
					add_pool_and_base_pool_liquidity {
						pool_id: ::core::primitive::u32,
						base_pool_id: ::core::primitive::u32,
						meta_amounts: ::std::vec::Vec<::core::primitive::u128>,
						base_amounts: ::std::vec::Vec<::core::primitive::u128>,
						min_to_mint: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "See `Pallet::remove_pool_and_base_pool_liquidity`."]
					remove_pool_and_base_pool_liquidity {
						pool_id: ::core::primitive::u32,
						base_pool_id: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						min_amounts_meta: ::std::vec::Vec<::core::primitive::u128>,
						min_amounts_base: ::std::vec::Vec<::core::primitive::u128>,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					#[doc = "See `Pallet::remove_pool_and_base_pool_liquidity_one_currency`."]
					remove_pool_and_base_pool_liquidity_one_currency {
						pool_id: ::core::primitive::u32,
						base_pool_id: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						i: ::core::primitive::u32,
						min_amount: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "See `Pallet::swap_pool_from_base`."]
					swap_pool_from_base {
						pool_id: ::core::primitive::u32,
						base_pool_id: ::core::primitive::u32,
						in_index: ::core::primitive::u32,
						out_index: ::core::primitive::u32,
						dx: ::core::primitive::u128,
						min_dy: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 11)]
					#[doc = "See `Pallet::swap_pool_to_base`."]
					swap_pool_to_base {
						pool_id: ::core::primitive::u32,
						base_pool_id: ::core::primitive::u32,
						in_index: ::core::primitive::u32,
						out_index: ::core::primitive::u32,
						dx: ::core::primitive::u128,
						min_dy: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 12)]
					#[doc = "See `Pallet::swap_meta_pool_underlying`."]
					swap_meta_pool_underlying {
						pool_id: ::core::primitive::u32,
						in_index: ::core::primitive::u32,
						out_index: ::core::primitive::u32,
						dx: ::core::primitive::u128,
						min_dy: ::core::primitive::u128,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 13)]
					#[doc = "See `Pallet::update_fee_receiver`."]
					update_fee_receiver {
						pool_id: ::core::primitive::u32,
						fee_receiver: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					#[doc = "See `Pallet::set_swap_fee`."]
					set_swap_fee {
						pool_id: ::core::primitive::u32,
						new_swap_fee: ::core::primitive::u128,
					},
					#[codec(index = 15)]
					#[doc = "See `Pallet::set_admin_fee`."]
					set_admin_fee {
						pool_id: ::core::primitive::u32,
						new_admin_fee: ::core::primitive::u128,
					},
					#[codec(index = 16)]
					#[doc = "See `Pallet::ramp_a`."]
					ramp_a {
						pool_id: ::core::primitive::u32,
						future_a: ::core::primitive::u128,
						future_a_time: ::core::primitive::u128,
					},
					#[codec(index = 17)]
					#[doc = "See `Pallet::stop_ramp_a`."]
					stop_ramp_a { pool_id: ::core::primitive::u32 },
					#[codec(index = 18)]
					#[doc = "See `Pallet::withdraw_admin_fee`."]
					withdraw_admin_fee { pool_id: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The currency id can't join stable amm pool."]
					InvalidPooledCurrency,
					#[codec(index = 1)]
					#[doc = "The currency id can't become the lp currency id of stable amm pool."]
					InvalidLpCurrency,
					#[codec(index = 2)]
					#[doc = "The parameters of a call are contradictory."]
					MismatchParameter,
					#[codec(index = 3)]
					#[doc = "The decimal of currency is invalid when create pool."]
					InvalidCurrencyDecimal,
					#[codec(index = 4)]
					#[doc = "The pool id is invalid."]
					InvalidPoolId,
					#[codec(index = 5)]
					#[doc = "The base pool mismatch this pool."]
					InvalidBasePool,
					#[codec(index = 6)]
					#[doc = "The error generate by some arithmetic function."]
					Arithmetic,
					#[codec(index = 7)]
					#[doc = "The call already expired."]
					Deadline,
					#[codec(index = 8)]
					#[doc = "The caller does not have enough currencies."]
					InsufficientSupply,
					#[codec(index = 9)]
					#[doc = "The pool does not have enough currencies."]
					InsufficientReserve,
					#[codec(index = 10)]
					#[doc = "The new d below then older."]
					CheckDFailed,
					#[codec(index = 11)]
					#[doc = "Slippage is too large."]
					AmountSlippage,
					#[codec(index = 12)]
					#[doc = "Forbid swap same currency."]
					SwapSameCurrency,
					#[codec(index = 13)]
					#[doc = "The index of currency id bigger the length of pool's currencies;"]
					CurrencyIndexOutRange,
					#[codec(index = 14)]
					#[doc = "The pool does not have enough lp currency."]
					InsufficientLpReserve,
					#[codec(index = 15)]
					#[doc = "The setting value exceed threshold."]
					ExceedThreshold,
					#[codec(index = 16)]
					#[doc = "The A of this pool is already ramped in current period."]
					RampADelay,
					#[codec(index = 17)]
					#[doc = "The value of feature_a_time is too small."]
					MinRampTime,
					#[codec(index = 18)]
					#[doc = "Forbid change A of a pool bigger than MAX_A."]
					ExceedMaxAChange,
					#[codec(index = 19)]
					#[doc = "The ramping A of this pool is already stopped."]
					AlreadyStoppedRampA,
					#[codec(index = 20)]
					#[doc = "The fee parameter exceeds MAX_SWAP_FEE when create pool."]
					ExceedMaxFee,
					#[codec(index = 21)]
					#[doc = "The admin fee parameter exceeds MAX_ADMIN_FEE when create pool."]
					ExceedMaxAdminFee,
					#[codec(index = 22)]
					#[doc = "The A parameter exceed MAX_A when create pool."]
					ExceedMaxA,
					#[codec(index = 23)]
					#[doc = "The lp currency id is already used when create pool."]
					LpCurrencyAlreadyUsed,
					#[codec(index = 24)]
					#[doc = "Require all currencies of this pool when first supply."]
					RequireAllCurrencies,
					#[codec(index = 25)]
					#[doc = "The symbol of created pool maybe exceed length limit."]
					BadPoolCurrencySymbol,
					#[codec(index = 26)]
					#[doc = "The transaction change nothing."]
					InvalidTransaction,
					#[codec(index = 27)]
					#[doc = "The base pool lp currency is invalid when create meta pool."]
					InvalidBasePoolLpCurrency,
					#[codec(index = 28)]
					#[doc = "The token index out of range."]
					TokenIndexOutOfRange,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A pool was created."]
					CreatePool {
						pool_id: ::core::primitive::u32,
						currency_ids:
							::std::vec::Vec<runtime_types::tangle_primitives::currency::CurrencyId>,
						lp_currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						a: ::core::primitive::u128,
						account: ::subxt::utils::AccountId32,
						admin_fee_receiver: ::subxt::utils::AccountId32,
					},
					#[codec(index = 1)]
					#[doc = "A pool's admin_fee_receiver was updated."]
					UpdateAdminFeeReceiver {
						pool_id: ::core::primitive::u32,
						admin_fee_receiver: ::subxt::utils::AccountId32,
					},
					#[codec(index = 2)]
					#[doc = "Supply some liquidity to a pool."]
					AddLiquidity {
						pool_id: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						supply_amounts: ::std::vec::Vec<::core::primitive::u128>,
						fees: ::std::vec::Vec<::core::primitive::u128>,
						new_d: ::core::primitive::u128,
						mint_amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Swap a amounts of currency to get other."]
					CurrencyExchange {
						pool_id: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						in_index: ::core::primitive::u32,
						in_amount: ::core::primitive::u128,
						out_index: ::core::primitive::u32,
						out_amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Remove some liquidity from a pool."]
					RemoveLiquidity {
						pool_id: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amounts: ::std::vec::Vec<::core::primitive::u128>,
						fees: ::std::vec::Vec<::core::primitive::u128>,
						new_total_supply: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Remove some liquidity from a pool to get only one currency."]
					RemoveLiquidityOneCurrency {
						pool_id: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						out_index: ::core::primitive::u32,
						burn_amount: ::core::primitive::u128,
						out_amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Remove liquidity from a pool with specify the amounts of currencies to be obtained."]
					RemoveLiquidityImbalance {
						pool_id: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amounts: ::std::vec::Vec<::core::primitive::u128>,
						fees: ::std::vec::Vec<::core::primitive::u128>,
						new_d: ::core::primitive::u128,
						new_total_supply: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "A pool's swap fee parameters was updated"]
					NewSwapFee {
						pool_id: ::core::primitive::u32,
						new_swap_fee: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "A pool's admin fee parameters was updated"]
					NewAdminFee {
						pool_id: ::core::primitive::u32,
						new_admin_fee: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "A pool's 'A' was ramped."]
					RampA {
						pool_id: ::core::primitive::u32,
						initial_a_precise: ::core::primitive::u128,
						future_a_precise: ::core::primitive::u128,
						now: ::core::primitive::u128,
						future_a_time: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "A pool's ramping A was stopped."]
					StopRampA {
						pool_id: ::core::primitive::u32,
						current_a: ::core::primitive::u128,
						now: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "A pool's admin fee was collected."]
					CollectProtocolFee {
						pool_id: ::core::primitive::u32,
						currency_id: runtime_types::tangle_primitives::currency::CurrencyId,
						fee_amount: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					CurrencyExchangeUnderlying {
						pool_id: ::core::primitive::u32,
						account: ::subxt::utils::AccountId32,
						in_amount: ::core::primitive::u128,
						out_amount: ::core::primitive::u128,
						currency_index_from: ::core::primitive::u32,
						currency_index_to: ::core::primitive::u32,
						to: ::subxt::utils::AccountId32,
					},
				}
			}
			pub mod primitives {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BasePool<_0, _1, _2> {
					pub currency_ids: ::std::vec::Vec<_0>,
					pub lp_currency_id: _0,
					pub token_multipliers: ::std::vec::Vec<::core::primitive::u128>,
					pub balances: ::std::vec::Vec<::core::primitive::u128>,
					pub fee: ::core::primitive::u128,
					pub admin_fee: ::core::primitive::u128,
					pub initial_a: ::core::primitive::u128,
					pub future_a: ::core::primitive::u128,
					pub initial_a_time: ::core::primitive::u128,
					pub future_a_time: ::core::primitive::u128,
					pub account: _1,
					pub admin_fee_receiver: _1,
					pub lp_currency_symbol: _2,
					pub lp_currency_decimal: ::core::primitive::u8,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MetaPool<_0, _1, _2, _3> {
					pub base_pool_id: _0,
					pub base_virtual_price: ::core::primitive::u128,
					pub base_cache_last_updated: ::core::primitive::u64,
					pub base_currencies: ::std::vec::Vec<_1>,
					pub info: runtime_types::zenlink_stable_amm::primitives::BasePool<_1, _2, _3>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Pool<_0, _1, _2, _3> {
					#[codec(index = 0)]
					Base(runtime_types::zenlink_stable_amm::primitives::BasePool<_1, _2, _3>),
					#[codec(index = 1)]
					Meta(runtime_types::zenlink_stable_amm::primitives::MetaPool<_0, _1, _2, _3>),
				}
			}
		}
		pub mod zenlink_swap_router {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "See [`Pallet::swap_exact_token_for_tokens_through_stable_pool`]."]
					swap_exact_token_for_tokens_through_stable_pool {
						amount_in: ::core::primitive::u128,
						amount_out_min: ::core::primitive::u128,
						routes: ::std::vec::Vec<
							runtime_types::zenlink_swap_router::Route<
								::core::primitive::u32,
								runtime_types::tangle_primitives::currency::CurrencyId,
								runtime_types::zenlink_protocol::primitives::AssetId,
							>,
						>,
						to: ::subxt::utils::AccountId32,
						deadline: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Error` enum of this pallet."]
				pub enum Error {
					#[codec(index = 0)]
					MismatchPoolAndCurrencyId,
					#[codec(index = 1)]
					Deadline,
					#[codec(index = 2)]
					InvalidRoutes,
					#[codec(index = 3)]
					ConvertCurrencyFailed,
					#[codec(index = 4)]
					AmountSlippage,
					#[codec(index = 5)]
					InvalidPath,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					:: subxt :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: codec)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				#[doc = "The `Event` enum of this pallet"]
				pub enum Event {}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Route<_0, _1, _2> {
				#[codec(index = 0)]
				Stable(runtime_types::zenlink_swap_router::StablePath<_0, _1>),
				#[codec(index = 1)]
				Normal(::std::vec::Vec<_2>),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StablePath<_0, _1> {
				pub pool_id: _0,
				pub base_pool_id: _0,
				pub mode: runtime_types::zenlink_swap_router::StableSwapMode,
				pub from_currency: _1,
				pub to_currency: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				:: subxt :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum StableSwapMode {
				#[codec(index = 0)]
				Single,
				#[codec(index = 1)]
				FromBase,
				#[codec(index = 2)]
				ToBase,
			}
		}
	}
}
